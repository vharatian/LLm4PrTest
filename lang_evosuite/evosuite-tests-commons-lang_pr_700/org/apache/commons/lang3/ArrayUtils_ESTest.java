/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 06:25:21 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) null, (Byte) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry2);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry3);
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(map0);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(2, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(abstractMap_SimpleImmutableEntryArray0.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(666);
      assertEquals(666, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) integerArray0[0];
      intArray0[1] = 666;
      intArray0[2] = 666;
      intArray0[3] = 666;
      intArray0[4] = (int) integerArray0[0];
      intArray0[5] = 666;
      intArray0[6] = 666;
      intArray0[7] = 666;
      ArrayUtils.swap(intArray0, 8, 666, 666);
      assertArrayEquals(new int[] {666, 666, 666, 666, 666, 666, 666, 666}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1675.6F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (-738.9F);
      floatArray0[6] = (-2130.2F);
      int int0 = ArrayUtils.indexOf(floatArray0, Float.NaN, 2);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1675.6F, (-1.0F), Float.NaN, (-738.9F), (-2130.2F)}, floatArray0, 0.01F);
      assertEquals(4, int0);
      assertEquals(7, floatArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {2, 2, 2, 2}, intArray0);
      assertArrayEquals(new int[] {2, 2, 2, 2}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 2;
      floatArray1[1] = (float) 4;
      floatArray1[2] = 1675.6F;
      floatArray1[3] = (-2130.2F);
      floatArray1[4] = (float) 2;
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertArrayEquals(new float[] {2.0F, 4.0F, 1675.6F, (-2130.2F), 2.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(5, floatArray2.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-354.37228F);
      floatArray0[1] = 175.4F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-354.37228F), 1);
      assertArrayEquals(new float[] {(-354.37228F), 175.4F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(2, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      char[] charArray0 = new char[0];
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {(-354.37228F), 175.4F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte byte0 = (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 1, (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("\"?BqWplne:5&-");
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)113);
      assertEquals((byte)113, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(byte0, byte2);
      assertNotNull(abstractMap_SimpleEntry0);
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, (Byte) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      
      Comparator<Map.Entry<Byte, Byte>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) null, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.insert(2, abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 918.374F;
      floatArray0[1] = 1224.6285F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 2);
      assertArrayEquals(new float[] {918.374F, 1224.6285F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-250), 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-250);
      floatArray0[1] = (float) (-250);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-250);
      floatArray0[4] = (float) (-250);
      floatArray0[5] = (float) (-250);
      floatArray0[6] = (float) (-250);
      floatArray0[7] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-250.0F), (-250.0F), 0.0F, (-250.0F), (-250.0F), (-250.0F), (-250.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1681);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {1681}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 1681);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)89;
      ArrayUtils.swap(byteArray0, (int) (byte) (-127), (-1150), (-2978));
      assertArrayEquals(new byte[] {(byte)0, (byte)70, (byte)0, (byte) (-127), (byte) (-53), (byte)89}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) 1681;
      floatArray0[4] = (float) (-2978);
      floatArray0[5] = (float) (byte)89;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1944;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)0;
      ArrayUtils.shift(shortArray0, 1225, (int) (short)1944, 1225);
      assertArrayEquals(new short[] {(short)1944, (short)2, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1944, 1);
      assertArrayEquals(new short[] {(short)1944, (short)2, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(3, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = 1225;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)1944;
      ArrayUtils.shift(intArray0, (int) (short)2, 2251, (int) (short)2);
      assertArrayEquals(new int[] {2, 0, 0, 1944, 0, 1225}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)1944;
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (double) 0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {1944.0, 2.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {2, 0, 0, 1944, 0, 1225}, intArray0);
      assertFalse(boolean1);
      assertEquals(6, intArray0.length);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)112;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1944, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)54;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)4;
      byteArray1[6] = (byte)4;
      byteArray1[7] = (byte) (-114);
      byteArray1[8] = (byte)1;
      byte[] byteArray2 = ArrayUtils.insert(2, byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)4, (byte)1, (byte)54, (byte)1, (byte)4, (byte)4, (byte) (-114), (byte)1}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals(11, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)27201);
      assertArrayEquals(new short[] {(short)27201, (short)27201}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, objectArray0.length);
      assertSame(shortArray0, objectArray0);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-34);
      Byte byte2 = new Byte((byte) (-34));
      assertEquals((byte) (-34), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-34));
      assertEquals((byte) (-34), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      byte byte4 = (byte)90;
      Byte byte5 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte6);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte1);
      assertEquals((byte) (-34), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte1 == byte4);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte8);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte2));
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte(byte4);
      assertEquals((byte)90, (byte)byte9);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte1));
      assertTrue(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte7));
      assertTrue(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte8));
      assertTrue(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte4 == byte1);
      
      byteArray0[7] = byte9;
      Byte byte10 = new Byte((byte) (-34));
      assertEquals((byte) (-34), (byte)byte10);
      assertNotNull(byte10);
      assertFalse(byte10.equals((Object)byte6));
      assertFalse(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte4));
      assertFalse(byte10.equals((Object)byte9));
      assertTrue(byte10.equals((Object)byte2));
      assertTrue(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte0));
      assertTrue(byte10.equals((Object)byte3));
      assertTrue(byte10.equals((Object)byte1));
      assertFalse(byte10.equals((Object)byte5));
      
      byteArray0[8] = byte10;
      Byte byte11 = ArrayUtils.get(byteArray0, 164);
      assertNull(byte11);
      assertEquals(9, byteArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (int) byte1);
      assertEquals(0, int0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, objectArray0.length);
      assertFalse(byte1 == byte4);
      assertSame(shortArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1721.0F);
      floatArray0[1] = (float) 2;
      floatArray0[2] = 601.366F;
      int int0 = ArrayUtils.indexOf(floatArray0, Float.NaN, 1);
      assertArrayEquals(new float[] {(-1721.0F), 2.0F, 601.366F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      long[] longArray0 = new long[0];
      Object object2 = ArrayUtils.get(objectArray0, 1);
      assertNotNull(object2);
      assertEquals(7, objectArray0.length);
      assertSame(object2, object1);
      
      objectArray0[3] = object2;
      Byte byte0 = new Byte((byte) (-90));
      assertEquals((byte) (-90), (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (int) (byte) (-90);
      intArray0[2] = 40;
      intArray0[3] = 1;
      intArray0[4] = (int) (byte) (-90);
      intArray0[5] = (int) (byte) (-90);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.reverse(booleanArray0, (-2065), Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3419.3996650401);
      doubleArray0[1] = (-2406.383);
      doubleArray0[2] = (-2862.7876352);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3419.3996650401));
      assertArrayEquals(new double[] {(-3419.3996650401), (-2406.383), (-2862.7876352)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-1566), (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1566, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 68.0;
      ArrayUtils.swap(doubleArray0, 1, 1, 3945);
      assertArrayEquals(new double[] {68.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3945;
      intArray0[1] = 3945;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertArrayEquals(new int[] {3945, 3945}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)56;
      Byte byte1 = new Byte((byte)56);
      assertEquals((byte)56, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)56, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)56, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = ArrayUtils.get(byteArray0, 84);
      assertNull(byte4);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byte0;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 56L);
      assertArrayEquals(new long[] {56L, 56L, 56L, 56L}, longArray0);
      assertArrayEquals(new long[] {56L, 56L, 56L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertArrayEquals(new long[] {2L, 2L}, longArray0);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2L;
      doubleArray0[1] = (double) 2L;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2L;
      doubleArray0[4] = (double) 2L;
      doubleArray0[5] = (double) 2L;
      doubleArray0[6] = (double) 2L;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (-219.64851043981);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, (-219.64851043981)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, (-219.64851043981)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 2593.8;
      doubleArray0[3] = 0.7;
      doubleArray0[4] = (-479.2126);
      doubleArray0[5] = (-1734.74494578879);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.1, 1.0, 2593.8, 0.7, (-479.2126), (-1734.74494578879)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      double[] doubleArray2 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertArrayEquals(new double[] {0.1, 1.0, 2593.8, 0.7, (-479.2126), (-1734.74494578879)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.1, 1.0, 0.7, (-479.2126), (-1734.74494578879)}, doubleArray2, 0.01);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2, 2}, intArray0);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(7, intArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 260;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 5;
      int[] intArray1 = ArrayUtils.insert(5, intArray0, intArray0);
      assertArrayEquals(new int[] {260, 5, 5, 5, 5}, intArray0);
      assertArrayEquals(new int[] {260, 5, 5, 5, 5, 260, 5, 5, 5, 5}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'c';
      ArrayUtils.shift(charArray0, 9, 260, 260);
      assertArrayEquals(new char[] {'i', 'c'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-507.9664650454));
      assertEquals((-507.96646F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float0;
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1.5);
      assertEquals(1.5F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(0.0F);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float(Double.NaN);
      assertEquals(Float.NaN, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float(0.0F);
      assertEquals(0.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      
      floatArray0[6] = float6;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (float)floatArray0[5];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) floatArray0[0], 2);
      assertArrayEquals(new double[] {0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(7, floatArray0.length);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 18.0;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertArrayEquals(new double[] {1.0, 18.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {18.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1345;
      shortArray0[1] = (short) (-9363);
      shortArray0[2] = (short)5;
      shortArray0[3] = (short) (-414);
      shortArray0[4] = (short)3099;
      shortArray0[5] = (short)3317;
      shortArray0[6] = (short)367;
      shortArray0[7] = (short) (-3521);
      shortArray0[8] = (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short) (-1), (short) (-414));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 99;
      intArray0[1] = 99;
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {99, 99}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-455);
      shortArray0[1] = (short)560;
      shortArray0[2] = (short) (-2461);
      shortArray0[3] = (short) (-4942);
      shortArray0[4] = (short) (-534);
      shortArray0[5] = (short)321;
      shortArray0[6] = (short) (-95);
      shortArray0[7] = (short) (-160);
      shortArray0[8] = (short)208;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1849, (-95));
      assertArrayEquals(new short[] {(short) (-455), (short)560, (short) (-2461), (short) (-4942), (short) (-534), (short)321, (short) (-95), (short) (-160), (short)208}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(9, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-49));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-49)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.shift(shortArray1, (-1073741824), 221, (-21));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-49)}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte) (-125));
      assertEquals((byte) (-125), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)2;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-125));
      assertEquals((byte) (-125), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte1);
      assertEquals((byte)2, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-122));
      assertEquals((byte) (-122), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)9);
      assertEquals((byte)9, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      
      byteArray0[6] = byte7;
      Byte byte8 = Byte.valueOf((byte)9);
      assertEquals((byte)9, (byte)byte8);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte7));
      
      byteArray0[7] = byte8;
      Byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) 2);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      Double double0 = new Double(392.35208433443);
      assertEquals(392.35208433443, (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 10;
      longArray0[1] = (-2973L);
      longArray0[2] = (long) 10;
      longArray0[3] = (long) 10;
      longArray0[4] = (long) 10;
      longArray0[5] = (long) 1689;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1639), 6);
      assertArrayEquals(new long[] {10L, (-2973L), 10L, 10L, 10L, 1689L}, longArray0);
      assertArrayEquals(new long[] {10L, (-2973L), 10L, 10L, 10L, 1689L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-808));
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Byte byte2 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte2, byte2);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte2, byte2);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) null, byte1);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      Byte byte3 = new Byte((byte) (-51));
      assertEquals((byte) (-51), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) null, byte3);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte byte5 = new Byte((byte) (-79));
      assertEquals((byte) (-79), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(byte4, byte5);
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte5));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte5));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 4;
      intArray0[0] = 4;
      intArray0[1] = (-109);
      int int1 = ArrayUtils.lastIndexOf(intArray0, 4);
      assertArrayEquals(new int[] {4, (-109)}, intArray0);
      assertEquals(0, int1);
      assertEquals(2, intArray0.length);
      assertFalse(int1 == int0);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)49);
      assertEquals((byte)49, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)66);
      assertEquals((byte)66, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte) (-82));
      assertEquals((byte) (-82), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      Byte byte5 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte4);
      assertEquals((byte)0, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      
      byteArray0[5] = byte6;
      try { 
        Byte.decode("l\"YwV>}Jx\"LP3;\"lQqX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"l\"YwV>}Jx\"LP3;\"lQqX\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-510.046374509793));
      assertEquals((-510.046374509793), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-641.8651715665021));
      assertEquals((-641.8651715665021), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2635.137);
      assertEquals(2635.137, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals(2635.137, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(846.8651715665021);
      assertEquals(846.8651715665021, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-510.046374509793));
      assertArrayEquals(new double[] {(-510.046374509793), (-641.8651715665021), 2635.137, 2635.137, 846.8651715665021}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 22L;
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertArrayEquals(new long[] {22L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 55L;
      longArray1[2] = 3150L;
      longArray1[3] = 1455L;
      longArray1[4] = (-972L);
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {55L, 0L, 3150L, 1455L, (-972L)}, longArray1);
      assertArrayEquals(new long[] {55L, 3150L, 1455L, (-972L)}, longArray2);
      assertNotNull(longArray2);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-610));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-610);
      intArray0[1] = (-610);
      intArray0[2] = (-610);
      intArray0[3] = (-610);
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-610), 0);
      assertArrayEquals(new int[] {(-610), (-610), (-610), (-610), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[14];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 12;
      floatArray0[1] = (-86.0F);
      floatArray0[2] = (float) 12;
      floatArray0[3] = (float) (short) (-2884);
      floatArray0[4] = (float) 9;
      floatArray0[5] = (float) 9;
      floatArray0[6] = (float) 9;
      floatArray0[7] = (-3664.0017F);
      floatArray0[8] = (float) (short) (-2884);
      ArrayUtils.swap(floatArray0, 9, (int) (short) (-2884), 9);
      assertArrayEquals(new float[] {12.0F, (-86.0F), 12.0F, (-2884.0F), 9.0F, 9.0F, 9.0F, (-3664.0017F), (-2884.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      Short short0 = new Short((short)1793);
      assertEquals((short)1793, (short)short0);
      assertNotNull(short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-75), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)81, (byte)0, (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)1793, (short)1793, (short)1793, (short)1793, (short)1793, (short)1793, (short)1793, (short)1793}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-37));
      assertEquals((byte) (-37), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = 'C';
      charArray0[2] = '&';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'C', '&', '4'}, charArray0);
      assertEquals(3, charArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2625.947;
      doubleArray0[1] = (double) (-1381);
      double[] doubleArray1 = ArrayUtils.insert(10, (double[]) null, doubleArray0);
      assertArrayEquals(new double[] {2625.947, (-1381.0)}, doubleArray0, 0.01);
      assertNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray0, (double) (byte) (-37));
      assertArrayEquals(new double[] {2625.947, (-1381.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2625.947, (-1381.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte0, 1218);
      assertEquals(0, int0);
      assertEquals(2, byteArray0.length);
      assertFalse(byte0.equals((Object)byte1));
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Byte byte0 = ArrayUtils.get(byteArray0, 0);
      assertNull(byte0);
      assertEquals(0, byteArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      ArrayUtils.shift(intArray0, 0, 0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean1);
      assertEquals(6, intArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)869;
      shortArray0[2] = (short)102;
      shortArray0[3] = (short)772;
      shortArray0[4] = (short)116;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)4;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)4);
      assertArrayEquals(new short[] {(short)3, (short)869, (short)102, (short)772, (short)116, (short)0, (short)0, (short)4}, shortArray0);
      assertEquals(7, int0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-730.0F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)4626);
      assertNull(shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "");
      assertNull(stringArray0);
      
      Character[] characterArray0 = new Character[8];
      char char0 = 'w';
      Character character0 = Character.valueOf('w');
      assertEquals('w', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('-');
      assertEquals('-', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('-');
      assertEquals('-', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('d');
      assertEquals('d', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character1);
      assertEquals('-', (char)character4);
      assertNotNull(character4);
      assertFalse(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('-');
      assertEquals('-', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character2));
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertEquals('w', (char)character6);
      assertNotNull(character6);
      assertTrue(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character3));
      
      characterArray0[6] = character6;
      Character character7 = new Character('*');
      assertEquals('*', (char)character7);
      assertNotNull(character7);
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character4));
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, false, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, false, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(10, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-67));
      assertEquals((byte) (-67), (byte)byte0);
      assertNotNull(byte0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((byte) (-67));
      assertEquals((-67), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4151);
      assertEquals(4151, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte) (-67));
      assertEquals((-67), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertEquals((-67), (int)integer3);
      assertNotNull(integer3);
      assertEquals(4, integerArray0.length);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte) (-67));
      assertArrayEquals(new int[] {(-67), 4151, (-67), (-67)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null, (int) integerArray0[3]);
      assertEquals((-1), int0);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)110);
      assertEquals((byte)110, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(byte0, byte1);
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte2);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(byte0.equals((Object)byte1));
      assertTrue(byte0.equals((Object)byte2));
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.insert((int) 1, abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(12, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1909.20294125502));
      assertEquals((-1909.20294125502), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-1909.20294125502)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-2402L);
      longArray0[1] = (long) 99;
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-201);
      intArray0[2] = 1;
      longArray0[1] = (long) (-2138945349);
      intArray0[4] = 1;
      intArray0[5] = 99;
      intArray0[6] = 1;
      intArray0[7] = 99;
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertArrayEquals(new int[] {1, (-201), 1, 0, 1, 99, 1, 99}, intArray0);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(16, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertArrayEquals(new int[] {1, (-201), 1, 0, 1, 99, 1, 99}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(8, intArray0.length);
      assertEquals(16, integerArray0.length);
      assertEquals(16, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'q';
      charArray0[1] = 'r';
      charArray0[2] = '=';
      charArray0[3] = '.';
      charArray0[4] = '*';
      charArray0[5] = 'H';
      charArray0[6] = ';';
      charArray0[7] = '=';
      charArray0[8] = ';';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ' ', 1);
      assertArrayEquals(new char[] {'q', 'r', '=', '.', '*', 'H', ';', '=', ';'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(9, charArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      long[] longArray0 = new long[5];
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-2402L);
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = 'g';
      charArray0[2] = 'q';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {',', 'g', 'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-102);
      Byte byte1 = new Byte((byte) (-102));
      assertEquals((byte) (-102), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) byte0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) byte0, 2135);
      assertArrayEquals(new short[] {(short) (-102)}, shortArray0);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 52;
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = 268.0F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1, 268.0F);
      assertArrayEquals(new float[] {52.0F, 2.0F, 268.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.0F, 268.0F, 2.0F, 268.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-235.0);
      doubleArray0[1] = (double) 52.0F;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = (double) 268.0F;
      doubleArray0[4] = (double) 268.0F;
      doubleArray0[5] = (double) 52.0F;
      doubleArray0[6] = (double) 52.0F;
      doubleArray0[7] = (double) 52.0F;
      ArrayUtils.shift(doubleArray0, 1, 52, 802);
      assertArrayEquals(new double[] {(-235.0), 268.0, 52.0, 52.0, 52.0, 52.0, 2.0, 268.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      int[] intArray0 = new int[10];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(10, intArray0.length);
      assertEquals(20, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean("P>=?o<vt");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Byte[] byteArray0 = ArrayUtils.addAll((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-35);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-88);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)75;
      byteArray1[5] = (byte)19;
      byteArray1[6] = (byte) (-68);
      byte[] byteArray2 = ArrayUtils.removeAll(byteArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-88), (byte)0, (byte)75, (byte)19, (byte) (-68)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-35), (byte) (-1), (byte) (-88), (byte)0, (byte)75, (byte)19, (byte) (-68)}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(10, intArray0.length);
      assertEquals(6, byteArray2.length);
      assertEquals(7, byteArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      
      Byte[] byteArray3 = ArrayUtils.toArray((Byte[]) null);
      assertNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(16, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[7];
      ArrayUtils.shift(charArray0, 65536, 65536, 2131808584);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Float[] floatArray0 = new Float[9];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      Float float1 = new Float((float) 2131808584);
      assertEquals(2.13180864E9F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[5] = float1;
      floatArray0[6] = float0;
      floatArray0[7] = float0;
      floatArray0[8] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1103.9674F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2.13180864E9F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      
      int[] intArray0 = new int[0];
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(16, booleanArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2131808584;
      ArrayUtils.swap(longArray0, (-3007), (-3007), (-532));
      assertArrayEquals(new long[] {2131808584L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)34;
      floatArray0[1] = (float) ';';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte)34);
      assertArrayEquals(new float[] {34.0F, 59.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(2, floatArray0.length);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(16, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '$';
      charArray0[1] = '\\';
      charArray0[2] = '~';
      charArray0[3] = '3';
      charArray0[4] = 'G';
      charArray0[5] = '+';
      charArray0[6] = 'l';
      charArray0[7] = 'b';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'$', '\\', '~', '3', 'G', '+', 'l', 'b'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertArrayEquals(new char[] {'$', '\\', '~', '3', 'G', '+', 'l', 'b'}, charArray0);
      assertArrayEquals(new char[] {'$', '\\', '~', '3', 'G', '+', 'l', 'b'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte byte2 = (byte) (-1);
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      
      byteArray0[3] = byte4;
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(579.9);
      assertEquals(579.9, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(53.0);
      assertEquals(53.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-693.3323180109943));
      assertEquals((-693.3323180109943), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(579.9);
      assertEquals(579.9, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1748.57);
      assertEquals(1748.57, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      assertEquals(579.9, (double)double5, 0.01);
      assertNotNull(double5);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-2852.137226));
      assertEquals((-2852.137226), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(byte2);
      assertEquals((-1.0), (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(53.0);
      assertEquals(53.0, (double)double8, 0.01);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      
      doubleArray0[8] = double8;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {579.9, 53.0, (-693.3323180109943), 579.9, 1748.57, 579.9, (-2852.137226), (-1.0), 53.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      Byte byte0 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Byte byte1 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte)9);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, true, false, true}, booleanArray0));
      assertEquals(8, int0);
      assertEquals(9, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      int[] intArray0 = new int[2];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)288;
      shortArray0[2] = (short) (-1562);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)85;
      shortArray0[5] = (short)2031;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)2031, (short)85, (short) (-1), (short) (-1562), (short)288, (short)2}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-103);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)62, (byte) (-88), (byte)62, (byte)57, (byte) (-9), (byte) (-122), (byte)48, (byte) (-103)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)62, (byte) (-88), (byte)62, (byte)57, (byte) (-9), (byte) (-122), (byte)48, (byte) (-103)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)62;
      floatArray0[1] = 323.07F;
      floatArray0[2] = (float) (byte) (-88);
      floatArray0[3] = (float) (byte)62;
      floatArray0[4] = (float) (short)288;
      floatArray0[5] = (float) (short) (-1562);
      floatArray0[6] = (float) (short) (-1);
      floatArray0[7] = (float) (byte) (-103);
      floatArray0[8] = (float) (short)85;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (byte)48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 388L;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray1);
      assertArrayEquals(new double[] {388.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte) (-83));
      assertEquals((byte) (-83), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-83), object0);
      assertNotNull(object0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-83);
      ArrayUtils.swap(shortArray0, (int) (byte)0, 1, (int) (byte)0);
      assertArrayEquals(new short[] {(short) (-83)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray0, 388.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 388.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-808));
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-25), 5372, (-25));
      assertEquals(6, integerArray0.length);
      
      Long long0 = new Long((-25));
      assertEquals((-25L), (long)long0);
      assertNotNull(long0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Short short0 = new Short((short)1279);
      assertEquals((short)1279, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      shortArray0[2] = shortArray0[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)1279;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = 1279.0F;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (short)shortArray0[2];
      floatArray0[5] = (float) (short)shortArray0[2];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (int) (byte)0, (-2892.0F));
      assertArrayEquals(new float[] {(-2892.0F), 1279.0F, 0.0F, 1279.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1279.0F, 0.0F, 1279.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)0;
      Byte byte1 = new Byte((byte) (-112));
      assertEquals((byte) (-112), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray1[2] = byte1;
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = (Byte) (byte)0;
      byteArray1[5] = (Byte) (byte)0;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray1, comparator0);
      assertTrue(boolean0);
      assertEquals(6, byteArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = 'F';
      charArray0[3] = 'z';
      char[] charArray1 = ArrayUtils.insert((int) byte0, charArray0, charArray0);
      assertArrayEquals(new char[] {'.', '.', 'F', 'z', '.', '.', 'F', 'z'}, charArray1);
      assertArrayEquals(new char[] {'.', '.', 'F', 'z'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-1);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = 3098L;
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (-416L);
      longArray0[4] = (-416L);
      longArray0[5] = (long) (byte) (-1);
      longArray0[6] = (long) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 7);
      assertArrayEquals(new long[] {(-1L), 3098L, (-1L), (-416L), (-416L), (-1L), (-1L)}, longArray0);
      assertEquals(6, int0);
      assertEquals(7, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1L), 3098L, (-1L), (-416L), (-416L), (-1L), (-1L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(7, longArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 7;
      intArray0[5] = 2286;
      intArray0[6] = (int) (byte) (-1);
      intArray0[7] = 7;
      intArray0[8] = (int) (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertArrayEquals(new int[] {7, 7, 6, 6, 7, 2286, (-1), 7, (-1)}, intArray0);
      assertEquals(8, int1);
      assertEquals(9, intArray0.length);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2803;
      shortArray0[1] = (short)509;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)2803, (short)509}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1622.9008F;
      floatArray0[1] = 1312.0F;
      floatArray0[2] = (-1358.493F);
      floatArray0[3] = 1681.0F;
      floatArray0[4] = 1312.0F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1622.9008F);
      assertArrayEquals(new float[] {1622.9008F, 1312.0F, (-1358.493F), 1681.0F, 1312.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1622.9008F, 1622.9008F, 1312.0F, (-1358.493F), 1681.0F, 1312.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 't');
      assertNull(charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 't';
      longArray0[1] = (long) 't';
      longArray0[2] = (long) 't';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {116L, 116L, 116L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2738.8697758));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-3584.96F);
      floatArray0[1] = 3877.5F;
      floatArray0[2] = (-1112.5812F);
      floatArray0[3] = 2068.94F;
      floatArray0[4] = 140.72037F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 3877.5F;
      floatArray1[1] = (-871.0F);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-3584.96F), 3877.5F, (-1112.5812F), 2068.94F, 140.72037F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3877.5F, (-871.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-3584.96F), (-1112.5812F), 2068.94F, 140.72037F}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(5, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2973.8791538), (int) (byte)0, (-1.0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'b', 'b', 'b', 'b', 'b'}, charArray0);
      assertEquals(5, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2973.8791538), 1.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) 'b';
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1), 2);
      assertArrayEquals(new float[] {0.0F, 98.0F}, floatArray0, 0.01F);
      assertEquals((-1), int2);
      assertEquals(2, floatArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((int) (byte)0, intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertArrayEquals(new char[] {'b', 'b', 'b', 'b', 'b'}, charArray1);
      assertArrayEquals(new char[] {'b', 'b', 'b', 'b', 'b'}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertEquals(0, intArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(intArray0, intArray1);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2287);
      assertEquals(2287, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1123);
      assertEquals(1123, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((byte)0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int1));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-207));
      assertEquals((-207), (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      integerArray0[4] = integer4;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      Double double0 = new Double((-909.0));
      assertEquals((-909.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) doubleArray0, (-1053));
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-3));
      assertNull(intArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) doubleArray0, (Object) null, 37);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-16));
      assertEquals((byte) (-16), (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      Byte byte1 = new Byte((byte) (-16));
      assertEquals((byte) (-16), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(byte0, byte1);
      assertNotNull(abstractMap_SimpleEntry0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      Comparator<Map.Entry<Byte, AbstractMap.SimpleImmutableEntry<Byte, Byte>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.shift((Object[]) null, (-26));
      Byte byte0 = new Byte((byte) (-87));
      assertEquals((byte) (-87), (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-87);
      shortArray0[1] = (short) (byte) (-87);
      shortArray0[2] = (short) (-911);
      shortArray0[3] = (short) (-911);
      shortArray0[4] = (short)1673;
      shortArray0[5] = (short) (byte) (-87);
      shortArray0[6] = (short) (-773);
      shortArray0[8] = (short) (byte) (-87);
      ArrayUtils.shift(shortArray0, (int) (short)2, 0, (int) (short) (-87));
      assertArrayEquals(new short[] {(short) (-87), (short) (-87), (short) (-911), (short) (-911), (short)1673, (short) (-87), (short) (-773), (short)0, (short) (-87)}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = Float.valueOf(895.4F);
      assertEquals(895.4F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals(895.4F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals(2, floatArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1233.6372F));
      assertArrayEquals(new float[] {895.4F, 895.4F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0, "java.lang.Byte");
      assertNotNull(stringArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, stringArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) floatArray0);
      assertNotNull(stringArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-4027);
      intArray0[1] = (-808);
      intArray0[1] = (-88);
      int[] intArray1 = ArrayUtils.add(intArray0, 200);
      assertArrayEquals(new int[] {(-4027), (-88), 0}, intArray0);
      assertArrayEquals(new int[] {(-4027), (-88), 0, 200}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) 0;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertEquals(0, object0);
      assertNotNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 0;
      ArrayUtils.shift(objectArray0, 0, 3026, 2349);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = '_';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.shift(shortArray1, (int) (short) (-1), Integer.MAX_VALUE, 110);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2222L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 36, Integer.MAX_VALUE);
      assertArrayEquals(new long[] {2222L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2343;
      intArray0[1] = 256;
      intArray0[2] = 36;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2343, 256);
      assertArrayEquals(new int[] {2343, 256, 36}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 99, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("7qP(Q{");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      char[] charArray0 = new char[13];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(13, charArray0.length);
      assertEquals(26, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte[] byteArray0 = new Byte[0];
      int[] intArray0 = new int[0];
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1598);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {1598}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 99);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(boolean1);
      assertEquals(3, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      byte byte0 = (byte) (-23);
      Byte byte1 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byte1;
      objectArray0[1] = (Object) byte1;
      objectArray0[2] = (Object) byte1;
      objectArray0[3] = (Object) byte1;
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = ArrayUtils.get(byteArray0, (int)  (-23));
      assertNull(byte3);
      assertEquals(3, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (int) (byte)97);
      assertEquals((-1), int0);
      assertEquals(4, objectArray0.length);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(byte0);
      assertEquals((-23.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[1] = double0;
      Double double1 = new Double(byte0);
      assertEquals((-23.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-928.0144));
      assertEquals((-928.0144), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[3] = double2;
      Double double3 = new Double(2);
      assertEquals(2.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[4] = double3;
      Double double4 = new Double((-960.0));
      assertEquals((-960.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[5] = double4;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '6';
      charArray0[2] = '|';
      charArray0[3] = 'Z';
      charArray0[4] = '5';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertArrayEquals(new char[] {'|', '6', '|', '6', '|', 'Z', '5', '|', 'Z', '5'}, charArray1);
      assertArrayEquals(new char[] {'|', '6', '|', 'Z', '5'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(10, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      ArrayUtils.shift(doubleArray0, (-1), 1, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)1;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      int[] intArray0 = new int[0];
      ArrayUtils.swap((double[]) null, (int) (short)1, 1120, 117);
      Short[] shortArray1 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray1);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 1120;
      longArray0[2] = (long) 117;
      long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 1120L, 117L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1120L, 117L, 1120L, 117L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 117L;
      doubleArray0[1] = (double) (byte)14;
      doubleArray0[2] = (double) 117L;
      doubleArray0[3] = (double) 117L;
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {117.0, 14.0, 117.0, 117.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {117.0, 14.0, 117.0, 117.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte) (-43);
      Byte byte1 = new Byte((byte) (-43));
      assertEquals((byte) (-43), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)57;
      Byte byte3 = new Byte((byte)57);
      assertEquals((byte)57, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte2);
      assertEquals((byte)57, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte2 == byte0);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte) (-43));
      assertEquals((byte) (-43), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      
      byteArray0[3] = byte5;
      byte byte6 = (byte)82;
      Byte byte7 = new Byte((byte)82);
      assertEquals((byte)82, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      
      byteArray0[4] = byte7;
      Byte byte8 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte8);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte1));
      
      byteArray0[5] = byte8;
      Byte byte9 = new Byte(byte6);
      assertEquals((byte)82, (byte)byte9);
      assertNotNull(byte9);
      assertTrue(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte3));
      assertTrue(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte6 == byte2);
      assertFalse(byte6 == byte0);
      
      byteArray0[6] = byte9;
      Byte byte10 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte10);
      assertNotNull(byte10);
      assertFalse(byte10.equals((Object)byte4));
      assertTrue(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte9));
      assertFalse(byte10.equals((Object)byte1));
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte6));
      assertFalse(byte10.equals((Object)byte2));
      assertFalse(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte5));
      
      byteArray0[7] = byte10;
      Byte byte11 = new Byte((byte)57);
      assertEquals((byte)57, (byte)byte11);
      assertNotNull(byte11);
      assertFalse(byte11.equals((Object)byte6));
      assertFalse(byte11.equals((Object)byte10));
      assertFalse(byte11.equals((Object)byte8));
      assertFalse(byte11.equals((Object)byte9));
      assertFalse(byte11.equals((Object)byte0));
      assertTrue(byte11.equals((Object)byte3));
      assertFalse(byte11.equals((Object)byte1));
      assertFalse(byte11.equals((Object)byte7));
      assertFalse(byte11.equals((Object)byte5));
      assertTrue(byte11.equals((Object)byte4));
      assertTrue(byte11.equals((Object)byte2));
      
      byteArray0[8] = byte11;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) byte0, (int) 57);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte6);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)5;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)27);
      assertArrayEquals(new byte[] {(byte)117, (byte)126, (byte)40, (byte)5, (byte)93, (byte)56, (byte)5}, byteArray0);
      assertFalse(boolean1);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)117, (int) (byte)5);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, true, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      ArrayUtils.shift((Object[]) floatArray0, (-26));
      assertEquals(0, floatArray0.length);
      
      Byte byte0 = new Byte((byte) (-87));
      assertEquals((byte) (-87), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-44));
      assertEquals((byte) (-44), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-87);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)0, (byte) (-44), (byte) (-44), (byte) (-87)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte) (-44), 84, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Byte[] byteArray1 = new Byte[1];
      Byte byte2 = new Byte((byte) (-44));
      assertEquals((byte) (-44), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray1[0] = byte2;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-44));
      assertArrayEquals(new byte[] {(byte) (-44)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-479.1F);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-389);
      longArray0[1] = (long) (-389);
      longArray0[2] = (long) (-389);
      longArray0[3] = (long) (-389);
      longArray0[4] = (long) (-389);
      longArray0[5] = (long) (-389);
      longArray0[6] = (long) (-389);
      longArray0[7] = (long) (-389);
      ArrayUtils.shift(longArray0, Integer.MAX_VALUE);
      assertArrayEquals(new long[] {(-389L), (-389L), (-389L), (-389L), (-389L), (-389L), (-389L), (-389L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-389);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-389)}, intArray0);
      assertArrayEquals(new int[] {(-389)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 0.7, 2, (-27.3));
      assertEquals((-1), int0);
      
      byte byte0 = (byte) (-23);
      Byte byte1 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byte1;
      objectArray0[1] = (Object) byte1;
      objectArray0[2] = (Object) byte1;
      objectArray0[3] = (Object) byte1;
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byteArray0[2] = byte1;
      Byte byte3 = ArrayUtils.get(byteArray0, (int)  (-23));
      assertNull(byte3);
      assertEquals(3, byteArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (int) (byte)97);
      assertEquals((-1), int1);
      assertEquals(4, objectArray0.length);
      assertTrue(int1 == int0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(byte0);
      assertEquals((-23.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(byte0);
      assertEquals((-23.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double((-928.0144));
      assertEquals((-928.0144), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(2);
      assertEquals(2.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-960.0));
      assertEquals((-960.0), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-3128.987053585));
      assertArrayEquals(new double[] {(-1.0), (-23.0), (-3128.987053585), (-928.0144), 2.0, (-960.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      long[] longArray0 = new long[3];
      longArray0[0] = 388L;
      longArray0[1] = (-1L);
      longArray0[2] = (long) (-1);
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = '.';
      charArray0[2] = 'L';
      charArray0[3] = 'N';
      charArray0[4] = '~';
      charArray0[5] = '\"';
      ArrayUtils.swap(charArray0, 52, (-1339), 0);
      assertArrayEquals(new char[] {'X', '.', 'L', 'N', '~', '\"'}, charArray0);
      assertEquals(6, charArray0.length);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1106), (-1106));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNull(object0);
      assertEquals(0, intArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      bitSet0.flip(0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      
      ArrayUtils.shift(longArray2, 76);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      ArrayUtils.swap(byteArray0, 321, 186, 186);
      assertArrayEquals(new byte[] {(byte)105}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 5;
      intArray0[1] = (int) 'h';
      intArray0[2] = 1136;
      intArray0[3] = 2;
      intArray0[4] = (int) 'h';
      intArray0[5] = (int) 'h';
      intArray0[6] = (int) 'h';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {5, 104, 1136, 2, 104, 104, 104}, intArray0);
      assertFalse(boolean0);
      assertEquals(7, intArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 5;
      objectArray0[1] = (Object) 104;
      objectArray0[2] = (Object) 1136;
      objectArray0[3] = (Object) 5;
      objectArray0[4] = (Object) 5;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3]);
      assertEquals(0, int0);
      assertEquals(5, objectArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 104;
      longArray0[1] = (long) 'h';
      longArray0[2] = (long) 104;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 1136;
      longArray0[5] = (long) 104;
      ArrayUtils.swap(longArray0, 0, 0, 2304);
      assertArrayEquals(new long[] {104L, 104L, 104L, 2L, 1136L, 104L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1436.9;
      doubleArray0[1] = 1436.9;
      doubleArray0[2] = 1436.9;
      doubleArray0[3] = 1436.9;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5);
      assertArrayEquals(new double[] {1436.9, 1436.9, 1436.9, 1436.9}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 4);
      assertArrayEquals(new double[] {1436.9, 1436.9, 1436.9, 1436.9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1436.9, 1436.9, 1436.9, 1436.9}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-2860));
      assertArrayEquals(new int[] {4, 4, 4, 4, (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {4, 4, 4, 4, (-1), (-1)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-1371));
      assertEquals((short) (-1371), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short) (-1371), (short)short1);
      assertNotNull(short1);
      assertEquals(2, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[1]);
      assertArrayEquals(new short[] {(short) (-1371), (short) (-1371)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 118);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, 2, object0);
      assertNull(object1);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, object0, 2);
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 105;
      intArray0[1] = (-1);
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 105, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.1;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.1, 3673);
      assertArrayEquals(new double[] {0.1}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (int) (byte)0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 918.9766F;
      floatArray0[3] = 2251.1772F;
      floatArray0[4] = (-2213.0F);
      floatArray0[5] = 1.0F;
      ArrayUtils.shift(floatArray0, 2, 2, 2);
      assertArrayEquals(new float[] {1.0F, 0.0F, 918.9766F, 2251.1772F, (-2213.0F), 1.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '@';
      charArray0[2] = 'r';
      charArray0[3] = 'f';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '$');
      assertArrayEquals(new char[] {'4', '@', 'r', 'f'}, charArray0);
      assertArrayEquals(new char[] {'4', '@', 'r', 'f'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) '4';
      intArray0[2] = (int) 'r';
      intArray0[3] = (int) '4';
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1592, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 52, 114, 52}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = Byte.valueOf((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[2] = byte2;
      byteArray0[3] = (Byte) byte0;
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (int) (byte)0, (double) (-848));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences((byte[]) null, byte0);
      assertNull(byteArray1);
      
      Byte[] byteArray2 = new Byte[7];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = byte2;
      byteArray2[1] = byte2;
      byteArray2[2] = byte2;
      byteArray2[3] = byte1;
      byteArray2[4] = byte2;
      byteArray2[5] = byte2;
      byteArray2[6] = byte1;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertNotNull(byteArray3);
      assertEquals(7, byteArray3.length);
      assertEquals(7, byteArray2.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (-2405), 1114111, 52);
      int[] intArray0 = new int[9];
      intArray0[0] = 1114111;
      intArray0[1] = (-2405);
      intArray0[2] = 1114111;
      intArray0[3] = (-2405);
      intArray0[4] = 1114111;
      intArray0[5] = (-399);
      intArray0[6] = 1114111;
      intArray0[7] = (-2405);
      intArray0[8] = 1114111;
      ArrayUtils.swap(intArray0, (-2405), (-2405), (-399));
      assertArrayEquals(new int[] {1114111, (-2405), 1114111, (-2405), 1114111, (-399), 1114111, (-2405), 1114111}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)54;
      Byte byte2 = new Byte((byte)54);
      assertEquals((byte)54, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-40));
      assertEquals((byte) (-40), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      
      byteArray0[3] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)54, (byte) (-40), (byte) (-42)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) byte1;
      shortArray0[1] = (short) byte1;
      shortArray0[2] = (short) (byte) (-42);
      short[] shortArray1 = ArrayUtils.insert((-454), shortArray0, (short[]) null);
      assertArrayEquals(new short[] {(short)54, (short)54, (short) (-42)}, shortArray1);
      assertArrayEquals(new short[] {(short)54, (short)54, (short) (-42)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('');
      assertEquals('', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('m');
      assertEquals('m', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('R');
      assertEquals('R', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      Character character3 = new Character('@');
      assertEquals('@', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character1);
      assertEquals('m', (char)character4);
      assertNotNull(character4);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      
      characterArray0[4] = character4;
      Character character5 = new Character((char) character0);
      assertEquals('', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character2));
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character1);
      assertArrayEquals(new char[] {'', 'm', 'R', '@', 'm', ''}, charArray0);
      assertNotNull(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertFalse(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character4));
      assertFalse(character1.equals((Object)character5));
      assertFalse(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character3));
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Short short0 = new Short((short)1279);
      assertEquals((short)1279, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      shortArray0[2] = shortArray0[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)1279;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (-1117.766F);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (short)shortArray0[2];
      floatArray0[5] = (float) (short)shortArray0[2];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (int) (byte)0, (-2892.0F));
      assertArrayEquals(new float[] {(-2892.0F), 1279.0F, 0.0F, (-1117.766F), 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1279.0F, 0.0F, (-1117.766F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)0;
      Byte byte0 = new Byte((byte) (-112));
      assertEquals((byte) (-112), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[2] = byte0;
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = (Byte) (byte)0;
      byteArray1[5] = (Byte) (byte)0;
      Byte[] byteArray2 = ArrayUtils.insert((int) shortArray0[1], byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray1.length);
      assertEquals(3, shortArray0.length);
      assertEquals(12, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 642.4098593980797, 59, (double) 59);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = '~';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = 'o';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'f');
      assertArrayEquals(new char[] {'f', '~', 'U', 'U', 'o'}, charArray0);
      assertEquals(0, int0);
      assertEquals(5, charArray0.length);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-1074));
      assertEquals((short) (-1074), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)84);
      assertEquals((short)84, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      short short2 = (short)1;
      Short short3 = new Short((short)1);
      assertEquals((short)1, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      
      shortArray0[2] = short3;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'f';
      floatArray0[1] = (float) (short) (-1074);
      floatArray0[2] = (float) short2;
      floatArray0[3] = (float) (short)1;
      floatArray0[4] = (-412.0799F);
      floatArray0[5] = (float) (short)shortArray0[0];
      floatArray0[6] = (float) 'U';
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 1238);
      assertArrayEquals(new float[] {102.0F, (-1074.0F), 1.0F, 1.0F, (-412.0799F), (-1074.0F), 85.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(7, floatArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.shift((Object[]) null, (-26));
      Byte byte0 = new Byte((byte) (-87));
      assertEquals((byte) (-87), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-87));
      assertEquals((byte) (-87), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      ArrayUtils.shift(booleanArray0, 2, 1483, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) (-26);
      longArray0[2] = (long) 'q';
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {2L, (-26L), 113L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, Double.NaN);
      assertArrayEquals(new double[] {3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      Byte byte0 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte0);
      assertNotNull(byte0);
      
      Character character0 = new Character('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('[');
      assertEquals('[', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      Character character2 = Character.valueOf('[');
      assertEquals('[', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      classArray0[0] = class0;
      classArray0[2] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[3] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[4] = class2;
      Class<Byte> class3 = Byte.TYPE;
      assertNotNull(class3);
      assertFalse(class3.isInterface());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      assertTrue(class3.isPrimitive());
      assertEquals("byte", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.equals((Object)class1));
      assertFalse(class3.equals((Object)class2));
      assertNotSame(class3, class1);
      assertSame(class3, class0);
      assertNotSame(class3, class2);
      
      classArray0[5] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray1.length);
      assertEquals(6, classArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '[';
      long[] longArray1 = ArrayUtils.insert((int) character0, (long[]) null, longArray0);
      assertArrayEquals(new long[] {91L}, longArray0);
      assertNull(longArray1);
      assertEquals(1, longArray0.length);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      
      long[] longArray2 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {91L}, longArray0);
      assertArrayEquals(new long[] {91L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) 91L);
      assertNull(doubleArray0);
      
      Short short0 = new Short((short)288);
      assertEquals((short)288, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift((Object[]) characterArray0, (-564), (int) character0, (-564));
      assertEquals(2, characterArray0.length);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)52;
      Byte byte1 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byte byte3 = (byte) (-1);
      Byte byte4 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      
      byteArray0[3] = byte5;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = ';';
      charArray0[2] = 'Q';
      charArray0[3] = '=';
      charArray0[4] = ',';
      char[] charArray1 = ArrayUtils.remove(charArray0, 1);
      assertArrayEquals(new char[] {'n', 'Q', '=', ','}, charArray1);
      assertArrayEquals(new char[] {'n', ';', 'Q', '=', ','}, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) ';';
      doubleArray0[1] = (double) 'n';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {59.0, 110.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)52;
      shortArray0[1] = (short) byte3;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short)995;
      shortArray0[5] = (short) byte3;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)52, (short) (-1), (short)52, (short)52, (short)995, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)52, (short) (-1), (short)52, (short)52, (short)995, (short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = ArrayUtils.insert(99, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-66));
      assertEquals((byte) (-66), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 1.0, (int) (byte) (-111));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte2, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'w');
      assertFalse(boolean0);
      
      Float float0 = new Float((double) (byte)62);
      assertEquals(62.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {62.0F, 62.0F, 62.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      ArrayUtils.swap((Object[]) floatArray0, 2, (-1082), (-1));
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(11);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1643.3F;
      floatArray0[1] = (float) 1055;
      floatArray0[2] = (float) 0;
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {1643.3F, 1055.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 4246);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Byte[] byteArray2 = ArrayUtils.clone(byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      Byte byte3 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte2;
      byteArray0[2] = byte3;
      byteArray0[3] = byte2;
      byteArray0[4] = byte2;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, (int) byte0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)33;
      ArrayUtils.shift(shortArray0, (int) (byte)1, (-1195), (int) byte0);
      assertArrayEquals(new short[] {(short)33}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.shift((Object[]) byteArray0, (int) byte0, 1, (int) (short)33);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) ';';
      intArray0[1] = (int) ';';
      int int0 = ArrayUtils.indexOf(intArray0, 59, 59);
      assertArrayEquals(new int[] {59, 59}, intArray0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 352L;
      longArray0[1] = (long) 59;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '`');
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-4027);
      intArray0[1] = (-808);
      intArray0[2] = (-88);
      int[] intArray1 = ArrayUtils.add(intArray0, 200);
      assertArrayEquals(new int[] {(-4027), (-808), (-88)}, intArray0);
      assertArrayEquals(new int[] {(-4027), (-808), (-88), 200}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-808);
      objectArray0[1] = (Object) (-88);
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertEquals((-88), object0);
      assertNotNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (-88);
      ArrayUtils.shift(objectArray0, (-88), 3026, 2368);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      long[] longArray0 = new long[3];
      longArray0[0] = 388L;
      longArray0[1] = (-1L);
      longArray0[2] = (long) (-1);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[2];
      doubleArray0[0] = 0.0;
      objectArray0[1] = (Object) 0.0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 0, '`');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'`'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1833));
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      Byte byte0 = new Byte((byte)24);
      assertEquals((byte)24, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)24;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)24;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (-1));
      assertArrayEquals(new short[] {(short)24}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)24, (-451));
      assertArrayEquals(new byte[] {(byte)24}, byteArray0);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      Byte byte0 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte0);
      assertNotNull(byte0);
      
      char char0 = '?';
      Character character0 = Character.valueOf('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('[');
      assertEquals('[', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      Integer integer0 = new Integer(65536);
      assertEquals(65536, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) char0;
      objectArray0[2] = (Object) byte0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertTrue(boolean0);
      assertEquals(3, objectArray0.length);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)33;
      byteArray0[3] = (byte)33;
      ArrayUtils.shift(byteArray0, (-1745), (int) (byte)0, 2145051616);
      assertArrayEquals(new byte[] {(byte)33, (byte)33, (byte)33, (byte)33, (byte)33, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '[';
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = (double) 2145051616;
      doubleArray0[3] = (double) '[';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-187.32098452), 2147112998);
      assertArrayEquals(new double[] {91.0, 63.0, 2.145051616E9, 91.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte1, (int) (byte)33);
      assertEquals((-1), int1);
      assertEquals(3, objectArray0.length);
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 1133.4915, (-1097));
      assertArrayEquals(new double[] {91.0, 63.0, 2.145051616E9, 91.0}, doubleArray0, 0.01);
      assertEquals((-1), int2);
      assertEquals(4, doubleArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 110);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-3361));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3361)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3361), 110);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, (int)  (-3361), object0);
      assertNotNull(object1);
      assertEquals(7, objectArray0.length);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[0] = object1;
      int int1 = 2836;
      Object object2 = ArrayUtils.get(objectArray0, 2836, object1);
      assertNotNull(object2);
      assertEquals(7, objectArray0.length);
      assertSame(object0, object2);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertSame(object1, object2);
      assertSame(object2, object1);
      assertSame(object2, object0);
      
      objectArray0[1] = object2;
      byte byte0 = (byte) (-96);
      Byte byte1 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      int[] intArray1 = new int[5];
      intArray1[0] = 2836;
      intArray1[1] = (int) (short) (-3361);
      intArray1[2] = (-1);
      intArray1[3] = (-1);
      intArray1[4] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-1));
      assertArrayEquals(new int[] {2836, (-3361), (-1), (-1), (-1)}, intArray1);
      assertNotNull(bitSet0);
      assertEquals(5, intArray1.length);
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{2, 3, 4}", bitSet0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-808));
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-808);
      floatArray0[1] = (float) (-808);
      floatArray0[2] = (float) (-808);
      floatArray0[3] = (float) (-808);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-808.0F), (-808.0F), (-808.0F), (-808.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(boolean2);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      Byte byte0 = new Byte((byte)62);
      assertEquals((byte)62, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)62);
      assertEquals((byte)62, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-25);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)62, (byte) (-25)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-25);
      doubleArray0[1] = (double) (byte) (-25);
      doubleArray0[2] = 70.0;
      doubleArray0[3] = (double) (byte)62;
      doubleArray0[4] = (double) (byte) (-25);
      doubleArray0[5] = (double) (byte)62;
      doubleArray0[6] = (double) (byte) (-25);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-25.0), (-25.0), 70.0, 62.0, (-25.0), 62.0, (-25.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)52;
      Byte byte1 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)52;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) (byte)52;
      longArray0[3] = (long) byte0;
      longArray0[4] = (long) byte0;
      longArray0[5] = (long) byte0;
      longArray0[6] = (long) 10;
      ArrayUtils.shift(longArray0, 2, 1, (-5793));
      assertArrayEquals(new long[] {52L, 10L, 52L, 52L, 52L, 52L, 10L}, longArray0);
      assertEquals(7, longArray0.length);
      
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)52, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (byte)52;
      shortArray0[2] = (short) (byte)112;
      shortArray0[3] = (short) (byte)52;
      shortArray0[4] = (short) (byte)52;
      shortArray0[5] = (short) (byte)52;
      shortArray0[6] = (short) byte0;
      shortArray0[7] = (short) (byte)112;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)52);
      assertArrayEquals(new short[] {(short)112, (short)112}, shortArray1);
      assertArrayEquals(new short[] {(short)52, (short)52, (short)112, (short)52, (short)52, (short)52, (short)52, (short)112}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, (int) (byte)0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Character character0 = Character.valueOf('{');
      assertEquals('{', (char)character0);
      assertNotNull(character0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-29);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-1);
      intArray0[3] = 1711;
      intArray0[4] = (int) '{';
      intArray0[5] = 199;
      intArray0[6] = 1;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)0, (-1065));
      assertArrayEquals(new int[] {(-29), 0, (-1), 1711, 123, 199, 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, 1);
      assertArrayEquals(new int[] {(-29), 0, (-1), 1711, 123, 199, 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(bitSet0);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-29));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      Byte[] byteArray0 = new Byte[15];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3991.9, (int) (byte)0, (double) (byte)0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'b', 'b'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 3991.9, 1.0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 128;
      floatArray0[1] = (float) 128;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'b';
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-1);
      intArray0[3] = 128;
      intArray0[4] = (int) byte0;
      intArray0[5] = (int) 'b';
      intArray0[6] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, (-1));
      assertArrayEquals(new int[] {98, 0, (-1), 128, 0, 98, (-1)}, intArray0);
      assertArrayEquals(new int[] {98, 0, (-1), 128, 0, 98, (-1), (-1)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, (int) (byte)0);
      assertArrayEquals(new int[] {98, 0, (-1), 128, 0, 98, (-1)}, intArray0);
      assertArrayEquals(new int[] {98, (-1), 128, 0, 98, (-1)}, intArray2);
      assertNotNull(intArray2);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertNotNull(byteArray1);
      assertEquals(15, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, (int) (byte)0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Byte byte1 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byte1;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte1;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) 0.0;
      ArrayUtils.swap(objectArray0, 0, (int) (byte)0, 0);
      assertEquals(5, objectArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)36;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)22, (byte)0, (byte)0, (byte) (-71), (byte)36, (byte)91, (byte)36}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1087.5406F));
      assertArrayEquals(new float[] {(-1087.5406F), (-1087.5406F), (-1087.5406F), (-1087.5406F), (-1087.5406F), (-1087.5406F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      Integer integer0 = new Integer(2145051616);
      assertEquals(2145051616, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3658));
      assertEquals((-3658), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer(34);
      assertEquals(34, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2140201345);
      assertArrayEquals(new int[] {2145051616, 2145051616, 2145051616, 34, 2145051616, 2145051616, 2145051616}, intArray0);
      assertNotNull(intArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (-1087.5406F));
      assertArrayEquals(new float[] {(-1087.5406F), (-1087.5406F), (-1087.5406F), (-1087.5406F), (-1087.5406F), (-1087.5406F)}, floatArray1, 0.01F);
      assertEquals(0, int0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (-389));
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte)16;
      Byte byte2 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte2;
      byteArray0[1] = byte2;
      byteArray0[2] = byte2;
      Byte[] byteArray1 = new Byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) byte1;
      intArray0[1] = (int) byte1;
      intArray0[2] = (int) byte1;
      intArray0[3] = (int) byte1;
      intArray0[4] = (int) byte1;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-813), 16);
      assertArrayEquals(new int[] {16, 16, 16, 16, 16}, intArray0);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) byte1;
      shortArray0[1] = (short) (-124);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) byte1;
      shortArray0[4] = (short) byte1;
      shortArray0[5] = (short)3235;
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[7] = (short) byte1;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)16, (short) (-124), (short) (-1), (short)16, (short)16, (short)3235, (short) (-1), (short)16}, shortArray0);
      assertArrayEquals(new short[] {(short)16, (short) (-124), (short) (-1), (short)16, (short)16, (short)3235, (short) (-1), (short)16, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)3235;
      ArrayUtils.swap(intArray1, (int) (byte) (-1), 2, (int) (byte)16);
      assertArrayEquals(new int[] {3235}, intArray1);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      Byte byte0 = new Byte((byte) (-13));
      assertEquals((byte) (-13), (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray2 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotNull(abstractMap_SimpleImmutableEntryArray2);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray2.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray0.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray2.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray2, abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)52;
      Byte byte1 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      char char0 = '[';
      Character character1 = Character.valueOf('[');
      assertEquals('[', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character1;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 1711);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (int) (byte)52);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-77.29));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'u';
      longArray0[1] = (long) '[';
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) '[';
      longArray0[4] = (long) char0;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertArrayEquals(new long[] {117L, 91L, 52L, 91L, 91L}, longArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {117L, 91L, 52L, 91L, 91L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)70;
      Byte byte1 = new Byte((byte)70);
      assertEquals((byte)70, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)70, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)70);
      assertEquals((byte)70, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)70, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte)70, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      
      byteArray0[4] = byte5;
      byte byte6 = (byte)3;
      Byte byte7 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      
      byteArray0[5] = byte7;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2671).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) (byte)3;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) byte6;
      floatArray0[4] = (float) (byte)3;
      floatArray0[5] = (float) (byte)70;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 1834);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1834, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = Byte.valueOf((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[2] = byte2;
      byteArray0[3] = (Byte) byte0;
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((-1810.2043F));
      assertEquals((-1810.2043F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1669.7273F));
      assertEquals((-1669.7273F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(71.0F);
      assertEquals(71.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals((-1669.7273F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals(9, floatArray0.length);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) byte0);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) 71.0F);
      assertEquals(71.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((float) byte0);
      assertEquals(0.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float(1.0);
      assertEquals(1.0F, (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      
      floatArray0[7] = float7;
      Float float8 = new Float((float) floatArray0[0]);
      assertEquals((-1810.2043F), (float)float8, 0.01F);
      assertNotNull(float8);
      assertEquals(9, floatArray0.length);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      
      floatArray0[8] = float8;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      ArrayUtils.shift((double[]) null, (int) byte0, (int) byte0, 2440);
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray2 = new float[8];
      floatArray2[0] = (float) floatArray0[4];
      floatArray2[1] = (float) floatArray0[4];
      floatArray2[2] = (float) byte0;
      floatArray2[3] = (float) floatArray0[8];
      floatArray2[4] = (float) floatArray0[7];
      floatArray2[5] = 1531.0F;
      floatArray2[6] = (float) floatArray0[8];
      floatArray2[7] = (float) floatArray0[4];
      int int0 = ArrayUtils.lastIndexOf(floatArray2, 0.0F, (int) (byte)0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1810.2043F), 1.0F, 1531.0F, (-1810.2043F), 0.0F}, floatArray2, 0.01F);
      assertEquals(0, int0);
      assertEquals(8, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(boolean0);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte) (-102);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)49, (int) (byte)14);
      assertArrayEquals(new byte[] {(byte)49, (byte)14, (byte) (-70), (byte)114, (byte)0, (byte)98, (byte) (-102)}, byteArray0);
      assertEquals(0, int0);
      assertEquals(7, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertNull(object0);
      assertEquals(4, booleanArray0.length);
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)52);
      assertNull(byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)52;
      longArray0[1] = (long) (byte)52;
      longArray0[2] = (long) (byte)52;
      longArray0[3] = (long) (byte)52;
      longArray0[4] = (long) (byte)52;
      longArray0[5] = (long) (byte)52;
      longArray0[6] = (long) (byte)52;
      longArray0[7] = (long) (byte)52;
      ArrayUtils.shift(longArray0, (-25));
      assertArrayEquals(new long[] {52L, 52L, 52L, 52L, 52L, 52L, 52L, 52L}, longArray0);
      assertEquals(8, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-25);
      intArray0[1] = (-1242);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-25), (-1242)}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      byte byte0 = (byte) (-23);
      Byte byte1 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byte1;
      objectArray0[1] = (Object) byte1;
      objectArray0[0] = (Object) byte1;
      objectArray0[3] = (Object) byte1;
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte1;
      Byte byte3 = ArrayUtils.get(byteArray0, (int)  (-23));
      assertNull(byte3);
      assertEquals(3, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (int) (byte)97);
      assertEquals(2, int0);
      assertEquals(4, objectArray0.length);
      
      Double double0 = new Double(byte0);
      assertEquals((-23.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      Byte byte0 = new Byte((byte)37);
      assertEquals((byte)37, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-67));
      assertEquals((byte) (-67), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)78);
      assertEquals((byte)78, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte) (-34));
      assertEquals((byte) (-34), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1.0F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte) (-76);
      byteArray1[2] = (byte) (-76);
      byteArray1[3] = (byte) (-76);
      byteArray1[4] = (byte) (-18);
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-76), (byte) (-76), (byte) (-76), (byte) (-18)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-76), (byte) (-76), (byte) (-76), (byte) (-18), (byte)54, (byte) (-76), (byte) (-76), (byte) (-76), (byte) (-18)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(10, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      ArrayUtils.shift((double[]) null, (-560), (-933), (int) (byte) (-76));
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)33);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)33}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1167.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = 'V';
      charArray0[2] = 'w';
      charArray0[3] = 'C';
      charArray0[4] = 'R';
      charArray0[5] = 'd';
      charArray0[6] = 'A';
      charArray0[7] = 'P';
      charArray0[8] = 'w';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'w');
      assertArrayEquals(new char[] {'^', 'V', 'w', 'C', 'R', 'd', 'A', 'P', 'w'}, charArray0);
      assertEquals(8, int0);
      assertEquals(9, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'P';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {80}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)4;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)36, (byte) (-69), (byte)1, (byte)4}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {(byte)50, (byte)36, (byte) (-69), (byte)1, (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)36, (byte) (-69), (byte)1, (byte)4}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      short[] shortArray0 = ArrayUtils.insert((int) (byte)1, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'U');
      assertFalse(boolean0);
      
      short[] shortArray1 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 99, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (long) 1541;
      longArray0[2] = 1L;
      longArray0[3] = (long) (-331);
      longArray0[4] = (long) (-331);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1541L, 1541);
      assertArrayEquals(new long[] {1L, 1541L, 1L, (-331L), (-331L)}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(5, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Double double0 = new Double((-232.6193983184));
      assertEquals((-232.6193983184), (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.shift(intArray0, 99);
      assertArrayEquals(new int[] {(-331), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, (-1659), 99);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      byte byte0 = (byte)0;
      int int0 = (-331);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1534;
      doubleArray0[1] = (double) (-331);
      doubleArray0[2] = (double) (-331);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) 1534;
      doubleArray0[6] = (double) (-331);
      doubleArray0[7] = (double) (-331);
      doubleArray0[8] = (double) (-331);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 100.0, (int) (byte)0);
      assertArrayEquals(new double[] {1534.0, (-331.0), (-331.0), 0.0, 0.0, 1534.0, (-331.0), (-331.0), (-331.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      ArrayUtils.swap(objectArray0, (-417), 2145964810, (-417));
      assertEquals(3, objectArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((int) (byte) (-15), byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = object0;
      objectArray1[1] = object0;
      objectArray1[2] = object0;
      objectArray1[3] = object0;
      objectArray1[4] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray1, object0);
      assertEquals(4, int0);
      assertEquals(5, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)250;
      doubleArray0[1] = (double) 2145964810;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = 1575.85250084;
      doubleArray0[4] = 2418.7;
      doubleArray0[5] = (double) (short)250;
      doubleArray0[6] = (double) (byte) (-15);
      doubleArray0[7] = 1.5;
      doubleArray0[8] = (double) 2145964810;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 674.0, 1575.85250084);
      assertArrayEquals(new double[] {250.0, 2.14596481E9, 4.0, 1575.85250084, 2418.7, 250.0, (-15.0), 1.5, 2.14596481E9}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2, 3, 5, 6, 7}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)101;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)792;
      shortArray0[3] = (short)792;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)101, (short)2, (short)792, (short)792, (short)0}, shortArray0);
      assertFalse(boolean0);
      assertEquals(5, shortArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)2;
      shortArray1[1] = (short)792;
      shortArray1[2] = (short)2;
      shortArray1[3] = (short)101;
      shortArray1[4] = (short)101;
      shortArray1[5] = (short)2;
      shortArray1[6] = (short)792;
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short)792);
      assertArrayEquals(new short[] {(short)2, (short)792, (short)2, (short)101, (short)101, (short)2, (short)792}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)101, (short)101, (short)2, (short)792}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-848), 20, 1114111);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)1859;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1859);
      assertArrayEquals(new short[] {(short)0, (short)1859, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElement((long[]) null, 7967L);
      assertNull(longArray1);
      
      Integer integer0 = new Integer((short)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ')');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) ')';
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 3704L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 41L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {3704L, 0L, 0L, 0L, 41L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      int[] intArray0 = ArrayUtils.insert(36, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 36);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      int[] intArray0 = new int[19];
      intArray0[0] = 79;
      intArray0[1] = (-2000);
      intArray0[2] = 1;
      int int0 = ArrayUtils.indexOf(intArray0, (-2000), (-2000));
      assertEquals(1, int0);
      assertEquals(19, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1087.5406F);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 79;
      doubleArray0[3] = (double) (-2000);
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = (double) 59;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 59);
      assertArrayEquals(new double[] {59.0, 59.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 59.0;
      objectArray0[2] = (Object) 59.0;
      objectArray0[3] = (Object) 0.0F;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      
      ArrayUtils.shift(floatArray0, 0, (-5834), 2146604018);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)101;
      shortArray0[1] = (short) (-2802);
      shortArray0[2] = (short)99;
      short[] shortArray1 = new short[9];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)99;
      shortArray1[1] = (short)101;
      shortArray1[2] = (short)101;
      shortArray1[3] = (short)101;
      shortArray1[4] = (short)99;
      shortArray1[5] = (short) (-2802);
      shortArray1[6] = (short)99;
      shortArray1[7] = (short)99;
      shortArray1[8] = (short) (-2802);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(65536, shortArray0, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65536, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 311.44968256516495, 9, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-45));
      assertEquals((byte) (-45), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[0];
      Byte byte1 = new Byte((byte) (-45));
      assertEquals((byte) (-45), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      int int1 = 36;
      int int2 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte1, 36);
      assertEquals((-1), int2);
      assertEquals(0, objectArray0.length);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      ArrayUtils.reverse((short[]) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = (int) (byte) (-45);
      intArray0[2] = 9;
      intArray0[3] = (int) (byte) (-45);
      intArray0[4] = 36;
      intArray0[5] = 36;
      intArray0[6] = (-1);
      intArray0[7] = (int) (byte) (-45);
      intArray0[8] = (-2013);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) ';';
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-52), 0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) ';';
      doubleArray0[2] = (double) (byte)0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 59;
      floatArray0[1] = 1976.104F;
      floatArray0[2] = 1.0F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-52);
      floatArray1[1] = 1.0F;
      floatArray1[2] = (float) 59;
      floatArray1[3] = (float) ';';
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-52.0F), 1.0F, 59.0F, 59.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {59.0F, 1976.104F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 335.79844644;
      ArrayUtils.shift(doubleArray0, 2588);
      assertArrayEquals(new double[] {0.0, 0.0, 335.79844644}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-25)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-25);
      objectArray0[1] = (Object) (byte) (-25);
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) (byte)0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], (int) (byte) (-25));
      assertEquals(0, int0);
      assertEquals(6, objectArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-25);
      intArray0[1] = 1208;
      intArray0[2] = 2588;
      intArray0[3] = (int) (byte) (-25);
      ArrayUtils.shift(intArray0, (int) (byte) (-25));
      assertArrayEquals(new int[] {1208, 2588, (-25), (-25)}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      boolean[] booleanArray0 = null;
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-803.55615F);
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-803.55615F), Float.NaN}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-803.55615F);
      doubleArray0[1] = (-0.7);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = 972.3879809863744;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, Double.NaN, (int) (byte)0);
      assertArrayEquals(new double[] {(-803.55615234375), (-0.7), 0.0, 972.3879809863744, Double.NaN, 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-89);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)2293;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 97);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 0;
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) 0;
      objectArray0[7] = (Object) 0;
      ArrayUtils.shift(objectArray0, 0, 0, 0);
      assertEquals(8, objectArray0.length);
      
      Long long0 = new Long(5372);
      assertEquals(5372L, (long)long0);
      assertNotNull(long0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 97;
      floatArray0[1] = (-3120.7F);
      floatArray0[2] = (float) 5372;
      floatArray0[3] = (float) 0;
      boolean boolean1 = ArrayUtils.contains(floatArray0, 1.0F);
      assertArrayEquals(new float[] {97.0F, (-3120.7F), 5372.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.reverse(booleanArray0, 113, 113);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)11, 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      Byte byte0 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-36));
      assertEquals((byte) (-36), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byte[] byteArray0 = new byte[10];
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (byte) (-36);
      doubleArray0[2] = 490.4761657714844;
      doubleArray0[3] = 490.4761657714844;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-36), (int) (byte)0);
      assertArrayEquals(new double[] {(-1.0), (-36.0), 490.4761657714844, 490.4761657714844}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[2] = (byte) (-113);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)56;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2, (int) (byte)99);
      assertArrayEquals(new byte[] {(byte)99, (byte)0, (byte)72, (byte)95, (byte)56}, byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)95, (byte)56}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte)0, (byte)72, (byte)95, (byte)56}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (int) (byte) (-113), 0);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (byte)99;
      floatArray0[2] = (float) (byte)95;
      floatArray0[3] = (float) (byte) (-113);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, 99.0F, 95.0F, (-113.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {99.0F, 95.0F, (-113.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      Byte byte0 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.swap((float[]) null, (-168), 48, Integer.MAX_VALUE);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) (byte)14;
      floatArray0[2] = (float) (byte)13;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {2.14748365E9F, 14.0F, 13.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.14748365E9F, 14.0F, 13.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = ArrayUtils.insert(0, (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)13}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray1 = ArrayUtils.subarray((long[]) null, (int) (byte)13, (-1480));
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2143);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2074);
      assertArrayEquals(new short[] {(short) (-2143)}, shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (short) (-2143);
      intArray0[2] = 17;
      intArray0[3] = (int) (short) (-2143);
      intArray0[4] = (int) (short) (-2143);
      intArray0[5] = (int) (short) (-2143);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2143));
      assertArrayEquals(new int[] {1, (-2143), 17, (-2143), (-2143), (-2143)}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 3, 4, 5}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      
      Byte[] byteArray2 = new Byte[4];
      Byte byte0 = new Byte((byte) (-104));
      assertEquals((byte) (-104), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[0] = byte0;
      Byte byte1 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray2[1] = byte1;
      Byte byte2 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray2[2] = byte2;
      Byte byte3 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray2[3] = byte3;
      Byte[] byteArray3 = ArrayUtils.add(byteArray2, byte0);
      assertNotNull(byteArray3);
      assertEquals(5, byteArray3.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte3));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray3);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = (double) 59;
      Byte byte0 = new Byte((byte) (-35));
      assertEquals((byte) (-35), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 59.0;
      objectArray0[1] = (Object) 59.0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) 59.0;
      objectArray0[4] = (Object) 59.0;
      objectArray0[5] = (Object) 59.0;
      objectArray0[6] = (Object) 59.0;
      objectArray0[7] = (Object) 59.0;
      objectArray0[8] = (Object) 59.0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[6], 1784);
      assertEquals(8, int0);
      assertEquals(9, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 59.0, 1.5);
      assertArrayEquals(new double[] {59.0, 59.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(1784);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-35);
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-35)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) ';';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-52), 0);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) ';';
      doubleArray0[1] = (double) (byte)34;
      doubleArray0[2] = (double) (byte)34;
      doubleArray0[3] = (double) (byte)34;
      doubleArray0[4] = (double) (byte)34;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-942.0849999999999));
      assertArrayEquals(new double[] {59.0, 34.0, 34.0, 34.0, 34.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(5, doubleArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) ';';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-52), 0);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[2] = 919L;
      longArray0[2] = (long) (byte) (-18);
      longArray0[4] = (long) (byte)0;
      ArrayUtils.shift(longArray0, (int) (byte)0);
      assertArrayEquals(new long[] {0L, 0L, (-18L), 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-18L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertFalse(boolean0);
      assertEquals(6, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)44;
      Byte byte1 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) byte0;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 0);
      assertArrayEquals(new float[] {0.0F, 44.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 3119L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {3119L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3119L;
      doubleArray0[1] = (double) 3119L;
      doubleArray0[2] = (double) 3119L;
      doubleArray0[3] = (-2982.0889744484);
      doubleArray0[4] = (double) 3119L;
      doubleArray0[5] = (double) 3119L;
      doubleArray0[6] = (double) 3119L;
      doubleArray0[7] = (double) 3119L;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1283.29643876));
      assertArrayEquals(new double[] {(-1283.29643876), 3119.0, 3119.0, 3119.0, (-2982.0889744484), 3119.0, 3119.0, 3119.0, 3119.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3119.0, 3119.0, 3119.0, (-2982.0889744484), 3119.0, 3119.0, 3119.0, 3119.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      Byte byte0 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, ';');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-777L), 753);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1393);
      shortArray0[1] = (short)6813;
      shortArray0[2] = (short) (-3423);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-3423));
      assertArrayEquals(new short[] {(short) (-1393), (short)6813, (short) (-3423)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1393), (short)6813, (short) (-3423), (short) (-3423)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      short[] shortArray0 = new short[5];
      ArrayUtils.shift(shortArray0, (int) (short) (-2918), 1240, (int) (short) (-2918));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Byte byte1 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-105), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-105);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short) (byte) (-105);
      shortArray0[7] = (short) byte0;
      shortArray0[8] = (short) byte0;
      ArrayUtils.swap(shortArray0, (-1), (int) (byte) (-105), 75);
      assertArrayEquals(new short[] {(short) (-105), (short)0, (short) (-105), (short) (-105), (short) (-105), (short) (-105), (short) (-105), (short) (-105), (short) (-105)}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      ArrayUtils.swap(byteArray0, (int) (short) (-105), (-186), Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-105)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-105);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (short) (-105);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (short) (-105);
      floatArray0[5] = (float) (short) (-105);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-105.0F), (-1.0F), (-105.0F), 0.0F, (-105.0F), (-105.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 99, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      Byte byte0 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 509);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-105);
      shortArray0[1] = (short) (byte) (-105);
      shortArray0[2] = (short) (byte) (-105);
      shortArray0[3] = (short) (-365);
      shortArray0[4] = (short) (byte) (-105);
      shortArray0[5] = (short) (byte) (-105);
      shortArray0[6] = (short) (byte) (-105);
      shortArray0[7] = (short) (byte) (-105);
      shortArray0[8] = (short) (-365);
      ArrayUtils.shift(shortArray0, (-1863), 2, (int) (short) (-105));
      assertArrayEquals(new short[] {(short) (-105), (short) (-105), (short) (-105), (short) (-365), (short) (-105), (short) (-105), (short) (-105), (short) (-105), (short) (-365)}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 32);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(3, booleanArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {',', ',', ',', ','}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)3, 4);
      assertArrayEquals(new char[] {',', ',', ',', ','}, charArray0);
      assertArrayEquals(new char[] {','}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {4}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      Integer integer0 = new Integer(36);
      assertEquals(36, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3772));
      assertEquals((-3772), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-3788));
      assertEquals((-3788), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer((byte)52);
      assertEquals(52, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'b', (int) (byte)52);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-3527), Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K'}, charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Integer integer4 = new Integer((-2574));
      assertEquals((-2574), (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      
      Integer integer5 = new Integer(36);
      assertEquals(36, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      
      Integer integer6 = new Integer(1);
      assertEquals(1, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      
      Integer integer7 = new Integer((-3527));
      assertEquals((-3527), (int)integer7);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      
      Integer integer8 = new Integer(975);
      assertEquals(975, (int)integer8);
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer5));
      
      Integer integer9 = new Integer(1);
      assertEquals(1, (int)integer9);
      assertNotNull(integer9);
      assertFalse(integer9.equals((Object)integer0));
      assertTrue(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer4));
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer3;
      integerArray0[1] = integer7;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {52, (-3527)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 48;
      doubleArray0[1] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 48);
      assertArrayEquals(new double[] {48.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      long[] longArray0 = new long[7];
      longArray0[0] = 3119L;
      longArray0[1] = (-1L);
      longArray0[2] = (long) 48;
      longArray0[3] = 3119L;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 48;
      longArray0[6] = 0L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {3119L, (-1L), 48L, 3119L, 0L, 48L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 262, 1.5);
      assertArrayEquals(new double[] {48.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, int1);
      assertEquals(2, doubleArray0.length);
      assertFalse(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 686.7);
      assertArrayEquals(new double[] {48.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap(floatArray0, 6, 96, 57);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)109);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.shift(byteArray0, (-3588), (int) (byte)2, (-723));
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short)2, (short)short1);
      assertNotNull(short1);
      assertEquals(3, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertEquals((short)2, (short)short2);
      assertNotNull(short2);
      assertEquals(3, shortArray0.length);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      Float float0 = new Float(1767.9338359381);
      assertEquals(1767.9338F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 0L);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((float) 0L);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((float) 0L);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      
      Float float4 = new Float(1767.9338359381);
      assertEquals(1767.9338F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      Float float5 = new Float(15.0F);
      assertEquals(15.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      
      Boolean boolean0 = Boolean.valueOf("Array and element cannot both be null");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("Array and element cannot both be null");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      
      ArrayUtils.shift(longArray0, 0, 0, (-1287));
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 33.0);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-43);
      ArrayUtils.shift(byteArray0, 1, 1, (-1419));
      assertArrayEquals(new byte[] {(byte)59, (byte)100, (byte)5, (byte)97, (byte)67, (byte) (-43)}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = new Byte[15];
      boolean boolean1 = ArrayUtils.isArrayIndexValid(byteArray0, 1);
      assertTrue(boolean1);
      assertEquals(15, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte)55;
      byteArray1[2] = (byte)31;
      byteArray1[3] = (byte) (-27);
      byteArray1[4] = (byte) (-89);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, (byte[]) null);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)55, (byte)31, (byte) (-27), (byte) (-89)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)55, (byte)31, (byte) (-27), (byte) (-89)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean2);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1087.5406F));
      assertArrayEquals(new float[] {(-1087.5406F), (-1087.5406F), (-1087.5406F), (-1087.5406F), (-1087.5406F), (-1087.5406F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 44L;
      longArray0[1] = (-1L);
      longArray0[2] = 2834L;
      longArray0[3] = (-906L);
      longArray0[4] = 934L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 44L, (-4000));
      assertArrayEquals(new long[] {44L, (-1L), 2834L, (-906L), 934L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(5, longArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new long[] {44L, (-1L), 2834L, (-906L), 934L}, longArray0);
      assertNull(object0);
      assertEquals(5, longArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray0, (Object) null);
      assertEquals(5, int0);
      assertEquals(6, floatArray0.length);
      
      Byte byte0 = new Byte((byte) (-8));
      assertEquals((byte) (-8), (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 99, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      Byte byte0 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 509);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-105);
      shortArray0[1] = (short) (byte) (-105);
      shortArray0[2] = (short) (byte) (-105);
      shortArray0[3] = (short) (-365);
      shortArray0[4] = (short) (byte) (-105);
      shortArray0[5] = (short) (byte) (-105);
      shortArray0[6] = (short) (byte) (-105);
      shortArray0[7] = (short) (byte) (-105);
      shortArray0[8] = (short) (-365);
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = '';
      charArray0[2] = 'h';
      charArray0[3] = '5';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'h', '', 'h', '5'}, charArray0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      Long long0 = new Long(490L);
      assertEquals(490L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(5049L);
      assertEquals(5049L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short)3229;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-3225));
      assertArrayEquals(new short[] {(short)121, (short)3229}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3225), (short)121, (short)3229}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      Object object1 = ArrayUtils.get(objectArray0, 34);
      assertNull(object1);
      assertEquals(4, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) (short)121;
      objectArray0[2] = (Object) (short)121;
      objectArray0[3] = (Object) (short)121;
      ArrayUtils.swap(objectArray0, 4, (int) (short)121, (-1789));
      assertEquals(4, objectArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)90;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 335.79844644;
      ArrayUtils.shift(doubleArray0, 2588);
      assertArrayEquals(new double[] {0.0, 0.0, 335.79844644}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte) (-25)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 1072, 2588, (-957));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-25), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -25, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      Float float0 = new Float(1767.9338359381);
      assertEquals(1767.9338F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 0L);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((float) 0L);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((float) 0L);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      
      Float float4 = new Float(1767.9338359381);
      assertEquals(1767.9338F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      
      Float float5 = new Float((double) 0L);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float2;
      floatArray0[1] = float0;
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F, 1767.9338F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = '#';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'o');
      assertArrayEquals(new char[] {'^', '#', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[8];
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)1640);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1640, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray2 = ArrayUtils.remove(floatArray1, 0);
      assertArrayEquals(new float[] {1767.9338F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1767.9338F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(2, floatArray2.length);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, 78);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-497), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -497, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.shift((Object[]) null, (-26));
      Byte byte0 = new Byte((byte) (-87));
      assertEquals((byte) (-87), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-87), object0);
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      ArrayUtils.shift(booleanArray0, (-1), 121, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = 'q';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = 'q';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'n', 374);
      assertArrayEquals(new char[] {'?', 'q', '?', '?', '?', 'q'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2851.2);
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 14.642258817518545);
      assertArrayEquals(new double[] {(-2851.2)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)1;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte)120;
      Byte byte2 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte2;
      Byte byte3 = ArrayUtils.get(byteArray0, 324, byte0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertEquals(2, byteArray0.length);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      Character character0 = new Character('7');
      assertEquals('7', (char)character0);
      assertNotNull(character0);
      
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-124.0));
      assertEquals((-124.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      Double double2 = new Double((-1.0));
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[1] = double2;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      ArrayUtils.shift((Object[]) byteArray0, (int) byte1);
      assertEquals(2, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (int) (short)1);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences((int[]) null, (-3572));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 11;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 11}, intArray0);
      assertEquals(7, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) doubleArray0, objectArray0);
      assertFalse(boolean1);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, objectArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)35;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-104), (byte)0, (byte)94, (byte)63, (byte)108, (byte)35}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40), (byte) (-104), (byte)0, (byte)94, (byte)63, (byte)108, (byte)35}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)108;
      doubleArray0[4] = (double) (byte)63;
      doubleArray0[5] = (double) (byte) (-40);
      doubleArray0[6] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 108.0, (double) (byte)63);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 108.0, 63.0, (-40.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, int0);
      assertEquals(7, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte) (-104);
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte) (-40);
      floatArray0[4] = (float) (byte)63;
      floatArray0[5] = (float) (byte)35;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-2759), 362.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2759, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      ArrayUtils.shift((long[]) null, 2144949409, (-2141648093), 13);
      Byte byte0 = new Byte((byte) (-38));
      assertEquals((byte) (-38), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)76);
      assertEquals((byte)76, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)76;
      shortArray0[1] = (short) (byte)35;
      shortArray0[2] = (short) (byte) (-38);
      shortArray0[3] = (short) (byte)35;
      shortArray0[4] = (short) (-2359);
      shortArray0[5] = (short) (-74);
      shortArray0[6] = (short) (byte)35;
      shortArray0[7] = (short)2003;
      ArrayUtils.shift(shortArray0, (int) (short)35, 1611, 51);
      assertArrayEquals(new short[] {(short)76, (short)35, (short) (-38), (short)35, (short) (-2359), (short) (-74), (short)35, (short)2003}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)2003;
      doubleArray0[1] = (-491.26288038156594);
      doubleArray0[2] = (double) 2144949409;
      doubleArray0[3] = (double) (byte)76;
      doubleArray0[4] = (double) (-2141648093);
      doubleArray0[5] = (double) 13;
      doubleArray0[6] = (double) (short)35;
      doubleArray0[7] = (double) 2144949409;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {2003.0, (-491.26288038156594), 2.144949409E9, 76.0, (-2.141648093E9), 13.0, 35.0, 2.144949409E9}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift((long[]) null, 23, 23, 23);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 3330L;
      longArray0[1] = 919L;
      longArray0[2] = (long) (byte) (-34);
      longArray0[3] = (long) (byte) (-34);
      longArray0[4] = (long) (byte)0;
      ArrayUtils.shift(longArray0, (int) (byte)0);
      assertArrayEquals(new long[] {3330L, 919L, (-34L), (-34L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, (int) (byte)0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3.0;
      doubleArray1[2] = (double) 9;
      boolean boolean1 = ArrayUtils.contains(doubleArray1, 0.0, 0.7);
      assertArrayEquals(new double[] {0.0, 3.0, 9.0}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      double[] doubleArray2 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(2, intArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (short)0;
      ArrayUtils.shift((boolean[]) null, Integer.MAX_VALUE, (-2212), 0);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayUtils.shift((boolean[]) null, 2088469709, (-244), (-244));
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray3 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false, true}, booleanArray3));
      assertNotNull(booleanArray3);
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray3.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)125;
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)125;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)97;
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)67;
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte) (-43);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)125, (byte)10, (byte)97, (byte)46, (byte)1, (byte)67, (byte) (-1), (byte) (-43)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)97, (byte)10, (byte)46, (byte) (-43), (byte)125}, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('[');
      assertEquals('[', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character1;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 1711);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (int) (byte)52);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)52;
      doubleArray0[1] = (double) 1711;
      doubleArray0[2] = (double) (byte)52;
      doubleArray0[3] = (double) '[';
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray1);
      assertArrayEquals(new double[] {52.0, 1711.0, 52.0, 91.0}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new double[] {52.0, 1711.0, 52.0, 91.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)44;
      Byte byte1 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)44;
      intArray0[1] = (int) (byte)44;
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) byte0;
      intArray0[4] = (int) (byte)44;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {44, 44, 44, 44, 44}, intArray0);
      assertArrayEquals(new int[] {44, 44, 44, 44, 44}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 44;
      doubleArray0[1] = (double) 44;
      doubleArray0[2] = (double) 44;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {44.0, 44.0, 44.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {44, 44, 44, 44, 44}, intArray0);
      assertArrayEquals(new int[] {44, 44, 44, 44, 44}, intArray1);
      assertNotNull(intArray2);
      assertEquals(0, intArray2.length);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) byte0, 1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray3 = ArrayUtils.toPrimitive((Integer[]) null, 1104);
      assertNull(intArray3);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-105);
      byteArray0[0] = (byte) (-105);
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Byte byte1 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[1] = byte1;
      Byte byte2 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte) (-36));
      assertEquals((byte) (-36), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      
      byte[] byteArray2 = new byte[4];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = byte0;
      byteArray2[1] = (byte) (-105);
      byteArray2[2] = (byte) (-36);
      byteArray2[3] = byte0;
      byte[] byteArray3 = ArrayUtils.add(byteArray2, (byte)3);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-105), (byte) (-36), (byte) (-105)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-105), (byte) (-36), (byte) (-105), (byte)3}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(4, byteArray2.length);
      assertEquals(5, byteArray3.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-105);
      floatArray0[1] = (float) (byte) (-105);
      floatArray0[2] = (float) (byte) (-105);
      floatArray0[3] = (float) (byte) (-36);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte) (-105));
      assertArrayEquals(new float[] {(-105.0F), (-105.0F), (-105.0F), (-36.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byte3;
      objectArray0[1] = (Object) byte2;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-105);
      intArray0[1] = (int) (byte) (-36);
      intArray0[2] = (int) (byte) (-36);
      intArray0[3] = (int) (byte) (-105);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -36, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2827.9893F);
      floatArray0[2] = 713.88F;
      floatArray0[3] = 1.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2590.1421275);
      doubleArray0[1] = 2362.16893739;
      doubleArray0[2] = 85.0;
      doubleArray0[3] = 104.0;
      doubleArray0[4] = 126.0;
      doubleArray0[5] = 1.5;
      doubleArray0[6] = 972.3879809863744;
      doubleArray0[7] = (-1855.7355518183788);
      doubleArray0[8] = 1.5;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 972.3879809863744);
      assertArrayEquals(new double[] {(-2590.1421275), 2362.16893739, 85.0, 104.0, 126.0, 1.5, 972.3879809863744, (-1855.7355518183788), 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2590.1421275), 2362.16893739, 85.0, 104.0, 126.0, 1.5, 972.3879809863744, (-1855.7355518183788), 1.5, 972.3879809863744}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-4164L);
      longArray0[1] = 0L;
      longArray0[2] = (-2647L);
      ArrayUtils.shift(longArray0, (-2119), 42, 42);
      assertArrayEquals(new long[] {(-4164L), 0L, (-2647L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 42;
      longArray1[1] = (long) 42;
      longArray1[2] = (long) 42;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-1443L), 462);
      assertArrayEquals(new long[] {42L, 42L, 42L}, longArray1);
      assertNotNull(bitSet0);
      assertEquals(3, longArray1.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      float[] floatArray0 = new float[0];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)35;
      shortArray0[1] = (short)2254;
      shortArray0[2] = (short)35;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (-96);
      shortArray0[6] = (short) (-96);
      shortArray0[7] = (short) (-96);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)127, 0);
      assertArrayEquals(new short[] {(short)35, (short)2254, (short)35, (short)1, (short)1, (short) (-96), (short) (-96), (short) (-96)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      
      int[] intArray0 = new int[0];
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (short)35);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int1);
      assertEquals(0, intArray0.length);
      assertTrue(int1 == int0);
      
      int int2 = ArrayUtils.indexOf(floatArray0, 1.0F, (int) (short)1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int2);
      assertEquals(0, floatArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = (-300);
      Integer integer0 = new Integer((-300));
      assertEquals((-300), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1379));
      assertEquals((-1379), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1379));
      assertEquals((-1379), (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(975);
      assertEquals(975, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'K', 975);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-300), 760);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Integer integer4 = new Integer(1497);
      assertEquals(1497, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      
      Integer integer5 = new Integer((-300));
      assertEquals((-300), (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      
      Integer integer6 = new Integer((-300));
      assertEquals((-300), (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      
      Integer integer7 = new Integer((-1379));
      assertEquals((-1379), (int)integer7);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      
      Integer integer8 = new Integer((-300));
      assertEquals((-300), (int)integer8);
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer5));
      assertTrue(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)int0));
      
      Integer integer9 = new Integer((-300));
      assertEquals((-300), (int)integer9);
      assertNotNull(integer9);
      assertFalse(integer9.equals((Object)integer7));
      assertTrue(integer9.equals((Object)integer0));
      assertTrue(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer1));
      assertTrue(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer4));
      assertTrue(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer3));
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Double double0 = new Double((byte)1);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 357.399;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.insert((int) (byte)1, byteArray1, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      
      ArrayUtils.shift(byteArray0, (-1285), 12, 9);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      
      Character character0 = new Character(' ');
      assertEquals(' ', (char)character0);
      assertNotNull(character0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) character0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 12, object0);
      assertNotNull(object1);
      assertEquals(6, objectArray0.length);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) character0;
      ArrayUtils.shift(objectArray0, 12);
      assertEquals(6, objectArray0.length);
      
      Byte byte0 = new Byte((byte)62);
      assertEquals((byte)62, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.isSameType(objectArray0[2], byte0);
      assertFalse(boolean0);
      assertEquals(6, objectArray0.length);
      
      ArrayUtils.shift(booleanArray0, 128, 0, 128);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = 'F';
      charArray0[2] = '0';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '^', (-3157));
      assertArrayEquals(new char[] {'*', 'F', '0'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift((float[]) null, (-3771), (-379), 8);
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 's';
      charArray0[4] = 's';
      charArray0[5] = 's';
      charArray0[6] = 's';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, ';');
      assertArrayEquals(new char[] {'v', 's', 's', 's', 's', 's', 's'}, charArray0);
      assertNotNull(bitSet1);
      assertEquals(7, charArray0.length);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) bitSet0;
      ArrayUtils.reverse(objectArray0, (-3771), 8);
      assertEquals(2, objectArray0.length);
      
      BitSet bitSet2 = ArrayUtils.indexesOf((long[]) null, (long) (byte)1, (int) (byte)1);
      assertNotNull(bitSet2);
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.length());
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-572);
      shortArray0[1] = (short)14;
      shortArray0[2] = (short)1641;
      shortArray0[3] = (short)1555;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-572), (short)14, (short)1641, (short)1555}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf("double");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("java.lang.Byte");
      assertFalse(boolean5);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6);
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf("java.lang.Byte");
      assertFalse(boolean7);
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean1));
      
      booleanArray0[7] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-52);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-51);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)5, (byte)64, (byte)47, (byte) (-121), (byte)2, (byte) (-52), (byte)2, (byte) (-51)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      
      Byte byte0 = new Byte((byte) (-51));
      assertEquals((byte) (-51), (byte)byte0);
      assertNotNull(byte0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1, "-/z*5jbjN-;VQ$a");
      assertArrayEquals(new byte[] {(byte)48, (byte)5, (byte)64, (byte)47, (byte) (-121), (byte)2, (byte) (-52), (byte)2, (byte) (-51)}, byteArray0);
      assertNotNull(stringArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals(9, stringArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-51);
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte) (-51);
      shortArray0[3] = (short) (byte)47;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short)17;
      shortArray0[6] = (short) (byte) (-121);
      shortArray0[1] = (short)46;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-51), (short)46, (short) (-51), (short)47, (short)2, (short)17, (short) (-121), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-51), (short)46, (short) (-51), (short)47, (short)2, (short)17, (short) (-121), (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) stringArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)5, (byte)64, (byte)47, (byte) (-121), (byte)2, (byte) (-52), (byte)2, (byte) (-51)}, byteArray0);
      assertNotNull(stringArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, stringArray1.length);
      assertEquals(9, byteArray1.length);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-1), (int) (short)2);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) (byte)5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      char[] charArray1 = Character.toChars(0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) int0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 825);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = ArrayUtils.insert(int0, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) int0;
      longArray0[2] = (-625L);
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      longArray0[5] = 0L;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) 0;
      int int1 = ArrayUtils.indexOf(longArray0, 0L, 0);
      assertArrayEquals(new long[] {0L, 0L, (-625L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0, int1);
      assertEquals(8, longArray0.length);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-43);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)48);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)115, (byte) (-1), (byte) (-73), (byte) (-43)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-501.660190765637));
      assertEquals((-501.660190765637), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[2] = double0;
      Double double1 = new Double((-1372.767930531671));
      assertEquals((-1372.767930531671), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1539.7240432391634);
      assertEquals(1539.7240432391634, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1328.6));
      assertEquals((-1328.6), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1169.4028));
      assertArrayEquals(new double[] {(-1169.4028), (-1169.4028), 1539.7240432391634, (-1328.6)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = 2418.2F;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN, (int) (byte)0);
      assertArrayEquals(new float[] {0.0F, 2418.2F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(6, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = (int) (byte)0;
      ArrayUtils.shift(intArray0, 15, Integer.MIN_VALUE, 2143114191);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      
      Byte[] byteArray2 = new Byte[0];
      Byte[] byteArray3 = ArrayUtils.subarray(byteArray2, 1431655765, 557);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      Integer integer0 = new Integer((-1379));
      assertEquals((-1379), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(852);
      assertEquals(852, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(384);
      assertEquals(384, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertSame(intArray1, intArray0);
      
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-1379);
      intArray2[1] = 384;
      intArray2[2] = 975;
      intArray2[3] = 384;
      intArray2[4] = (-1379);
      intArray2[5] = 384;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray2);
      assertArrayEquals(new int[] {(-1379), 384, 975, 384, (-1379), 384}, intArray2);
      assertNotNull(integerArray0);
      assertEquals(6, intArray2.length);
      assertEquals(6, integerArray0.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)59;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)59);
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)59, (byte)59, (byte)59, (byte)59}, byteArray0);
      assertEquals(0, int0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 663.3;
      doubleArray0[1] = (-504.5);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-504.5));
      assertArrayEquals(new double[] {663.3, (-504.5)}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, 'G');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1979.3F;
      floatArray0[1] = 1979.3F;
      int int0 = ArrayUtils.indexOf(floatArray0, 1979.3F, 1);
      assertArrayEquals(new float[] {1979.3F, 1979.3F}, floatArray0, 0.01F);
      assertEquals(1, int0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = 'T';
      charArray0[2] = 'L';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'Z', 'T', 'L'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'T', 'L'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'L';
      intArray0[1] = (int) 'T';
      intArray0[2] = (int) 'Z';
      intArray0[3] = (int) 'T';
      intArray0[4] = (int) 'L';
      intArray0[5] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)77;
      Byte byte1 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)48;
      Byte byte3 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)63);
      assertEquals((byte)63, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1208L), (int) (byte)48);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(8, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      Double double0 = new Double((byte)48);
      assertEquals(48.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1678;
      intArray0[1] = (int) (byte)63;
      ArrayUtils.shift(intArray0, (-34));
      assertArrayEquals(new int[] {1678, 63}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (byte)77;
      doubleArray0[2] = (double) (-1208L);
      doubleArray0[3] = (double) byte0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 77.0, (-1208.0), 77.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) byte0;
      longArray1[1] = (long) 1678;
      longArray1[2] = (long) byte2;
      longArray1[3] = 0L;
      longArray1[4] = (long) 1678;
      longArray1[5] = (long) byte2;
      longArray1[6] = (long) 1678;
      longArray1[7] = 0L;
      longArray1[8] = 0L;
      ArrayUtils.shift(longArray1, (-1897), 63, 1678);
      assertArrayEquals(new long[] {48L, 1678L, 0L, 0L, 77L, 1678L, 48L, 0L, 1678L}, longArray1);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)95;
      ArrayUtils.swap(byteArray0, (int) (byte) (-5), (int) (byte) (-74), (int) (byte) (-42));
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-42), (byte)121, (byte)88, (byte) (-74), (byte)4, (byte)95}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      char char0 = 'K';
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap((char[]) null, 317, 317);
      byte byte0 = (byte)0;
      int int0 = (-2582);
      int int1 = 8;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ArrayUtils.swap(byteArray0, (-2582), 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 3384;
      intArray0[2] = 2374;
      intArray0[3] = 12;
      intArray0[5] = 2586;
      intArray0[6] = (-300);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1946784241);
      assertArrayEquals(new int[] {(-1), 3384, 2374, 12, 0, 2586, (-300)}, intArray0);
      assertArrayEquals(new int[] {(-1), 3384, 2374, 12, 0, 2586, (-300)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-1), 3384, 2374, 12, 0, 2586, (-300)}, intArray0);
      assertArrayEquals(new int[] {(-1), 3384, 2374, 12, 0, 2586, (-300)}, intArray2);
      assertNotNull(intArray2);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray2, intArray0);
      
      int[] intArray3 = ArrayUtils.removeElements(intArray0, intArray2);
      assertArrayEquals(new int[] {(-1), 3384, 2374, 12, 0, 2586, (-300)}, intArray0);
      assertArrayEquals(new int[] {(-1), 3384, 2374, 12, 0, 2586, (-300)}, intArray2);
      assertArrayEquals(new int[] {}, intArray3);
      assertNotNull(intArray3);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray2.length);
      assertEquals(0, intArray3.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte) (-122);
      byteArray0[8] = (byte)4;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0, (byte) (-53), (byte)1, (byte) (-10), (byte)1, (byte) (-53), (byte) (-122), (byte)4}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      
      ArrayUtils.reverse((double[]) null, 1, (int) (byte) (-10));
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) 0, (-1495));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      int int1 = ArrayUtils.indexOf(intArray0, (-1));
      assertArrayEquals(new int[] {(-1), (-1), 0}, intArray0);
      assertEquals(0, int1);
      assertEquals(3, intArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 0, 'I');
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0);
      assertNotNull(stringArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-25));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-25.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)113;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)113);
      assertArrayEquals(new byte[] {(byte)113, (byte)113}, byteArray0);
      assertArrayEquals(new byte[] {(byte)113, (byte)113, (byte)113}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)113;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-25);
      shortArray0[1] = (short) (byte)113;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)113);
      assertArrayEquals(new short[] {(short) (-25), (short)113}, shortArray0);
      assertArrayEquals(new short[] {(short) (-25)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)52);
      assertNull(byteArray0);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(3, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'k', (-1));
      assertArrayEquals(new char[] {'p', 'p', 'p', 'p'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(4, charArray0.length);
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf((short[]) null, (short)5, (-1));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (-2420L);
      longArray0[2] = (long) 'p';
      longArray0[3] = (long) (byte)52;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-3);
      longArray0[6] = (long) 'p';
      longArray0[7] = (long) (short)5;
      longArray0[8] = (long) (-3);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-1), (-1));
      assertArrayEquals(new long[] {(-1L), (-2420L), 112L, 52L, (-1L), (-3L), 112L, 5L, (-3L)}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(9, longArray0.length);
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 4}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 656;
      intArray0[1] = 73;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {656, 73}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-105);
      byteArray0[0] = (byte) (-105);
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Byte byte1 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-105), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte byte3 = ArrayUtils.get(byteArray1, (-186), byte2);
      assertEquals((byte) (-105), (byte)byte3);
      assertNotNull(byte3);
      assertEquals(4, byteArray1.length);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      Character character0 = new Character('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      Double[] doubleArray0 = new Double[0];
      ArrayUtils.shift((Object[]) doubleArray0, (-2538));
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte0);
      assertTrue(boolean0);
      
      ArrayUtils.shift(booleanArray0, (-1), 8192, 128);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = '?';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '?', (-3157));
      assertArrayEquals(new char[] {'?', 'q', 'q', '?'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 1, 1, 1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '%'}, charArray0);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Double double0 = new Double((byte)1);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 357.399;
      doubleArray2[1] = (double) (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, (double) (byte)1, (int) (byte)1);
      assertArrayEquals(new double[] {357.399, 1.0}, doubleArray2, 0.01);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray2.length);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[15];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-40));
      assertNotNull(byteArray1);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArray1.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte) (-74));
      assertNotNull(byteArray2);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArray1.length);
      assertEquals(15, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (long) 0, (-1637));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1123L));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      Byte byte0 = new Byte((byte)24);
      assertEquals((byte)24, (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)24;
      intArray0[1] = (int) (byte)24;
      intArray0[2] = 24;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 24, 122);
      assertArrayEquals(new int[] {24, 24, 24}, intArray0);
      assertEquals(2, int0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[4];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'F';
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-695));
      assertArrayEquals(new int[] {70, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-695), 70, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'F';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 762.4448, 1017.8409823830631);
      assertArrayEquals(new double[] {70.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      
      Byte[] byteArray2 = new Byte[0];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[5];
      ArrayUtils.swap(floatArray1, 1, 12, (-134));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences((long[]) null, (long) 12);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray1 = ArrayUtils.insert(7, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Integer[] integerArray0 = new Integer[0];
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null, (-1800));
      assertEquals((-1), int0);
      assertEquals(0, integerArray0.length);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)2368);
      assertEquals((short)2368, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1149));
      assertEquals((short) (-1149), (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = Short.valueOf((short)744);
      assertEquals((short)744, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      short short3 = (short)2;
      Short short4 = new Short((short)2);
      assertEquals((short)2, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short3));
      
      shortArray0[3] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)109);
      assertArrayEquals(new short[] {(short)2368, (short) (-1149), (short)744, (short)2}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short)69, (int) short3);
      assertArrayEquals(new short[] {(short)2368, (short) (-1149), (short)744, (short)2}, shortArray1);
      assertEquals((-1), int1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1), (-1), (-1));
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 594.51751317);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = 113L;
      longArray0[2] = (long) (-1);
      longArray0[3] = 2762L;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertArrayEquals(new long[] {(-1L), 113L, (-1L), 2762L, (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), 113L, (-1L), 2762L, (-1L), (-1L), (-1L), (-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)454;
      shortArray0[1] = (short) (-27113);
      shortArray0[2] = (short)114;
      shortArray0[3] = (short) (-42);
      shortArray0[4] = (short)807;
      shortArray0[5] = (short)6;
      shortArray0[6] = (short)97;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-331);
      doubleArray0[1] = (double) 82;
      ArrayUtils.swap(doubleArray0, 97, (-1941), (-1941));
      assertArrayEquals(new double[] {(-331.0), 82.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1541, (-1941));
      assertArrayEquals(new double[] {(-331.0), 82.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-4247.018689), (-3395), (-14552.0));
      assertArrayEquals(new double[] {(-331.0), 82.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 82.0;
      doubleArray1[1] = (Double) (-331.0);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2210, 1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1175L);
      longArray0[1] = (-130L);
      longArray0[2] = 1825L;
      longArray0[3] = (-2084L);
      longArray0[4] = 1393L;
      longArray0[5] = (-1L);
      longArray0[6] = (-1L);
      longArray0[7] = 1237L;
      ArrayUtils.shift(longArray0, (-2146441792), 2, 111);
      assertArrayEquals(new long[] {(-130L), (-1175L), 1825L, (-2084L), 1393L, (-1L), (-1L), 1237L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      Byte byte0 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 488;
      longArray0[1] = 96L;
      longArray0[2] = (long) 488;
      longArray0[3] = (long) 488;
      longArray0[4] = (long) 0;
      longArray0[5] = 0L;
      longArray0[6] = (long) (byte)44;
      longArray0[7] = 0L;
      longArray0[8] = 0L;
      ArrayUtils.shift(longArray0, (-1497), 1, (int) (byte)44);
      assertArrayEquals(new long[] {488L, 96L, 488L, 488L, 0L, 0L, 44L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte) (-38));
      assertEquals((byte) (-38), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {488L, 96L, 488L, 488L, 0L, 0L, 44L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {488L, 96L, 488L, 488L, 0L, 0L, 44L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-1497), (int) (byte)97, 56);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1497);
      intArray0[1] = 0;
      intArray0[2] = 2146900713;
      intArray0[3] = 0;
      intArray0[4] = 1988;
      intArray0[5] = (int) (byte)44;
      intArray0[6] = (int) (byte)97;
      intArray0[7] = (int) (byte) (-38);
      intArray0[8] = (-1497);
      int int0 = ArrayUtils.indexOf(intArray0, 2146900713);
      assertArrayEquals(new int[] {(-1497), 0, 2146900713, 0, 1988, 44, 97, (-38), (-1497)}, intArray0);
      assertEquals(2, int0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      Byte byte0 = new Byte((byte)62);
      assertEquals((byte)62, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)88);
      assertFalse(boolean0);
      
      ArrayUtils.shift((byte[]) null, (int) (byte)88);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)62;
      doubleArray0[1] = (double) (byte)62;
      doubleArray0[2] = (double) (byte)88;
      doubleArray0[3] = (double) (byte)62;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)88;
      doubleArray1[1] = (double) (byte)88;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {62.0, 62.0, 88.0, 62.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {88.0, 88.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {62.0, 62.0, 62.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)88;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      doubleArray0[3] = (double) (byte)62;
      floatArray1[1] = (float) (byte)88;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertArrayEquals(new float[] {88.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 88.0F}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-21);
      floatArray0[1] = (float) (-21);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) (-21);
      floatArray0[4] = (float) (-21);
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      ArrayUtils.shift(floatArray0, 2144561225);
      assertArrayEquals(new float[] {1.0F, 1.0F, (-21.0F), (-21.0F), (-1.0F), (-21.0F), (-21.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {1.0F, 1.0F, (-21.0F), (-21.0F), (-1.0F), (-21.0F), (-21.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)112;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte)112}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(336L);
      assertEquals(336L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Float[] floatArray1 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, (int) (byte)112, 1);
      assertArrayEquals(new float[] {1.0F, 1.0F, (-21.0F), (-21.0F), (-1.0F), (-21.0F), (-21.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      
      Byte byte5 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Double double0 = new Double(byte0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'b', 'b', 'b'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      Byte[] byteArray0 = new Byte[15];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      ArrayUtils.shift((char[]) null, 128, 884257973, (-72));
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      Float float0 = new Float(1767.9338359381);
      assertEquals(1767.9338F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 0L);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((float) 0L);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float((float) 0L);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      Float float4 = new Float(1767.9338359381);
      assertEquals(1767.9338F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      
      Float float5 = new Float(15.0F);
      assertEquals(15.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float2;
      floatArray0[1] = float0;
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F, 1767.9338F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = '#';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'o');
      assertArrayEquals(new char[] {'^', '#', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)1640);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1640}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      int[] intArray0 = new int[5];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert((-1873), charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-572);
      shortArray0[1] = (short)14;
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-44));
      assertEquals((byte) (-44), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-94));
      assertEquals((byte) (-94), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte6);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte3));
      
      byteArray0[5] = byte6;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, 2, byte3);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte4));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte5));
      assertTrue(byte3.equals((Object)byte6));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray1, 2147045816);
      assertFalse(boolean0);
      assertEquals(7, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte4));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte5));
      assertTrue(byte3.equals((Object)byte6));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-94), (-1884));
      assertArrayEquals(new short[] {(short) (-572), (short)14, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-2402L);
      long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertArrayEquals(new long[] {(-2402L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-2402L), (-2402L), 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      long[] longArray0 = new long[3];
      longArray0[0] = 388L;
      longArray0[1] = (-1L);
      longArray0[2] = (long) (-1);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
      assertArrayEquals(new long[] {388L, (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 0.0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1362;
      shortArray1[1] = (short)347;
      shortArray1[2] = (short)2;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1362, (short)347, (short)2}, shortArray1);
      assertFalse(boolean1);
      assertEquals(0, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-72.555305F);
      floatArray0[1] = 1643.3F;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte byte0 = new Byte((byte) (-56));
      assertEquals((byte) (-56), (byte)byte0);
      assertNotNull(byte0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "-/z*5jbjN-;VQ$a");
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertArrayEquals(new float[] {(-72.555305F), 1643.3F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {(-72.555305F), 1643.3F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-56);
      doubleArray0[1] = (double) 1643.3F;
      doubleArray0[2] = (double) (-72.555305F);
      doubleArray0[3] = (double) 1643.3F;
      doubleArray0[4] = (double) (-72.555305F);
      doubleArray0[5] = (double) 1643.3F;
      doubleArray0[6] = (double) (-72.555305F);
      doubleArray0[7] = (double) (byte) (-56);
      doubleArray0[8] = (double) (byte) (-56);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-56.0), 1643.300048828125, (-72.55530548095703), 1643.300048828125, (-72.55530548095703), 1643.300048828125, (-72.55530548095703), (-56.0), (-56.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, (int) (byte)0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3.0;
      doubleArray1[2] = (double) 9;
      boolean boolean1 = ArrayUtils.contains(doubleArray1, 0.0, 0.7);
      assertArrayEquals(new double[] {0.0, 3.0, 9.0}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      double[] doubleArray2 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(2, intArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (short)0;
      ArrayUtils.swap(shortArray0, (-2212), (int) (short)0, (-1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ArrayUtils.swap(byteArray0, (int) (short)0, 0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      Byte byte0 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte0);
      assertNotNull(byte0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long long0 = new Long((-1495L));
      assertEquals((-1495L), (long)long0);
      assertNotNull(long0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-808.0F);
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) 0L;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-808.0F));
      assertArrayEquals(new float[] {(-808.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Float float0 = new Float((double) 13);
      assertEquals(13.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray2 = new Float[0];
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2, (-808.0F));
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((short) (-3488));
      assertEquals((short) (-3488), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short) (-3488), (short)short1);
      assertNotNull(short1);
      assertEquals(8, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)0);
      assertEquals((short)0, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-65));
      assertEquals((short) (-65), (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      
      shortArray0[4] = short4;
      Short short5 = new Short((byte)5);
      assertEquals((short)5, (short)short5);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)59);
      assertEquals((short)59, (short)short6);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      
      shortArray0[6] = short6;
      try { 
        Short.decode(";{k?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";{k?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)1;
      double[] doubleArray1 = ArrayUtils.insert((int) (byte)1, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-803.55615F);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-803.55615F), Float.NaN}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-89);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)2293;
      ArrayUtils.reverse((boolean[]) null);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (short) (-89));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-803.55615F), Float.NaN}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(5014.916);
      assertEquals(5014.916, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 5014.916);
      assertArrayEquals(new double[] {5014.916}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      Long long2 = new Long((-3390L));
      assertEquals((-3390L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)110;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 8);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<Byte> class5 = Byte.class;
      classArray0[5] = class5;
      Class<Byte> class6 = Byte.class;
      classArray0[6] = class6;
      Class<Byte> class7 = Byte.class;
      classArray0[7] = class7;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(8, classArray0.length);
      assertEquals(8, classArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)0, (byte)110, (byte)52, (byte)110, (byte)110, (byte)110}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)110;
      intArray0[1] = (-2121918365);
      intArray0[2] = (int) (byte)52;
      intArray0[3] = (int) (byte)110;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)110;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)110;
      int int0 = ArrayUtils.indexOf(intArray0, 110, (-1474));
      assertArrayEquals(new int[] {110, (-2121918365), 52, 110, 0, 110, 0, 110}, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      
      Byte[] byteArray1 = ArrayUtils.addFirst((Byte[]) null, byte4);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      
      ArrayUtils.reverse((float[]) null);
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = 'I';
      charArray0[2] = 'E';
      charArray0[3] = 't';
      charArray0[4] = 'O';
      charArray0[5] = '(';
      charArray0[6] = 'E';
      charArray0[7] = '`';
      charArray0[8] = 'E';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '(');
      assertArrayEquals(new char[] {'?', 'I', 'E', 't', 'O', 'E', '`', 'E'}, charArray1);
      assertArrayEquals(new char[] {'?', 'I', 'E', 't', 'O', '(', 'E', '`', 'E'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 126.0F;
      floatArray0[1] = (float) (byte)52;
      floatArray0[2] = 126.0F;
      floatArray0[3] = (float) (byte)52;
      floatArray0[4] = (float) (byte)52;
      floatArray0[5] = 126.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 106.0F);
      assertArrayEquals(new float[] {126.0F, 52.0F, 126.0F, 52.0F, 52.0F, 126.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {126.0F, 52.0F, 126.0F, 52.0F, 52.0F, 126.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.reverse((float[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 126.0F;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-719.7545727539529);
      doubleArray0[4] = (double) 126.0F;
      doubleArray0[5] = (double) 52.0F;
      doubleArray0[6] = 972.3879809863744;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 104.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1642.5, 35);
      assertArrayEquals(new double[] {1.0, 126.0, 0.0, (-719.7545727539529), 126.0, 52.0, 972.3879809863744, 1.0, 104.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.insert(2440, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte)52);
      assertArrayEquals(new float[] {126.0F, 52.0F, 126.0F, 52.0F, 52.0F, 126.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      Byte byte0 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte0);
      assertNotNull(byte0);
      
      Character character0 = new Character('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('[');
      assertEquals('[', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      Character character2 = Character.valueOf('G');
      assertEquals('G', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<Byte> class5 = Byte.class;
      classArray0[5] = class5;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray1.length);
      assertEquals(6, classArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'G';
      long[] longArray1 = ArrayUtils.insert((int) character0, (long[]) null, longArray0);
      assertArrayEquals(new long[] {71L}, longArray0);
      assertNull(longArray1);
      assertEquals(1, longArray0.length);
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character1));
      
      long[] longArray2 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {71L}, longArray0);
      assertArrayEquals(new long[] {71L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) 71L);
      assertNull(doubleArray0);
      
      Short short0 = new Short((short)288);
      assertEquals((short)288, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, 1061, 1061, 1061);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1061;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 889;
      doubleArray0[4] = (double) 100;
      doubleArray0[5] = (double) 889;
      doubleArray0[6] = (double) 100;
      doubleArray0[7] = (double) 'T';
      doubleArray0[8] = (double) 100;
      float[] floatArray1 = new float[2];
      floatArray1[0] = (float) 'T';
      floatArray1[1] = 1.0F;
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertArrayEquals(new float[] {84.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {84.0F, 1.0F}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      
      int int0 = ArrayUtils.indexOf(floatArray1, 1.0F);
      assertArrayEquals(new float[] {84.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(1, int0);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray1, floatArray2);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(889);
      assertEquals(889L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertEquals(889L, (long)long1);
      assertNotNull(long1);
      assertEquals(2, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      Byte byte0 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertSame(booleanArray0, booleanArray1);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1664L;
      longArray0[1] = (long) 5;
      longArray0[2] = (long) (byte)14;
      longArray0[3] = (long) (byte)14;
      longArray0[4] = (long) 5;
      longArray0[5] = (long) (byte)14;
      longArray0[6] = (long) (byte)13;
      longArray0[7] = 0L;
      longArray0[8] = (long) (byte)14;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 144);
      assertArrayEquals(new long[] {1664L, 5L, 14L, 14L, 5L, 14L, 13L, 0L, 14L}, longArray0);
      assertEquals(7, int0);
      assertEquals(9, longArray0.length);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)13;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)14, (byte)13}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = 'z';
      charArray0[2] = ',';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {'+', 'z', ','}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '+';
      intArray0[1] = (int) '+';
      int int0 = ArrayUtils.indexOf(intArray0, 43, 43);
      assertArrayEquals(new int[] {43, 43}, intArray0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2396;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (-1));
      assertArrayEquals(new short[] {(short)0, (short)2396}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(2, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-809), (int) (short)0);
      assertArrayEquals(new int[] {43, 43}, intArray0);
      assertEquals((-1), int1);
      assertEquals(2, intArray0.length);
      assertTrue(int1 == int0);
      
      byte byte0 = (byte)48;
      Byte byte1 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)48, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte byte3 = ArrayUtils.get(byteArray0, (-1), byte2);
      assertEquals((byte)48, (byte)byte3);
      assertNotNull(byte3);
      assertEquals(4, byteArray0.length);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)48, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0, (-1));
      assertNotNull(bitSet1);
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray1);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)48}, byteArray1);
      assertNotNull(byteBuffer0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(3, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      
      BitSet bitSet2 = BitSet.valueOf(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)48}, byteArray1);
      assertNotNull(bitSet2);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(3, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertEquals(22, bitSet2.length());
      assertEquals("{4, 5, 12, 13, 20, 21}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertEquals(6, bitSet2.cardinality());
      assertFalse(bitSet2.isEmpty());
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      
      Byte byte5 = new Byte(byte0);
      assertEquals((byte)48, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte3));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte5, bitSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int int0 = 97;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 97;
      ArrayUtils.shift(floatArray0, (-1), 2532, (-1165));
      assertArrayEquals(new float[] {0.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '%');
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.reverse((Object[]) integerArray0, 2119227284, 1370);
      assertEquals(0, integerArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byte byte0 = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)85;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1165), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1165, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, (byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(13, byteArray0.length);
      assertEquals(13, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '7');
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)8192;
      shortArray0[1] = (short) (byte)120;
      shortArray0[2] = (short) (-191);
      shortArray0[3] = (short)8192;
      shortArray0[4] = (short) (byte)120;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-191), (int) (short)8192);
      assertArrayEquals(new short[] {(short)8192, (short)120, (short) (-191), (short)8192, (short)120}, shortArray0);
      assertEquals(2, int0);
      assertEquals(5, shortArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)120;
      longArray0[1] = (long) '7';
      longArray0[2] = 388L;
      longArray0[3] = 388L;
      longArray0[4] = (long) (short)120;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-191), (-3145));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {120L, 55L, 388L, 388L, 120L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1077.2F);
      floatArray0[1] = (float) 2;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1132.7235F, 56);
      assertArrayEquals(new float[] {(-1077.2F), 2.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(2, floatArray0.length);
      assertFalse(int1 == int0);
      
      Long[] longArray2 = new Long[4];
      longArray2[0] = (Long) 120L;
      Long long0 = new Long(1973L);
      assertEquals(1973L, (long)long0);
      assertNotNull(long0);
      
      longArray2[1] = long0;
      longArray2[2] = (Long) 388L;
      longArray2[3] = (Long) 55L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertArrayEquals(new long[] {120L, 1973L, 388L, 55L}, longArray3);
      assertNotNull(longArray3);
      assertEquals(4, longArray2.length);
      assertEquals(4, longArray3.length);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[0] = ',';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '+';
      intArray0[1] = (int) '+';
      Float float0 = new Float((-2351.3844848));
      assertEquals((-2351.3845F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) '+');
      assertEquals(43.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((float) ',');
      assertEquals(44.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float((float) 'z');
      assertEquals(122.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Float float4 = new Float(0.0);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      Float float5 = new Float(3902.1F);
      assertEquals(3902.1F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float2;
      floatArray0[1] = float1;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) ',';
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-4172), 2075177801);
      assertArrayEquals(new long[] {44L}, longArray1);
      assertArrayEquals(new long[] {44L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayUtils.swap((boolean[]) null, 144, 2588, (-1403));
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(doubleArray0, 2633, (-1626), 5);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) 2727;
      floatArray1[1] = (float) (-1403);
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 5;
      floatArray2[1] = (float) 2633;
      floatArray2[2] = (float) 2774;
      floatArray2[3] = (float) 2774;
      floatArray2[4] = (float) 5;
      floatArray2[5] = (float) 2727;
      int int0 = ArrayUtils.lastIndexOf(floatArray2, 2633.0F);
      assertArrayEquals(new float[] {5.0F, 2633.0F, 2774.0F, 2774.0F, 5.0F, 2727.0F}, floatArray2, 0.01F);
      assertEquals(1, int0);
      assertEquals(6, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray2, floatArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      
      byteArray0[4] = byte5;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(765).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = '.';
      Character character0 = Character.valueOf('.');
      assertEquals('.', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('.');
      assertEquals('.', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertEquals('.', (char)character2);
      assertNotNull(character2);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertEquals('.', (char)character3);
      assertNotNull(character3);
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)char0));
      
      characterArray0[3] = character3;
      Character character4 = new Character('.');
      assertEquals('.', (char)character4);
      assertNotNull(character4);
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)char0));
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertArrayEquals(new char[] {'.', '.', '.', '.', '.'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'.', '.', '.', '.', '.'}, charArray0);
      assertTrue(boolean0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)8192;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-191), (int) character4);
      assertArrayEquals(new short[] {(short)8192}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)char0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)8192;
      longArray0[1] = (long) (char)character3;
      longArray0[2] = (long) (-1);
      longArray0[3] = (-1L);
      longArray0[4] = (long) char0;
      longArray0[5] = (long) (char)character1;
      longArray0[6] = 388L;
      longArray0[7] = (long) char0;
      longArray0[8] = (long) (char)character1;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) char0, (-1));
      assertArrayEquals(new long[] {8192L, 46L, (-1L), (-1L), 46L, 46L, 388L, 46L, 46L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-1L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)15, 2088469709);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 388L;
      longArray0[1] = 388L;
      longArray0[2] = 2526L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (-1));
      assertArrayEquals(new long[] {388L, 388L, 2526L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[3] = 0L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2, 18688);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[2] = byte2;
      byteArray0[3] = (Byte) byte0;
      double[] doubleArray0 = new double[15];
      ArrayUtils.reverse(doubleArray0);
      assertEquals(15, doubleArray0.length);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-77);
      byteArray1[1] = byte0;
      byteArray1[2] = (byte)0;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-77), (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) byte0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-4172), (-1));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)867;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2167.966871058);
      doubleArray0[1] = (double) (short)867;
      doubleArray0[1] = (double) (-1630);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2167.966871058), (-1630.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1630);
      intArray0[1] = (int) (short)867;
      intArray0[2] = (-1630);
      intArray0[3] = (int) (short)867;
      intArray0[4] = (int) (short)867;
      intArray0[5] = (int) (short)867;
      intArray0[6] = 1519;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-1630), 867, (-1630), 867, 867, 867, 1519}, intArray0);
      assertFalse(boolean0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      int[] intArray0 = new int[15];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(15, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      int[] intArray0 = new int[4];
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      intArray0[0] = 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 97;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0.0F;
      intArray0[1] = 0;
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)6;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)114;
      Byte byte3 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte2);
      assertEquals((byte)114, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte2 == byte0);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      
      byteArray0[3] = byte5;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) byte0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte0 == byte2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Byte byte6 = ArrayUtils.get(byteArray1, 82);
      assertNull(byte6);
      assertEquals(3, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byte0 == byte2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      Byte[] byteArray2 = ArrayUtils.removeElement(byteArray0, (Object) null);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray2.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      
      ArrayUtils.swap(floatArray0, 12, 12, (int) byte2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 97.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertFalse(byte2 == byte0);
      
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = byte2;
      byteArray3[1] = byte2;
      byte[] byteArray4 = ArrayUtils.removeElement(byteArray3, (byte)114);
      assertArrayEquals(new byte[] {(byte)114, (byte)114}, byteArray3);
      assertArrayEquals(new byte[] {(byte)114}, byteArray4);
      assertNotNull(byteArray4);
      assertEquals(2, byteArray3.length);
      assertEquals(1, byteArray4.length);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray3);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 889, 108.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 889, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-372.26233F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1755.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 5.0F);
      assertArrayEquals(new float[] {1.0F, (-372.26233F), 0.0F, 1755.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-372.26233F), 0.0F, 1755.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-372.26233F);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-372.2623291015625));
      assertArrayEquals(new double[] {(-372.2623291015625)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = 1690572233;
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte) (-106));
      assertEquals((byte) (-106), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      try { 
        Byte.valueOf("", 1690572233);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1690572233 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)106;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)106;
      floatArray0[1] = (float) (byte)106;
      floatArray0[2] = (float) (byte)106;
      floatArray0[3] = (float) (byte)106;
      floatArray0[4] = (float) (byte)106;
      floatArray0[5] = (float) (byte)106;
      floatArray0[6] = (float) (byte)106;
      floatArray0[7] = (float) (byte)106;
      int int0 = ArrayUtils.indexOf(floatArray0, (-189.0F), (-20));
      assertArrayEquals(new float[] {106.0F, 106.0F, 106.0F, 106.0F, 106.0F, 106.0F, 106.0F, 106.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)106;
      shortArray0[1] = (short) (byte)106;
      shortArray0[2] = (short) (byte)106;
      shortArray0[3] = (short) (byte)106;
      shortArray0[4] = (short) (byte)106;
      shortArray0[5] = (short) (byte)106;
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 3673, 69, (-947));
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1685);
      assertEquals(1685, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      integerArray0[2] = integerArray0[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {1685, 1685, 1685}, intArray0);
      assertNotNull(intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (int)integerArray0[1];
      floatArray0[1] = (float) (-947);
      floatArray0[2] = (float) 69;
      floatArray0[3] = (float) (-947);
      floatArray0[4] = (float) (int)integerArray0[2];
      floatArray0[5] = (float) (int)integerArray0[1];
      floatArray0[6] = (float) 69;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertArrayEquals(new float[] {1685.0F, (-947.0F), 69.0F, (-947.0F), 1685.0F, 1685.0F, 69.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)15;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = 178L;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = 3065L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 178L, 0L, 3065L}, longArray0);
      assertFalse(boolean0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)15;
      shortArray0[1] = (short) (byte)15;
      shortArray0[3] = (short) (byte)15;
      shortArray0[4] = (short) (-47);
      shortArray0[5] = (short) (byte)15;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), 396);
      assertArrayEquals(new short[] {(short)15, (short)15, (short)0, (short)15, (short) (-47), (short)15}, shortArray1);
      assertArrayEquals(new short[] {(short)15, (short)15, (short)0, (short)15, (short) (-47), (short)15}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2899.13643855917, 488);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((double[]) null, Integer.MAX_VALUE);
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)52);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, false, 5267);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.shift(longArray0, (-425), (-425), 50);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = '6';
      charArray0[2] = 'i';
      charArray0[3] = 'Q';
      charArray0[4] = '%';
      charArray0[5] = '^';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {'m', '6', 'i', 'Q', '%', '^'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = (Character) 'm';
      characterArray0[1] = (Character) 'i';
      characterArray0[2] = (Character) '6';
      characterArray0[3] = (Character) 'm';
      characterArray0[4] = (Character) '%';
      Character character0 = Character.valueOf('v');
      assertEquals('v', (char)character0);
      assertNotNull(character0);
      
      characterArray0[5] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(6, characterArray1.length);
      assertEquals(6, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-25);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short) (-1729);
      shortArray0[2] = (short)3;
      shortArray0[3] = (short) (-306);
      shortArray0[4] = (short) (byte) (-25);
      shortArray0[5] = (short) (-306);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-306);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3, (int) (short) (-1729));
      assertArrayEquals(new short[] {(short)3, (short) (-1729), (short)3, (short) (-306), (short) (-25), (short) (-306), (short)0, (short) (-306)}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(8, shortArray0.length);
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short)3, 2146711198);
      assertArrayEquals(new int[] {(-25), 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)3, (-1065));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = '$';
      charArray0[2] = '(';
      charArray0[3] = 'R';
      charArray0[4] = '#';
      charArray0[5] = '=';
      charArray0[6] = 'k';
      charArray0[7] = '8';
      int int1 = ArrayUtils.indexOf(charArray0, 'E', (int) (short)0);
      assertArrayEquals(new char[] {'E', '$', '(', 'R', '#', '=', 'k', '8'}, charArray0);
      assertEquals(0, int1);
      assertEquals(8, charArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)666);
      assertArrayEquals(new int[] {666}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = (-75L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, (-75L)}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, (-75L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 470);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(intArray1, intArray0);
      
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 470;
      intArray2[1] = 470;
      intArray2[2] = 470;
      intArray2[3] = 470;
      intArray2[4] = 426;
      intArray2[5] = 470;
      intArray2[6] = (-1254);
      int[] intArray3 = ArrayUtils.removeElements(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {470, 470, 470, 470, 426, 470, (-1254)}, intArray3);
      assertArrayEquals(new int[] {470, 470, 470, 470, 426, 470, (-1254)}, intArray2);
      assertNotNull(intArray3);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(7, intArray3.length);
      assertEquals(7, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      Byte byte0 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "QLW2B8N8|utZBsooN>");
      assertEquals("65", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      Byte byte0 = new Byte((byte)24);
      assertEquals((byte)24, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)24);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2142512621;
      intArray0[1] = (int) (byte)24;
      intArray0[2] = (int) (byte)24;
      intArray0[3] = (int) (byte)24;
      intArray0[4] = (-993);
      intArray0[5] = (-3431);
      intArray0[6] = (int) (byte)24;
      intArray0[7] = (int) (byte)24;
      intArray0[8] = (int) (byte)24;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertArrayEquals(new int[] {2142512621, 24, 24, 24, (-993), (-3431), 24, 24, 24}, intArray1);
      assertArrayEquals(new int[] {2142512621, 24, 24, 24, (-993), (-3431), 24, 24, 24}, intArray0);
      assertNotNull(intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-25));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-25.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)113;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)113);
      assertArrayEquals(new byte[] {(byte)113, (byte)113}, byteArray0);
      assertArrayEquals(new byte[] {(byte)113, (byte)113, (byte)113}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)113;
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)113;
      Byte[] byteArray3 = ArrayUtils.toObject(byteArray2);
      assertArrayEquals(new byte[] {(byte)113}, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray3.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)113, 2);
      assertArrayEquals(new byte[] {(byte)113, (byte)113}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(2, byteArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-83));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true}, booleanArray0));
      assertEquals(3, int0);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Byte byte0 = ArrayUtils.get(byteArray0, 0);
      assertNull(byte0);
      assertEquals(0, byteArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      String string0 = ArrayUtils.toString((Object) null, "java.lang.Boolean");
      assertEquals("java.lang.Boolean", string0);
      assertNotNull(string0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      
      long[] longArray2 = ArrayUtils.insert(0, longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray2);
      assertEquals(14, longArray2.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (-688.0F);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Byte byte0 = new Byte((byte)11);
      assertEquals((byte)11, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (-2996), (int) (byte)0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 38);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(59, byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 3384;
      intArray0[2] = 2374;
      intArray0[3] = 12;
      intArray0[4] = (-222);
      intArray0[5] = 2586;
      intArray0[6] = (-300);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1946784241);
      assertArrayEquals(new int[] {(-1), 3384, 2374, 12, (-222), 2586, (-300)}, intArray0);
      assertArrayEquals(new int[] {(-1), 3384, 2374, 12, (-222), 2586, (-300)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-1), 3384, 2374, 12, (-222), 2586, (-300)}, intArray0);
      assertArrayEquals(new int[] {(-1), 3384, 2374, 12, (-222), 2586, (-300)}, intArray2);
      assertNotNull(intArray2);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray2, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-300);
      doubleArray0[1] = (double) 2374;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-300.0), 2374.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray3 = ArrayUtils.removeElements(intArray0, intArray2);
      assertArrayEquals(new int[] {(-1), 3384, 2374, 12, (-222), 2586, (-300)}, intArray0);
      assertArrayEquals(new int[] {(-1), 3384, 2374, 12, (-222), 2586, (-300)}, intArray2);
      assertArrayEquals(new int[] {}, intArray3);
      assertNotNull(intArray3);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray2.length);
      assertEquals(0, intArray3.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-122);
      byteArray0[8] = (byte)4;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0, (byte) (-53), (byte)1, (byte) (-10), (byte)1, (byte)0, (byte) (-122), (byte)4}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)28;
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 28.0;
      doubleArray1[1] = (Double) 28.0;
      doubleArray1[2] = (Double) 28.0;
      doubleArray1[4] = (Double) 28.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, (int) (byte)28, (double) doubleArray1[1]);
      assertArrayEquals(new double[] {28.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      Byte byte0 = new Byte((byte)28);
      assertEquals((byte)28, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray1, (Object) byte0, 0);
      assertEquals((-1), int1);
      assertEquals(8, doubleArray1.length);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)28;
      shortArray0[1] = (short) (byte)28;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) doubleArray1[4]);
      assertArrayEquals(new double[] {28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)28;
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 28.0;
      doubleArray1[1] = (Double) 28.0;
      doubleArray1[2] = (Double) 28.0;
      doubleArray1[4] = (Double) 28.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, (int) (byte)28, (double) doubleArray1[1]);
      assertArrayEquals(new double[] {28.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      Byte byte0 = new Byte((byte)28);
      assertEquals((byte)28, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray1, (Object) byte0, 0);
      assertEquals((-1), int1);
      assertEquals(8, doubleArray1.length);
      assertFalse(int1 == int0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) doubleArray1[4];
      doubleArray2[1] = 3.0;
      doubleArray2[2] = (double) 9;
      boolean boolean0 = ArrayUtils.contains(doubleArray2, 0.0, 0.7);
      assertArrayEquals(new double[] {28.0, 3.0, 9.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)28;
      shortArray0[1] = (short) (byte)28;
      shortArray0[2] = (short) (byte)28;
      shortArray0[3] = (short) (byte)28;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)28, (short)28, (short)28, (short)28}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)28;
      intArray0[1] = (int) (short)28;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 28, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, (int) (byte)0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 9;
      longArray0[1] = (long) 9;
      longArray0[2] = 0L;
      longArray0[3] = (long) 9;
      longArray0[4] = (long) 9;
      longArray0[5] = (-1451L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertArrayEquals(new long[] {9L, 9L, 0L, 9L, 9L, (-1451L)}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(6, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1L), (int) (byte)0);
      assertArrayEquals(new long[] {9L, 9L, 0L, 9L, 9L, (-1451L)}, longArray0);
      assertEquals((-1), int1);
      assertEquals(6, longArray0.length);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean1);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) (-1451L));
      assertEquals((-1451.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertEquals((-1451.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals(2, floatArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1451.0F), (-1451.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 13;
      intArray0[1] = (int) 'b';
      intArray0[3] = (int) 'b';
      intArray0[5] = (-1515);
      intArray0[7] = (-383);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 107);
      assertArrayEquals(new int[] {13, 98, 0, 98, 0, (-1515), 0, (-383)}, intArray0);
      assertArrayEquals(new int[] {107, 13, 98, 0, 98, 0, (-1515), 0, (-383)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 98, (double) (-383));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 13;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, (-115));
      assertArrayEquals(new float[] {13.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'h');
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 13.0F;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, ")X(t@zP:[%Z]kip.0");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      Long long2 = new Long((-3390L));
      assertEquals((-3390L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)110;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)108);
      assertArrayEquals(new byte[] {(byte)110, (byte)0, (byte)110, (byte)52, (byte)110, (byte)110, (byte)110}, byteArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)0, (byte)110, (byte)52, (byte)110, (byte)110, (byte)110}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)110, (byte)0, (byte)110, (byte)52, (byte)110, (byte)110, (byte)110}, byteArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)0, (byte)110, (byte)52, (byte)110, (byte)110, (byte)110}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(14, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      ArrayUtils.shift(byteArray1, 0, 1621, (int) (byte)110);
      assertArrayEquals(new byte[] {(byte)110, (byte)0, (byte)110, (byte)52, (byte)110, (byte)110, (byte)110}, byteArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)52, (byte)110, (byte)110, (byte)110, (byte)110, (byte)0}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-25);
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 2689, 657);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-626L));
      assertEquals((-626L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)57);
      assertEquals((byte)57, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse((boolean[]) null, (int) (byte)57, (int) (byte)57);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null, 4030, 1615);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[15];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)43, (int) byte0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = new byte[0];
      boolean boolean2 = ArrayUtils.isSameLength(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertTrue(boolean2);
      assertEquals(0, byteArray1.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 41;
      intArray0[1] = (int) (byte) (-43);
      int[] intArray1 = ArrayUtils.insert((int) (short)0, intArray0, intArray0);
      assertArrayEquals(new int[] {41, (-43)}, intArray0);
      assertArrayEquals(new int[] {41, (-43), 41, (-43)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[3];
      intArray0[0] = (-43);
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) (byte)79;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)0, 1078);
      assertArrayEquals(new double[] {0.0, 0.0, 79.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      float[] floatArray0 = new float[8];
      floatArray0[2] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (-688.0F);
      byteArray0[0] = (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (-688.0F);
      floatArray0[7] = (-2147.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-688.0F));
      assertArrayEquals(new float[] {0.0F, 0.0F, (-688.0F), 0.0F, 0.0F, 0.0F, (-688.0F), (-2147.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(8, floatArray0.length);
      assertEquals(7, bitSet0.length());
      assertEquals("{2, 6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      Object[] objectArray0 = new Object[3];
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertEquals((byte)0, object0);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) (-688.0F);
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], (int) (byte)0);
      assertNotNull(bitSet1);
      assertEquals(3, objectArray0.length);
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(2, bitSet1.length());
      assertEquals("{1}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[1], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      Byte byte0 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte0);
      assertNotNull(byte0);
      
      Character character0 = Character.valueOf('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('[');
      assertEquals('[', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character[] characterArray0 = new Character[2];
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2576);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-26));
      assertArrayEquals(new short[] {(short) (-2576)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-26), (short) (-2576)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.swap((Object[]) characterArray0, 0, (int) (short) (-3201), (int) (short)30706);
      assertEquals(2, characterArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      byte[] byteArray1 = ArrayUtils.insert(2603, (byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75)}, byteArray0);
      assertNull(byteArray1);
      assertEquals(1, byteArray0.length);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte byte5 = ArrayUtils.get(byteArray0, (int) 0, byte4);
      assertEquals((byte)0, (byte)byte5);
      assertNotNull(byte5);
      assertEquals(5, byteArray0.length);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Double double0 = new Double(byte0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(byte0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)120, (int) (byte)120);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-572);
      shortArray0[1] = (short)14;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-572);
      floatArray0[1] = (float) (short) (-572);
      floatArray0[2] = 113.0F;
      floatArray0[3] = (float) (short)14;
      floatArray0[4] = (float) (short)14;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-572.0F), (-572.0F), 113.0F, 14.0F, 14.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-572), (int) (short) (-572));
      assertArrayEquals(new short[] {(short) (-572), (short)14, (short)0, (short)0}, shortArray0);
      assertEquals(0, int0);
      assertEquals(4, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1114111;
      intArray0[1] = (-1);
      intArray0[2] = (-1775);
      intArray0[3] = 942;
      intArray0[4] = (-2013265919);
      intArray0[5] = (-791);
      intArray0[6] = 2;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertArrayEquals(new int[] {1114111, (-1), (-1775), 942, (-2013265919), (-791), 2}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1775), 942, (-2013265919), (-791), 2}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'm');
      assertArrayEquals(new char[] {']'}, charArray0);
      assertArrayEquals(new char[] {'m', ']'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray1 = new byte[2];
      ArrayUtils.shift(byteArray1, (-1677), (int) (byte)0, (-1781));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(2, byteArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (-1677);
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (-1677);
      BitSet bitSet0 = new BitSet(0);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.size());
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte)24);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)24, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false, false, false}, booleanArray0));
      assertFalse(boolean1);
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      ArrayUtils.shift(shortArray0, (-1073741823), (int) (short)1, (-851));
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)44;
      Byte byte1 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) 0;
      longArray0[3] = 0L;
      ArrayUtils.shift(longArray0, (-1497), 488, (-1497));
      assertArrayEquals(new long[] {44L, 0L, 0L, 44L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Byte byte3 = new Byte((byte) (-38));
      assertEquals((byte) (-38), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte)76);
      assertEquals((byte)76, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      
      Byte byte5 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 488;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) (byte) (-38);
      longArray1[3] = (long) (byte)76;
      longArray1[4] = (long) (-1497);
      longArray1[5] = (long) (byte)44;
      longArray1[6] = (long) (byte)76;
      longArray1[7] = (long) byte0;
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertArrayEquals(new long[] {488L, 0L, (-38L), 76L, (-1497L), 44L, 76L, 44L}, longArray1);
      assertArrayEquals(new long[] {488L, 0L, (-38L), 76L, (-1497L), 44L, 76L, 44L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray2.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertSame(longArray2, longArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-38);
      shortArray0[1] = (short) (byte)44;
      shortArray0[2] = (short) (byte)76;
      shortArray0[3] = (short) (byte)76;
      shortArray0[4] = (short) (byte)76;
      ArrayUtils.shift(shortArray0, (-1497), 1, 0);
      assertArrayEquals(new short[] {(short) (-38), (short)44, (short)76, (short)76, (short)76}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      float[] floatArray0 = new float[9];
      floatArray0[8] = (float) 0;
      floatArray0[3] = (float) 0;
      intArray0[0] = 97;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 97;
      floatArray0[7] = (float) 97;
      floatArray0[8] = (float) 97;
      ArrayUtils.shift(floatArray0, 0, 97, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 97.0F, 97.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 204;
      ArrayUtils.swap((boolean[]) null, 127, 2588, 1189);
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(doubleArray0, 2633, (-1626), 5);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 204.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) 2727;
      floatArray1[1] = (float) 1189;
      floatArray1[3] = (float) 2774;
      floatArray1[4] = (float) 2633;
      ArrayUtils.shift(floatArray1, (-1626), 2571, 2588);
      assertArrayEquals(new float[] {0.0F, 2774.0F, 2633.0F, 2727.0F, 1189.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = ArrayUtils.insert((-2312), (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-808));
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      Long long0 = new Long((-808));
      assertEquals((-808L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(48);
      assertEquals(48L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(1L);
      assertEquals(1L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-6);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)49);
      assertArrayEquals(new byte[] {(byte)101, (byte)110, (byte)110, (byte)110, (byte) (-6)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)110, (byte)110, (byte)110, (byte) (-6)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)101;
      byteArray2[1] = (byte)110;
      byteArray2[2] = (byte)110;
      byteArray2[3] = (byte)110;
      byteArray2[4] = (byte)101;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-808), byteArray1, byteArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -808, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)42, object1);
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1, "");
      assertEquals("42", string0);
      assertNotNull(string0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)42;
      longArray0[1] = (long) (byte)42;
      longArray0[2] = (long) (byte)42;
      longArray0[3] = (long) (byte)42;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 42L;
      doubleArray0[1] = (double) 99;
      doubleArray0[2] = (double) 42L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (byte)42;
      doubleArray0[5] = 0.0;
      ArrayUtils.swap(doubleArray0, 0, (int) (byte)42, 0);
      assertArrayEquals(new double[] {42.0, 99.0, 42.0, 0.0, 42.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-25));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-25.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      ArrayUtils.shift(charArray0, (-1381), 4, 4);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'H';
      intArray0[1] = (int) (byte) (-25);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1442));
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('i');
      assertEquals('i', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1372);
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2103;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, (-3304));
      assertArrayEquals(new long[] {2103L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      Double double0 = new Double(3.0);
      assertEquals(3.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1372.0F), 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-67));
      assertEquals((byte) (-67), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = ArrayUtils.get(byteArray0, (-1372));
      assertNull(byte1);
      assertEquals(1, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-41));
      assertEquals((byte) (-41), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      org.evosuite.runtime.Random.setNextRandom(2634);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      boolean[] booleanArray0 = new boolean[1];
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = 'N';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '_', 0);
      assertArrayEquals(new char[] {'{', 'N'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1726);
      shortArray0[1] = (short) (-1726);
      shortArray0[2] = (short) (-1726);
      shortArray0[3] = (short) (-1726);
      shortArray0[4] = (short) (-1726);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1726), 90);
      assertArrayEquals(new short[] {(short) (-1726), (short) (-1726), (short) (-1726), (short) (-1726), (short) (-1726)}, shortArray0);
      assertEquals(4, int1);
      assertEquals(5, shortArray0.length);
      assertFalse(int1 == int0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1495);
      longArray0[1] = (long) (short) (-1726);
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 4561L, (int) (short) (-1726));
      assertArrayEquals(new long[] {(-1495L), (-1726L)}, longArray0);
      assertNotNull(bitSet1);
      assertEquals(2, longArray0.length);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)42, object1);
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1, "");
      assertEquals("42", string0);
      assertNotNull(string0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte)42;
      ArrayUtils.shift(byteArray1, (-1677), (int) (byte)42, (-1781));
      assertArrayEquals(new byte[] {(byte)42, (byte)42}, byteArray1);
      assertEquals(2, byteArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)42;
      intArray0[1] = (int) (byte)42;
      intArray0[2] = (int) (byte)42;
      intArray0[3] = (int) (byte)42;
      intArray0[4] = (-1677);
      intArray0[5] = (int) (byte)42;
      intArray0[6] = (int) (byte)42;
      intArray0[7] = (-1677);
      BitSet bitSet0 = new BitSet(42);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte)24);
      assertArrayEquals(new byte[] {(byte)24, (byte)42, (byte)42}, byteArray2);
      assertArrayEquals(new byte[] {(byte)42, (byte)42}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray2.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false, false, false}, booleanArray0));
      assertFalse(boolean1);
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.shift((short[]) null, (int) (byte)0, (int) (byte) (-81), (int) (byte)0);
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-4700));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4700, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4210.4;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 242.5831334, (-848), 2136.39292);
      assertArrayEquals(new double[] {4210.4}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Boolean[] booleanArray2 = new Boolean[0];
      Boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertNotNull(booleanArray3);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(6, booleanArray0.length);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 204;
      ArrayUtils.swap((boolean[]) null, 144, 2588, (-1403));
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'p'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 204;
      intArray0[1] = 144;
      int int0 = ArrayUtils.indexOf(intArray0, 2588, (-1708));
      assertArrayEquals(new int[] {204, 144}, intArray0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray1 = new float[3];
      floatArray1[0] = (float) 2774;
      floatArray1[1] = (float) 'p';
      floatArray1[2] = (float) 2633;
      ArrayUtils.shift(floatArray1, (-1708), (-3137), 2633);
      assertArrayEquals(new float[] {2774.0F, 112.0F, 2633.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 144, (-452));
      assertNull(booleanArray0);
      
      ArrayUtils.shift(charArray0, 57);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      
      ArrayUtils.swap(doubleArray0, 1000, (-1403), 2774);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 204.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 204;
      boolean boolean0 = ArrayUtils.contains(longArray0, 389L);
      assertArrayEquals(new long[] {204L}, longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-3201);
      shortArray0[1] = (short)30706;
      shortArray0[2] = (short) (-4101);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-4101);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short) (-2576);
      shortArray0[7] = (short) (-2576);
      ArrayUtils.swap(shortArray0, 3, 7, 3);
      assertArrayEquals(new short[] {(short) (-3201), (short)30706, (short) (-4101), (short) (-2576), (short) (-4101), (short)2, (short) (-2576), (short)2}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1652L;
      longArray0[1] = (-61L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {1652L, (-61L)}, longArray1);
      assertArrayEquals(new long[] {1652L, (-61L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)2, (short) (-2576), (short)2, (short) (-4101), (short) (-2576), (short) (-4101), (short)30706, (short) (-3201)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1618));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-25);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, ']');
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.reverse((Object[]) byteArray0, 2098677201, 98);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte[] byteArray0 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)42, object1);
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1, "");
      assertEquals("42", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short) (byte)42;
      shortArray0[3] = (short) (byte)42;
      shortArray0[4] = (short) (byte)42;
      shortArray0[5] = (short) (byte)42;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)42, (short)42, (short)42, (short)42}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '(';
      charArray0[2] = 'o';
      charArray0[3] = 'Y';
      charArray0[4] = '*';
      charArray0[5] = ')';
      charArray0[6] = 'v';
      charArray0[7] = '^';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'#', '(', 'o', 'Y', '*', ')', 'v', '^'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-34), (-3543));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-3543);
      floatArray0[1] = (float) (byte) (-34);
      floatArray0[2] = (float) (-3543);
      floatArray0[3] = 3590.1F;
      floatArray0[4] = (float) (-3543);
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      floatArray0[7] = (float) (byte)0;
      int int0 = ArrayUtils.indexOf(floatArray0, (-110.0F), (int) (byte)0);
      assertArrayEquals(new float[] {(-3543.0F), (-34.0F), (-3543.0F), 3590.1F, (-3543.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte) (-34);
      shortArray0[5] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-34), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short) (-34), (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short short0 = (short)108;
      Short short1 = new Short((short)108);
      assertEquals((short)108, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object object0 = ArrayUtils.get((Object[]) shortArray0, 3448);
      assertNull(object0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.swap((Object[]) shortArray0, 3448, (int) short0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.shift(byteArray0, (int) (short)108, 18688, (int) short0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)48;
      intArray0[1] = 9;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)2, 3448);
      assertArrayEquals(new int[] {48, 9}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(2, intArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray0, (byte)2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(5, booleanArray0.length);
      
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short)108;
      shortArray1[1] = (short)108;
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (byte)2, (int) (byte)2);
      assertArrayEquals(new short[] {(short)108, (short)108}, shortArray1);
      assertEquals((-1), int0);
      assertEquals(2, shortArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 9;
      floatArray0[1] = (float) 9;
      floatArray0[2] = (float) (byte)2;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {9.0F, 9.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {9.0F, 9.0F, 2.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-2512), (-2512));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-1898), (int) (byte)0, 96);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = '9';
      charArray0[2] = '?';
      charArray0[3] = 'E';
      charArray0[4] = '\\';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'n', (int) (byte)0);
      assertArrayEquals(new char[] {'q', '9', '?', 'E', '\\'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)15;
      shortArray0[1] = (short) (-12188);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)1427;
      shortArray0[5] = (short) (byte)15;
      shortArray0[6] = (short)4;
      shortArray0[7] = (short) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-12188), (-4063));
      assertArrayEquals(new short[] {(short)15, (short) (-12188), (short)0, (short)0, (short)1427, (short)15, (short)4, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(8, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (short)15;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short)0, (int) (byte)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = '[';
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short short0 = new Short((short) (-1106));
      assertEquals((short) (-1106), (short)short0);
      assertNotNull(short0);
      
      Byte byte0 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'k'}, charArray0);
      assertEquals(7, charArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '\u0000';
      longArray0[1] = (long) (byte)13;
      longArray0[2] = (long) '\u0000';
      longArray0[3] = (long) 'k';
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((-27.3757055991697));
      assertEquals((-27.375706F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (short) (-1106));
      assertEquals((-1106.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1375.7F);
      assertEquals(1375.7F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(3.0);
      assertEquals(3.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) floatArray0[3]);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertEquals(6, floatArray0.length);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      
      floatArray0[5] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-27.375706F), (-1106.0F), 1375.7F, 0.0F, 3.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, '.');
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'k'}, charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '|');
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      char char0 = 'C';
      charArray0[0] = 'C';
      int int0 = ArrayUtils.indexOf(charArray0, 'C');
      assertArrayEquals(new char[] {'C'}, charArray0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 'C';
      doubleArray0[3] = (double) 'C';
      doubleArray0[4] = (double) 'C';
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 'C';
      doubleArray0[7] = (double) 'C';
      doubleArray0[8] = (double) 'C';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'C');
      assertArrayEquals(new char[] {'C'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = 0;
      intArray0[2] = (int) 'C';
      intArray0[3] = (int) 'C';
      intArray0[4] = 0;
      intArray0[5] = (int) 'C';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 67, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.swap(booleanArray0, 1910, (-5577), 1910);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      Float float0 = new Float((double) 1925);
      assertEquals(1925.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(4423.49F);
      assertEquals(4423.49F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((-2390.0F));
      assertEquals((-2390.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((-1.0));
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 82, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      intArray0[3] = 1541;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-186);
      shortArray0[1] = (short) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-186), (short) (-1)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Byte byte0 = new Byte((byte)115);
      assertEquals((byte)115, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, 0, (int) (short) (-186));
      assertArrayEquals(new short[] {(short) (-186), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null, 99);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 10;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 10.0, (-3821));
      assertArrayEquals(new double[] {10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-300);
      Integer integer0 = new Integer((-300));
      assertEquals((-300), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-300));
      assertEquals((-300), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-300);
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray2, intArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-1444);
      shortArray0[1] = (short)1427;
      shortArray0[2] = (short) (-1444);
      shortArray0[3] = (short)4;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1444), (int) integerArray0[2]);
      assertArrayEquals(new short[] {(short)0, (short)1427, (short) (-1444), (short)4, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(3, integerArray0.length);
      assertEquals(5, shortArray0.length);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertTrue(boolean0);
      assertEquals(3, integerArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-43);
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)79, (byte)102, (byte) (-1), (byte) (-19), (byte) (-43)}, byteArray0);
      assertTrue(boolean1);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray3 = ArrayUtils.insert((int) integerArray0[1], intArray1, intArray1);
      assertArrayEquals(new int[] {}, intArray3);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray3);
      assertEquals(3, integerArray0.length);
      assertEquals(0, intArray3.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)102;
      doubleArray0[1] = (double) (int)integerArray0[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)102, (int) integerArray0[1]);
      assertArrayEquals(new double[] {102.0, (-300.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(3, integerArray0.length);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(44, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 44, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(4720.87);
      assertEquals(4720.87, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-457.3934691431));
      assertEquals((-457.3934691431), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {4720.87, (-457.3934691431)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 11;
      intArray0[1] = 0;
      intArray0[2] = (-3788);
      intArray0[3] = 0;
      intArray0[4] = (-1147);
      intArray0[5] = (-2832);
      ArrayUtils.swap(intArray0, (-1147), 13);
      assertArrayEquals(new int[] {11, 0, (-3788), 0, (-1147), (-2832)}, intArray0);
      assertEquals(6, intArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)56, 11);
      assertArrayEquals(new byte[] {(byte)119}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2808), (-2081));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0, (Comparator<Byte>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[15];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[2] = byte2;
      byteArray0[3] = (Byte) byte0;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[4] = byte3;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byteArray1[2] = (byte)0;
      ArrayUtils.swap(byteArray1, (int) byte0, (-413));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) byte0;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray3 = ArrayUtils.add(byteArray2, (int) (byte)0, (byte)36);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)36, (byte)0, (byte)0, (byte)0}, byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray3);
      assertEquals(3, byteArray2.length);
      assertEquals(4, byteArray3.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      
      ArrayUtils.shift(longArray0, (int) byte0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = '(';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(11, charArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)2;
      ArrayUtils.swap(byteArray0, (int) (byte)2, (-1), (int) (byte)2);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)2, (byte)1, (byte)2}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      Byte[] byteArray0 = new Byte[10];
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(10, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)17;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)17}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Byte byte0 = new Byte((byte)11);
      assertEquals((byte)11, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (-20), 0);
      assertArrayEquals(new short[] {(short)17}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)11;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 1635);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 204;
      ArrayUtils.swap((boolean[]) null, 144, 2588, (-1403));
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(doubleArray0, 2633, (-1626), 5);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 204.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) 2727;
      floatArray1[1] = (float) (-1403);
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 5;
      floatArray2[1] = (float) 2633;
      floatArray2[2] = (float) 2774;
      floatArray2[3] = (float) 2774;
      floatArray2[4] = (float) 5;
      floatArray2[5] = (float) 2727;
      int int0 = ArrayUtils.lastIndexOf(floatArray2, 2633.0F);
      assertArrayEquals(new float[] {5.0F, 2633.0F, 2774.0F, 2774.0F, 5.0F, 2727.0F}, floatArray2, 0.01F);
      assertEquals(1, int0);
      assertEquals(6, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray2, floatArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      
      byteArray0[4] = byte5;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      Long long0 = new Long(490L);
      assertEquals(490L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(5049L);
      assertEquals(5049L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(5049L);
      assertEquals(5049L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      Long long3 = new Long((-4179L));
      assertEquals((-4179L), (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      
      Long long4 = new Long(86L);
      assertEquals(86L, (long)long4);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      
      Long long5 = new Long((-1106L));
      assertEquals((-1106L), (long)long5);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      
      Long long6 = new Long(692L);
      assertEquals(692L, (long)long6);
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long4));
      
      Long long7 = new Long((-1857L));
      assertEquals((-1857L), (long)long7);
      assertNotNull(long7);
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long6));
      
      Long long8 = Long.getLong((String) null, long7);
      assertEquals((-1857L), (long)long8);
      assertNotNull(long8);
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long4));
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long6));
      
      Long long9 = new Long(218L);
      assertEquals(218L, (long)long9);
      assertNotNull(long9);
      assertFalse(long9.equals((Object)long7));
      assertFalse(long9.equals((Object)long8));
      assertFalse(long9.equals((Object)long5));
      assertFalse(long9.equals((Object)long2));
      assertFalse(long9.equals((Object)long0));
      assertFalse(long9.equals((Object)long6));
      assertFalse(long9.equals((Object)long1));
      assertFalse(long9.equals((Object)long3));
      assertFalse(long9.equals((Object)long4));
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)35;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)35);
      assertArrayEquals(new byte[] {(byte)35, (byte)7, (byte) (-102), (byte) (-7), (byte)5, (byte) (-87), (byte)35}, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 3750.0, 2141, 0.0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)67;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte)67}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 48;
      intArray0[1] = 2141;
      intArray0[2] = 2141;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {48, 2141, 2141}, intArray0);
      assertArrayEquals(new int[] {48, 2141, 2141, 48, 2141, 2141}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.reverse((double[]) null);
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 2130.345059927676);
      assertArrayEquals(new double[] {2130.345059927676}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[0] = 97;
      Byte byte0 = new Byte((byte) (-91));
      assertEquals((byte) (-91), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-300);
      Integer integer0 = new Integer((-300));
      assertEquals((-300), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-300));
      assertEquals((-300), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-300);
      integerArray0[2] = integer0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray2, intArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte) (-110), (-300), (int) integerArray0[0]);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-44), (byte) (-110), (byte) (-125), (byte)0}, byteArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(5, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray2, 0, (-125));
      assertArrayEquals(new int[] {(-300)}, intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray2);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray2, intArray0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)68);
      assertArrayEquals(new byte[] {(byte)68, (byte)1, (byte) (-44), (byte) (-110), (byte) (-125), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-44), (byte) (-110), (byte) (-125), (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (float) (byte) (-110);
      floatArray0[2] = (float) (byte)68;
      floatArray0[3] = (float) (byte)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (float) (byte) (-110), (int) integerArray0[0]);
      assertArrayEquals(new float[] {1.0F, (-110.0F), 68.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet1);
      assertEquals(3, integerArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals("{1}", bitSet1.toString());
      assertEquals(2, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(3114.2);
      assertEquals(3114.2, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0L);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-4101);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)30706;
      shortArray0[4] = (short)2278;
      shortArray0[5] = (short) (-2576);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-4101));
      assertArrayEquals(new short[] {(short) (-4101), (short)2, (short)30706, (short)0, (short)2278, (short) (-2576)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4101), (short) (-4101), (short)2, (short)30706, (short)0, (short)2278, (short) (-2576)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.swap((Object[]) doubleArray0, (int) (short) (-3201), (int) (short) (-26), 6);
      assertEquals(2, doubleArray0.length);
      assertSame(doubleArray0, doubleArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-71), (byte)1, (byte) (-75), (byte)68, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Double double0 = new Double(3114.2);
      assertEquals(3114.2, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((byte)0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3201);
      ArrayUtils.swap(shortArray0, 0, (-1436), 20);
      assertArrayEquals(new short[] {(short) (-3201)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-4101);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {(-4101L)}, longArray0);
      assertArrayEquals(new long[] {(-4101L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-3201)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 1767);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      Byte[] byteArray0 = new Byte[15];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3991.9, (int) (byte)0, (double) (byte)0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'b', 'b'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 3991.9, 1.0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 'b';
      doubleArray0[1] = (double) 128;
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1), (int) (byte)0);
      assertArrayEquals(new float[] {0.0F, 98.0F}, floatArray0, 0.01F);
      assertEquals((-1), int2);
      assertEquals(2, floatArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      ArrayUtils.swap(intArray0, (-1), 3210, (-1));
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-306);
      shortArray0[1] = (short) (-1729);
      shortArray0[2] = (short) (-306);
      shortArray0[3] = (short) (-306);
      shortArray0[4] = (short) (-306);
      shortArray0[5] = (short) (-306);
      shortArray0[6] = (short) (-306);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-306), (int) (short) (-306));
      assertArrayEquals(new short[] {(short) (-306), (short) (-1729), (short) (-306), (short) (-306), (short) (-306), (short) (-306), (short) (-306)}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2, 3, 4, 5, 6}", bitSet0.toString());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short) (-306);
      objectArray0[1] = (Object) (short) (-1729);
      objectArray0[2] = (Object) (-1);
      objectArray0[3] = (Object) (short) (-306);
      objectArray0[4] = (Object) (-1);
      objectArray0[5] = (Object) (short) (-306);
      objectArray0[6] = (Object) (short) (-306);
      objectArray0[7] = (Object) (short) (-1729);
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (short) (-306), 0);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertEquals((-1), int1);
      assertEquals(2, intArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      byte byte0 = (byte)120;
      Byte byte1 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'k');
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.reverse((Object[]) byteArray1, (int) byte0, (-2633));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (-1.0F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte) (-27);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-43);
      intArray0[2] = (int) (byte) (-27);
      intArray0[2] = (int) (byte) (-43);
      intArray0[3] = (int) (byte) (-27);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1778);
      assertArrayEquals(new int[] {(-43), 0, (-43), (-27)}, intArray0);
      assertArrayEquals(new int[] {1778, (-43), 0, (-43), (-27)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {(-43), 0, (-43), (-27)}, intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = '\"';
      charArray0[2] = '$';
      charArray0[3] = 'm';
      charArray0[4] = 'J';
      charArray0[5] = '+';
      charArray0[6] = '(';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\"', 740);
      assertArrayEquals(new char[] {'f', '\"', '$', 'm', 'J', '+', '('}, charArray0);
      assertEquals(1, int0);
      assertEquals(7, charArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 466, 466);
      assertArrayEquals(new char[] {'f', '\"', '$', 'm', 'J', '+', '('}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Integer integer0 = new Integer(65536);
      assertEquals(65536, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(2000);
      assertEquals(2000, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(65536);
      assertEquals(65536, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      Integer integer3 = new Integer((-371));
      assertEquals((-371), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      
      Integer integer4 = new Integer(403);
      assertEquals(403, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      
      Integer integer5 = new Integer(2000);
      assertEquals(2000, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer4;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {403}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-18);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)51);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-122), (byte) (-1), (byte) (-18)}, byteArray0);
      assertEquals(0, int1);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      int[] intArray0 = new int[5];
      intArray0[0] = 2603;
      intArray0[1] = 2603;
      Byte byte1 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 2603;
      integerArray0[1] = (Integer) 2603;
      integerArray0[2] = (Integer) 2603;
      integerArray0[3] = (Integer) 2603;
      integerArray0[4] = (Integer) 2603;
      Integer integer0 = new Integer((int) integerArray0[4]);
      assertEquals(2603, (int)integer0);
      assertNotNull(integer0);
      assertEquals(8, integerArray0.length);
      
      integerArray0[0] = integer0;
      integerArray0[6] = (Integer) 2603;
      integerArray0[7] = (Integer) 2603;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[7]);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(8, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray1);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray2);
      assertNotNull(intArray2);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray2.length);
      assertEquals(8, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = 'E';
      charArray0[2] = '2';
      charArray0[3] = '%';
      int int0 = ArrayUtils.indexOf(charArray0, 'B', (int) integerArray0[7]);
      assertArrayEquals(new char[] {'B', 'E', '2', '%'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertEquals(8, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray2);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray1);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray2);
      assertNotNull(integerArray1);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray2.length);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      ArrayUtils.shuffle((Object[]) integerArray1);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray1);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray2);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray2.length);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      int[] intArray3 = ArrayUtils.removeElements(intArray2, intArray0);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray1);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray2);
      assertArrayEquals(new int[] {2603, 2603, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603}, intArray3);
      assertNotNull(intArray3);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray2.length);
      assertEquals(5, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertEquals(6, intArray3.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotSame(intArray1, intArray3);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2603, (int) integerArray0[3]);
      assertArrayEquals(new char[] {'B', 'E', '2', '%'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, integerArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2727;
      doubleArray0[4] = (double) 204;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2727.0);
      assertArrayEquals(new double[] {2727.0, 0.0, 0.0, 0.0, 204.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char char0 = 'u';
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('u');
      assertEquals('u', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '.');
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      Integer integer0 = new Integer(750);
      assertEquals(750, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2727);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      int int1 = ArrayUtils.indexOf(charArray0, '`', (int) char0);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertFalse(int1 == int0);
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertSame(intArray0, intArray1);
      
      ArrayUtils.shuffle((Object[]) integerArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertSame(intArray0, intArray1);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray2);
      assertEquals(0, intArray2.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-4));
      assertEquals((byte) (-4), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2727;
      doubleArray0[1] = (-1.0);
      doubleArray0[4] = (double) 204;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2727.0);
      assertArrayEquals(new double[] {2727.0, (-1.0), 0.0, 0.0, 204.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('u');
      assertEquals('u', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '.');
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'w', 967);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertFalse(int1 == int0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[8];
      int int2 = ArrayUtils.indexOf(booleanArray0, false, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, int2);
      assertEquals(8, booleanArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ArrayUtils.swap(byteArray0, (int) (byte)0, 69, 3269);
      assertArrayEquals(new byte[] {(byte)0, (byte)37, (byte)56, (byte) (-44), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)44;
      Byte byte1 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      byteArray0[2] = byte2;
      byteArray0[3] = (Byte) byte0;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)44, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[4] = byte3;
      Byte byte4 = new Byte((byte) (-36));
      assertEquals((byte) (-36), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0, (-321), (int) byte0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      ArrayUtils.shuffle(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)1;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)2);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)33, (byte)33, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)1, (byte)1, (byte)33, (byte)33, (byte)1, (byte)1}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)33;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) (byte)33;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (byte)33;
      doubleArray0[7] = (double) (byte)1;
      doubleArray0[8] = (double) (-1L);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.7);
      assertArrayEquals(new double[] {1.0, 33.0, 1.0, 33.0, 1.0, 0.0, 33.0, 1.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 33.0, 1.0, 33.0, 1.0, 0.0, 33.0, 1.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-35));
      assertEquals((byte) (-35), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) (byte)12;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte)0);
      assertArrayEquals(new double[] {2.147483647E9, 12.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, 12.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[1] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-25);
      intArray0[1] = 97;
      doubleArray0[1] = (double) (byte) (-25);
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.swap(intArray0, (-25), 0, 97);
      assertArrayEquals(new int[] {(-25), 97, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte) (-25);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte) (-25), (byte) (-25), (byte) (-25), (byte) (-25), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((byte) (-25));
      assertEquals((-25L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {(-25L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) (-25.0);
      doubleArray1[1] = (Double) (-25.0);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertArrayEquals(new double[] {(-25.0), (-25.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      Character character0 = new Character('`');
      assertEquals('`', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = 'm';
      charArray0[2] = 'W';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = 'm';
      charArray0[6] = '(';
      charArray0[7] = '`';
      int int0 = ArrayUtils.indexOf(charArray0, '\\', 3982);
      assertArrayEquals(new char[] {'`', 'm', 'W', '`', '`', 'm', '(', '`'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '`';
      intArray0[1] = (int) '`';
      intArray0[2] = 3982;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {96, 96, 3982}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)59;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-84));
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte) (-84), (byte)59}, byteArray0);
      assertEquals(2, int1);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'`', 'm', 'W', '`', '`', 'm', '(', '`'}, charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((int) (byte)106, shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 769, 2972);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)0;
      Object object0 = ArrayUtils.get(objectArray0, (int) 0);
      assertEquals((byte)0, object0);
      assertNotNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertNotNull(bitSet0);
      assertEquals(3, objectArray0.length);
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      Short[] shortArray2 = new Short[1];
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      shortArray2[0] = short0;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2, (short) (byte)0);
      assertArrayEquals(new short[] {(short)0}, shortArray3);
      assertNotNull(shortArray3);
      assertEquals(1, shortArray3.length);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(78);
      assertEquals(78, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("]3");
      assertNull(integer1);
      
      integerArray0[1] = null;
      try { 
        Integer.valueOf("java.lang.Byte");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Byte\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      ArrayUtils.swap(shortArray0, 102, 102, 102);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      Character character0 = new Character('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('o');
      assertEquals('o', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      int int0 = ArrayUtils.indexOf(charArray0, 'm', (-1374));
      assertArrayEquals(new char[] {'o', 'm', 'm'}, charArray0);
      assertEquals(1, int0);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = new int[0];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)43;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)59);
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)10, (byte)59, (byte)59, (byte)43}, byteArray0);
      assertEquals(0, int1);
      assertEquals(6, byteArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'o', 'm', 'm'}, charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'K';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertArrayEquals(new long[] {75L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 75L, 5);
      assertArrayEquals(new long[] {75L}, longArray0);
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)4}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      int[] intArray0 = new int[5];
      intArray0[0] = 2603;
      intArray0[1] = 2603;
      Byte byte1 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 2603;
      integerArray0[1] = (Integer) 2603;
      integerArray0[2] = (Integer) 2603;
      integerArray0[3] = (Integer) 2603;
      integerArray0[4] = (Integer) 2603;
      Integer integer0 = new Integer((int) integerArray0[4]);
      assertEquals(2603, (int)integer0);
      assertNotNull(integer0);
      assertEquals(8, integerArray0.length);
      
      integerArray0[5] = integer0;
      integerArray0[6] = (Integer) 2603;
      integerArray0[7] = (Integer) 2603;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[7]);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(8, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray1);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray2);
      assertNotNull(intArray2);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray2.length);
      assertEquals(8, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = 'E';
      charArray0[2] = '2';
      charArray0[3] = '%';
      int int0 = ArrayUtils.indexOf(charArray0, 'B', (int) integerArray0[7]);
      assertArrayEquals(new char[] {'B', 'E', '2', '%'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertEquals(8, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray2);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray1);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray2);
      assertNotNull(integerArray1);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray2.length);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      ArrayUtils.shuffle((Object[]) integerArray1);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray1);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray2);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray2.length);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      int[] intArray3 = ArrayUtils.removeElements(intArray2, intArray0);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray1);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603}, intArray2);
      assertArrayEquals(new int[] {2603, 2603, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {2603, 2603, 2603, 2603, 2603, 2603}, intArray3);
      assertNotNull(intArray3);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray2.length);
      assertEquals(5, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertEquals(6, intArray3.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = '3';
      charArray0[2] = '-';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2065), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2065, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte)113);
      assertEquals((byte)113, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)113;
      ArrayUtils.swap(byteArray0, (-1995), (int) (byte)113);
      assertArrayEquals(new byte[] {(byte)113, (byte)0, (byte)0, (byte)0, (byte)113, (byte)113}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)113, (byte)0, (byte)0, (byte)0, (byte)113, (byte)113}, byteArray0);
      assertArrayEquals(new byte[] {(byte)113, (byte)0, (byte)0, (byte)0, (byte)113, (byte)113}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1077L;
      longArray0[1] = (long) (byte)113;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {113L, 1077L}, longArray0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, 2, (byte)0);
      assertArrayEquals(new byte[] {(byte)113, (byte)0, (byte)0, (byte)0, (byte)0, (byte)113, (byte)113}, byteArray2);
      assertArrayEquals(new byte[] {(byte)113, (byte)0, (byte)0, (byte)0, (byte)113, (byte)113}, byteArray0);
      assertArrayEquals(new byte[] {(byte)113, (byte)0, (byte)0, (byte)0, (byte)113, (byte)113}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(7, byteArray2.length);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.shift(longArray0, (-1995));
      assertArrayEquals(new long[] {1077L, 113L}, longArray0);
      assertEquals(2, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertArrayEquals(new long[] {1077L, 113L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1157.0F);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) (byte)113;
      floatArray0[5] = (float) 1077L;
      floatArray0[6] = (float) (byte)113;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1186.2406F);
      assertArrayEquals(new float[] {(-1157.0F), 0.0F, 0.0F, (-1.0F), 113.0F, 1077.0F, 113.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)113;
      shortArray0[5] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)0, shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)113, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(12, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 6620L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {6620L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)52;
      longArray0[1] = (long) (byte)52;
      longArray0[2] = (long) (byte)52;
      longArray0[3] = (long) (byte)52;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {52L, 52L, 52L, 52L}, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 1605, 42);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      float[] floatArray0 = new float[8];
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[1];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2167.966871058);
      doubleArray0[1] = (double) (short)0;
      ArrayUtils.shift((int[]) null, (-1630));
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = (-1765L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {1L, 0L, (-1765L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(3, longArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1605;
      intArray0[1] = 90;
      intArray0[2] = 1137;
      intArray0[3] = 8192;
      intArray0[4] = (-2055);
      ArrayUtils.shift(intArray0, 10);
      assertArrayEquals(new int[] {1605, 90, 1137, 8192, (-2055)}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, Integer.MIN_VALUE, (long) Integer.MIN_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2147483648, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray1, Float.NaN);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 97, 183L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)77;
      Byte byte1 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)63;
      Byte byte4 = new Byte((byte)63);
      assertEquals((byte)63, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      
      byteArray0[3] = byte5;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 509);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) (byte)63;
      shortArray0[4] = (short) (-365);
      shortArray0[5] = (short) (byte)77;
      shortArray0[6] = (short) (byte)63;
      shortArray0[7] = (short) byte0;
      shortArray0[8] = (short) byte0;
      ArrayUtils.shift(shortArray0, 2, (int) (short)77, (int) byte3);
      assertArrayEquals(new short[] {(short)77, (short)77, (short)77, (short)63, (short) (-365), (short)77, (short)63, (short)77, (short)77}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertFalse(byte3 == byte0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      ArrayUtils.shift(doubleArray0, 1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.removeElements((Byte[]) null, byteArray0);
      assertNull(byteArray1);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-279.2110962908191));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-279.2110962908191), 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-279.2110962908191), 97, 1.0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[15];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3974.640040262603, (int) (byte)0, (double) (byte)0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = byte0;
      byteArray1[2] = (byte)52;
      byteArray1[4] = (byte)0;
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte)114);
      assertArrayEquals(new byte[] {(byte)114, (byte)0, (byte)0, (byte)52, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)52, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-300);
      Integer integer0 = new Integer((-300));
      assertEquals((-300), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-300));
      assertEquals((-300), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-300);
      integerArray0[2] = integer0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)4164;
      shortArray0[2] = (short)0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-300);
      doubleArray0[1] = (-433.88150016592596);
      doubleArray0[2] = 2401.18;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)0, (-300));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-300.0), (-433.88150016592596), 2401.18, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 82, (-331), 82);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[3] = (-331);
      Double[] doubleArray1 = new Double[3];
      Double double0 = new Double((-2371.0970868579593));
      assertEquals((-2371.0970868579593), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(82);
      assertEquals(82.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      Double double2 = new Double((-331));
      assertEquals((-331.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray1[2] = double2;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertArrayEquals(new double[] {(-2371.0970868579593), 82.0, (-331.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)36);
      assertArrayEquals(new byte[] {(byte)36}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray3 = ArrayUtils.removeElement(doubleArray0, 596.84683924379);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '~';
      charArray0[1] = 'O';
      long[] longArray0 = new long[6];
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      ArrayUtils.shift(longArray0, 8192, 4, 4);
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-1L), 0L, (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      Byte byte0 = new Byte((byte)112);
      assertEquals((byte)112, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)81);
      assertEquals((byte)81, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-75));
      assertEquals((byte) (-75), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1926));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      intArray0[1] = (int) 'O';
      intArray0[2] = (int) (byte)81;
      intArray0[3] = (int) (byte)112;
      intArray0[4] = (int) 'O';
      intArray0[5] = (int) 'O';
      intArray0[6] = (int) '~';
      intArray0[7] = (int) '~';
      intArray0[8] = (int) (byte)112;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 9);
      assertArrayEquals(new int[] {4, 79, 81, 112, 79, 79, 126, 126, 112}, intArray0);
      assertArrayEquals(new int[] {9, 4, 79, 81, 112, 79, 79, 126, 126, 112}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = (-2382);
      ArrayUtils.shift(booleanArray0, 9, (-2382), 1396);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1396;
      longArray0[1] = (long) 1396;
      longArray0[2] = (long) 9;
      longArray0[3] = (long) (-2382);
      longArray0[4] = (long) 1396;
      longArray0[5] = (long) 1396;
      longArray0[6] = (long) (-2382);
      longArray0[7] = (long) 1396;
      longArray0[8] = (-1028L);
      ArrayUtils.shift(longArray0, (-2382), 1396, 15);
      assertArrayEquals(new long[] {(-2382L), 1396L, 1396L, (-2382L), 1396L, (-1028L), 1396L, 1396L, 9L}, longArray0);
      assertEquals(9, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = 'D';
      charArray0[2] = 'Z';
      charArray0[3] = 'u';
      charArray0[4] = '6';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 1396);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1396, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-1362), 10, 10);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 9, (-2382), 1396);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1396;
      longArray0[1] = (long) 1396;
      longArray0[2] = (long) 9;
      longArray0[3] = 1987L;
      longArray0[4] = (long) 1396;
      longArray0[5] = (long) 1396;
      longArray0[6] = (long) (-2382);
      longArray0[7] = (long) 1396;
      longArray0[8] = (-1028L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {1396L, 1396L, 9L, 1987L, 1396L, 1396L, (-2382L), 1396L, (-1028L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(longArray1, (-2382), 1396, 15);
      assertArrayEquals(new long[] {1396L, 1396L, 9L, 1987L, 1396L, 1396L, (-2382L), 1396L, (-1028L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = 'D';
      charArray0[2] = 'Z';
      charArray0[3] = 'u';
      charArray0[4] = '6';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 1396);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1396, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Integer integer0 = new Integer(3580);
      assertEquals(3580, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, 3580);
      assertFalse(boolean0);
      
      Object object0 = ArrayUtils.get((Object[]) shortArray0, (-1));
      assertNull(object0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.swap((Object[]) shortArray0, 2146767264, 3580);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ArrayUtils.shift(byteArray0, (-1), (int) (byte)48, (-21));
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-1), 3580);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)60);
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)60, (byte)48}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray0));
      assertFalse(boolean1);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      long[] longArray0 = new long[5];
      ArrayUtils.shift(longArray0, 46);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-5), floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      float[] floatArray0 = new float[9];
      int[] intArray0 = new int[5];
      intArray0[0] = 1503;
      intArray0[1] = (-2890);
      intArray0[2] = 258;
      intArray0[3] = (-2487);
      intArray0[4] = 949;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2487), 949);
      assertArrayEquals(new int[] {1503, (-2890), 258, (-2487), 949}, intArray0);
      assertArrayEquals(new int[] {1503, (-2890), 258, (-2487), 949}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Boolean boolean0 = Boolean.valueOf("Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      
      long[] longArray0 = new long[7];
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      short[] shortArray0 = new short[1];
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte) (-80));
      assertEquals((byte) (-80), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)13;
      Byte byte2 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte1);
      assertEquals((byte)13, (byte)byte6);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte8);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte1));
      
      byteArray0[7] = byte8;
      Byte byte9 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte9);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte0));
      assertTrue(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte7));
      assertTrue(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte3));
      assertTrue(byte9.equals((Object)byte8));
      assertTrue(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte5));
      
      byteArray0[8] = byte9;
      Byte byte10 = ArrayUtils.get(byteArray0, 1, (Byte) null);
      assertEquals((byte)13, (byte)byte10);
      assertNotNull(byte10);
      assertEquals(9, byteArray0.length);
      assertTrue(byte10.equals((Object)byte9));
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte4));
      assertTrue(byte10.equals((Object)byte6));
      assertTrue(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte5));
      assertFalse(byte10.equals((Object)byte3));
      assertTrue(byte10.equals((Object)byte2));
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray2, (Object) byte10);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertEquals(9, byteArray0.length);
      assertTrue(byte10.equals((Object)byte9));
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte4));
      assertTrue(byte10.equals((Object)byte6));
      assertTrue(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte5));
      assertFalse(byte10.equals((Object)byte3));
      assertTrue(byte10.equals((Object)byte2));
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3831;
      shortArray0[1] = (short)3831;
      shortArray0[2] = (short) (-3068);
      shortArray0[3] = (short) (-3068);
      shortArray0[4] = (short)1606;
      shortArray0[5] = (short) (-3068);
      shortArray0[6] = (short)332;
      shortArray0[7] = (short)332;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertArrayEquals(new short[] {(short)3831, (short)3831, (short) (-3068), (short) (-3068), (short)1606, (short) (-3068), (short)332, (short)332}, shortArray0);
      assertArrayEquals(new short[] {(short)3831, (short)3831, (short) (-3068), (short) (-3068), (short)1606, (short) (-3068), (short)332, (short)332}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = '<';
      charArray0[2] = 'h';
      charArray0[3] = ']';
      charArray0[4] = 's';
      charArray0[5] = '$';
      charArray0[6] = 'B';
      charArray0[7] = 'J';
      charArray0[8] = 'N';
      ArrayUtils.swap(charArray0, 348, (-186), 90);
      assertArrayEquals(new char[] {'z', '<', 'h', ']', 's', '$', 'B', 'J', 'N'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2517;
      shortArray0[1] = (short)20503;
      shortArray0[2] = (short)15;
      shortArray0[3] = (short)15;
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)2517, (short)20503, (short)15, (short)15}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)2517, (short)20503, (short)15, (short)15}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)125);
      assertArrayEquals(new byte[] {(byte) (-8)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)125}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = 'z';
      charArray0[2] = ',';
      ArrayUtils.shift(charArray0, 2146767264, 44, (-1303));
      assertArrayEquals(new char[] {'+', 'z', ','}, charArray0);
      assertEquals(3, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 373;
      charArray0[2] = '+';
      doubleArray0[2] = (double) '+';
      doubleArray0[3] = (double) 'z';
      doubleArray0[4] = (double) ',';
      doubleArray0[5] = (double) 'z';
      doubleArray0[6] = 65.0;
      doubleArray0[7] = (double) (-1303);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2146767264, 1);
      assertArrayEquals(new double[] {373.0, 0.0, 43.0, 122.0, 44.0, 122.0, 65.0, (-1303.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.1, 1122.4);
      assertArrayEquals(new double[] {373.0, 0.0, 43.0, 122.0, 44.0, 122.0, 65.0, (-1303.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      ArrayUtils.swap(charArray0, 1396, 14, (-1303));
      assertArrayEquals(new char[] {'+', 'z', '+'}, charArray0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, '0', (-186));
      assertArrayEquals(new char[] {'+', 'z', '+'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-300);
      Integer integer0 = new Integer((-300));
      assertEquals((-300), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-300));
      assertEquals((-300), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-300);
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray2, intArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1444);
      shortArray0[1] = (short)1427;
      shortArray0[2] = (short) (-1444);
      shortArray0[3] = (short)4;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1444), (int) integerArray0[2]);
      assertArrayEquals(new short[] {(short) (-1444), (short)1427, (short) (-1444), (short)4, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(3, integerArray0.length);
      assertEquals(5, shortArray0.length);
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertTrue(boolean0);
      assertEquals(3, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, (-300), 1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals((-1), int0);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = (double) (int)integerArray0[0];
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (short) (-1444);
      doubleArray0[4] = (double) (-300);
      ArrayUtils.swap(doubleArray0, (int) (short) (-1444), (int) (short) (-1444), 2263);
      assertArrayEquals(new double[] {(-300.0), (-300.0), (-1.0), (-1444.0), (-300.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ')');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1), 0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      float[] floatArray0 = new float[8];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'P';
      longArray0[1] = (long) (-1106);
      longArray0[2] = (-305L);
      longArray0[3] = (-1283L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-2459L));
      assertArrayEquals(new long[] {80L, (-1106L), (-305L), (-1283L), 0L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(6, longArray0.length);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      longArray0[4] = (long) (-1106);
      longArray0[5] = (long) 795;
      int int0 = ArrayUtils.indexOf(longArray0, (-1283L));
      assertArrayEquals(new long[] {80L, (-1106L), (-305L), (-1283L), (-1106L), 795L}, longArray0);
      assertEquals(3, int0);
      assertEquals(6, longArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((int[]) null, 5, 3);
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = '`';
      charArray0[2] = 'K';
      int int1 = ArrayUtils.indexOf(charArray0, 'h');
      assertArrayEquals(new char[] {'J', '`', 'K'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(3, charArray0.length);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 97;
      doubleArray0[1] = (double) 'J';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 74.0, (double) 0);
      assertArrayEquals(new double[] {97.0, 74.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '`';
      intArray0[1] = (int) 'h';
      intArray0[2] = 97;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {96, 104, 97}, intArray0);
      assertArrayEquals(new int[] {96, 104, 97, 96, 104, 97}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      float[] floatArray0 = new float[18];
      floatArray0[0] = (-1647.9036F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1647.9036F));
      assertNotNull(floatArray1);
      assertEquals(18, floatArray0.length);
      assertEquals(17, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-300);
      Integer integer0 = new Integer((-300));
      assertEquals((-300), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-300));
      assertEquals((-300), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-300);
      integerArray0[2] = integer0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)4164;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-26));
      assertArrayEquals(new short[] {(short) (-1), (short)4164, (short)0, (short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-26), (short) (-1), (short)4164, (short)0, (short)0, (short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.swap((Object[]) integerArray0, (int) integerArray0[0], 68, (int) (short) (-1));
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      longArray0[1] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3199.174740593;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2575.0970868579593), (-928), 204.0);
      assertArrayEquals(new double[] {3199.174740593}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-1372), (-928));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-2094), 995);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2612.61014487);
      doubleArray0[1] = (double) 995;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 995, 995, 1.0);
      assertArrayEquals(new double[] {(-2612.61014487), 995.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)52;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)52, (byte)52}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Byte byte0 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)52;
      shortArray0[1] = (short) (byte)52;
      shortArray0[2] = (short) (byte)52;
      shortArray0[3] = (short) (byte)52;
      shortArray0[4] = (short) (byte)52;
      shortArray0[5] = (short) (byte)52;
      shortArray0[6] = (short) (byte)52;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)52, (short)52, (short)52, (short)52, (short)52, (short)52, (short)52}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      Byte byte1 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean0 = ArrayUtils.contains((Object[]) byteArray1, (Object) byte0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)52, (byte)52}, byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertTrue(byte0.equals((Object)byte1));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(5, intArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(827);
      assertEquals(827, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertArrayEquals(new int[] {827}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) integerArray0[0];
      intArray2[1] = 827;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (int) integerArray0[0];
      int[] intArray4 = ArrayUtils.removeElements(intArray2, intArray3);
      assertArrayEquals(new int[] {827, 827}, intArray2);
      assertArrayEquals(new int[] {827}, intArray3);
      assertArrayEquals(new int[] {827}, intArray4);
      assertNotNull(intArray4);
      assertEquals(2, intArray2.length);
      assertEquals(1, intArray3.length);
      assertEquals(1, intArray4.length);
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray4);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray2);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-300);
      Integer integer0 = new Integer((-300));
      assertEquals((-300), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1381));
      assertEquals((-1381), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1381));
      assertEquals((-1381), (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(975);
      assertEquals(975, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer2;
      integerArray0[2] = integer3;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[2]);
      assertArrayEquals(new int[] {(-1381), (-1381), 975}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      char[] charArray0 = new char[5];
      int int0 = ArrayUtils.indexOf(charArray0, '\u0000', 4735);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray1);
      assertArrayEquals(new int[] {(-1381), (-1381), 975}, intArray1);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(3, integerArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(integerArray1, integerArray0);
      
      ArrayUtils.shuffle((Object[]) integerArray1);
      assertArrayEquals(new int[] {(-1381), (-1381), 975}, intArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(3, integerArray1.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(integerArray1, integerArray0);
      
      int[] intArray3 = ArrayUtils.removeElements(intArray1, intArray2);
      assertArrayEquals(new int[] {(-1381), (-1381), 975}, intArray3);
      assertArrayEquals(new int[] {(-300)}, intArray0);
      assertArrayEquals(new int[] {(-1381), (-1381), 975}, intArray1);
      assertArrayEquals(new int[] {(-300)}, intArray2);
      assertNotNull(intArray3);
      assertEquals(3, intArray3.length);
      assertEquals(1, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray3);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.insert(2, byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      ArrayUtils.shift(byteArray0, (-943), (-943), (-943));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((byte) (-81));
      assertEquals((-81L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(1436);
      assertEquals(1436L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (byte) (-81));
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, (float) 1436);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '\\';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\\', (int) (byte) (-81));
      assertArrayEquals(new char[] {'!', '\\'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(2, charArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[15];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3991.9, (int) (byte)0, (double) (byte)0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'F';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'F', 'b'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 3991.9, 1.0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, true, 128);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int2);
      assertEquals(0, booleanArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Byte byte0 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) null);
      assertTrue(boolean0);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-2446.968), 0, (-25.0));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) bitSet0;
      bitSet0.clear(0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) bitSet0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) bitSet0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[7]);
      assertTrue(boolean0);
      assertEquals(8, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.reverse(booleanArray0, 2144716272, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      assertArrayEquals(new byte[] {(byte)63}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 7;
      Float float0 = new Float(744.83F);
      assertEquals(744.83F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2278;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      ArrayUtils.swap(shortArray0, (int) (short)2, (int) (short)2, (int) (short)2278);
      assertArrayEquals(new short[] {(short)2278, (short)2, (short)2}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-3201);
      longArray0[1] = (long) (short)2;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {(-3201L), 2L}, longArray0);
      assertArrayEquals(new long[] {(-3201L), 2L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2278}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1726));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      Byte byte0 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-465L));
      assertEquals((-465L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 13);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i[5";
      stringArray0[1] = "i[5";
      stringArray0[2] = "java.lang.Object";
      stringArray0[3] = "java.lang.Byte";
      stringArray0[4] = "1KjQge";
      stringArray0[5] = "@}l-z^a";
      stringArray0[6] = "i[5";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)13;
      ArrayUtils.swap(byteArray0, 6, (-1438), (int) (byte)14);
      assertArrayEquals(new byte[] {(byte)114, (byte)13, (byte) (-94), (byte)14, (byte)14, (byte)13}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      byte byte0 = (byte)17;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)17;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)17}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Byte byte1 = new Byte((byte)11);
      assertEquals((byte)11, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      int int0 = 0;
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (-20), 0);
      assertArrayEquals(new short[] {(short)17}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)11;
      longArray0[1] = (long) (-20);
      longArray0[2] = (long) (-20);
      longArray0[3] = (long) (short)17;
      longArray0[4] = (long) (-20);
      longArray0[5] = (long) (short)17;
      int int1 = 410;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 410);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 410, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      int[] intArray0 = new int[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 8);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(2, intArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)78;
      shortArray0[1] = (short)78;
      ArrayUtils.swap(shortArray0, (-1725), (int) (short)78, (int) (short)78);
      assertArrayEquals(new short[] {(short)78, (short)78}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Double double0 = new Double(0L);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1859.0);
      assertEquals(1859.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3201);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-2576);
      shortArray0[3] = (short)2278;
      shortArray0[4] = (short)2;
      ArrayUtils.swap(shortArray0, (int) (short) (-3201), 967, (int) (short)2);
      assertArrayEquals(new short[] {(short) (-3201), (short)1, (short) (-2576), (short)2278, (short)2}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2278, (short) (-2576), (short)1, (short) (-3201)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false, (int) (short) (-3201));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertEquals((-1), int0);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)2278;
      intArray0[1] = (int) (short)2278;
      intArray0[2] = (int) (short)2;
      intArray0[3] = (int) (short) (-2576);
      intArray0[4] = (int) (short)1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)2278, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2278, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      Float float0 = new Float((float) (short)55);
      assertEquals(55.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(323.09554);
      assertEquals(323.09555F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      booleanArray1[7] = false;
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray3);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertEquals(8, booleanArray3.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-2224);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-2224);
      longArray0[3] = (long) (-1093);
      longArray0[4] = (long) (-2224);
      longArray0[5] = (long) (short)55;
      ArrayUtils.swap(longArray0, (-2789), 3709, 9);
      assertArrayEquals(new long[] {(-2224L), 0L, (-2224L), (-1093L), (-2224L), 55L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)509;
      shortArray1[1] = (short)43;
      shortArray1[2] = (short)204;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)509, (short)43, (short)204}, shortArray1);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) (short)43, (double) (short)509);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)44;
      Byte byte1 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      byteArray0[2] = byte2;
      byteArray0[3] = (Byte) byte0;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)44, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[4] = byte3;
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = '?';
      charArray0[3] = '<';
      charArray0[4] = '1';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '1');
      assertArrayEquals(new char[] {'z', 'z', '?', '<', '1'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(5, charArray0.length);
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      ArrayUtils.reverse((Object[]) byteArray0, (-1436), 349);
      assertEquals(6, byteArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '<';
      floatArray0[1] = (float) '<';
      floatArray0[2] = (float) '?';
      floatArray0[3] = (float) byte0;
      floatArray0[4] = (float) '?';
      floatArray0[5] = (float) 349;
      floatArray0[6] = (-1354.2F);
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (-312.01F));
      assertArrayEquals(new float[] {60.0F, 60.0F, 63.0F, 44.0F, 63.0F, 349.0F, (-1354.2F)}, floatArray0, 0.01F);
      assertNotNull(bitSet1);
      assertEquals(7, floatArray0.length);
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) byte0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertArrayEquals(new short[] {(short)44}, shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-808));
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.swap((Object[]) integerArray0, (-25), 48);
      assertEquals(6, integerArray0.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-25), 750, (-25));
      assertEquals(6, integerArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      Byte byte0 = new Byte((byte) (-36));
      assertEquals((byte) (-36), (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)76);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)76}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 48;
      floatArray0[1] = (float) (byte) (-110);
      floatArray0[2] = (float) (byte) (-110);
      floatArray0[3] = (float) (byte)76;
      floatArray0[4] = (float) (-25);
      floatArray0[5] = (float) (byte)76;
      floatArray0[6] = Float.NaN;
      floatArray0[7] = (float) (byte)76;
      floatArray0[8] = (float) (-808);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-563.89F));
      assertArrayEquals(new float[] {48.0F, (-110.0F), (-110.0F), 76.0F, (-25.0F), 76.0F, Float.NaN, 76.0F, (-808.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[9];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1924.5124, (-337));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1924.5124, (-1.0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1124);
      shortArray0[1] = (short)2;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1124));
      assertArrayEquals(new short[] {(short) (-1124), (short)2}, shortArray0);
      assertEquals(0, int1);
      assertEquals(2, shortArray0.length);
      assertFalse(int1 == int0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 7);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<Byte> class5 = Byte.class;
      classArray0[5] = class5;
      Class<Byte> class6 = Byte.class;
      classArray0[6] = class6;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      
      ArrayUtils.swap(doubleArray0, 788, (-3958), 75);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-105);
      byteArray0[0] = (byte) (-105);
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Byte byte1 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      byteArray1[3] = (Byte) (byte) (-105);
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-105), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte byte3 = ArrayUtils.get(byteArray1, (-186), byte2);
      assertEquals((byte) (-105), (byte)byte3);
      assertNotNull(byte3);
      assertEquals(4, byteArray1.length);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      Character character0 = new Character('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      Double double0 = new Double((byte) (-105));
      assertEquals((-105.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift((Object[]) doubleArray0, (-2538));
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = '\'';
      char[] charArray1 = ArrayUtils.insert(3, charArray0, charArray0);
      assertArrayEquals(new char[] {'b', '\'', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'b', '\'', '\u0000', 'b', '\'', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray1, (Object) byte3, (-1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(4, byteArray1.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      BitSet bitSet1 = (BitSet)bitSet0.clone();
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(bitSet1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(4, byteArray1.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-186);
      floatArray0[1] = (float) byte0;
      BitSet bitSet2 = ArrayUtils.indexesOf(floatArray0, 3.0F, (-1995));
      assertArrayEquals(new float[] {(-186.0F), (-105.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet2);
      assertEquals(2, floatArray0.length);
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[1] = '\u0000';
      byte[] byteArray0 = new byte[3];
      ArrayUtils.swap(charArray0, 1640, 1640, (-2181));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(10, charArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'N';
      intArray0[1] = (-2181);
      intArray0[2] = (int) 'N';
      intArray0[3] = (int) 'N';
      intArray0[4] = (int) 'O';
      intArray0[5] = (-659);
      intArray0[6] = 1640;
      intArray0[7] = 1640;
      ArrayUtils.shift(intArray0, (-2181), (-2993), 78);
      assertArrayEquals(new int[] {78, (-2181), 78, 78, 79, (-659), 1640, 1640}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = 301.068;
      doubleArray0[2] = 2854.6;
      doubleArray0[3] = (-3408.5388);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-21.0);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 889.0312964;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.7, 301.068, 2854.6, (-3408.5388), 1.0, (-21.0), (-1.0), 889.0312964}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)11;
      Byte byte2 = new Byte((byte)11);
      assertEquals((byte)11, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)97;
      floatArray0[1] = (float) (byte)11;
      floatArray0[2] = (float) byte1;
      floatArray0[3] = (float) (byte)11;
      floatArray0[4] = (float) (byte)97;
      floatArray0[5] = (float) byte1;
      floatArray0[6] = (float) byte1;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 11.0F);
      assertArrayEquals(new float[] {97.0F, 11.0F, 11.0F, 11.0F, 97.0F, 11.0F, 11.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {97.0F, 11.0F, 11.0F, 97.0F, 11.0F, 11.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-25);
      intArray0[1] = 97;
      intArray0[2] = (int) (byte) (-25);
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.swap(intArray0, (-25), (-25), 97);
      assertArrayEquals(new int[] {(-25), 97, (-25), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-25);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (byte) (-25);
      shortArray0[3] = (short) (byte) (-25);
      shortArray0[4] = (short) (-306);
      shortArray0[5] = (short) (byte) (-25);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1729), (-653));
      assertArrayEquals(new short[] {(short) (-25), (short) (-1), (short) (-25), (short) (-25), (short) (-306), (short) (-25)}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-25);
      objectArray0[1] = (Object) 0.0;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1, 1);
      assertArrayEquals(new int[] {(-25), 97, (-25), 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3525.3875487192063);
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = 'V';
      charArray0[2] = 'A';
      charArray0[3] = 'i';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = ':';
      charArray0[7] = ':';
      ArrayUtils.swap(charArray0, (-3709), 1, 0);
      assertArrayEquals(new char[] {'P', 'V', 'A', 'i', '~', '~', ':', ':'}, charArray0);
      assertEquals(8, charArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-775);
      shortArray0[1] = (short) (-775);
      shortArray0[2] = (short)1308;
      shortArray0[3] = (short)425;
      short[] shortArray1 = ArrayUtils.insert((int) (short) (-775), shortArray0, (short[]) null);
      assertArrayEquals(new short[] {(short) (-775), (short) (-775), (short)1308, (short)425}, shortArray1);
      assertArrayEquals(new short[] {(short) (-775), (short) (-775), (short)1308, (short)425}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte) (-118);
      Byte byte1 = new Byte((byte) (-118));
      assertEquals((byte) (-118), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-118), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = ArrayUtils.get(byteArray0, 1991);
      assertNull(byte3);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2147031608;
      intArray0[1] = 1;
      intArray0[2] = (-21);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-21), (-1677));
      assertArrayEquals(new int[] {2147031608, 1, (-21)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1769, 2147031608);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 2147031608;
      integerArray0[1] = (Integer) 1;
      integerArray0[2] = (Integer) 1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray1);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 1);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray1.length);
      assertEquals(1, classArray0.length);
      
      long[] longArray1 = ArrayUtils.insert((-3503), (long[]) null, (long[]) null);
      assertNull(longArray1);
      
      long[] longArray2 = ArrayUtils.clone((long[]) null);
      assertNull(longArray2);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 2147031608);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)25);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 709.7F;
      floatArray0[3] = (float) 'i';
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) 488;
      floatArray0[8] = (float) 488;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 709.7F, 105.0F, 0.0F, 0.0F, 0.0F, 488.0F, 488.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)52;
      shortArray0[1] = (short) (byte)52;
      shortArray0[2] = (short) (byte)25;
      shortArray0[3] = (short) (byte)52;
      shortArray0[4] = (short) (byte)25;
      shortArray0[5] = (short) (byte)52;
      shortArray0[6] = (short) (byte)52;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)52, (int) (short)25);
      assertArrayEquals(new short[] {(short)52, (short)52, (short)25, (short)52, (short)25, (short)52, (short)52}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(7, shortArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) null, (Byte) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) null, (Byte) null);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      Byte byte0 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) null, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElement(abstractMap_SimpleImmutableEntryArray0, (Object) abstractMap_SimpleImmutableEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(5, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry3);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)34, (int) (byte)34, (int) (byte)34);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-25);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = 'b';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'b', '`'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.shift((short[]) null, 2164, (-745), (-745));
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      ArrayUtils.shift((short[]) null, (-2278), (-2278), (-2278));
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      char[] charArray0 = new char[14];
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '9';
      charArray1[1] = '9';
      charArray1[2] = '9';
      charArray1[3] = 'w';
      charArray1[4] = '9';
      charArray1[5] = '9';
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray0);
      assertArrayEquals(new char[] {'9', '9', '9', 'w', '9', '9'}, charArray1);
      assertArrayEquals(new char[] {'9', '9', '9', 'w', '9', '9'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(14, charArray0.length);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (-688.0F);
      byteArray0[0] = (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-2146.6519F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-688.0F), 0.0F, 0.0F, 0.0F, 0.0F, (-2146.6519F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(8, floatArray0.length);
      assertEquals(6, bitSet0.cardinality());
      assertEquals("{0, 1, 3, 4, 5, 6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.swap(floatArray0, 9, 12, (int) (byte)0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-688.0F), 0.0F, 0.0F, 0.0F, 0.0F, (-2146.6519F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = 'O';
      charArray0[2] = 'f';
      charArray0[3] = 'R';
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'R';
      charArray1[1] = 'G';
      charArray1[2] = 'R';
      charArray1[3] = 'R';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertArrayEquals(new char[] {'R', 'G', 'R', 'R'}, charArray1);
      assertArrayEquals(new char[] {'O', 'f'}, charArray2);
      assertArrayEquals(new char[] {'G', 'O', 'f', 'R'}, charArray0);
      assertNotNull(charArray2);
      assertEquals(4, charArray1.length);
      assertEquals(2, charArray2.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'R';
      doubleArray0[1] = (double) (-2146.6519F);
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = 2603.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2603.0);
      assertArrayEquals(new double[] {82.0, (-2146.65185546875), 9.0, 9.0, 2603.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      float[] floatArray0 = new float[9];
      floatArray0[8] = (float) 0;
      floatArray0[3] = (float) 0;
      intArray0[0] = 97;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 97;
      floatArray0[7] = (float) 97;
      floatArray0[8] = (float) 97;
      ArrayUtils.shift(floatArray0, (-1165), 97, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 97.0F, 97.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)11);
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) 97.0F;
      objectArray0[2] = (Object) 97.0F;
      objectArray0[3] = (Object) 97.0F;
      Byte byte0 = new Byte((byte) (-125));
      assertEquals((byte) (-125), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0, 3376);
      assertNotNull(bitSet0);
      assertEquals(4, objectArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-125);
      longArray0[1] = (long) 97;
      longArray0[2] = (long) 97;
      boolean boolean1 = ArrayUtils.contains(longArray0, 576L);
      assertArrayEquals(new long[] {(-125L), 97L, 97L}, longArray0);
      assertFalse(boolean1);
      assertEquals(3, longArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2727;
      doubleArray0[1] = (-1.0);
      doubleArray0[4] = (double) 204;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2727.0);
      assertArrayEquals(new double[] {2727.0, (-1.0), 0.0, 0.0, 204.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      
      Integer integer0 = new Integer(119);
      assertEquals(119, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(2727);
      assertEquals(2727, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 712);
      assertArrayEquals(new int[] {119}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {119}, intArray0);
      assertArrayEquals(new int[] {119}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1383;
      shortArray0[1] = (short)1427;
      shortArray0[2] = (short)1383;
      shortArray0[3] = (short)6;
      shortArray0[4] = (short)1243;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1854), (int) (short)6);
      assertArrayEquals(new short[] {(short)1383, (short)1427, (short)1383, (short)6, (short)1243}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(5, shortArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)1383);
      assertArrayEquals(new short[] {(short)1383, (short)1427, (short)1383, (short)6, (short)1243}, shortArray0);
      assertNotNull(bitSet1);
      assertEquals(5, shortArray0.length);
      assertEquals(2, bitSet1.cardinality());
      assertEquals("{0, 2}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.length());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      
      Byte byte0 = new Byte((byte)115);
      assertEquals((byte)115, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) byte0);
      assertEquals((-1), int1);
      assertEquals(1, integerArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      long[] longArray0 = new long[4];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(stringArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(4, stringArray0.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertNotSame(longArray0, longArray2);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1973;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)16);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)16}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)16;
      shortArray0[1] = (short) (byte)16;
      shortArray0[2] = (short) (byte)16;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = ',';
      charArray0[6] = ',';
      charArray0[7] = 'p';
      charArray0[8] = ',';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {',', ',', ',', ',', ',', ',', ',', 'p', ','}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) ',';
      int int0 = ArrayUtils.indexOf(intArray0, 44, 44);
      assertArrayEquals(new int[] {44}, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) ',';
      floatArray0[2] = 0.0F;
      ArrayUtils.shift(floatArray0, 955, 44, 44);
      assertArrayEquals(new float[] {44.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1671), 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 98.0;
      doubleArray0[1] = (double) 44;
      doubleArray0[2] = (double) ',';
      doubleArray0[3] = (double) 124;
      ArrayUtils.swap(doubleArray0, 1565, 955, 955);
      assertArrayEquals(new double[] {98.0, 44.0, 44.0, 124.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ',';
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 121.0F;
      floatArray0[1] = 13.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1343.2567F);
      floatArray0[4] = (-1096.4436F);
      floatArray0[5] = (-4113.94F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {121.0F, 13.0F, 1.0F, (-1343.2567F), (-1096.4436F), (-4113.94F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {121.0F, 13.0F, 1.0F, (-1343.2567F), (-1096.4436F), (-4113.94F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-4113.94F), (-1426));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-2093701052), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2093701052, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = (Object) mockRandom0;
      objectArray0[5] = (Object) mockRandom0;
      objectArray0[6] = (Object) mockRandom0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1865);
      shortArray0[1] = (short)111;
      shortArray0[2] = (short) (-1216);
      shortArray0[3] = (short)2387;
      shortArray0[4] = (short)2382;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)111, (int) (short)2387);
      assertArrayEquals(new short[] {(short) (-1865), (short)111, (short) (-1216), (short)2387, (short)2382}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(5, shortArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)2387;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (short)2387;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {2387.0, (-1.0), 2387.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.shift((byte[]) null, (-909), (-1), (-2093701052));
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)37;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)37}, shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object object0 = ArrayUtils.get((Object[]) null, 1);
      assertNull(object0);
      
      ArrayUtils.shift((byte[]) null, (-639), (-639), 1);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2727;
      doubleArray0[1] = (-1.0);
      doubleArray0[4] = (double) 204;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2727.0);
      assertArrayEquals(new double[] {2727.0, (-1.0), 0.0, 0.0, 204.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('u');
      assertEquals('u', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '.');
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'w', 967);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertFalse(int1 == int0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int int2 = ArrayUtils.indexOf(doubleArray0, 0.7, 2727);
      assertArrayEquals(new double[] {2727.0, (-1.0), 0.0, 0.0, 204.0}, doubleArray0, 0.01);
      assertEquals((-1), int2);
      assertEquals(5, doubleArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      double[] doubleArray1 = ArrayUtils.add((double[]) null, (int) (byte)0, 100.0);
      assertArrayEquals(new double[] {100.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[2] = (short)18688;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-1512);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[2] = (int) (short) (-1512);
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      ArrayUtils.shift(intArray0, 0, 0, (-874));
      assertArrayEquals(new int[] {0, 0, (-1512), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short)18688;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) (short) (-1);
      objectArray0[3] = (Object) (short) (-1);
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) 0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(7, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(objectArray0[3], objectArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      Integer integer0 = new Integer(122);
      assertEquals(122, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      
      boolean boolean0 = ArrayUtils.contains((Object[]) byteArray0, (Object) null);
      assertTrue(boolean0);
      assertEquals(6, byteArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'E';
      charArray0[2] = 'O';
      charArray0[3] = 'D';
      charArray0[4] = 'D';
      charArray0[5] = 'D';
      charArray0[6] = 'D';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'D', 'E', 'O', 'D', 'D', 'D', 'D'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (-688.0F);
      byteArray0[0] = (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (-688.0F);
      floatArray0[7] = (-2146.6519F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-688.0F));
      assertArrayEquals(new float[] {0.0F, 0.0F, (-688.0F), 0.0F, 0.0F, 0.0F, (-688.0F), (-2146.6519F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(8, floatArray0.length);
      assertEquals("{2, 6}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'b';
      charArray0[2] = 'P';
      ArrayUtils.swap(charArray0, 14, (int) (byte)0);
      assertArrayEquals(new char[] {'P', 'b', 'P'}, charArray0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-688.0F), 0.0F, 0.0F, 0.0F, (-688.0F), (-2146.6519F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-688.0F), 0.0F, 0.0F, 0.0F, (-688.0F), (-2146.6519F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)74, (int) (byte)74);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1255;
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.shift((char[]) null, (int) (byte)3);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      byte byte0 = (byte)77;
      Byte byte1 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean1);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean2);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (int) (byte)77);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = ',';
      charArray0[6] = ',';
      charArray0[7] = 'p';
      charArray0[8] = ',';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {',', ',', ',', ',', ',', ',', ',', 'p', ','}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) ',';
      int int0 = ArrayUtils.indexOf(intArray0, 44, 44);
      assertArrayEquals(new int[] {44}, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) ',';
      floatArray0[2] = 0.0F;
      ArrayUtils.shift(floatArray0, 955, 44, 44);
      assertArrayEquals(new float[] {44.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1671), 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(charArray1, 124);
      assertArrayEquals(new char[] {',', ',', ',', ',', ',', ',', ',', 'p', ','}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 98.0;
      doubleArray0[1] = (double) 44;
      doubleArray0[2] = (double) ',';
      doubleArray0[3] = (double) 124;
      ArrayUtils.swap(doubleArray0, 1565, 955, 955);
      assertArrayEquals(new double[] {98.0, 44.0, 44.0, 124.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = ArrayUtils.get(byteArray0, (-88));
      assertNull(byte0);
      assertEquals(0, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) null);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, 2588, (-957), 2774);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(doubleArray0, 2633, 1885, 2774);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      float[] floatArray1 = new float[0];
      ArrayUtils.shift(floatArray1, (-957), 2571, (-957));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 2103L);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = 99;
      int int1 = (-331);
      int int2 = 1541;
      ArrayUtils.swap(doubleArray0, 99, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      ArrayUtils.reverse((short[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.reverse(doubleArray0, 99, Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short short0 = (short)108;
      Short short1 = new Short((short)108);
      assertEquals((short)108, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[17];
      floatArray0[0] = (float) (short)108;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(17, floatArray0.length);
      assertEquals(34, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 108.0F;
      doubleArray0[1] = (double) 108.0F;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {108.0, 108.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {108.0, 108.0, 108.0, 108.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Byte byte0 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      
      ArrayUtils.shift(floatArray1, (int) (byte) (-110), 1, 256);
      assertEquals(17, floatArray0.length);
      assertEquals(34, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)108;
      longArray0[1] = (long) (byte) (-110);
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (short)108;
      longArray0[4] = (long) 256;
      longArray0[5] = (long) (byte) (-110);
      longArray0[6] = (long) (short)108;
      int int0 = ArrayUtils.indexOf(longArray0, (long) (byte) (-110));
      assertArrayEquals(new long[] {108L, (-110L), 1L, 108L, 256L, (-110L), 108L}, longArray0);
      assertEquals(1, int0);
      assertEquals(7, longArray0.length);
      
      short[] shortArray2 = new short[4];
      shortArray2[0] = (short)108;
      shortArray2[1] = (short)108;
      shortArray2[2] = short0;
      shortArray2[3] = (short) (byte) (-110);
      ArrayUtils.shift(shortArray2, (int) (short)108, (int) (short)108, (int) (short) (-110));
      assertArrayEquals(new short[] {(short)108, (short)108, (short)108, (short) (-110)}, shortArray2);
      assertEquals(4, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 6;
      intArray0[1] = 169;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {6, 169}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = 'Q';
      charArray0[2] = 'w';
      charArray0[3] = '{';
      charArray0[4] = ')';
      charArray0[5] = '!';
      charArray0[6] = 'H';
      charArray0[7] = '';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {'\'', 'Q', 'w', '{', ')', '!', 'H', ''}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 169, (-2504), 0.0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)81;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 169, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1200.8, 1200.8);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 78.0;
      doubleArray0[1] = (-2557.7);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {78.0, (-2557.7), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-34));
      assertEquals((byte) (-34), (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'k');
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      ArrayUtils.reverse((Object[]) null, (-1400), (int) (byte) (-34));
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-34);
      byteArray1[1] = (byte) (-34);
      byteArray1[2] = (byte) (-34);
      byteArray1[3] = (byte) (-34);
      byteArray1[4] = (byte) (-34);
      byteArray1[5] = (byte) (-34);
      byteArray1[6] = (byte) (-34);
      ArrayUtils.reverse(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-34), (byte) (-34), (byte) (-34), (byte) (-34), (byte) (-34), (byte) (-34)}, byteArray1);
      assertEquals(7, byteArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, 117, 7336);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte)113);
      assertEquals((byte)113, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)113;
      ArrayUtils.swap(byteArray0, (-1995), (int) (byte)113);
      assertArrayEquals(new byte[] {(byte)113, (byte)0, (byte)0, (byte)0, (byte)113, (byte)113}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)113, (byte)0, (byte)0, (byte)0, (byte)113, (byte)113}, byteArray0);
      assertArrayEquals(new byte[] {(byte)113, (byte)0, (byte)0, (byte)0, (byte)113, (byte)113}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 's');
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.reverse((Object[]) null, (-870), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)44;
      Byte byte1 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byteArray0[2] = byte2;
      byteArray0[3] = (Byte) byte0;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)44, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[4] = byte3;
      Byte byte4 = new Byte((byte) (-36));
      assertEquals((byte) (-36), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      
      byte[] byteArray1 = new byte[10];
      byteArray1[0] = (byte) (-36);
      byteArray1[1] = byte0;
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte)44);
      assertArrayEquals(new byte[] {(byte) (-36), (byte)44, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(10, byteArray1.length);
      assertEquals(11, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) byte0;
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertArrayEquals(new float[] {44.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertNotNull(objectArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, objectArray0.length);
      assertSame(byteArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)52);
      assertNull(byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1963;
      intArray0[1] = 488;
      intArray0[2] = 1963;
      intArray0[3] = 488;
      intArray0[4] = 488;
      intArray0[5] = (int) (byte)52;
      intArray0[6] = 1963;
      intArray0[7] = 488;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1724));
      assertArrayEquals(new int[] {1963, 488, 1963, 488, 488, 52, 1963, 488}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(8, intArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'j');
      assertArrayEquals(new char[] {'9', '9', '9'}, charArray1);
      assertArrayEquals(new char[] {'9', '9', '9'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      ArrayUtils.shift((short[]) null, 488);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '9';
      doubleArray0[1] = (double) 1963;
      doubleArray0[2] = (double) 488;
      doubleArray0[3] = (double) 1963;
      doubleArray0[4] = (double) '9';
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-1724));
      assertArrayEquals(new double[] {57.0, 1963.0, 488.0, 1963.0, 57.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1724.0), 57.0, 1963.0, 488.0, 1963.0, 57.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1963, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 48;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-808));
      assertArrayEquals(new int[] {48}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.swap((Object[]) integerArray0, (-25), 48);
      assertEquals(6, integerArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (byte)1, 8, (int) (byte)1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)1, 1);
      assertArrayEquals(new int[] {48}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-36));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((byte) (-36));
      assertEquals((-36L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {48}, intArray0);
      assertTrue(boolean1);
      assertEquals(1, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2073.16F);
      floatArray0[1] = (float) (long)longArray0[0];
      floatArray0[2] = (float) (byte) (-36);
      floatArray0[3] = (-2073.16F);
      floatArray0[4] = (float) 48;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) (byte)1;
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (-517.0F), 48);
      assertArrayEquals(new float[] {(-2073.16F), (-36.0F), (-36.0F), (-2073.16F), 48.0F, 1.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet1);
      assertEquals(8, floatArray0.length);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-36);
      shortArray0[1] = (short) (byte) (-36);
      ArrayUtils.shift(shortArray0, 48);
      assertArrayEquals(new short[] {(short) (-36), (short) (-36)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(intArray0, (-1));
      assertArrayEquals(new int[] {48}, intArray0);
      assertFalse(boolean2);
      assertEquals(1, intArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertEquals(6, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 124);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'N';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'N', '\\'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.swap(shortArray0, (-4), 1884, 1884);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '\\';
      floatArray0[1] = (float) '\\';
      floatArray0[2] = (float) 'N';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 124, 127);
      assertArrayEquals(new float[] {92.0F, 92.0F, 78.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\\');
      assertArrayEquals(new char[] {'N'}, charArray1);
      assertArrayEquals(new char[] {'N', '\\'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      char[] charArray2 = ArrayUtils.add(charArray0, '#');
      assertArrayEquals(new char[] {'N', '\\', '#'}, charArray2);
      assertArrayEquals(new char[] {'N', '\\'}, charArray0);
      assertNotNull(charArray2);
      assertEquals(3, charArray2.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 73.0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 73.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {0.0, 73.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 73.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      char char0 = 'P';
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      int int0 = 795;
      int int1 = (-1106);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray2, (-1106));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1106, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift((Object[]) shortArray1, (-50), 2187, (-831));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      int[] intArray0 = new int[5];
      intArray0[0] = 2603;
      intArray0[1] = 2603;
      Byte byte1 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      short short0 = (short)506;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3871);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2002, 79);
      assertArrayEquals(new short[] {(short) (-3871)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-959.0F);
      floatArray0[1] = (float) 79;
      floatArray0[2] = (float) (byte)43;
      floatArray0[3] = (float) 2603;
      floatArray0[4] = (float) 79;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-959.0F), 79.0F, 43.0F, 2603.0F, 79.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(12, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) (short) (-3871), 1L, (-1511L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-910.4652088271758);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1650.860329791577;
      doubleArray0[4] = 1.5;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1055;
      ArrayUtils.shift(floatArray0, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {1055.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('a');
      assertEquals('a', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) double0;
      objectArray0[1] = (Object) 1055.0F;
      objectArray0[2] = (Object) 1.5;
      objectArray0[3] = (Object) 1.5;
      objectArray0[4] = (Object) character1;
      ArrayUtils.shift(objectArray0, (-3543));
      assertEquals(5, objectArray0.length);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null, 0.0);
      assertNull(doubleArray2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'i';
      intArray0[1] = 1055;
      intArray0[2] = (-3543);
      intArray0[3] = (int) 'i';
      intArray0[4] = (int) 'a';
      intArray0[5] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 43, (-3543));
      assertArrayEquals(new int[] {105, 1055, (-3543), 105, 97, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      char[] charArray0 = new char[32];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertEquals(32, charArray0.length);
      assertEquals(32, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)108);
      assertEquals((short)108, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-27L);
      longArray0[1] = (long) (byte)2;
      longArray0[2] = 1839L;
      longArray0[4] = (long) (byte)2;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2950L));
      assertArrayEquals(new long[] {(-27L), 2L, 1839L, 0L, 2L, 0L, 1L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(7, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray0 = new int[3];
      longArray0[1] = (long) (byte)2;
      intArray0[2] = (int) (short)108;
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      intArray0[1] = (int) '@';
      charArray0[2] = 'l';
      char[] charArray1 = ArrayUtils.clone((char[]) null);
      assertNull(charArray1);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-2190), 992.42784156);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2190, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[1] = 'O';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'O';
      floatArray0[3] = 744.83F;
      floatArray0[4] = (float) 'N';
      floatArray0[6] = 744.83F;
      charArray0[1] = '\u0000';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1176.835F);
      assertArrayEquals(new float[] {79.0F, 0.0F, 0.0F, 744.83F, 78.0F, 0.0F, 744.83F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)33;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)33);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)33}, byteArray0);
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)33}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 744.83F;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 79.0F;
      doubleArray0[3] = (double) 'N';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1111.707042);
      assertArrayEquals(new double[] {744.8300170898438, 1.5, 79.0, 78.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {744.8300170898438, 1.5, 79.0, 78.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[4] = 'p';
      charArray0[5] = 'w';
      ArrayUtils.shift(charArray0, (-6), 5, (int) 'p');
      assertArrayEquals(new char[] {'\u0000', 'p', 'p', 'p', '\u0000', 'w'}, charArray0);
      assertEquals(6, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)1, 5);
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte) (-26));
      assertEquals((byte) (-26), (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.hashCode((Object) byte0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      int int0 = (-5710);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-5710));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5710, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      Byte[] byteArray0 = new Byte[7];
      byteArray0[1] = byte1;
      byteArray0[2] = (Byte) byte0;
      byteArray0[3] = (Byte) byte0;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 7);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) byte0;
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 488.0F, (int) (byte)1);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-72.555305F);
      floatArray0[1] = 1643.3F;
      floatArray0[2] = (float) 0;
      ArrayUtils.shift(floatArray0, 1055);
      assertArrayEquals(new float[] {1643.3F, 0.0F, (-72.555305F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1643.3F, 0.0F, (-72.555305F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = (char) character0;
      charArray0[1] = 'i';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'i', 'i'}, charArray0);
      assertEquals(2, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'X');
      assertArrayEquals(new char[] {'i', 'i'}, charArray0);
      assertArrayEquals(new char[] {'X', 'i', 'i'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = Integer.MAX_VALUE;
      int int1 = ArrayUtils.indexOf((int[]) null, Integer.MAX_VALUE, 1349);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1643.3F, 0.0F, (-72.555305F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1643.3F, 0.0F, (-72.555305F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, 1349);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1349, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = Float.NaN;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), Float.NaN}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-626L));
      assertEquals((-626L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(5049L);
      assertEquals(5049L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long(86L);
      assertEquals(86L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[0]);
      assertEquals((-626L), (long)long3);
      assertNotNull(long3);
      assertEquals(9, longArray0.length);
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[0]);
      assertEquals((-626L), (long)long4);
      assertNotNull(long4);
      assertEquals(9, longArray0.length);
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      
      longArray0[4] = long4;
      Long long5 = new Long((-626L));
      assertEquals((-626L), (long)long5);
      assertNotNull(long5);
      assertTrue(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      
      longArray0[5] = long5;
      Long long6 = new Long(0L);
      assertEquals(0L, (long)long6);
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      
      Long long7 = Long.getLong((String) null, long6);
      assertEquals(0L, (long)long7);
      assertNotNull(long7);
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      
      longArray0[6] = long7;
      Long long8 = new Long(950L);
      assertEquals(950L, (long)long8);
      assertNotNull(long8);
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long4));
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long0));
      
      longArray0[7] = long8;
      Long long9 = new Long((-2950L));
      assertEquals((-2950L), (long)long9);
      assertNotNull(long9);
      assertFalse(long9.equals((Object)long1));
      assertFalse(long9.equals((Object)long5));
      assertFalse(long9.equals((Object)long7));
      assertFalse(long9.equals((Object)long8));
      assertFalse(long9.equals((Object)long2));
      assertFalse(long9.equals((Object)long4));
      assertFalse(long9.equals((Object)long6));
      assertFalse(long9.equals((Object)long3));
      assertFalse(long9.equals((Object)long0));
      
      longArray0[8] = long9;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {(-626L), 5049L, 86L, (-626L), (-626L), (-626L), 0L, 950L, (-2950L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      byte byte0 = (byte) (-101);
      byteArray0[1] = (byte) (-101);
      int int0 = (-256);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-256), (-2146945822));
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-101)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte[] byteArray2 = new Byte[3];
      byteArray2[0] = (Byte) (byte) (-107);
      byteArray2[1] = (Byte) (byte) (-101);
      byteArray2[2] = (Byte) (byte) (-107);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(14, byteArray2, byteArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), (int) (byte)58);
      assertArrayEquals(new byte[] {(byte)58, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)58, (byte) (-1)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertArrayEquals(new byte[] {(byte)58, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)58, (byte) (-1)}, byteArray1);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.shift(intArray0, (-521), 120, (-3424));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      byte byte0 = (byte)14;
      byte byte1 = (byte)13;
      Byte byte2 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-465L));
      assertEquals((-465L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((-465L));
      assertEquals((-465L), (long)long2);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)13);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)14, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('i');
      assertEquals('i', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-226);
      intArray0[1] = (int) 'i';
      ArrayUtils.shift(intArray0, 1, 128, 2);
      assertArrayEquals(new int[] {(-226), 105}, intArray0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.shift(doubleArray0, 1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = new Byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = byte0;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte) (-39));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-39.0), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 3143.9, (int) (byte) (-56), (double) (-848));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-39.0), 0.0}, doubleArray1, 0.01);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-56);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertArrayEquals(new long[] {(-56L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift((float[]) null, 122, (-3731), 97);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)29;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-3731), 2789, (-3448.467583788467));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29}, byteArray0);
      assertTrue(boolean0);
      assertEquals(8, byteArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)29;
      intArray0[1] = 122;
      intArray0[2] = (int) (byte)29;
      intArray0[3] = (int) (byte)29;
      intArray0[4] = (int) (byte)29;
      intArray0[5] = (-3731);
      intArray0[6] = 97;
      intArray0[7] = (-3731);
      intArray0[8] = (int) (byte)29;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2471), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2471, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)44;
      Byte byte1 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      byteArray0[2] = (Byte) byte0;
      byte[] byteArray1 = ArrayUtils.removeElement((byte[]) null, (byte) (-1));
      assertNull(byteArray1);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-2481L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) byteArray0, (Random) mockRandom0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) floatArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)33;
      Byte byte1 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      int[] intArray0 = new int[5];
      intArray0[0] = 2603;
      intArray0[1] = 2603;
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) byte0;
      intArray0[4] = 2603;
      ArrayUtils.swap(intArray0, (int) (byte)33, 2603, 33);
      assertArrayEquals(new int[] {2603, 2603, 33, 33, 2603}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte byte2 = (byte)87;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)33, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte0 == byte2);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      
      Byte byte5 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      
      Byte byte6 = new Byte((byte) (-90));
      assertEquals((byte) (-90), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-90);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-90L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-90);
      shortArray0[1] = (short) (byte) (-90);
      shortArray0[2] = (short) (byte)33;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3982);
      assertArrayEquals(new short[] {(short) (-90), (short) (-90), (short)33, (short)33, (short)33}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(5, shortArray0.length);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)87;
      byteArray1[1] = (byte)87;
      ArrayUtils.shift(byteArray1, 113);
      assertArrayEquals(new byte[] {(byte)87, (byte)87}, byteArray1);
      assertEquals(2, byteArray1.length);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (double) 2603);
      assertNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte3, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 82, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      intArray0[3] = 1541;
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-558);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (-448);
      shortArray0[5] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (short) (-448), (int) (short)0);
      assertArrayEquals(new short[] {(short) (-558), (short)0, (short) (-1), (short)1, (short) (-448), (short) (-1)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      ArrayUtils.reverse((Object[]) byteArray1, (int) (short) (-1), (int) (short) (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1, class0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      short[] shortArray0 = new short[0];
      long[] longArray0 = new long[3];
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-6));
      assertEquals((byte) (-6), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long long0 = new Long((byte)13);
      assertEquals(13L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-465L));
      assertEquals((-465L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((-465L));
      assertEquals((-465L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      Long long3 = new Long((byte)14);
      assertEquals(14L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short) (-1130));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-1130);
      floatArray0[1] = 2115.4F;
      floatArray0[2] = (float) (byte)13;
      floatArray0[3] = (float) (byte)13;
      floatArray0[4] = (float) (byte)13;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 13.0F);
      assertArrayEquals(new float[] {(-1130.0F), 2115.4F, 13.0F, 13.0F, 13.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '~';
      charArray0[2] = 'C';
      charArray0[3] = 'r';
      charArray0[4] = '?';
      charArray0[5] = '-';
      charArray0[6] = 'E';
      charArray0[7] = '>';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '9');
      assertArrayEquals(new char[] {'1', '~', 'C', 'r', '?', '-', 'E', '>'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-77));
      assertEquals((byte) (-77), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-77), object0);
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-77);
      ArrayUtils.swap(byteArray0, (int) (byte) (-77), 111, 160);
      assertArrayEquals(new byte[] {(byte) (-77), (byte) (-77), (byte) (-77), (byte) (-77), (byte) (-77), (byte) (-77)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-77);
      floatArray0[1] = (float) (byte) (-77);
      floatArray0[2] = (float) (byte) (-77);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {(-77.0F), (-77.0F), (-77.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((byte) (-77));
      assertEquals((-77L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((byte) (-77));
      assertEquals((-77L), (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((-422L));
      assertEquals((-422L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[2]);
      assertEquals((-422L), (long)long3);
      assertNotNull(long3);
      assertEquals(5, longArray0.length);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      
      longArray0[3] = long3;
      Long long4 = new Long((byte) (-77));
      assertEquals((-77L), (long)long4);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long1));
      
      longArray0[4] = long4;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[] longArray0 = new long[8];
      longArray0[0] = (-1810L);
      longArray0[1] = (-106L);
      longArray0[2] = (long) (short)2;
      longArray0[3] = (-1L);
      Byte byte0 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)3581);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0, 96.1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray((short[]) null, Integer.MAX_VALUE, 1);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (int) (byte)0, 657);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(3114.2);
      assertEquals(3114.2, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0L);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-4101);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)30706;
      shortArray0[3] = (short) (-3201);
      shortArray0[4] = (short)2278;
      shortArray0[5] = (short) (-2576);
      ArrayUtils.swap(shortArray0, (int) (short) (-2576), (int) (short)2, (int) (short) (-3201));
      assertArrayEquals(new short[] {(short) (-4101), (short)2, (short)30706, (short) (-3201), (short)2278, (short) (-2576)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2576), (short)2278, (short) (-3201), (short)30706, (short)2, (short) (-4101)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false, 113);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray1));
      assertEquals(4, int0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(150.2F);
      assertEquals(150.2F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {150.2F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      Float[] floatArray0 = new Float[4];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('i');
      assertEquals('i', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1372);
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2103;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, (-3304));
      assertArrayEquals(new long[] {2103L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      Double double0 = new Double(3.0);
      assertEquals(3.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1033.176354244));
      assertEquals((-1033.176354244), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1795.6906);
      assertEquals(1795.6906, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)85;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)85}, shortArray0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      
      Float[] floatArray1 = new Float[7];
      floatArray1[0] = (Float) (-1372.0F);
      floatArray1[1] = (Float) (-1372.0F);
      floatArray1[2] = (Float) (-1372.0F);
      floatArray1[3] = (Float) (-1372.0F);
      floatArray1[4] = (Float) (-1372.0F);
      floatArray1[5] = (Float) (-1372.0F);
      floatArray1[6] = (Float) (-1372.0F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertArrayEquals(new float[] {(-1372.0F), (-1372.0F), (-1372.0F), (-1372.0F), (-1372.0F), (-1372.0F), (-1372.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = ArrayUtils.get(byteArray0, (int) 0, byte3);
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      assertEquals(5, byteArray0.length);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Double double0 = new Double(byte0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(byte0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1639), (int) 'b');
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte)120;
      byteArray1[2] = (byte)120;
      byteArray1[3] = byte0;
      byteArray1[5] = (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)120, (byte)120, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertTrue(boolean1);
      assertEquals(6, byteArray1.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 204;
      ArrayUtils.reverse((short[]) null);
      ArrayUtils.reverse(doubleArray0, (-1403), (-1403));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 204.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 127;
      longArray0[1] = (long) 2588;
      longArray0[2] = 1840L;
      longArray0[3] = (long) (-1403);
      longArray0[4] = (long) 2727;
      longArray0[5] = (long) 2588;
      ArrayUtils.shift(longArray0, 2588);
      assertArrayEquals(new long[] {2727L, 2588L, 127L, 2588L, 1840L, (-1403L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2588;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {2588}, intArray0);
      assertArrayEquals(new int[] {2588, 2588}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('e');
      assertEquals('e', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('G');
      assertEquals('G', (char)character2);
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'e');
      assertArrayEquals(new char[] {'G', 'e', 'G'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray1, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2588, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)0;
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      char[] charArray0 = new char[4];
      Byte byte0 = new Byte((byte) (-75));
      assertEquals((byte) (-75), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray2.length);
      assertSame(booleanArray0, booleanArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '~';
      longArray0[1] = (-124L);
      longArray0[2] = (long) '~';
      longArray0[3] = (long) (byte) (-75);
      longArray0[4] = (long) (byte) (-75);
      longArray0[5] = (long) '~';
      longArray0[6] = (long) 0;
      ArrayUtils.swap(longArray0, (int) (byte) (-75), 0, 233);
      assertArrayEquals(new long[] {126L, (-124L), 126L, (-75L), (-75L), 126L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 126L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (byte) (-75);
      doubleArray0[3] = (double) (byte) (-75);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1508.8447468), 3322);
      assertArrayEquals(new double[] {126.0, 0.0, (-75.0), (-75.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-72.555305F);
      floatArray0[1] = 1643.3F;
      floatArray0[2] = (float) 0;
      ArrayUtils.shift(floatArray0, 1055);
      assertArrayEquals(new float[] {1643.3F, 0.0F, (-72.555305F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1643.3F, 0.0F, (-72.555305F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'i';
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'i';
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Long long0 = new Long(1055);
      assertEquals(1055L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-56L));
      assertEquals((-56L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      ArrayUtils.shift(longArray0, (-372));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 105L, 0L, 105L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1055;
      intArray0[1] = (int) 'i';
      intArray0[2] = (int) (char)character0;
      intArray0[3] = (int) 'i';
      intArray0[4] = (int) 'i';
      intArray0[5] = 1055;
      intArray0[6] = (-372);
      intArray0[7] = (int) 'i';
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {105, 105, 105, 105, 1055, (-372), 105, 1055}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1004);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-808));
      assertArrayEquals(new int[] {(-1004)}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      Object object0 = ArrayUtils.get((Object[]) integerArray0, 48);
      assertNull(object0);
      assertEquals(6, integerArray0.length);
      
      ArrayUtils.swap((Object[]) integerArray0, (-25), (-1004));
      assertEquals(6, integerArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (byte)48, 8, (int) (byte)1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 9, 1);
      assertArrayEquals(new int[] {(-1004)}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(7, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 80, 80);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.7;
      doubleArray0[2] = 57.0;
      doubleArray0[3] = 1073.298;
      doubleArray0[4] = 3.0;
      doubleArray0[5] = (-3085.7397663);
      doubleArray0[6] = (-5135.14028597);
      doubleArray0[7] = 1915.15;
      doubleArray0[8] = (-1.0);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1073.298);
      assertArrayEquals(new double[] {Double.NaN, 0.7, 57.0, 1073.298, 3.0, (-3085.7397663), (-5135.14028597), 1915.15, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.7, 57.0, 1073.298, 3.0, (-3085.7397663), (-5135.14028597), 1915.15, (-1.0), 1073.298}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 1915.15;
      objectArray0[1] = (Object) 1915.15;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) 57.0;
      int int0 = ArrayUtils.indexOf(objectArray0, object0, 461);
      assertEquals((-1), int0);
      assertEquals(4, objectArray0.length);
      assertSame(object0, object1);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-1), 3648);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)42, object1);
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1, "");
      assertEquals("42", string0);
      assertNotNull(string0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short) (byte)42;
      shortArray0[3] = (short) (byte)42;
      shortArray0[4] = (short) (byte)42;
      shortArray0[5] = (short) (byte)42;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)42, (short)42, (short)42, (short)42}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      short[] shortArray2 = new short[9];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (byte)42;
      shortArray2[1] = (short) (byte)42;
      shortArray2[2] = (short) (byte)42;
      shortArray2[3] = (short) (byte)42;
      shortArray2[4] = (short) (byte)42;
      shortArray2[5] = (short) (byte)42;
      shortArray2[6] = (short) (byte)42;
      shortArray2[7] = (short) (byte)42;
      shortArray2[8] = (short) (byte)42;
      ArrayUtils.shuffle(shortArray2, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)42, (short)42, (short)42, (short)42, (short)42, (short)42, (short)42, (short)42, (short)42}, shortArray2);
      assertEquals(9, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      short[] shortArray3 = new short[9];
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      
      shortArray3[0] = (short) (byte)42;
      shortArray3[1] = (short)0;
      shortArray3[2] = (short) (byte)42;
      shortArray3[3] = (short) (byte)42;
      shortArray3[4] = (short) (byte)42;
      shortArray3[5] = (short) (byte)42;
      shortArray3[6] = (short) (byte)42;
      shortArray3[7] = (short) (byte)42;
      shortArray3[8] = (short) (byte)42;
      int[] intArray0 = new int[0];
      short[] shortArray4 = ArrayUtils.removeAll(shortArray3, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short)42, (short)0, (short)42, (short)42, (short)42, (short)42, (short)42, (short)42, (short)42}, shortArray4);
      assertArrayEquals(new short[] {(short)42, (short)0, (short)42, (short)42, (short)42, (short)42, (short)42, (short)42, (short)42}, shortArray3);
      assertNotNull(shortArray4);
      assertEquals(0, intArray0.length);
      assertEquals(9, shortArray4.length);
      assertEquals(9, shortArray3.length);
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertFalse(shortArray4.equals((Object)shortArray2));
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotSame(shortArray4, shortArray3);
      assertNotSame(shortArray4, shortArray2);
      assertNotSame(shortArray4, shortArray1);
      assertNotSame(shortArray4, shortArray0);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray4);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)42, object1);
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1, "");
      assertEquals("42", string0);
      assertNotNull(string0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short) (byte)42;
      shortArray0[3] = (short) (byte)42;
      shortArray0[4] = (short) (byte)42;
      shortArray0[5] = (short) (byte)42;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)42, (short)42, (short)42, (short)42}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)42;
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.insert(392, longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      
      ArrayUtils.swap((Object[]) null, (int) (short)42, 392, 2224);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (-826), 1502, (-1885));
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-25);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-25);
      floatArray0[1] = (float) (byte) (-25);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-25);
      floatArray0[4] = (float) (byte) (-25);
      floatArray0[5] = (-1532.6366F);
      ArrayUtils.swap(floatArray0, (-2445), 0, (int) (byte) (-25));
      assertArrayEquals(new float[] {(-25.0F), (-25.0F), 0.0F, (-25.0F), (-25.0F), (-1532.6366F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-25.0F));
      assertArrayEquals(new float[] {(-25.0F), (-25.0F), 0.0F, (-25.0F), (-25.0F), (-1532.6366F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(6, floatArray0.length);
      assertEquals("{0, 1, 3, 4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "");
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x', 840);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      
      Character character0 = Character.valueOf('[');
      assertEquals('[', (char)character0);
      assertNotNull(character0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-25.0F), (-25.0F), 0.0F, (-25.0F), (-25.0F), (-1532.6366F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      long[] longArray0 = new long[9];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)3273;
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)3273, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)3273, (short)0}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-2166));
      assertEquals((-2166), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2844));
      assertEquals((-2844), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(50);
      assertEquals(50, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2331);
      assertEquals(2331, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      assertEquals(1, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      
      integerArray0[6] = integer6;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 863);
      assertArrayEquals(new int[] {(-2166), (-2844), 0, 0, 50, 2331, 1}, intArray0);
      assertNotNull(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, (-1421));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      BitSet bitSet1 = (BitSet)bitSet0.clone();
      assertNotNull(bitSet1);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      char[] charArray0 = new char[2];
      BitSet bitSet2 = ArrayUtils.indexesOf((float[]) null, (float) (byte)1, (int) (byte)1);
      assertNotNull(bitSet2);
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(0, bitSet2.length());
      assertEquals(64, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4146;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)4146}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0, (int) (short)4146, 119);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)4146;
      longArray0[1] = (long) (short)4146;
      longArray0[2] = (long) (short)4146;
      longArray0[3] = (long) 119;
      ArrayUtils.shift(longArray0, (-372));
      assertArrayEquals(new long[] {4146L, 4146L, 4146L, 119L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.shift(longArray0, (-372));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.swap(longArray0, (-372), (-372), (-372));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = '_';
      charArray0[4] = 'w';
      charArray0[5] = 'w';
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 884.505097001, 884.505097001);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'w';
      floatArray0[1] = (float) 'w';
      floatArray0[2] = (float) 'E';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 'w';
      floatArray0[5] = (-3.0F);
      floatArray0[6] = (float) 'w';
      floatArray0[7] = (float) 'w';
      floatArray0[8] = (float) 'E';
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 119.0F, (-1));
      assertArrayEquals(new float[] {119.0F, 119.0F, 69.0F, (-1.0F), 119.0F, (-3.0F), 119.0F, 119.0F, 69.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(9, floatArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[15];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3991.9, (int) (byte)0, (double) (byte)0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'F';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'F', 'b'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 3991.9, 1.0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 128;
      floatArray0[1] = (float) 128;
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1), (int) (byte)0);
      assertArrayEquals(new float[] {128.0F, 128.0F}, floatArray0, 0.01F);
      assertEquals((-1), int2);
      assertEquals(2, floatArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 2645L;
      longArray0[2] = (-1L);
      longArray0[3] = 49L;
      longArray0[4] = 0L;
      longArray0[5] = (-240L);
      longArray0[6] = (-1L);
      longArray0[7] = (-45L);
      longArray0[8] = 49L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 2645L, (-1L), 49L, 0L, (-240L), (-1L), (-45L), 49L}, longArray0);
      assertTrue(boolean0);
      assertEquals(9, longArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte) (-83);
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-71));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-83), (byte)9, (byte) (-1), (byte)0}, byteArray1);
      assertEquals((-1), int0);
      assertEquals(5, byteArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-83);
      floatArray0[1] = (float) 49L;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 7.0F, (-2190));
      assertArrayEquals(new float[] {(-83.0F), 49.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(2, floatArray0.length);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3525.3875487192063);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-3525.3875487192063);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {(-3525.3875487192063), 1.0, (-3525.3875487192063), 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3525.3875487192063), 1.0, (-3525.3875487192063), 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('5');
      assertEquals('5', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('t');
      assertEquals('t', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Character character3 = Character.valueOf('5');
      assertEquals('5', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      
      Character character4 = Character.valueOf('N');
      assertEquals('N', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      
      Character character5 = Character.valueOf('j');
      assertEquals('j', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      
      Character character6 = new Character('N');
      assertEquals('N', (char)character6);
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character3));
      
      Character character7 = new Character('>');
      assertEquals('>', (char)character7);
      assertNotNull(character7);
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character2));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-2193L);
      longArray0[1] = (long) (-1093);
      longArray0[2] = (long) 't';
      longArray0[3] = (long) 't';
      longArray0[4] = (long) 'N';
      longArray0[5] = (long) 'j';
      ArrayUtils.swap(longArray0, (-1093), (-2502), (-2502));
      assertArrayEquals(new long[] {(-2193L), (-1093L), 116L, 116L, 78L, 106L}, longArray0);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 762.4110088, (double) 106L);
      assertArrayEquals(new double[] {(-3525.3875487192063), 1.0, (-3525.3875487192063), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte) (-100);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)29);
      assertArrayEquals(new byte[] {(byte)41, (byte)124, (byte) (-29), (byte)8, (byte) (-114), (byte)0, (byte)119, (byte) (-100)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)124, (byte) (-29), (byte)8, (byte) (-114), (byte)0, (byte)119, (byte) (-100)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 3673, 69, (-947));
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-947);
      longArray0[1] = (long) (-947);
      longArray0[2] = (long) 3673;
      longArray0[3] = (long) 3673;
      longArray0[4] = (long) 3673;
      longArray0[5] = (long) 3673;
      longArray0[6] = (-2562L);
      longArray0[7] = (long) 3673;
      longArray0[8] = (long) 3673;
      ArrayUtils.shift(longArray0, 881);
      assertArrayEquals(new long[] {(-947L), 3673L, 3673L, 3673L, 3673L, (-2562L), 3673L, 3673L, (-947L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      Long[] longArray1 = new Long[7];
      longArray1[0] = (Long) 3673L;
      longArray1[1] = (Long) (-2562L);
      longArray1[2] = (Long) (-947L);
      longArray1[3] = (Long) 3673L;
      longArray1[4] = (Long) 3673L;
      longArray1[5] = (Long) (-947L);
      longArray1[6] = (Long) (-947L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertArrayEquals(new long[] {3673L, (-2562L), (-947L), 3673L, 3673L, (-947L), (-947L)}, longArray2);
      assertNotNull(longArray2);
      assertEquals(7, longArray2.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray2, longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-947);
      intArray0[1] = 881;
      intArray0[2] = 69;
      intArray0[3] = 3269;
      intArray0[4] = 881;
      intArray0[5] = (-947);
      intArray0[6] = (-113);
      intArray0[7] = 69;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-931);
      intArray1[1] = (-947);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertArrayEquals(new int[] {(-947), 881, 69, 3269, 881, (-947), (-113), 69}, intArray0);
      assertArrayEquals(new int[] {(-931), (-947)}, intArray1);
      assertFalse(boolean0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(9, booleanArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3982);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.shift(byteArray0, 7);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)86, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)86;
      intArray0[1] = 7;
      intArray0[2] = (int) (byte)86;
      intArray0[3] = (-1);
      intArray0[4] = 7;
      intArray0[5] = (int) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {86, 7, 86, (-1), 7, 0}, intArray0);
      assertTrue(boolean1);
      assertEquals(6, intArray0.length);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 7;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 86;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (-2073.16F);
      floatArray0[6] = (float) (short)3982;
      floatArray0[7] = (float) 7;
      floatArray0[8] = (-331.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-405.0F), (-2137020755));
      assertArrayEquals(new float[] {7.0F, (-1.0F), 86.0F, (-1.0F), 0.0F, (-2073.16F), 3982.0F, 7.0F, (-331.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(9, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      byteArray0[3] = (Byte) byte0;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(byteArray0, (int) byte0);
      assertTrue(boolean1);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1615);
      shortArray0[1] = (short) byte0;
      ArrayUtils.shift(shortArray0, 7, Integer.MAX_VALUE, 10);
      assertArrayEquals(new short[] {(short) (-1615), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) Integer.MAX_VALUE;
      floatArray0[5] = (float) byte0;
      floatArray0[6] = (float) byte0;
      floatArray0[7] = Float.NaN;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 2.14748365E9F, 0.0F, 0.0F, Float.NaN}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2899.13643855917, 488);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)52);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)52;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)52, (int) (byte)52);
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(1, shortArray0.length);
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)34);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.swap((boolean[]) null, 210, (-2490));
      Byte byte0 = new Byte((byte) (-104));
      assertEquals((byte) (-104), (byte)byte0);
      assertNotNull(byte0);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'k');
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.reverse((Object[]) byteArray0, 792, (int) (byte)4);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.reverse((Object[]) null);
      ArrayUtils.shift((Object[]) byteArray0, (-575), (-3219), 1149);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1501.1627);
      doubleArray0[1] = 958.983402;
      doubleArray0[2] = 1782.08337753;
      doubleArray0[3] = (-111.885892556);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-1501.1627), 958.983402, 1782.08337753, (-111.885892556)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, 1061, 1061, 1061);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1061;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 889;
      doubleArray0[3] = (double) 'K';
      doubleArray0[4] = (double) 100;
      doubleArray0[5] = 100.0;
      doubleArray0[6] = (double) 100;
      doubleArray0[7] = (double) 'K';
      doubleArray0[8] = (double) 100;
      ArrayUtils.shift(doubleArray0, (-1), 8192, 125);
      assertArrayEquals(new double[] {1.0, 889.0, 75.0, 100.0, 100.0, 100.0, 75.0, 100.0, 1061.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      ArrayUtils.swap((Object[]) null, 100, 788);
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte) (-110);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)74, (-2517));
      assertArrayEquals(new byte[] {(byte)40, (byte)0, (byte) (-6), (byte)74, (byte)85, (byte) (-76), (byte) (-110)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object object0 = ArrayUtils.get((Object[]) null, 53);
      assertNull(object0);
      
      ArrayUtils.swap((Object[]) null, (int) (byte)74, 3178);
      ArrayUtils.shift(byteArray0, (int) (byte) (-76), 1118, (-164));
      assertArrayEquals(new byte[] {(byte)74, (byte)85, (byte) (-76), (byte) (-110), (byte)40, (byte)0, (byte) (-6)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 85, 85, (int) 'K');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      
      Byte byte0 = new Byte((byte) (-65));
      assertEquals((byte) (-65), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.swap(floatArray0, 4426, (int) (byte) (-65), 715);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[0];
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, 683);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 122, (-3731), 97);
      Byte byte0 = new Byte((byte) (-56));
      assertEquals((byte) (-56), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-56));
      assertEquals((byte) (-56), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte0;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-56);
      byteArray1[1] = (byte) (-56);
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-56)}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, '3');
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-56);
      longArray0[1] = (long) (byte) (-56);
      longArray0[2] = (long) (byte) (-56);
      longArray0[3] = (long) '3';
      longArray0[4] = (long) (byte) (-56);
      longArray0[5] = (long) (byte) (-56);
      longArray0[6] = (long) (byte) (-56);
      longArray0[7] = (long) 122;
      longArray0[8] = (long) (-3731);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1747L));
      assertArrayEquals(new long[] {(-56L), (-56L), (-56L), 51L, (-56L), (-56L), (-56L), 122L, (-3731L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '\'', (int) (byte) (-56));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "-/z*5jbjN-;VQ$a");
      assertNotNull(stringArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, stringArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      Byte byte0 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.swap((boolean[]) null, (int) (byte)44, 2774, 3009);
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2588;
      ArrayUtils.shift(doubleArray0, (int) (byte)44, 0, 3009);
      assertArrayEquals(new double[] {2588.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 2588.0;
      doubleArray1[1] = (Double) 2588.0;
      doubleArray1[2] = (Double) 2588.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertArrayEquals(new double[] {2588.0, 2588.0, 2588.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 1878;
      floatArray1[2] = (float) 2633;
      floatArray1[3] = (float) (-957);
      floatArray1[4] = (float) 3009;
      floatArray1[5] = (float) 1878;
      doubleArray0[0] = (double) (byte)44;
      ArrayUtils.shift(floatArray1, (-1274), 0, 1878);
      assertArrayEquals(new float[] {0.0F, 1878.0F, 2633.0F, (-957.0F), 3009.0F, 1878.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, (int) (byte)44);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, (-75), 0);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-105);
      byteArray0[0] = (byte) (-105);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Byte byte1 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = byte1;
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      byteArray1[3] = (Byte) (byte) (-105);
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-105), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = ArrayUtils.get(byteArray1, (-186), byte2);
      assertEquals((byte) (-105), (byte)byte3);
      assertNotNull(byte3);
      assertEquals(4, byteArray1.length);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      Character character0 = new Character('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      Double double0 = new Double(byte0);
      assertEquals((-105.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((byte) (-105));
      assertEquals((-105.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift((Object[]) doubleArray0, (-2538));
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte0);
      assertTrue(boolean0);
      
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-105)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (byte)0;
      doubleArray2[1] = (double) (-2538);
      int int0 = ArrayUtils.indexOf(doubleArray2, 1.0, (int) byte0, 1.0);
      assertArrayEquals(new double[] {0.0, (-2538.0)}, doubleArray2, 0.01);
      assertEquals(0, int0);
      assertEquals(2, doubleArray2.length);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-105)}, byteArray0);
      assertFalse(boolean1);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      Long long2 = new Long((-1L));
      assertEquals((-1L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      Long long3 = new Long(3324L);
      assertEquals(3324L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      
      Long long4 = new Long(3324L);
      assertEquals(3324L, (long)long4);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long2;
      longArray0[1] = long2;
      longArray0[2] = long3;
      longArray0[3] = long1;
      longArray0[4] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short) (-1130));
      assertArrayEquals(new long[] {(-1L), (-1L), 3324L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) long0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)40;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte) (-41), (byte)3, (byte)34, (byte)11, (byte) (-7), (byte)57, (byte)40}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(16, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte)40);
      assertArrayEquals(new float[] {40.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2727;
      doubleArray0[1] = (-1.0);
      doubleArray0[4] = (double) 204;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2727.0);
      assertArrayEquals(new double[] {2727.0, (-1.0), 0.0, 0.0, 204.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('u');
      assertEquals('u', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      float[] floatArray2 = new float[0];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.insert(48, (long[]) null, (long[]) null);
      assertNull(longArray1);
      
      int int1 = ArrayUtils.indexOf((long[]) null, 0L, 1556);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 7);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<Byte> class5 = Byte.class;
      classArray0[5] = class5;
      Class<Byte> class6 = Byte.class;
      classArray0[6] = class6;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(7, classArray0.length);
      assertEquals(7, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2105.128);
      doubleArray0[3] = (-304.273386060069);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      Byte byte0 = new Byte((byte) (-67));
      assertEquals((byte) (-67), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-67));
      assertEquals((byte) (-67), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-50));
      assertEquals((byte) (-50), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Short[] shortArray0 = new Short[0];
      ArrayUtils.shift((Object[]) shortArray0, (int) (byte) (-67), 1431655765, 1431655765);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Character character0 = new Character('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('o');
      assertEquals('o', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      charArray0[4] = 'm';
      charArray0[5] = 'o';
      charArray0[6] = 'o';
      charArray0[7] = 'o';
      charArray0[8] = 'o';
      int int0 = ArrayUtils.indexOf(charArray0, 'o', 4735);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o', 'm', 'o', 'o', 'o', 'o'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)59;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)59);
      assertArrayEquals(new byte[] {(byte)59, (byte)59, (byte)59, (byte)59, (byte)59, (byte)59}, byteArray0);
      assertEquals(0, int1);
      assertEquals(6, byteArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o', 'm', 'o', 'o', 'o', 'o'}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      short[] shortArray0 = new short[13];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(13, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.shift(doubleArray0, 1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)29}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)29;
      shortArray0[1] = (short)332;
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)29;
      shortArray1[1] = (short) (-3068);
      shortArray1[2] = (short) (-3068);
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)29, (short)332}, shortArray0);
      assertArrayEquals(new short[] {(short)29, (short) (-3068), (short) (-3068)}, shortArray1);
      assertArrayEquals(new short[] {(short)332}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1055;
      floatArray0[1] = (float) 1055;
      floatArray0[2] = (float) 1055;
      floatArray0[3] = (float) 1055;
      ArrayUtils.shift(floatArray0, 1055);
      assertArrayEquals(new float[] {1055.0F, 1055.0F, 1055.0F, 1055.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Character character0 = new Character('&');
      assertEquals('&', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1055.0F, 1055.0F, 1055.0F, 1055.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'i';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {105L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray2, longArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)52;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-220);
      shortArray0[4] = (short) (-1701);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)32345;
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)571;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)52, (short)0, (short)1, (short) (-220), (short) (-1701), (short)2, (short)32345, (short)1, (short)571}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-220));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)571;
      intArray0[1] = (int) (short)571;
      intArray0[2] = (int) (short)571;
      intArray0[3] = (int) (short)2;
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 1055);
      assertArrayEquals(new int[] {571, 571, 571, 2}, intArray0);
      assertNotNull(bitSet1);
      assertEquals(4, intArray0.length);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)17;
      Byte byte1 = new Byte((byte)17);
      assertEquals((byte)17, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) (byte)17;
      longArray0[3] = (long) (byte)17;
      longArray0[4] = (long) (byte)17;
      longArray0[5] = (long) (byte)17;
      longArray0[6] = (long) byte0;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) (byte)17;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)17;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short) byte0;
      shortArray0[7] = (short) byte0;
      shortArray0[8] = (short) (byte)17;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-494), (int) (short)17);
      assertArrayEquals(new short[] {(short)17, (short)17, (short)17, (short)17, (short)17, (short)17, (short)17, (short)17, (short)17}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(9, shortArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray1, (Object[]) byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 17L;
      doubleArray0[1] = (double) 17L;
      doubleArray0[2] = (double) (short)17;
      doubleArray0[3] = (double) 17L;
      doubleArray0[4] = (double) (short)17;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 17.0);
      assertArrayEquals(new double[] {17.0, 17.0, 17.0, 17.0, 17.0}, doubleArray0, 0.01);
      assertNotNull(bitSet1);
      assertEquals(5, doubleArray0.length);
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0, 1, 2, 3, 4}", bitSet1.toString());
      assertEquals(5, bitSet1.cardinality());
      assertEquals(5, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      Byte byte0 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-560.0F);
      floatArray0[1] = (float) (byte)44;
      floatArray0[2] = 1176.835F;
      floatArray0[3] = (float) (byte)44;
      floatArray0[4] = (float) 'N';
      floatArray0[5] = (float) 'O';
      floatArray0[6] = (float) 'O';
      floatArray0[7] = (float) (byte)44;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1176.835F);
      assertArrayEquals(new float[] {(-560.0F), 44.0F, 1176.835F, 44.0F, 78.0F, 79.0F, 79.0F, 44.0F}, floatArray0, 0.01F);
      assertEquals(2, int0);
      assertEquals(8, floatArray0.length);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)44;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)44);
      assertArrayEquals(new byte[] {(byte)44, (byte)33, (byte)44, (byte)44, (byte)33, (byte)44}, byteArray1);
      assertArrayEquals(new byte[] {(byte)33, (byte)44, (byte)44, (byte)33, (byte)44}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 77);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Float float0 = new Float((double) (byte) (-31));
      assertEquals((-31.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (byte) (-31));
      assertEquals((-31.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(3320.2049183628446);
      assertEquals(3320.2048F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1625.6375F;
      floatArray0[1] = (float) 77;
      ArrayUtils.shift(floatArray0, (-1990));
      assertArrayEquals(new float[] {1625.6375F, 77.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('r');
      assertEquals('r', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.shift((Object[]) doubleArray1, (-1990));
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.swap((byte[]) null, 629, (-495), (-1990));
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'r'}, charArray0);
      assertArrayEquals(new char[] {'r', 'r'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals(1, int0);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)15;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)84, (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)84, (byte)15, (byte) (-104), (byte)84, (byte)15}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-104));
      assertArrayEquals(new byte[] {(byte) (-104), (byte)84, (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)84, (byte)15, (byte) (-104), (byte)84, (byte)15}, byteArray1);
      assertEquals(0, int0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)15;
      shortArray0[1] = (short) (byte) (-104);
      shortArray0[2] = (short) (byte)84;
      shortArray0[3] = (short) (byte) (-104);
      shortArray0[4] = (short) (byte)84;
      shortArray0[5] = (short) (byte)15;
      shortArray0[6] = (short) (byte)15;
      shortArray0[7] = (short) (byte)15;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte) (-104));
      assertArrayEquals(new short[] {(short) (-104), (short)15, (short) (-104), (short)84, (short) (-104), (short)84, (short)15, (short)15, (short)15}, shortArray1);
      assertArrayEquals(new short[] {(short)15, (short) (-104), (short)84, (short) (-104), (short)84, (short)15, (short)15, (short)15}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)15;
      intArray0[1] = (int) (short) (-104);
      intArray0[2] = (int) (short)15;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {15, (-104), 15}, intArray0);
      assertArrayEquals(new int[] {15, (-104), 15, 15, (-104), 15}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = (double) 59;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 59);
      assertArrayEquals(new double[] {59.0, 59.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 59);
      assertArrayEquals(new double[] {59.0, 59.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {59.0, 59.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2130.0F);
      floatArray0[1] = 919.92F;
      floatArray0[2] = 1363.0F;
      floatArray0[3] = (-1677.766F);
      floatArray0[4] = (-1773.0F);
      floatArray0[5] = 249.144F;
      floatArray0[6] = (-131.0F);
      floatArray0[7] = (-1677.766F);
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = 'd';
      charArray0[2] = 'j';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'j');
      assertArrayEquals(new char[] {'9', 'd'}, charArray1);
      assertArrayEquals(new char[] {'9', 'd', 'j'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {(-2130.0F), 919.92F, 1363.0F, (-1677.766F), (-1773.0F), 249.144F, (-131.0F), (-1677.766F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1773.0F);
      doubleArray0[1] = (double) 249.144F;
      doubleArray0[2] = (double) '9';
      doubleArray0[3] = (double) (-1677.766F);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2146843943), 422);
      assertArrayEquals(new double[] {(-1773.0), 249.1439971923828, 57.0, (-1677.7659912109375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1773.0), 249.1439971923828, 57.0, (-1677.7659912109375)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2659;
      doubleArray0[1] = (double) 2659;
      doubleArray0[2] = (double) 2659;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2659, 2659);
      assertArrayEquals(new double[] {2659.0, 2659.0, 2659.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[5];
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 541L;
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 98, 98, 69);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-4);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)43, (byte) (-27), (byte) (-4)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.insert(91, intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 69, 280);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      ArrayUtils.swap(byteArray0, 60, (int) (byte) (-4), (-2146843943));
      assertArrayEquals(new byte[] {(byte)43, (byte) (-27), (byte) (-4)}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 4184;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 4184, 0}, intArray0);
      assertArrayEquals(new int[] {0, 4184, 0, 0, 4184, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-82.1F);
      floatArray0[1] = 1643.3F;
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1643.3F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1643.3F;
      doubleArray0[4] = (-875.481457);
      doubleArray0[5] = (-1440.744015);
      floatArray0[1] = 1643.3F;
      doubleArray0[7] = (double) 1643.3F;
      doubleArray0[8] = (-113.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 4184, 1200.8823283023623);
      assertArrayEquals(new double[] {1643.300048828125, 0.0, 0.0, 1643.300048828125, (-875.481457), (-1440.744015), 0.0, 1643.300048828125, (-113.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-1), (byte)1, (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, 60, 210);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)118;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)115, (byte)97, (byte) (-64), (byte) (-49), (byte)78, (byte)118}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'j';
      charArray0[2] = '8';
      charArray0[3] = 'M';
      charArray0[4] = 'F';
      char[] charArray1 = ArrayUtils.add(charArray0, '#');
      assertArrayEquals(new char[] {'a', 'j', '8', 'M', 'F', '#'}, charArray1);
      assertArrayEquals(new char[] {'a', 'j', '8', 'M', 'F'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'j', 2146766547);
      assertArrayEquals(new char[] {'a', 'j', '8', 'M', 'F'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(5, charArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)56);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) (byte)0, 0.0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      booleanArray0[3] = false;
      booleanArray0[1] = true;
      booleanArray0[5] = false;
      boolean boolean2 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      assertTrue(boolean2);
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)56;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)56;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)607;
      shortArray0[5] = (short) (byte)56;
      shortArray0[6] = (short)2278;
      shortArray0[7] = (short) (-1732);
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(9, booleanArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3982);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long((short)3982);
      assertEquals(3982L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      try { 
        Long.valueOf(", Length: 0", (int) (short)3982);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 3982 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)1859;
      shortArray0[2] = (short)1525;
      shortArray0[3] = (short)1859;
      shortArray0[4] = (short)3798;
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2167.966871058);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2167.966871058)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short short0 = new Short((byte)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Short[] shortArray1 = new Short[6];
      shortArray1[0] = (Short) (short)3798;
      shortArray1[1] = (Short) (short)1859;
      shortArray1[2] = (Short) (short)1859;
      shortArray1[3] = short0;
      shortArray1[4] = short0;
      shortArray1[5] = (Short) (short)1525;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (-1));
      assertArrayEquals(new short[] {(short)3798, (short)1859, (short)1859, (short)6, (short)6, (short)1525}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(6, shortArray2.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 2754.66781649572, 1.0);
      assertArrayEquals(new double[] {0.0, (-2167.966871058)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray3 = ArrayUtils.subarray(shortArray0, (-1), 37);
      assertArrayEquals(new short[] {(short)0, (short)1859, (short)1525, (short)1859, (short)3798, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1859, (short)1525, (short)1859, (short)3798, (short)0, (short)0, (short)0}, shortArray3);
      assertNotNull(shortArray3);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray3.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '[';
      charArray0[4] = '^';
      charArray0[5] = 'l';
      ArrayUtils.swap(charArray0, (int) (byte)33, (int) (byte)33, (int) (byte)33);
      assertArrayEquals(new char[] {'^', '^', '[', '\u0000', '^', 'l'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      org.evosuite.runtime.Random.setNextRandom((-2436));
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)33;
      shortArray0[1] = (short) (byte)33;
      shortArray0[2] = (short) (byte)33;
      ArrayUtils.reverse(shortArray0, (int) (short)33, 2146766547);
      assertArrayEquals(new short[] {(short)33, (short)33, (short)33, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      byte[] byteArray0 = ArrayUtils.insert(1, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 2645L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1907L);
      longArray0[4] = 0L;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 64, 64, 64);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1626);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-1L);
      ArrayUtils.shift(doubleArray0, (-1626), 5, (-460));
      assertArrayEquals(new double[] {0.0, (-1626.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      float[] floatArray1 = new float[0];
      ArrayUtils.shift(floatArray1, (-1626), 64, 5);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 204;
      ArrayUtils.swap((boolean[]) null, 127, 2588, (-1403));
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(doubleArray0, 2633, (-1626), 5);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 204.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) 2727;
      floatArray1[1] = (float) (-1403);
      floatArray1[3] = (float) 2774;
      floatArray1[4] = (float) 2633;
      ArrayUtils.shift(floatArray1, (-1626), 2571, 2588);
      assertArrayEquals(new float[] {2633.0F, 0.0F, 2727.0F, (-1403.0F), 0.0F, 2774.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)58;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)115);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-1), (byte)58}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(3, byteArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      ArrayUtils.swap((Object[]) booleanArray0, (-1861), 498, (-2474));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte)113);
      assertEquals((byte)113, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)113;
      Long long0 = new Long((-1995));
      assertEquals((-1995L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(950L);
      assertEquals(950L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      long long2 = 1541L;
      Long long3 = new Long(1541L);
      assertEquals(1541L, (long)long3);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)113;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      int int0 = 2;
      intArray0[6] = 2;
      intArray0[7] = (int) (byte)113;
      intArray0[8] = (-1995);
      ArrayUtils.reverse(intArray0, 0, 2476);
      assertArrayEquals(new int[] {(-1995), 113, 2, 0, 0, 0, 0, 113, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      int int1 = 424;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 424);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 424, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short short0 = (short)108;
      Short short1 = new Short((short)108);
      assertEquals((short)108, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[17];
      floatArray0[0] = (float) (short)108;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(17, floatArray0.length);
      assertEquals(34, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 108.0F;
      doubleArray0[1] = (double) 108.0F;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {108.0, 108.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {108.0, 108.0, 108.0, 108.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Byte byte0 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (float) short0, 45);
      assertEquals((-1), int0);
      assertEquals(17, floatArray0.length);
      assertEquals(34, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)115);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)115;
      longArray0[1] = 0L;
      longArray0[2] = (long) (byte)115;
      longArray0[3] = (long) (byte)115;
      longArray0[4] = 489L;
      longArray0[5] = (long) (byte)115;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {115L, 0L, 115L, 115L, 489L, 115L}, longArray0);
      assertArrayEquals(new long[] {115L, 0L, 115L, 115L, 489L, 115L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)17;
      longArray0[1] = (long) (byte)17;
      longArray0[2] = (long) (byte)17;
      longArray0[3] = (long) (byte)17;
      longArray0[4] = (long) (byte)17;
      longArray0[5] = (long) (-20);
      longArray0[6] = 1414L;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)17;
      intArray0[1] = 7;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)17;
      Byte byte1 = new Byte((byte)17);
      assertEquals((byte)17, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) (byte)17;
      longArray0[3] = (long) (byte)17;
      longArray0[4] = (long) (byte)17;
      longArray0[5] = (long) (byte)17;
      longArray0[6] = (long) byte0;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) (byte)17;
      intArray0[2] = (-20);
      intArray0[3] = (int) byte0;
      intArray0[4] = (int) byte0;
      intArray0[5] = (int) (byte)17;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 3119L;
      ArrayUtils.shift(floatArray1, (-1165), (-1165), (-1165));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(5, booleanArray0.length);
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.swap(floatArray1, (int) (byte)1, (int) (byte) (-65), (-1753));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 2727, 204, 204);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 405.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 204;
      floatArray0[3] = (-5326.4697F);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (byte)5;
      floatArray0[6] = (float) 204;
      floatArray0[7] = (float) (byte)5;
      floatArray0[8] = (float) 204;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2294, 69);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {405.0F, (-1.0F), 204.0F, (-5326.4697F), 0.0F, 5.0F, 204.0F, 5.0F, 204.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 204.0F;
      doubleArray0[1] = 105.0;
      doubleArray0[2] = (double) 204.0F;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 5.0F;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {204.0, 105.0, 204.0, (-1.0), 5.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {204.0, 105.0, 204.0, 5.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2815), floatArray1, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2815, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, (-1677));
      assertArrayEquals(new int[] {0, 1, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.shift(intArray0, 1, 1, 1);
      assertArrayEquals(new int[] {0, 1, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 82, (-331), 82);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[3] = (-331);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-331), 82, (-1132.0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[3];
      Double double0 = new Double((-2371.0970868579593));
      assertEquals((-2371.0970868579593), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(82);
      assertEquals(82.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      Double double2 = new Double((-331));
      assertEquals((-331.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray1[2] = double2;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertArrayEquals(new double[] {(-2371.0970868579593), 82.0, (-331.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = 82;
      intArray1[2] = 82;
      int[] intArray2 = ArrayUtils.subarray(intArray1, (-331), Integer.MAX_VALUE);
      assertArrayEquals(new int[] {(-1), 82, 82}, intArray2);
      assertArrayEquals(new int[] {(-1), 82, 82}, intArray1);
      assertNotNull(intArray2);
      assertEquals(3, intArray2.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      
      Byte byte0 = new Byte((byte) (-55));
      assertEquals((byte) (-55), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray1, (Object) byte0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 1;
      intArray0[1] = 1;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-21), (-1677));
      assertArrayEquals(new int[] {0, 1, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[2] = (Integer) 1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      ArrayUtils.shift(intArray0, (-21), (int) integerArray0[0], int0);
      assertArrayEquals(new int[] {0, 1, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(integerArray0, integerArray1);
      
      ArrayUtils.shuffle((Object[]) integerArray0);
      assertEquals(3, integerArray0.length);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 7;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.5;
      doubleArray1[1] = (double) (-928);
      doubleArray1[2] = (double) 2147012708;
      doubleArray1[3] = (double) 2147012708;
      doubleArray1[4] = (double) (-928);
      doubleArray1[5] = 1.5;
      doubleArray1[6] = (double) 7;
      doubleArray1[7] = 204.0;
      doubleArray1[8] = 204.0;
      int int0 = ArrayUtils.indexOf(doubleArray1, (-928.0), (-928), 204.0);
      assertArrayEquals(new double[] {1.5, (-928.0), 2.147012708E9, 2.147012708E9, (-928.0), 1.5, 7.0, 204.0, 204.0}, doubleArray1, 0.01);
      assertEquals(1, int0);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      Double[] doubleArray2 = new Double[6];
      doubleArray2[0] = (Double) (-928.0);
      doubleArray2[1] = (Double) 204.0;
      doubleArray2[2] = (Double) (-928.0);
      doubleArray2[3] = (Double) 2.147012708E9;
      doubleArray2[4] = (Double) 2.147012708E9;
      doubleArray2[5] = (Double) (-928.0);
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertArrayEquals(new double[] {(-928.0), 204.0, (-928.0), 2.147012708E9, 2.147012708E9, (-928.0)}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 7;
      intArray0[1] = (-928);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 674, 7);
      assertArrayEquals(new int[] {7, (-928)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Long[] longArray0 = new Long[2];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[0] = long1;
      Long long2 = new Long(0L);
      assertEquals(0L, (long)long2);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      
      longArray0[1] = long2;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) long0;
      doubleArray0[1] = 3199.174740593;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) long0;
      doubleArray0[4] = (double) long0;
      doubleArray0[5] = (double) long0;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 204.0, (-928), 1.5);
      assertArrayEquals(new double[] {0.0, 3199.174740593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), (-1372));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 1711);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)59;
      shortArray0[1] = (short)2741;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (int) (short)2741);
      assertArrayEquals(new short[] {(short)59, (short)2741}, shortArray0);
      assertArrayEquals(new short[] {(short)59, (short)2741}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = '[';
      charArray0[2] = '^';
      charArray0[3] = '/';
      charArray0[4] = 'l';
      charArray0[5] = 'v';
      charArray0[6] = '9';
      ArrayUtils.swap(charArray0, (-1372), (-168), (-1372));
      assertArrayEquals(new char[] {'k', '[', '^', '/', 'l', 'v', '9'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) '/';
      objectArray0[1] = (Object) 'l';
      Object object0 = new Object();
      assertNotNull(object0);
      
      org.evosuite.runtime.Random.setNextRandom((-168));
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2045, (-1381));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'l';
      doubleArray0[1] = (double) 'l';
      doubleArray0[2] = (double) '9';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 2045, (-1373), 57.0);
      assertArrayEquals(new double[] {108.0, 108.0, 57.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-193);
      shortArray0[1] = (short)10;
      shortArray0[2] = (short) (-1761);
      shortArray0[3] = (short)4;
      shortArray0[4] = (short) (-162);
      shortArray0[5] = (short)2046;
      shortArray0[6] = (short) (-2688);
      shortArray0[7] = (short)1951;
      shortArray0[8] = (short)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1688, 67);
      assertArrayEquals(new short[] {(short) (-193), (short)10, (short) (-1761), (short)4, (short) (-162), (short)2046, (short) (-2688), (short)1951, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.toArray(byteArray0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)33;
      Byte byte1 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      int[] intArray0 = new int[5];
      intArray0[0] = 2603;
      intArray0[1] = 2603;
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) byte0;
      intArray0[4] = 2603;
      ArrayUtils.swap(intArray0, (int) (byte)33, 2603, 33);
      assertArrayEquals(new int[] {2603, 2603, 33, 33, 2603}, intArray0);
      assertEquals(5, intArray0.length);
      
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)33, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      
      Byte byte5 = new Byte((byte) (-90));
      assertEquals((byte) (-90), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-90);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-90L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2103657450));
      assertArrayEquals(new int[] {2603, 2603, 33, 33, 2603}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(5, intArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = 'U';
      charArray0[2] = '$';
      charArray0[3] = '#';
      charArray0[4] = 'C';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1963);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-2509.0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2509.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) false;
      objectArray0[9] = (Object) (byte)0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) bitSet0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3], (int) (byte)0);
      assertEquals(3, int0);
      assertEquals(13, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[2] = 1L;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 488, (-90));
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-111));
      assertNull(byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      ArrayUtils.shift(doubleArray0, 110);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-111));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)108);
      assertEquals((short)108, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[17];
      floatArray0[0] = (float) (short)108;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(17, floatArray0.length);
      assertEquals(34, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 108.0F;
      doubleArray0[1] = (double) 108.0F;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {108.0, 108.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {108.0, 108.0, 108.0, 108.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '\"';
      charArray0[2] = 'Q';
      charArray0[3] = 'G';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'G', 'Q', '\"', '2'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, 108.0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {108.0, 108.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-87.95649), 2092.577);
      assertArrayEquals(new double[] {108.0, 108.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 't';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', 't', 'G'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte) (-56);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-122));
      assertArrayEquals(new byte[] {(byte) (-22), (byte)122, (byte)12, (byte)116, (byte) (-47), (byte) (-16), (byte) (-56)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-22), (byte)122, (byte)12, (byte)116, (byte) (-47), (byte) (-16), (byte) (-56)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) booleanArray1, (Object[]) booleanArray1);
      assertTrue(boolean0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 2727, 204, 204);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte)5;
      Byte byte2 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte byte5 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte5;
      byteArray0[1] = byte0;
      byteArray0[2] = byte2;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) byte1;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {5.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.0, 5.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)5;
      byteArray1[1] = byte1;
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)97);
      assertArrayEquals(new byte[] {(byte)5, (byte)5}, byteArray1);
      assertEquals((-1), int0);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-510.046374509793));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = 'x';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertArrayEquals(new char[] {'~', 'x'}, charArray0);
      assertArrayEquals(new char[] {'~', 'x', '~', 'x'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-105);
      byteArray0[0] = (byte) (-105);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Byte byte1 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = byte1;
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      byteArray1[3] = (Byte) (byte) (-105);
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-105), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte byte3 = ArrayUtils.get(byteArray1, (-186), byte2);
      assertEquals((byte) (-105), (byte)byte3);
      assertNotNull(byte3);
      assertEquals(4, byteArray1.length);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      Character character0 = new Character('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      Double double0 = new Double(byte0);
      assertEquals((-105.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((byte) (-105));
      assertEquals((-105.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift((Object[]) doubleArray0, (-2538));
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = '\'';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.insert(3, charArray0, charArray0);
      assertArrayEquals(new char[] {'b', '\'', '?'}, charArray0);
      assertArrayEquals(new char[] {'b', '\'', '?', 'b', '\'', '?'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) byte0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)52);
      assertArrayEquals(new short[] {(short) (-105)}, shortArray0);
      assertArrayEquals(new short[] {(short)52, (short) (-105)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-105), (byte) (-105), (byte) (-105)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      int[] intArray0 = new int[2];
      intArray0[0] = (-2147035320);
      intArray0[1] = (-2512);
      ArrayUtils.reverse(intArray0, 0, (-2537));
      assertArrayEquals(new int[] {(-2147035320), (-2512)}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 160, 164, 1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '2', 2);
      assertArrayEquals(new char[] {'4', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), (int) (byte)74);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)74;
      byteArray1[1] = (byte)74;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)74, (byte)74}, byteArray1);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-674), intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray1, (int) (byte)74);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(bitSet1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'H';
      charArray0[2] = 'K';
      charArray0[3] = '.';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {'u', 'H', 'K', '.'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-2865), (-2865));
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-584));
      assertEquals((-584), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 351L);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = 'z';
      Character character0 = new Character('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character(']');
      assertEquals(']', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 84;
      floatArray0[1] = (float) ',';
      floatArray0[2] = 0.0F;
      ArrayUtils.reverse(floatArray0, (-957), 5);
      assertArrayEquals(new float[] {0.0F, 44.0F, 84.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '~';
      charArray0[1] = 'O';
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '~';
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      ArrayUtils.shift(longArray0, 8192, 4, 4);
      assertArrayEquals(new long[] {126L, 0L, (-1L), (-1L), 0L, (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      Byte byte0 = new Byte((byte)112);
      assertEquals((byte)112, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)59);
      assertEquals((byte)59, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-75));
      assertEquals((byte) (-75), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1926));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 908.6298F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {908.6298F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 8;
      intArray0[1] = (int) 'O';
      intArray0[2] = (int) (byte)59;
      intArray0[3] = (int) (byte)112;
      intArray0[4] = (int) 'O';
      intArray0[5] = (int) 'O';
      intArray0[6] = (int) '~';
      intArray0[7] = (int) '~';
      intArray0[8] = (int) (byte)112;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 9);
      assertArrayEquals(new int[] {8, 79, 59, 112, 79, 79, 126, 126, 112}, intArray0);
      assertArrayEquals(new int[] {9, 8, 79, 59, 112, 79, 79, 126, 126, 112}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "h1");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      float[] floatArray0 = new float[8];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-5), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1737;
      floatArray0[1] = (float) 1737;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1737, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1737, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, 60, 210);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 5, 792);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'k');
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.reverse((Object[]) byteArray1, 210, 5);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse((Object[]) byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 52;
      floatArray0[1] = (float) 60;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 52;
      floatArray1[1] = (float) 'k';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(210, floatArray0, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 210, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.insert(622, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)1859;
      shortArray0[2] = (short)1525;
      shortArray0[3] = (short)1859;
      shortArray0[4] = (short)3798;
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2167.966871058);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2167.966871058)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short short0 = new Short((byte)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)1859, (short)1525, (short)1859, (short)3798, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, int0);
      assertEquals(8, shortArray0.length);
      
      ArrayUtils.reverse(shortArray0, 0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)1859, (short)1525, (short)1859, (short)3798, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      byte[] byteArray0 = ArrayUtils.insert((-3702), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)37;
      shortArray0[2] = (short)37;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)37;
      floatArray0[2] = (float) (short)37;
      floatArray0[3] = (float) (short)37;
      floatArray0[4] = (float) (short)37;
      floatArray0[5] = (float) (short)37;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)37, (-142));
      assertArrayEquals(new float[] {0.0F, 37.0F, 37.0F, 37.0F, 37.0F, 37.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (double) 37.0F);
      assertNull(doubleArray0);
      
      ArrayUtils.shift((Object[]) null, (int) (short)37, (-2183), 2588);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      ArrayUtils.shift(booleanArray0, (-1), 121, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = 'q';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = 'q';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'n', 0);
      assertArrayEquals(new char[] {'?', 'q', '?', '?', '?', 'q'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2851.2);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)108);
      assertEquals((short)108, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'J');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      intArray0[0] = 97;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 97;
      floatArray0[7] = (float) 97;
      floatArray0[8] = (float) 97;
      ArrayUtils.shift(floatArray0, (-1165), 97, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 97.0F, 97.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-65));
      assertEquals((byte) (-65), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[1] = byte0;
      ArrayUtils.swap(floatArray0, (-1753), (-1767), 2673);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 97.0F, 97.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'C');
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertArrayEquals(new char[] {'O'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2899.13643855917, 488);
      assertEquals((-1), int0);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '*');
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.reverse((Object[]) byteArray0, (-2146945687), (-2130964542));
      assertEquals(0, byteArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) class0;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals((-1), int1);
      assertEquals(2, objectArray0.length);
      assertTrue(int1 == int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-1), 3000L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2260;
      intArray0[1] = 2260;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 13);
      assertArrayEquals(new int[] {2260, 2260, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 2260;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 2260, 2260);
      assertArrayEquals(new double[] {1.0, 13.0, 13.0, 2260.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) byteArray1, (Object) byte0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      Byte byte2 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte0;
      byteArray0[1] = byte1;
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte1);
      assertEquals(1, int0);
      assertEquals(5, byteArray0.length);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte3));
      assertFalse(byte1.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte)68);
      assertEquals((byte)68, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-43));
      assertEquals((byte) (-43), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'?'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (byte) (-99));
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertSame(doubleArray1, doubleArray0);
      
      Byte byte2 = new Byte((byte)55);
      assertEquals((byte)55, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) byte2);
      assertArrayEquals(new char[] {'?'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2130.0F);
      floatArray0[1] = 919.92F;
      floatArray0[2] = 1363.0F;
      floatArray0[3] = (-1677.766F);
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-2630.7358175745), 1, (double) (-2130.0F));
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[0];
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (-623));
      assertEquals((-1), int1);
      assertEquals(0, objectArray0.length);
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-2130.0F), (-2630.7358175745));
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, (int) (byte)0, (double) doubleArray1[1]);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray1, (Object) byte0, (-1));
      assertEquals((-1), int1);
      assertEquals(8, doubleArray1.length);
      assertTrue(int1 == int0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) doubleArray1[4];
      doubleArray2[1] = 3.0;
      doubleArray2[2] = (double) 9;
      boolean boolean1 = ArrayUtils.contains(doubleArray2, 0.0, 0.7);
      assertArrayEquals(new double[] {0.0, 3.0, 9.0}, doubleArray2, 0.01);
      assertTrue(boolean1);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray2, doubleArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      double[] doubleArray3 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (short)0;
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean2);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-18));
      assertEquals((byte) (-18), (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-18);
      intArray0[1] = (int) (byte) (-18);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-18));
      assertArrayEquals(new int[] {(-18), (-18)}, intArray0);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = 'z';
      charArray0[2] = ',';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {'+', 'z', ','}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '+';
      intArray0[1] = (int) '+';
      int int0 = ArrayUtils.indexOf(intArray0, 43, 43);
      assertArrayEquals(new int[] {43, 43}, intArray0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 351L;
      longArray0[1] = (long) 43;
      longArray0[2] = (long) ',';
      longArray0[3] = (-1632L);
      longArray0[4] = (long) '+';
      Integer integer0 = new Integer(43);
      assertEquals(43, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-2165.749232505));
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 43);
      assertArrayEquals(new int[] {43, 43}, intArray0);
      assertEquals(1, int1);
      assertEquals(2, intArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2738.8697758));
      assertArrayEquals(new double[] {(-2738.8697758)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      ArrayUtils.swap(doubleArray1, (-239), 1422, (-239));
      assertArrayEquals(new double[] {(-2738.8697758)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 1541;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = 455.1974871;
      ArrayUtils.swap(doubleArray0, (-1), 2729, 2729);
      assertArrayEquals(new double[] {0.0, 1541.0, 0.0, 455.1974871, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)43, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = (-1);
      intArray0[5] = 1963;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1963);
      assertArrayEquals(new int[] {0, 0, 0, Integer.MAX_VALUE, (-1), 1963}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {(byte)43, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)43, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, ']');
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (int) (byte)43);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, false, false, true}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      short[] shortArray0 = new short[1];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) 119;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-372), 119);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (byte)1;
      ArrayUtils.shift(doubleArray0, (int) (byte)1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (int) (byte)1, Integer.MAX_VALUE);
      assertNull(booleanArray0);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      Float float1 = new Float((-35.38943100917218));
      assertEquals((-35.38943F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[3] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      ArrayUtils.swap(byteArray0, 102, (int) (byte)1, (-4207));
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = 'z';
      charArray0[2] = ',';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {'+', 'z', ','}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '+';
      intArray0[1] = (int) '+';
      int int0 = ArrayUtils.indexOf(intArray0, 43, 43);
      assertArrayEquals(new int[] {43, 43}, intArray0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 351L;
      longArray0[1] = (long) 43;
      longArray0[2] = (long) ',';
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '+';
      floatArray0[1] = (float) 'z';
      floatArray0[2] = (float) 'z';
      floatArray0[3] = (float) 351L;
      floatArray0[4] = (float) ',';
      floatArray0[5] = (float) ',';
      ArrayUtils.shift(floatArray0, 4146, (-1), (-1));
      assertArrayEquals(new float[] {43.0F, 122.0F, 122.0F, 351.0F, 44.0F, 44.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-57), 0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.insert(90, intArray1, intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 3119L;
      longArray0[1] = 1L;
      longArray0[2] = (-331L);
      longArray0[3] = 541L;
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 98, 98, 69);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-4);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)43, (byte) (-27), (byte) (-4)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.insert(91, intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 69, 280);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short short0 = (short)108;
      Short short1 = new Short((short)108);
      assertEquals((short)108, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[17];
      floatArray0[0] = (float) (short)108;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(17, floatArray0.length);
      assertEquals(34, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = (int) short0;
      intArray0[2] = 1;
      intArray0[3] = 53;
      intArray0[4] = 97;
      intArray0[5] = 97;
      intArray0[6] = 1;
      ArrayUtils.swap(intArray0, 1, 14, (int) (short)108);
      assertArrayEquals(new int[] {1, 108, 1, 53, 97, 97, 1}, intArray0);
      assertEquals(7, intArray0.length);
      
      byte byte0 = (byte)87;
      Byte byte1 = new Byte((byte) (-82));
      assertEquals((byte) (-82), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-41));
      assertArrayEquals(new int[] {(-41), 1, 108, 1, 53, 97, 97, 1}, intArray1);
      assertArrayEquals(new int[] {1, 108, 1, 53, 97, 97, 1}, intArray0);
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      longArray0[2] = (long) 8192;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (int) (byte)87);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 87, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('i');
      assertEquals('i', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1372);
      floatArray0[1] = (float) 376;
      ArrayUtils.swap(floatArray0, (-2140622896), 1378, 2103);
      assertArrayEquals(new float[] {(-1372.0F), 376.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2103;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, (-3304));
      assertArrayEquals(new long[] {2103L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      Double double0 = new Double(3.0);
      assertEquals(3.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1033.176354244));
      assertEquals((-1033.176354244), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1795.6906);
      assertEquals(1795.6906, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)85;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)85}, shortArray0);
      assertFalse(boolean1);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 2646.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 2646.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, 2691, byte0);
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertEquals("-1", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Byte[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-25);
      shortArray0[1] = (short) (byte) (-25);
      shortArray0[2] = (short) (byte) (-25);
      shortArray0[3] = (short) (byte) (-25);
      shortArray0[4] = (short) (byte) (-25);
      shortArray0[5] = (short) (byte) (-25);
      shortArray0[6] = (short) (byte) (-25);
      ArrayUtils.shift(shortArray0, (int) (short) (-25), 2656, 108);
      assertArrayEquals(new short[] {(short) (-25), (short) (-25), (short) (-25), (short) (-25), (short) (-25), (short) (-25), (short) (-25)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Integer integer0 = new Integer(994);
      assertEquals(994, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((short) (-25));
      assertEquals((-25), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((short) (-25));
      assertEquals((-25), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-25), (-25), 994}, intArray0);
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      short[] shortArray0 = new short[5];
      ArrayUtils.shift(shortArray0, (int) (short) (-2885), 1240, (int) (short) (-2885));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      short[] shortArray0 = new short[4];
      ArrayUtils.shift(shortArray0, (int) (short) (-2885), 1240, (int) (short) (-2885));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-512);
      ArrayUtils.shift(shortArray0, 1, 1212, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short) (-512), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ArrayUtils.shift(shortArray0, (-808), (-808), (-12));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-656), 1212, (-656));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      Byte[] byteArray0 = new Byte[7];
      byteArray0[1] = byte1;
      byteArray0[2] = (Byte) byte0;
      byteArray0[3] = (Byte) byte0;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 7);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      ArrayUtils.shift(shortArray0, (int) (byte)1, 4, (int) byte0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-593L);
      longArray0[1] = (long) 0;
      longArray0[2] = (-24L);
      longArray0[3] = (-375L);
      longArray0[4] = (-24L);
      longArray0[5] = (-593L);
      longArray0[6] = (-375L);
      Byte byte0 = new Byte((byte) (-75));
      assertEquals((byte) (-75), (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'~', '~', '~', '~', '~'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.indexOf(longArray0, 1L);
      assertArrayEquals(new long[] {(-593L), 0L, (-24L), (-375L), (-24L), (-593L), (-375L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(7, longArray0.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      Byte[] byteArray3 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-1829L));
      assertArrayEquals(new long[] {(-593L), 0L, (-24L), (-375L), (-24L), (-593L), (-375L)}, longArray0);
      assertArrayEquals(new long[] {(-593L), 0L, (-24L), (-375L), (-24L), (-593L), (-375L), (-1829L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-300);
      Integer integer0 = new Integer((-300));
      assertEquals((-300), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1381));
      assertEquals((-1381), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1381));
      assertEquals((-1381), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(975);
      assertEquals(975, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer2;
      integerArray0[2] = integer3;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[2]);
      assertArrayEquals(new int[] {(-1381), (-1381), 975}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray2, intArray0);
      
      char[] charArray0 = new char[5];
      int int0 = ArrayUtils.indexOf(charArray0, '\u0000', 4735);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray1);
      assertArrayEquals(new int[] {(-1381), (-1381), 975}, intArray1);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(3, integerArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(integerArray1, integerArray0);
      
      int int1 = ArrayUtils.indexOf((long[]) null, (-254L), (-300));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 950;
      intArray0[2] = 675;
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {0, 950, 675, (-1)}, intArray0);
      assertArrayEquals(new int[] {0, 950, 675, (-1)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 950;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = 926L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 675);
      assertArrayEquals(new long[] {950L, (-1L), (-1L), 926L}, longArray0);
      assertArrayEquals(new long[] {950L, (-1L), (-1L), 926L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = Long.valueOf(160L);
      assertEquals(160L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 1212, 1212, 1212);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3200;
      shortArray0[1] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short)3200, (int) (short)3200, (int) (short)3200);
      assertArrayEquals(new short[] {(short)3200, (short) (-1)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3525.3875487192063);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-3525.3875487192063);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {(-3525.3875487192063), 1.0, (-3525.3875487192063), 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3525.3875487192063), 1.0, (-3525.3875487192063), 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('5');
      assertEquals('5', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-3525.3875487192063));
      assertEquals((-3525.3875487192063), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-25);
      intArray0[1] = (-1639);
      intArray0[2] = (-25);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1639), (-67));
      assertArrayEquals(new int[] {(-25), (-1639), (-25)}, intArray0);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[4] = '-';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'-', '-', '-', '\u0000', '-'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '-';
      floatArray0[1] = (float) '-';
      floatArray0[2] = (float) '-';
      floatArray0[3] = 1144.0F;
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 2, 488);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 111);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)108);
      assertEquals((short)108, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-24);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte) (-24));
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-24), (byte) (-24)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-18L);
      longArray0[1] = (long) (byte)2;
      longArray0[2] = 1839L;
      longArray0[3] = (long) (byte) (-24);
      longArray0[4] = (long) (byte)2;
      longArray0[5] = (long) (byte) (-24);
      longArray0[6] = (long) 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2950L));
      assertArrayEquals(new long[] {(-18L), 2L, 1839L, (-24L), 2L, (-24L), 1L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(7, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-24);
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (short)108;
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = '@';
      charArray0[2] = 'l';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'S', '@', 'l'}, charArray0);
      assertArrayEquals(new char[] {'S', '@', 'l'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 9, (-1639));
      assertArrayEquals(new int[] {(-24), 2, 108}, intArray0);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)18688;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-1512);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)1;
      intArray0[2] = (int) (short) (-1512);
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      ArrayUtils.swap(shortArray0, (-3507), 0, (int) (short) (-1));
      assertArrayEquals(new short[] {(short)0, (short)1, (short)18688, (short)0, (short)0, (short)0, (short) (-1), (short) (-1512)}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(4, booleanArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3982;
      shortArray0[1] = (short) (-1100);
      shortArray0[2] = (short)607;
      shortArray0[3] = (short) (-476);
      shortArray0[4] = (short) (-1732);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1732));
      assertArrayEquals(new short[] {(short)3982, (short) (-1100), (short)607, (short) (-476), (short) (-1732)}, shortArray0);
      assertEquals(4, int0);
      assertEquals(5, shortArray0.length);
      
      ArrayUtils.shift((byte[]) null, (-1832));
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)3982, (short) (-1100), (short)607, (short) (-476), (short) (-1732)}, shortArray0);
      assertFalse(boolean1);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals((-1), int1);
      assertEquals(4, booleanArray0.length);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-476);
      intArray0[1] = (int) (short)3982;
      int int2 = ArrayUtils.indexOf(intArray0, 6);
      assertArrayEquals(new int[] {(-476), 3982}, intArray0);
      assertEquals((-1), int2);
      assertEquals(2, intArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, 1);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      ArrayUtils.swap(doubleArray0, 0, (-850), (-850));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short) (-2884);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-2884), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-2884), (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '3';
      int int0 = ArrayUtils.indexOf(charArray0, 'E', 0);
      assertArrayEquals(new char[] {'4', '3'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)274;
      shortArray0[1] = (short)10;
      shortArray0[2] = (short)1768;
      shortArray0[3] = (short) (-1351);
      shortArray0[4] = (short) (-517);
      shortArray0[5] = (short)1795;
      shortArray0[6] = (short)321;
      shortArray0[7] = (short) (-1568);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)274, (short)10, (short)1768, (short) (-1351), (short) (-517), (short)1795, (short)321, (short) (-1568)}, shortArray0);
      assertArrayEquals(new short[] {(short)274, (short)10, (short)1768, (short) (-1351), (short) (-517), (short)1795, (short)321, (short) (-1568)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[0];
      MockRandom mockRandom0 = new MockRandom((-710L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-24)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '~';
      charArray0[1] = 'O';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'O';
      floatArray0[1] = 744.83F;
      floatArray0[3] = 744.83F;
      floatArray0[4] = (float) 'N';
      floatArray0[6] = 744.83F;
      charArray0[1] = '~';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1176.835F);
      assertArrayEquals(new float[] {79.0F, 744.83F, 0.0F, 744.83F, 78.0F, 0.0F, 744.83F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, '~', Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'~', '~', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, int1);
      assertEquals(10, charArray0.length);
      assertFalse(int1 == int0);
      
      Character character0 = Character.valueOf('w');
      assertEquals('w', (char)character0);
      assertNotNull(character0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {79.0F, 744.83F, 0.0F, 744.83F, 78.0F, 0.0F, 744.83F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      Byte[] byteArray0 = new Byte[7];
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 7);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      short[] shortArray0 = new short[11];
      ArrayUtils.reverse(shortArray0);
      assertEquals(11, shortArray0.length);
      
      int[] intArray0 = new int[0];
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = doubleArray1[2];
      doubleArray1[4] = (Double) 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, (int) (byte)0, (double) doubleArray1[1]);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray1, (Object) byte0, (-1));
      assertEquals((-1), int1);
      assertEquals(8, doubleArray1.length);
      assertTrue(int1 == int0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) doubleArray1[4];
      doubleArray2[1] = 3.0;
      doubleArray2[2] = (double) 9;
      boolean boolean1 = ArrayUtils.contains(doubleArray2, 0.0, 0.7);
      assertArrayEquals(new double[] {0.0, 3.0, 9.0}, doubleArray2, 0.01);
      assertTrue(boolean1);
      assertEquals(3, doubleArray2.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-111);
      byteArray1[1] = (byte) (-111);
      byteArray1[2] = (byte) (-111);
      byteArray1[4] = (byte) (-111);
      byteArray1[5] = (byte) (-111);
      boolean boolean0 = ArrayUtils.contains(byteArray1, (byte) (-111));
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-111), (byte) (-111), (byte)0, (byte) (-111), (byte) (-111)}, byteArray1);
      assertTrue(boolean0);
      assertEquals(6, byteArray1.length);
      
      ArrayUtils.shift(byteArray1, (int) (byte) (-111));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-111), (byte) (-111), (byte) (-111), (byte) (-111), (byte) (-111)}, byteArray1);
      assertEquals(6, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) null, (-485));
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      Class<Byte[]> class0 = Byte[].class;
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '*');
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) class0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
      
      Byte byte0 = new Byte((byte) (-8));
      assertEquals((byte) (-8), (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '~';
      charArray0[1] = 'O';
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      ArrayUtils.shift(longArray0, 8192, 4, 4);
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-1L), 0L, (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      Byte byte0 = new Byte((byte)112);
      assertEquals((byte)112, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)59);
      assertEquals((byte)59, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-75));
      assertEquals((byte) (-75), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1926));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 908.6298F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {908.6298F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-851L);
      floatArray0[1] = 1176.835F;
      floatArray0[2] = (float) (-851L);
      floatArray0[3] = (float) (-851L);
      floatArray0[4] = 1176.835F;
      floatArray0[5] = 1176.835F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {(-851.0F), 1176.835F, (-851.0F), (-851.0F), 1176.835F, 1176.835F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)33;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)33);
      assertArrayEquals(new byte[] {(byte)33, (byte)33, (byte)33, (byte)33, (byte)33, (byte)33}, byteArray0);
      assertArrayEquals(new byte[] {(byte)33, (byte)33, (byte)33, (byte)33, (byte)33, (byte)33, (byte)33}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-851.0F), 1176.835F, (-851.0F), (-851.0F), 1176.835F, 1176.835F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = 'C';
      charArray0[2] = '[';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)33, (-2884));
      assertArrayEquals(new char[] {'{', 'C', '['}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)3798;
      doubleArray0[1] = (double) (short)1525;
      doubleArray0[2] = (double) (short)1525;
      doubleArray0[3] = (double) (short) (-3023);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3798.0, 1525.0, 1525.0, (-3023.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short short0 = new Short((short)5312);
      assertEquals((short)5312, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-1510));
      assertEquals((short) (-1510), (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((byte)6);
      assertEquals((short)6, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short short3 = new Short((short)146);
      assertEquals((short)146, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      
      Short short4 = new Short((byte)6);
      assertEquals((short)6, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short2;
      shortArray0[1] = short1;
      shortArray0[2] = short3;
      shortArray0[3] = short3;
      shortArray0[4] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1072);
      assertArrayEquals(new short[] {(short)6, (short) (-1510), (short)146, (short)146, (short)146}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {3798.0, 1525.0, 1525.0, (-3023.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift(longArray0, 57);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[2] = '~';
      ArrayUtils.shift(charArray0, (-1303), 60, 373);
      assertArrayEquals(new char[] {'\u0000', '~', '\u0000', '~'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertEquals(4, int0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 3);
      Byte byte0 = new Byte((byte) (-71));
      assertEquals((byte) (-71), (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Byte, Byte>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Byte byte1 = new Byte((byte) (-71));
      assertEquals((byte) (-71), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-71));
      assertEquals((byte) (-71), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte1, byte2);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte0.equals((Object)byte2));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-71);
      doubleArray0[2] = (double) (byte) (-71);
      doubleArray0[3] = (double) (byte) (-71);
      doubleArray0[4] = (double) (byte) (-71);
      doubleArray0[5] = (double) (byte) (-71);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-71.0), 0.0, (-71.0), (-71.0), (-71.0), (-71.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-71);
      longArray0[1] = (long) (byte) (-71);
      longArray0[2] = (long) (byte) (-71);
      longArray0[3] = (long) (byte) (-71);
      longArray0[4] = (long) (byte) (-71);
      longArray0[5] = (long) (byte) (-71);
      longArray0[6] = (long) (byte) (-71);
      longArray0[7] = (long) (byte) (-71);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {(-71L), (-71L), (-71L), (-71L), (-71L), (-71L), (-71L), (-71L)}, longArray0);
      assertArrayEquals(new long[] {(-71L), (-71L), (-71L), (-71L), (-71L), (-71L), (-71L), (-71L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 48;
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(48);
      assertEquals(48, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(48);
      assertEquals(48, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(48, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertEquals(48, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(48);
      assertEquals(48, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer1));
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertArrayEquals(new int[] {48, 48, 48, 48, 48, 48}, intArray0);
      assertNotNull(intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (long) int0, 23);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Double[] doubleArray1 = new Double[3];
      Double double0 = new Double(int0);
      assertEquals(48.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(2727.0);
      assertEquals(2727.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      Double double2 = new Double(23);
      assertEquals(23.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray1[2] = double2;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[2] = 'N';
      charArray0[3] = ':';
      ArrayUtils.shift(charArray0, (-1303), 60, 373);
      assertArrayEquals(new char[] {':', '~', '\u0000', 'N'}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'N';
      doubleArray0[1] = (double) (-1303);
      doubleArray0[2] = (double) 'N';
      doubleArray0[3] = (double) 'N';
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.7);
      assertArrayEquals(new double[] {78.0, (-1303.0), 78.0, 78.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {78.0, (-1303.0), 78.0, 78.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.7);
      assertArrayEquals(new double[] {78.0, (-1303.0), 78.0, 78.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-1126), 805, 48);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, 64);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-1357);
      intArray0[3] = (-2147035320);
      intArray0[4] = (-1357);
      intArray0[5] = (-1357);
      intArray0[6] = (-1357);
      intArray0[7] = (-1357);
      intArray0[8] = (int) byte0;
      ArrayUtils.reverse(intArray0, (-2512), 0);
      assertArrayEquals(new int[] {0, 0, (-1357), (-2147035320), (-1357), (-1357), (-1357), (-1357), 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.shift(booleanArray0, (-983), 128, 128);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'q';
      charArray0[2] = 'g';
      charArray0[3] = '?';
      charArray0[4] = '9';
      charArray0[5] = '\\';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'E', (-1357));
      assertArrayEquals(new char[] {'3', 'q', 'g', '?', '9', '\\'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = (-1773L);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0, 6, 113);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[4];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) false;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(4, booleanArray2.length);
      assertEquals(4, booleanArray1.length);
      assertSame(booleanArray2, booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertArrayEquals(new long[] {1L, 0L, 1L, (-1773L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 1L, (-1773L), 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-807L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = (-1773L);
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-85);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = 'k';
      charArray0[7] = 'k';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 1L, (-1773L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (byte) (-85));
      assertFalse(boolean0);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 2218L);
      assertArrayEquals(new long[] {1L, 0L, 1L, (-1773L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (-1773L);
      doubleArray0[3] = (double) 'k';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, (-1773.0), 107.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k'}, charArray0);
      assertTrue(boolean1);
      assertEquals(8, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)52;
      shortArray0[2] = (short) (-983);
      shortArray0[3] = (short) (-983);
      shortArray0[4] = (short)52;
      shortArray0[5] = (short) (-983);
      shortArray0[6] = (short) (-983);
      shortArray0[7] = (short)13;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)3029);
      assertArrayEquals(new short[] {(short)0, (short)52, (short) (-983), (short) (-983), (short)52, (short) (-983), (short) (-983), (short)13}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)52, (short) (-983), (short) (-983), (short)52, (short) (-983), (short) (-983), (short)13}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = '4';
      charArray0[2] = ':';
      charArray0[3] = '3';
      charArray0[4] = 'r';
      charArray0[5] = '8';
      charArray0[6] = '{';
      charArray0[7] = 'z';
      charArray0[8] = 'Y';
      int int0 = ArrayUtils.indexOf(charArray0, 'z');
      assertArrayEquals(new char[] {'u', '4', ':', '3', 'r', '8', '{', 'z', 'Y'}, charArray0);
      assertEquals(7, int0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 0.0F, (-2146767462));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-87.95649);
      doubleArray0[1] = (-1.0);
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Byte byte0 = new Byte((byte) (-102));
      assertEquals((byte) (-102), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)126);
      assertEquals((byte)126, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean0 = ArrayUtils.contains((Object[]) shortArray1, (Object) byte1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(byte1.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-454), (-15));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2373, (-1));
      assertNotNull(floatArray1);
      
      ArrayUtils.shift((Object[]) shortArray1, 59, 1711, (-2136240277));
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte byte1 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-69));
      assertEquals((byte) (-69), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (Byte) null);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)120;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)120}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)120}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)44;
      Byte byte1 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '(';
      charArray0[2] = 'X';
      charArray0[3] = '1';
      charArray0[4] = 'a';
      charArray0[5] = '/';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'!', '(', 'X', '1', 'a', '/'}, charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) byte0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "8.A");
      assertNotNull(stringArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, stringArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3293);
      int int1 = ArrayUtils.indexOf(shortArray0, (short) byte0, 101);
      assertArrayEquals(new short[] {(short) (-3293)}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(1, shortArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-5), (int) (byte) (-5), 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-5));
      assertEquals((byte) (-5), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-5));
      assertEquals((byte) (-5), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-5));
      assertEquals((byte) (-5), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      ArrayUtils.shift((short[]) null, (int) (byte) (-5), (int) (byte) (-5), (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 0;
      doubleArray0[1] = (double) 0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      int[] intArray0 = new int[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, (int) (byte) (-113), (-1.0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte) (-113), (int) (byte)37);
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray1);
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'B';
      charArray0[2] = 'L';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'W', 'B', 'L'}, charArray0);
      assertArrayEquals(new char[] {'W', 'B', 'L'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, intArray0.length);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) 0.0;
      doubleArray1[7] = (Double) 0.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2130.0F);
      floatArray0[1] = 919.92F;
      floatArray0[2] = 1363.0F;
      floatArray0[3] = (-1677.766F);
      floatArray0[4] = (-1773.0F);
      floatArray0[5] = 249.144F;
      floatArray0[6] = (-131.0F);
      floatArray0[7] = (-1677.766F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertArrayEquals(new float[] {(-2130.0F), 919.92F, 1363.0F, (-1677.766F), (-1773.0F), 249.144F, (-131.0F), (-1677.766F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-1);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-86);
      shortArray0[1] = (short) (byte)72;
      shortArray0[2] = (short) (byte)72;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte)72;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-86), (short)72, (short)72, (short) (-1), (short) (-1), (short)72}, shortArray0);
      assertFalse(boolean1);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = (-300);
      Integer integer0 = new Integer((-300));
      assertEquals((-300), (int)integer0);
      assertNotNull(integer0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = 'z';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'z';
      charArray1[1] = ',';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertArrayEquals(new char[] {'z', 'z', 'z', ',', ',', 'z'}, charArray0);
      assertArrayEquals(new char[] {'z', ','}, charArray1);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'z', 'z', 'z', ',', ',', 'z'}, charArray0);
      assertTrue(boolean1);
      assertEquals(6, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(charArray0, charArray1);
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, (int) (byte)3, (int) (byte)3);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'z', ','}, charArray1);
      assertNotNull(charArray2);
      assertEquals(0, charArray2.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2727;
      doubleArray0[1] = (-1.0);
      doubleArray0[4] = (double) 204;
      ArrayUtils.swap((boolean[]) null, 127, 2588, (-1403));
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(doubleArray0, 2633, (-1626), 5);
      assertArrayEquals(new double[] {2727.0, (-1.0), 0.0, 0.0, 204.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) 2727;
      floatArray1[1] = (float) (-1403);
      floatArray1[2] = (float) 204;
      floatArray1[3] = (float) 2774;
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'c';
      charArray0[5] = 'l';
      charArray0[6] = 'l';
      charArray0[7] = 'l';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2571, 2727);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'c', 'l', 'l', 'l'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, 204);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 2727, 204, 204);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte4;
      byteArray0[1] = byte0;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte)5;
      byteArray1[6] = (byte)5;
      byte[] byteArray2 = ArrayUtils.removeAll(byteArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)5, (byte)5, (byte)5, (byte)5, (byte)5, (byte)5}, byteArray2);
      assertArrayEquals(new byte[] {(byte)5, (byte)5, (byte)5, (byte)5, (byte)5, (byte)5, (byte)5}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, intArray0.length);
      assertEquals(7, byteArray2.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)5, (-229));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)5;
      doubleArray0[1] = (double) (byte)5;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 271.142, 11, (double) 204);
      assertArrayEquals(new double[] {5.0, 5.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte)113);
      assertEquals((byte)113, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2585.28266, (-3000), (double) (byte)113);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Object[] objectArray0 = new Object[0];
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte1, 32);
      assertEquals((-1), int1);
      assertEquals(0, objectArray0.length);
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1686.285038543, (double) (byte)113);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)113;
      shortArray0[1] = (short) (byte)113;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)113, (short)113}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-113);
      int[] intArray0 = new int[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertArrayEquals(new byte[] {(byte)23, (byte)37, (byte) (-113), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte)23, (byte)37, (byte) (-113), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)37;
      doubleArray0[1] = (double) (byte) (-113);
      doubleArray0[2] = (double) (byte)37;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (byte) (-113);
      doubleArray0[5] = (double) (byte)23;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0, 23.0);
      assertArrayEquals(new double[] {37.0, (-113.0), 37.0, 0.0, (-113.0), 23.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-113));
      assertEquals((byte) (-113), (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0, 9);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte) (-113), 3.0);
      assertArrayEquals(new double[] {37.0, (-113.0), 37.0, 0.0, (-113.0), 23.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0), (-799.7));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0, 1439);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1439, 1439);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 2588, (-957), 2774);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1781.54);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 125;
      ArrayUtils.shift(doubleArray1, (-957), (-85), 2612);
      assertArrayEquals(new double[] {(-1781.54), (-1.0), 0.0, 125.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = (-1773L);
      longArray0[4] = (-1495L);
      longArray0[6] = 1L;
      longArray0[3] = (-2950L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L, (-2950L), (-1495L), 0L, 1L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(8, longArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) (-2950L);
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) (-1773L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)110;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-85));
      assertArrayEquals(new byte[] {(byte)12, (byte)110}, byteArray1);
      assertArrayEquals(new byte[] {(byte)12, (byte)110}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'k');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'k'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.reverse(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'k'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      char[] charArray2 = new char[9];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'k';
      charArray2[1] = 'k';
      charArray2[2] = 'k';
      charArray2[3] = 'k';
      charArray2[4] = 'k';
      charArray2[5] = 'k';
      charArray2[6] = 'k';
      charArray2[7] = 'k';
      charArray2[8] = 'k';
      int int0 = ArrayUtils.indexOf(charArray2, 'k');
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k'}, charArray2);
      assertEquals(0, int0);
      assertEquals(9, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertArrayEquals(new long[] {66L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 66L, 5);
      assertArrayEquals(new long[] {66L}, longArray0);
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = Integer.getInteger("org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertNull(integer0);
      
      integerArray0[0] = null;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(2, integerArray1.length);
      assertEquals(2, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'K');
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertArrayEquals(new char[] {'K', 'K'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)74;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)74, (int) (byte)74);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)74, (byte)74, (byte)74, (byte)74}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 69;
      doubleArray0[1] = (double) (-2081);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 69);
      assertArrayEquals(new double[] {69.0, (-2081.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {69.0, 69.0, (-2081.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) byte1, (int) (byte)74);
      assertEquals((-1), int0);
      assertFalse(byte1.equals((Object)byte0));
      
      int[] intArray0 = new int[20];
      intArray0[0] = (-2081);
      intArray0[1] = (-2081);
      intArray0[2] = 3702;
      ArrayUtils.shift(intArray0, (int) (byte)74, (-753), (int) (byte)74);
      assertEquals(20, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)74, (byte)74, (byte)74, (byte)74}, byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.insert((int) (byte)7, intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(20, intArray0.length);
      assertEquals(40, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)74;
      longArray0[1] = (long) (byte)7;
      longArray0[2] = (long) (byte)74;
      longArray0[3] = (long) (byte)74;
      longArray0[4] = (long) 3702;
      longArray0[5] = (long) (-1);
      longArray0[6] = (-1L);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3702, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, (-2139198480), (short) (-29784));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2139198480, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short) (-1321);
      shortArray0[0] = (short) (-1321);
      shortArray0[1] = (short)13;
      shortArray0[2] = (short)247;
      short short1 = (short)0;
      shortArray0[3] = (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short) (-1321), (short) (-1321));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1321, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      int int0 = (-4485);
      short[] shortArray0 = new short[3];
      short short0 = (short)60;
      shortArray0[0] = (short)60;
      short short1 = (short)13;
      shortArray0[1] = (short)13;
      short short2 = (short)1049;
      shortArray0[2] = (short)1049;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-4485), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4485, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0);
      assertNotNull(stringArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3410;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayUtils.swap(doubleArray0, (-29), (-2146751467), (-2146751467));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, '3');
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 3037L);
      assertArrayEquals(new long[] {1L, 0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) (-2146751467);
      floatArray0[5] = (float) (-29);
      floatArray0[6] = (float) (-29);
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 1.0F, (-2.14675149E9F), (-29.0F), (-29.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[16];
      intArray0[0] = 3037;
      intArray0[1] = 2603;
      intArray0[2] = 7967;
      ArrayUtils.swap(intArray0, 7967, 3037, 12);
      assertEquals(16, intArray0.length);
      
      Byte byte0 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, 1, byte0);
      assertEquals((byte)87, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2001);
      assertNotNull(bitSet0);
      assertEquals(16, intArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 7967;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-626L));
      assertArrayEquals(new long[] {7967L}, longArray0);
      assertArrayEquals(new long[] {7967L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3037;
      doubleArray0[1] = (-1.0);
      doubleArray0[3] = (double) 7967;
      doubleArray0[4] = (double) 12;
      doubleArray0[5] = (double) 3037;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 2603;
      doubleArray0[8] = (double) 7967;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3037.0, (-1.0), 0.0, 7967.0, 12.0, 3037.0, 1.0, 2603.0, 7967.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 7967;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 7967;
      floatArray0[3] = 915.8538F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 12);
      assertArrayEquals(new float[] {7967.0F, 1.0F, 7967.0F, 915.8538F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {7967.0F, 1.0F, 7967.0F, 915.8538F, 12.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3525.3875487192063);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-3525.3875487192063);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {(-3525.3875487192063), 1.0, (-3525.3875487192063), 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3525.3875487192063), 1.0, (-3525.3875487192063), 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('5');
      assertEquals('5', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('t');
      assertEquals('t', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Character character3 = Character.valueOf('5');
      assertEquals('5', (char)character3);
      assertNotNull(character3);
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      
      Character character4 = Character.valueOf('N');
      assertEquals('N', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      
      Character character5 = Character.valueOf('j');
      assertEquals('j', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      
      Character character6 = new Character('N');
      assertEquals('N', (char)character6);
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      
      Character character7 = new Character('>');
      assertEquals('>', (char)character7);
      assertNotNull(character7);
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character2));
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character1;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray2.length);
      assertSame(booleanArray0, booleanArray1);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-1117), (-1117), (-1117));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)722;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)32437;
      shortArray0[5] = (short)102;
      shortArray0[6] = (short)749;
      shortArray0[7] = (short) (-10425);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-179));
      assertArrayEquals(new short[] {(short)722, (short) (-1), (short)1, (short) (-1), (short)32437, (short)102, (short)749, (short) (-10425)}, shortArray1);
      assertArrayEquals(new short[] {(short)722, (short) (-1), (short)1, (short) (-1), (short)32437, (short)102, (short)749, (short) (-10425)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.swap((long[]) null, (-2024), (-2024), (-2024));
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[1] = 'O';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'O';
      floatArray0[1] = 744.83F;
      floatArray0[3] = 744.83F;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'O';
      intArray0[1] = 98;
      intArray0[2] = 2146767264;
      intArray0[3] = (int) 'O';
      intArray0[4] = (int) 'O';
      intArray0[5] = (int) 'O';
      intArray0[6] = (int) 'N';
      intArray0[7] = (int) 'O';
      intArray0[8] = (int) 'N';
      ArrayUtils.shift(intArray0, 0, 78, 78);
      assertArrayEquals(new int[] {79, 79, 79, 78, 79, 78, 79, 98, 2146767264}, intArray0);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.shift(intArray0, 10);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)106;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((int) (byte)106, shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 769;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)106;
      intArray0[6] = 769;
      ArrayUtils.shift(intArray0, 0, 2, (-1508));
      assertArrayEquals(new int[] {769, 0, Integer.MAX_VALUE, 0, 0, 106, 769}, intArray0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.shift(intArray0, (-871));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 76;
      ArrayUtils.shift(intArray0, (-3346), 91, (-1397));
      assertArrayEquals(new int[] {76}, intArray0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-7);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-1), (byte) (-18), (byte)0, (byte) (-1), (byte) (-37), (byte) (-7)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-37), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -37, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)18688;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-1512);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) 'n';
      intArray0[2] = (int) (short) (-1512);
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      ArrayUtils.shift(intArray0, 0, 1, (-874));
      assertArrayEquals(new int[] {1, 110, (-1512), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short)18688;
      objectArray0[1] = (Object) (-1512);
      objectArray0[2] = (Object) (short) (-1);
      objectArray0[3] = (Object) (short) (-1);
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) 0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 2588;
      doubleArray0[2] = (double) 2588;
      doubleArray0[3] = (double) 2588;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1.0);
      assertArrayEquals(new double[] {0.0, 2588.0, 2588.0, 2588.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2588.0, 2588.0, 2588.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2147035320);
      intArray0[1] = (-1357);
      intArray0[2] = (-2147035320);
      intArray0[3] = 2055;
      ArrayUtils.reverse(intArray0, 160, (-2147035320));
      assertArrayEquals(new int[] {(-2147035320), (-1357), (-2147035320), 2055}, intArray0);
      assertEquals(4, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 160, 160, 2588);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3037;
      intArray0[1] = 2603;
      intArray0[2] = 2603;
      ArrayUtils.swap(intArray0, 2603, 3037, 12);
      assertArrayEquals(new int[] {3037, 2603, 2603}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte byte0 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, 1, byte0);
      assertEquals((byte)87, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2001);
      assertArrayEquals(new int[] {3037, 2603, 2603}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(3, intArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2603;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-626L));
      assertArrayEquals(new long[] {2603L}, longArray0);
      assertArrayEquals(new long[] {2603L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3037;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 3037;
      doubleArray0[3] = (double) 2603;
      doubleArray0[4] = (double) 12;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.addAll((AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null, (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.addAll((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      ArrayUtils.swap((Object[]) booleanArray1, (-957), (-957), (-957));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)74, (int) (byte)74);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1255;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.insert((int) (byte)3, intArray0, intArray0);
      assertArrayEquals(new int[] {1255, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1255, 0, 0, 1255, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-430));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 97;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 97;
      floatArray0[7] = (float) 97;
      floatArray0[8] = (float) 97;
      ArrayUtils.shift(floatArray0, (-1165), 0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 97.0F, 0.0F, 97.0F, 97.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)559);
      assertEquals((short)559, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      Short short3 = new Short((short)52);
      assertEquals((short)52, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-697));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-1648);
      shortArray0[2] = (short)1525;
      shortArray0[3] = (short) (-3023);
      shortArray0[4] = (short)3798;
      shortArray0[5] = (short) (-163);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-576.08815358);
      doubleArray0[1] = (-2167.966871058);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-576.08815358), (-2167.966871058)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short short0 = new Short((byte)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      Byte byte0 = new Byte((byte) (-65));
      assertEquals((byte) (-65), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (-506), 34);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = '_';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {' ', ' ', '_', ' '}, charArray0);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (short)1525);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      Byte byte0 = new Byte((byte)66);
      assertEquals((byte)66, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = Byte.valueOf((byte)3);
      assertEquals((byte)3, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = Byte.valueOf((byte)3);
      assertEquals((byte)3, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (byte)95);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = 'O';
      charArray0[2] = 'N';
      charArray0[3] = ':';
      short short0 = (short) (-1);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) ':';
      intArray0[1] = (int) (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-115);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-115), (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-115);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-450), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -450, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-30L));
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)77;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)63, (int) (byte)77);
      assertArrayEquals(new byte[] {(byte)1, (byte)63, (byte)77, (byte)0, (byte) (-24), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1694L);
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (byte)77;
      longArray0[4] = (long) (byte)1;
      longArray0[6] = (long) (byte)2;
      longArray0[7] = (long) (byte)1;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)77;
      intArray0[2] = (int) (byte)63;
      intArray0[3] = (int) (byte)63;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {2, 77, 63, 63}, intArray0);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)34);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)34;
      intArray0[1] = (int) (short)34;
      intArray0[2] = (int) (short)34;
      intArray0[3] = (int) (short)34;
      intArray0[4] = (int) (short)34;
      intArray0[5] = (int) (short)34;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {34, 34, 34, 34, 34, 34}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray0, (short)5513);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)116;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 34, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) ';';
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) 59);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-832), (-832), (-1404));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 2727, 204, 204);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte)5;
      Byte byte2 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      
      Byte byte5 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte5;
      byteArray0[1] = byte0;
      byteArray0[2] = byte2;
      Byte byte6 = new Byte(byte1);
      assertEquals((byte)5, (byte)byte6);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      
      Byte byte7 = ArrayUtils.get(byteArray0, 23, byte6);
      assertEquals((byte)5, (byte)byte7);
      assertNotNull(byte7);
      assertEquals(4, byteArray0.length);
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte5));
      
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2722.42967334506);
      assertEquals(2722.42967334506, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(2722.42967334506, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals(4, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double0;
      Double double3 = new Double(3.0);
      assertEquals(3.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[3] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      ArrayUtils.shift((Object[]) doubleArray1, (-1));
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte2);
      assertTrue(boolean0);
      assertFalse(byte0.equals((Object)byte5));
      assertFalse(byte0.equals((Object)byte7));
      assertTrue(byte0.equals((Object)byte4));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte6));
      assertFalse(byte0.equals((Object)byte3));
      assertFalse(byte0.equals((Object)byte2));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte6));
      assertTrue(byte2.equals((Object)byte5));
      assertTrue(byte2.equals((Object)byte7));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte4));
      assertTrue(byte2.equals((Object)byte3));
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)108);
      assertEquals((short)108, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-24);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2085, (int) (byte) (-24));
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-24), (byte) (-24)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-18L);
      longArray0[1] = (long) 2085;
      longArray0[2] = 1839L;
      longArray0[3] = (long) (byte) (-24);
      longArray0[4] = (long) (byte)2;
      longArray0[5] = (long) (byte) (-24);
      longArray0[6] = (long) 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2950L));
      assertArrayEquals(new long[] {(-18L), 2085L, 1839L, (-24L), 2L, (-24L), 1L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(7, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-24);
      intArray0[1] = 2085;
      intArray0[2] = (int) (short)108;
      ArrayUtils.shift(intArray0, 2085, 449, (-162));
      assertArrayEquals(new int[] {(-24), 2085, 108}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.shuffle((Object[]) shortArray0);
      assertEquals(1, shortArray0.length);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1859;
      shortArray0[1] = (short) (-1648);
      shortArray0[2] = (short)1525;
      shortArray0[3] = (short) (-3023);
      shortArray0[4] = (short)3798;
      shortArray0[5] = (short) (-163);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-576.08815358);
      doubleArray0[1] = (-2167.966871058);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-576.08815358), (-2167.966871058)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short short0 = new Short((byte)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-2153));
      assertEquals((short) (-2153), (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-1510));
      assertEquals((short) (-1510), (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      Short short3 = new Short((short) (-1358));
      assertEquals((short) (-1358), (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      
      Short short4 = new Short((short)1859);
      assertEquals((short)1859, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = short4;
      shortArray1[1] = (Short) (short)1525;
      shortArray1[2] = (Short) (short) (-3023);
      shortArray1[3] = (Short) (short) (-163);
      shortArray1[4] = (Short) (short) (-1648);
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) shortArray1[4]);
      assertArrayEquals(new short[] {(short)1859, (short)1525, (short) (-3023), (short) (-163), (short) (-1648)}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 9);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert((-3659), (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      byte byte0 = (byte)97;
      Byte byte1 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byte byte2 = (byte)25;
      Byte byte3 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[3] = byte3;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      Byte byte4 = ArrayUtils.get(byteArray0, (int) byte0, (Byte) byte0);
      assertEquals((byte)97, (byte)byte4);
      assertNotNull(byte4);
      assertEquals(6, byteArray0.length);
      assertFalse(byte0 == byte2);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Double double0 = new Double(byte2);
      assertEquals(25.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertFalse(byte2 == byte0);
      
      Double double1 = new Double(4295.56);
      assertEquals(4295.56, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      ArrayUtils.shift((Object[]) doubleArray0, (-2));
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      Byte byte5 = Byte.valueOf(byte0);
      assertEquals((byte)97, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte0 == byte2);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte5);
      assertEquals((byte)97, object0);
      assertNotNull(object0);
      assertFalse(byte0 == byte2);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(object0.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte2));
      assertFalse(object0.equals((Object)byte3));
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, object0);
      assertTrue(boolean0);
      assertFalse(byte0 == byte2);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(object0.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte2));
      assertFalse(object0.equals((Object)byte3));
      
      char[] charArray0 = ArrayUtils.insert((-893), (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      intArray0[0] = 97;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 97;
      floatArray0[7] = (float) 97;
      floatArray0[8] = (float) 97;
      ArrayUtils.shift(floatArray0, (-1165), 97, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 97.0F, 97.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-65));
      assertEquals((byte) (-65), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[1] = byte0;
      ArrayUtils.swap(floatArray0, (-1753), (-1767), 2673);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 97.0F, 97.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      byteArray1[3] = byte0;
      byteArray1[4] = byte0;
      byteArray1[5] = byte0;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray1[6] = byte1;
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertTrue(boolean0);
      assertEquals(7, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      Long long2 = new Long((-3541L));
      assertEquals((-3541L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)110);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.insert((int) (byte)1, byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      ArrayUtils.shift(byteArray1, (-1), (-5577), 117);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-465L);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) (-5577);
      doubleArray0[6] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)1, 414.70713935377);
      assertArrayEquals(new double[] {(-1.0), (-465.0), (-1.0), (-1.0), 1.0, (-5577.0), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2, 3, 4, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2899.13643855917, 488);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)52);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 488;
      floatArray0[1] = (float) (byte)52;
      floatArray0[2] = (float) (byte)52;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = 1176.835F;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = 1176.835F;
      floatArray0[7] = (float) (-1);
      floatArray0[8] = 1113.5242F;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {488.0F, 52.0F, 52.0F, (-1.0F), 1176.835F, (-1.0F), 1176.835F, (-1.0F), 1113.5242F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(9, floatArray0.length);
      assertTrue(int1 == int0);
      
      byte[] byteArray1 = ArrayUtils.addFirst((byte[]) null, (byte)15);
      assertArrayEquals(new byte[] {(byte)15}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-593L);
      longArray0[1] = (long) 0;
      longArray0[2] = (-24L);
      longArray0[3] = (-375L);
      longArray0[4] = (-24L);
      longArray0[5] = (-593L);
      longArray0[6] = (-375L);
      Byte byte0 = new Byte((byte) (-75));
      assertEquals((byte) (-75), (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) '~';
      floatArray0[2] = (float) '~';
      floatArray0[3] = (float) '~';
      floatArray0[4] = (float) (-24L);
      floatArray0[5] = (float) (-593L);
      floatArray0[6] = (float) (-375L);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 744.83F);
      assertArrayEquals(new float[] {0.0F, 126.0F, 126.0F, 126.0F, (-24.0F), (-593.0F), (-375.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {(-593L), 0L, (-24L), (-375L), (-24L), (-593L), (-375L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte) (-75);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-75));
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-25));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-25.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)113;
      byteArray0[1] = (byte)113;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)113);
      assertArrayEquals(new byte[] {(byte)0, (byte)113}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)113, (byte)113}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)113;
      ArrayUtils.shift(intArray0, (int) (byte)113, 2380, 91);
      assertArrayEquals(new int[] {113, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)113}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)113, (byte)113}, byteArray1);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2380;
      intArray1[1] = (int) (byte)0;
      intArray1[2] = (int) (byte)113;
      intArray1[3] = (int) (byte)113;
      intArray1[4] = (int) (byte) (-25);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)113, intArray1, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 113, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)74, (-2081));
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray1, (Object) byte0, (-3000));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1255;
      intArray0[1] = (int) (byte)74;
      intArray0[2] = (int) (byte)3;
      intArray0[3] = (int) (byte)3;
      ArrayUtils.shift(intArray0, 69, (-1), 91);
      assertArrayEquals(new int[] {1255, 74, 3, 3}, intArray0);
      assertEquals(4, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.insert((int) (byte)3, intArray0, intArray0);
      assertArrayEquals(new int[] {1255, 74, 3, 3}, intArray0);
      assertArrayEquals(new int[] {1255, 74, 3, 1255, 74, 3, 3, 3}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      float[] floatArray0 = new float[17];
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(17, floatArray0.length);
      assertEquals(34, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3300;
      shortArray0[1] = (short)9;
      ArrayUtils.swap(shortArray0, (-1), 1, 708);
      assertArrayEquals(new short[] {(short)9, (short)3300}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2837;
      shortArray0[1] = (short)2837;
      shortArray0[2] = (short)2837;
      shortArray0[3] = (short)2837;
      shortArray0[4] = (short)2837;
      shortArray0[5] = (short) (-5266);
      shortArray0[6] = (short)2837;
      ArrayUtils.swap(shortArray0, (-444), (int) (short) (-5266), 42);
      assertArrayEquals(new short[] {(short)2837, (short)2837, (short)2837, (short)2837, (short)2837, (short) (-5266), (short)2837}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((short)256);
      assertEquals(256L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((short)75);
      assertEquals(75L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      Long long3 = new Long((short)256);
      assertEquals(256L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = 58.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) (short)75;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) (short) (-1);
      floatArray0[6] = (float) (short) (-1);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {0.0F, 58.0F, (-1.0F), 75.0F, 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = '5';
      charArray0[2] = 'C';
      charArray0[3] = 'P';
      charArray0[4] = '&';
      charArray0[5] = ']';
      charArray0[6] = 'r';
      charArray0[7] = 'z';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'5', 'C', 'P', '&', ']', 'r', 'z', 'Y'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 732L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 732L);
      assertArrayEquals(new long[] {732L}, longArray0);
      assertArrayEquals(new long[] {732L, 732L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = '?';
      ArrayUtils.shift(charArray0, 2, Integer.MAX_VALUE, 1424);
      assertArrayEquals(new char[] {'6', '6', '6', '6', '6', '?'}, charArray0);
      assertEquals(6, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1859;
      shortArray0[1] = (short) (-1648);
      shortArray0[2] = (short)1525;
      shortArray0[3] = (short) (-3023);
      shortArray0[4] = (short)3798;
      shortArray0[5] = (short) (-163);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-576.08815358);
      doubleArray0[1] = (-2167.966871058);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-576.08815358), (-2167.966871058)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      int[] intArray0 = new int[0];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1711;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {1711.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 335.79844644;
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.swap((short[]) null, (-1624), 1, 871);
      ArrayUtils.swap(byteArray0, 73, (-2212), 128);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-851L);
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      ArrayUtils.shift(longArray0, 0, 0, 0);
      assertArrayEquals(new long[] {(-851L), (-1L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)59);
      assertEquals((byte)59, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-50);
      Byte byte2 = new Byte((byte) (-50));
      assertEquals((byte) (-50), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byte byte3 = (byte) (-60);
      Byte byte4 = new Byte((byte) (-60));
      assertEquals((byte) (-60), (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      
      byteArray0[2] = byte4;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-60);
      intArray0[1] = (int) byte3;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-60));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(6, booleanArray0.length);
      assertEquals("{0, 1, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-60);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) byte1;
      floatArray0[3] = (float) (-851L);
      floatArray0[4] = (float) (-1L);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-60.0F), 0.0F, (-50.0F), (-851.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)42, object1);
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1, "");
      assertEquals("42", string0);
      assertNotNull(string0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short) (byte)42;
      shortArray0[3] = (short) (byte)42;
      shortArray0[4] = (short) (byte)42;
      shortArray0[5] = (short) (byte)42;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)42, (short)42, (short)42, (short)42}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte)14;
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertArrayEquals(new byte[] {(byte)42, (byte)14, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray2.length);
      assertEquals(4, byteArray1.length);
      
      ArrayUtils.swap((float[]) null, (int) (short)42, (-2137058970), (int) (short)42);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 924, 924, 82);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 3);
      Byte byte0 = new Byte((byte) (-71));
      assertEquals((byte) (-71), (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Byte byte1 = new Byte((byte) (-71));
      assertEquals((byte) (-71), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-71));
      assertEquals((byte) (-71), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte1, byte2);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(byte0.equals((Object)byte2));
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 1730.206490882);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)44;
      Byte byte1 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)44, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte)44, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-36));
      assertEquals((byte) (-36), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1718.23334);
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) (-1666);
      doubleArray0[3] = (double) (byte) (-36);
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) byte0;
      doubleArray0[6] = (double) (byte) (-36);
      ArrayUtils.shift(doubleArray0, (int) byte0);
      assertArrayEquals(new double[] {44.0, (-36.0), (-1718.23334), 44.0, (-1666.0), (-36.0), 44.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-57));
      assertArrayEquals(new byte[] {(byte)44, (byte)44, (byte)44, (byte)44, (byte)44, (byte) (-57)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 3646.92123189);
      assertArrayEquals(new double[] {44.0, (-36.0), (-1718.23334), 44.0, (-1666.0), (-36.0), 44.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 2727, 204, 204);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 405.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 204;
      floatArray0[3] = (-5326.4697F);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (byte)5;
      floatArray0[6] = (float) 204;
      floatArray0[7] = (float) (byte)5;
      floatArray0[8] = (float) 204;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2294, 69);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {405.0F, (-1.0F), 204.0F, (-5326.4697F), 0.0F, 5.0F, 204.0F, 5.0F, 204.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 204.0F;
      doubleArray0[1] = 105.0;
      doubleArray0[2] = (double) 204.0F;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 5.0F;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {204.0, 105.0, 204.0, (-1.0), 5.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {204.0, 105.0, 204.0, 5.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 204.0F;
      objectArray0[1] = (Object) byte2;
      objectArray0[2] = (Object) (-1.0);
      objectArray0[3] = (Object) 0.0F;
      objectArray0[4] = (Object) (-1.0F);
      objectArray0[5] = (Object) 5.0;
      ArrayUtils.shift(objectArray0, (int) (byte)5, 116, Integer.MAX_VALUE);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0, "u]45(\"");
      assertNotNull(stringArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = (-1773L);
      longArray0[4] = (-1495L);
      Float float0 = new Float((-696.915047374));
      assertEquals((-696.91504F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(82.0);
      assertEquals(82.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(1.5);
      assertEquals(1.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((-1534.9609F));
      assertEquals((-1534.9609F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 677.0771F);
      assertNull(floatArray0);
      
      ArrayUtils.swap((char[]) null, 0, 0);
      ArrayUtils.swap((byte[]) null, 8, (int) (byte)1);
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1L, (-1773L), (-1495L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-71), (byte) (-111));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -71, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = 851.2008855311973;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(13, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 64);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)124;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-74));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-5), (byte)1, (byte)124}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.swap(longArray0, (-1), (int) (byte)1, (-1));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-74);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = 1435.53;
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) 64;
      doubleArray0[6] = (double) (byte) (-5);
      doubleArray0[7] = (double) (-1L);
      doubleArray0[8] = (double) (-1);
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-74.0), 0.0, (-1.0), 1435.53, (-1.0), 64.0, (-5.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      Float float0 = new Float((float) (short)55);
      assertEquals(55.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(323.09554);
      assertEquals(323.09555F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) (short)55);
      assertEquals(55.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float((-2740.2852202726));
      assertEquals((-2740.2852F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Float float4 = new Float(1625.6375F);
      assertEquals(1625.6375F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (short)55);
      assertNull(floatArray0);
      
      ArrayUtils.swap((char[]) null, 0, (int) (short)55);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      ArrayUtils.swap(byteArray0, (int) (short)55, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, 4, (byte)15);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1, (byte)15}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)15;
      doubleArray0[1] = (-3930.116733717);
      doubleArray0[2] = (double) (byte)15;
      doubleArray0[3] = 82.0;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {15.0, (-3930.116733717), 15.0, 82.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-25));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-25.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)126);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-18)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-18), (byte)126}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)126;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)126;
      intArray0[3] = (int) (byte) (-25);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-745), 16);
      assertArrayEquals(new int[] {126, 0, 126, (-25)}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(4, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (byte)126;
      shortArray0[2] = (short)57;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)57);
      assertArrayEquals(new short[] {(short)7, (short)126, (short)57}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)126}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-25), (-57));
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-18)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-18), (byte)126}, byteArray1);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 4002.5666623502693;
      ArrayUtils.swap(doubleArray0, 0, (-1630), 0);
      assertArrayEquals(new double[] {0.0, 4002.5666623502693}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, 2099.44);
      assertArrayEquals(new double[] {0.0, 4002.5666623502693}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2099.44, 0.0, 4002.5666623502693}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)41, 78);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      Byte[] byteArray0 = new Byte[15];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3991.9, (int) (byte)0, (double) (byte)0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = byte0;
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (int) (byte)0, 3212);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      Object object0 = ArrayUtils.get((Object[]) byteArray0, (int) 0);
      assertEquals((byte)0, object0);
      assertNotNull(object0);
      assertEquals(15, byteArray0.length);
      assertTrue(object0.equals((Object)byte1));
      
      ArrayUtils.swap((Object[]) byteArray0, (int) (byte)0, 120);
      assertEquals(15, byteArray0.length);
      
      ArrayUtils.shift(byteArray2, 631, (int) (byte)0, 120);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)63, (int) (byte)77);
      assertArrayEquals(new byte[] {(byte)1, (byte)63, (byte)77, (byte)46, (byte) (-24), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1694L);
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (byte)77;
      longArray0[4] = (long) (byte)1;
      longArray0[5] = (long) (byte) (-24);
      longArray0[6] = (long) (byte)2;
      longArray0[7] = (long) (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-18L));
      assertArrayEquals(new long[] {(-1694L), 2L, 2L, 77L, 1L, (-24L), 2L, 1L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(8, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-76), 49);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(49, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[2] = '~';
      ArrayUtils.shift(charArray0, (-1303), 60, 373);
      assertArrayEquals(new char[] {'\u0000', '~', '\u0000', '~'}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '~';
      doubleArray0[1] = (double) '\u0000';
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-3666), byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      int[] intArray0 = new int[18];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-766));
      assertFalse(boolean0);
      assertEquals(18, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-808));
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.swap((Object[]) integerArray0, (-25), 48);
      assertEquals(6, integerArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-300);
      boolean boolean0 = ArrayUtils.contains(intArray0, 117);
      assertArrayEquals(new int[] {(-300)}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-300);
      objectArray0[1] = (Object) (-300);
      objectArray0[2] = (Object) (-300);
      Object object0 = ArrayUtils.get(objectArray0, (-2405));
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[3] = null;
      objectArray0[4] = (Object) (-300);
      objectArray0[5] = (Object) (-300);
      objectArray0[6] = (Object) (-300);
      ArrayUtils.swap(objectArray0, 1139, 58);
      assertEquals(7, objectArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)75;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)48);
      assertArrayEquals(new byte[] {(byte)1, (byte)75}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)48, (byte)75}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3271, byteArray1, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3271, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)33);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)33}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)34);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.swap((boolean[]) null, 210, (-2490));
      Byte byte0 = new Byte((byte) (-104));
      assertEquals((byte) (-104), (byte)byte0);
      assertNotNull(byte0);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'k');
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.reverse((Object[]) byteArray0, 792, (int) (byte)4);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.reverse((Object[]) null);
      ArrayUtils.shift((Object[]) byteArray0, (-575), (-3219), 1149);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1224;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {1224.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.insert((-2136853464), (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (-2075.3921);
      doubleArray0[4] = (double) (byte)82;
      doubleArray0[5] = (double) (byte)82;
      ArrayUtils.swap(doubleArray0, 792, 52);
      assertArrayEquals(new double[] {0.0, 8.0, 0.0, (-2075.3921), 82.0, 82.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'k');
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertNotNull(bitSet1);
      assertEquals(1, charArray0.length);
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      
      ArrayUtils.reverse((Object[]) byteArray1, 8, 52);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      ArrayUtils.reverse((Object[]) byteArray0);
      assertEquals(3, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      
      float[] floatArray0 = ArrayUtils.insert(6, (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 1, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      byte byte0 = (byte)120;
      byte byte1 = (byte) (-20);
      Byte byte2 = new Byte((byte) (-20));
      assertEquals((byte) (-20), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte5 = new Byte((byte) (-20));
      assertEquals((byte) (-20), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      
      byteArray0[0] = byte5;
      byteArray0[1] = byte4;
      byteArray0[3] = byte4;
      Byte byte6 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, byte6);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-20);
      byteArray2[1] = byte0;
      byteArray2[2] = byte0;
      byteArray2[3] = byte0;
      byteArray2[4] = byte0;
      byteArray2[5] = (byte)5;
      byteArray2[6] = byte0;
      byteArray2[7] = byte1;
      byteArray2[8] = byte0;
      int int0 = ArrayUtils.indexOf(byteArray2, (byte)5, (int) (byte)5);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)120, (byte)120, (byte)120, (byte)120, (byte)5, (byte)120, (byte) (-20), (byte)120}, byteArray2);
      assertEquals(5, int0);
      assertEquals(9, byteArray2.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)120;
      intArray0[1] = (int) (byte)120;
      intArray0[2] = (int) (byte)5;
      intArray0[3] = (int) (byte) (-20);
      intArray0[4] = (int) byte0;
      intArray0[5] = (int) byte0;
      intArray0[6] = (int) (byte)120;
      intArray0[7] = (int) (byte)120;
      intArray0[8] = (int) byte0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 111);
      assertArrayEquals(new int[] {111, 120, 120, 5, (-20), 120, 120, 120, 120, 120}, intArray1);
      assertArrayEquals(new int[] {120, 120, 5, (-20), 120, 120, 120, 120, 120}, intArray0);
      assertNotNull(intArray1);
      assertEquals(10, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-81);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1185.0137F);
      assertArrayEquals(new float[] {1185.0137F, (-81.0F)}, floatArray1, 0.01F);
      
      ArrayUtils.indexesOf((long[]) null, (long) (byte) (-81));
      ArrayUtils.reverse((long[]) null, (int) (byte) (-81), (int) (byte) (-81));
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-81));
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray1);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 89);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 69);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      byteArray0[3] = (Byte) byte0;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      
      byteArray0[4] = byte4;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte0;
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertEquals(3, intArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byte0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) byte0;
      double[] doubleArray1 = ArrayUtils.insert((int) byte0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 918.1092349836824;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertArrayEquals(new double[] {918.1092349836824}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {918.1092349836824, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2147035320);
      ArrayUtils.reverse(intArray0, (-2147035320), (-1357));
      assertArrayEquals(new int[] {(-2147035320)}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, (-2147035320), (-2147035320), (-2566));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 2727, 204, 204);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte5 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      
      Byte byte6 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      
      Byte byte7 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      
      Byte byte8 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte8);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte7));
      
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-129.0);
      doubleArray0[1] = (double) 2727;
      doubleArray0[2] = 2.0;
      doubleArray0[0] = (double) 2727;
      doubleArray0[4] = (double) (byte)5;
      doubleArray0[5] = 0.0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-103);
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {(-103L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-103L), (-1L), (-1L), (-103L), (-1L), (-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-2011));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.shift(booleanArray0, 96);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (short)666);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {666}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)30;
      Byte byte1 = new Byte((byte)30);
      assertEquals((byte)30, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)30);
      assertEquals((byte)30, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)30);
      assertEquals((byte)30, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)30, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)78);
      assertEquals((byte)78, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)71);
      assertEquals((byte)71, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)78);
      assertEquals((byte)78, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte5));
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte(byte0);
      assertEquals((byte)30, (byte)byte8);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte1));
      
      byteArray0[7] = byte8;
      Byte byte9 = new Byte((byte)36);
      assertEquals((byte)36, (byte)byte9);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte1));
      
      byteArray0[8] = byte9;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) (short)666;
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) byte0;
      longArray1[1] = 0L;
      longArray1[2] = (long) (byte)71;
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertArrayEquals(new long[] {666L}, longArray2);
      assertArrayEquals(new long[] {0L, 666L}, longArray0);
      assertArrayEquals(new long[] {30L, 0L, 71L}, longArray1);
      assertNotNull(longArray2);
      assertEquals(1, longArray2.length);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      long[] longArray0 = new long[4];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'L');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'L'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = (-1773L);
      longArray0[4] = (-1495L);
      longArray0[6] = 1L;
      longArray0[3] = (-2950L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L, (-2950L), (-1495L), 0L, 1L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(8, longArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) (-2950L);
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) (-1773L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)110;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-85));
      assertArrayEquals(new byte[] {(byte)12, (byte)110}, byteArray1);
      assertArrayEquals(new byte[] {(byte)12, (byte)110}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'k');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'k'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L, (-2950L), (-1495L), 0L, 1L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)12;
      shortArray0[1] = (short)607;
      shortArray0[2] = (short) (byte)12;
      shortArray0[3] = (short) (byte)110;
      shortArray0[4] = (short) (byte)12;
      shortArray0[5] = (short) (byte)110;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)12);
      assertArrayEquals(new short[] {(short)12, (short)607, (short)12, (short)110, (short)12, (short)110}, shortArray0);
      assertTrue(boolean1);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[2] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-84);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-84)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 97;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 97;
      floatArray0[7] = (float) 97;
      floatArray0[8] = (float) 97;
      ArrayUtils.shift(floatArray0, (-1165), 0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 97.0F, 0.0F, 97.0F, 97.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-65));
      assertEquals((byte) (-65), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[1] = byte0;
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) ' ';
      longArray0[1] = (long) ' ';
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-25), (-506));
      assertArrayEquals(new long[] {32L, 32L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'\u0000', ' '}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      assertArrayEquals(new long[] {32L, 32L}, longArray0);
      assertArrayEquals(new long[] {32L, 32L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)56);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) (byte)0, 0.0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      booleanArray0[3] = false;
      booleanArray0[1] = true;
      booleanArray0[5] = false;
      boolean boolean2 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      assertTrue(boolean2);
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)56;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)56;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)607;
      shortArray0[5] = (short) (byte)56;
      shortArray0[6] = (short)2278;
      shortArray0[7] = (short) (-1732);
      shortArray0[8] = (short)1;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3982);
      assertArrayEquals(new short[] {(short)56, (short)0, (short)56, (short)0, (short)607, (short)56, (short)2278, (short) (-1732), (short)1}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      
      ArrayUtils.shift(byteArray0, (-534));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2130.0F);
      floatArray0[1] = 919.92F;
      floatArray0[2] = 1363.0F;
      floatArray0[3] = (-1677.766F);
      floatArray0[4] = (-1773.0F);
      floatArray0[5] = 249.144F;
      floatArray0[6] = (-131.0F);
      floatArray0[7] = (-1677.766F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertArrayEquals(new float[] {(-2130.0F), 919.92F, 1363.0F, (-1677.766F), (-1773.0F), 249.144F, (-131.0F), (-1677.766F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) 0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      char[] charArray0 = new char[3];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '\u0000';
      longArray0[1] = (-560L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, (-560L)}, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) 'l';
      floatArray0[4] = (float) (-560L);
      floatArray0[5] = (float) (byte)0;
      ArrayUtils.swap(floatArray0, (int) (byte)0, (-1), (-1650));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 108.0F, (-560.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1532.03F));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 108.0F, (-560.0F), 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(6, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "");
      assertNotNull(stringArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, stringArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'B', (-1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      
      Character character0 = Character.valueOf('r');
      assertEquals('r', (char)character0);
      assertNotNull(character0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 108.0F, (-560.0F), 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1), (int) 0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(801, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 801, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-808));
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-25), 5372, (-25));
      assertEquals(6, integerArray0.length);
      
      Long long0 = new Long((-25));
      assertEquals((-25L), (long)long0);
      assertNotNull(long0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      Byte byte0 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      Byte byte1 = new Byte((byte)67);
      assertEquals((byte)67, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte1, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.subarray(abstractMap_SimpleImmutableEntryArray0, (int)  (-74), (-25));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((byte) (-74));
      assertEquals((-74.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 48);
      assertArrayEquals(new double[] {(-74.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-1L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 55;
      doubleArray0[1] = (double) 55;
      doubleArray0[2] = (double) 55;
      int int0 = ArrayUtils.indexOf(doubleArray0, 55.0, 2);
      assertArrayEquals(new double[] {55.0, 55.0, 55.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      assertEquals(3, doubleArray0.length);
      
      Long long0 = new Long((short)256);
      assertEquals(256L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(65L);
      assertEquals(65L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((-1768L));
      assertEquals((-1768L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      Long long3 = new Long((-375L));
      assertEquals((-375L), (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (short)256);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-3252.8F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayUtils.shift(longArray0, 119);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, (-799), (-1.0F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -799, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = (-1773L);
      longArray0[4] = (-1495L);
      longArray0[6] = 1L;
      longArray0[3] = (-2950L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L, (-2950L), (-1495L), 0L, 1L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(8, longArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1L;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {1L, 1L, (-2950L), (-1495L), 0L, 1L, 0L, 1L}, longArray0);
      assertEquals(8, longArray0.length);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (int) (byte)0, (byte) (-96));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-96)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      int int0 = 1;
      ArrayUtils.shift(longArray0, 1);
      assertArrayEquals(new long[] {1L, 1L, 1L, (-2950L), (-1495L), 0L, 1L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-1495L);
      floatArray1[1] = (float) (-2950L);
      floatArray1[2] = (float) 1L;
      floatArray1[3] = (float) (-1495L);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray1, (-398), 506.0791F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -398, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, (-1677));
      assertArrayEquals(new int[] {0, 1, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 126.0F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.reverse(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 126.0F;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 87.8, 87.8);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte) (-2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-300);
      Integer integer0 = new Integer((-300));
      assertEquals((-300), (int)integer0);
      assertNotNull(integer0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)86;
      shortArray0[1] = (short)3982;
      shortArray0[2] = (short)3982;
      shortArray0[4] = (short)3982;
      shortArray0[5] = (short) (byte)86;
      shortArray0[6] = (short)3982;
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)3982;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)86);
      assertArrayEquals(new short[] {(short)86, (short)3982, (short)3982, (short)0, (short)3982, (short)86, (short)3982, (short)1, (short)3982}, shortArray0);
      assertEquals(5, int0);
      assertEquals(9, shortArray0.length);
      
      Short short0 = new Short((short)86);
      assertEquals((short)86, (short)short0);
      assertNotNull(short0);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(9, booleanArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)52;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)36);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-86), (byte)1, (byte)0, (byte)115, (byte)110, (byte)12, (byte)52}, byteArray1);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-86), (byte)1, (byte)36, (byte)0, (byte)115, (byte)110, (byte)12, (byte)52}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2130.0F);
      floatArray0[1] = 919.92F;
      floatArray0[2] = 1363.0F;
      floatArray0[3] = (-1677.766F);
      floatArray0[4] = (-1773.0F);
      floatArray0[5] = 249.144F;
      floatArray0[6] = (-131.0F);
      floatArray0[7] = (-1677.766F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertArrayEquals(new float[] {(-2130.0F), 919.92F, 1363.0F, (-1677.766F), (-1773.0F), 249.144F, (-131.0F), (-1677.766F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-2146851545));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146851545, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "}y.";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[0] = 'Q';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Q'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 3, 55);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "X:vq]/;W[qo[MviB>";
      stringArray0[1] = "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }";
      stringArray0[2] = ":M<q";
      stringArray0[3] = "C";
      stringArray0[4] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[5] = "!.)fXEi7GthC6S{?X[o";
      stringArray0[6] = "java.lang.Object";
      stringArray0[7] = "java.lang.Object";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1610L));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      Byte byte0 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-465L));
      assertEquals((-465L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((-465L));
      assertEquals((-465L), (long)long2);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      Long long3 = new Long((byte)14);
      assertEquals(14L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short) (-1130));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-1130);
      floatArray0[1] = 2115.4F;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (byte)13;
      floatArray0[4] = (float) (short) (-1);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 13.0F);
      assertArrayEquals(new float[] {(-1130.0F), 2115.4F, (-1.0F), 13.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2727;
      doubleArray0[1] = (-1.0);
      doubleArray0[4] = (double) 204;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2727.0);
      assertArrayEquals(new double[] {2727.0, (-1.0), 0.0, 0.0, 204.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('u');
      assertEquals('u', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '.');
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'w', 967);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertFalse(int1 == int0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) (-1));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int2 = ArrayUtils.indexOf(booleanArray0, false, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, int2);
      assertEquals(8, booleanArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (-1048L));
      assertArrayEquals(new long[] {(-1048L)}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert(569, (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3037;
      intArray0[1] = 2603;
      intArray0[2] = 7967;
      ArrayUtils.swap(intArray0, 7967, 3037, 12);
      assertArrayEquals(new int[] {3037, 2603, 7967}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte byte0 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, 1, byte0);
      assertEquals((byte)87, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2001);
      assertArrayEquals(new int[] {3037, 2603, 7967}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(3, intArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 7967;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-626L));
      assertArrayEquals(new long[] {7967L}, longArray0);
      assertArrayEquals(new long[] {7967L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3037;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 3037;
      doubleArray0[3] = (double) 7967;
      doubleArray0[4] = (double) 12;
      doubleArray0[5] = (double) 3037;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 2603;
      doubleArray0[8] = (double) 7967;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3037.0, (-1.0), 3037.0, 7967.0, 12.0, 3037.0, 1.0, 2603.0, 7967.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      Byte byte0 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      long[] longArray0 = new long[8];
      longArray0[0] = (-1137L);
      longArray0[1] = (long) (byte)88;
      longArray0[2] = (long) (byte)88;
      longArray0[3] = (long) (byte)88;
      longArray0[4] = (long) (byte)88;
      longArray0[5] = (-1137L);
      longArray0[6] = (-1137L);
      longArray0[7] = (-1137L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-6747L));
      assertArrayEquals(new long[] {(-6747L), (-1137L), 88L, 88L, 88L, 88L, (-1137L), (-1137L), (-1137L)}, longArray1);
      assertArrayEquals(new long[] {(-1137L), 88L, 88L, 88L, 88L, (-1137L), (-1137L), (-1137L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'H';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 72, (-2550));
      assertArrayEquals(new int[] {72}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)42, object1);
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1, "");
      assertEquals("42", string0);
      assertNotNull(string0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)42;
      shortArray0[2] = (short) (byte)42;
      shortArray0[3] = (short) (byte)42;
      shortArray0[4] = (short) (byte)42;
      shortArray0[5] = (short) (byte)42;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)42, (short)0, (short)42, (short)42, (short)42, (short)42}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte)9;
      mockRandom0.nextBytes(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray1.length);
      
      MockRandom mockRandom1 = new MockRandom((short)42);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (Random) mockRandom1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2727;
      doubleArray0[1] = (-1.0);
      doubleArray0[4] = (double) 204;
      ArrayUtils.swap((boolean[]) null, 127, 2588, (-1403));
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(doubleArray0, 2633, (-1626), 5);
      assertArrayEquals(new double[] {2727.0, (-1.0), 0.0, 0.0, 204.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) 2727;
      floatArray1[1] = (float) (-1403);
      floatArray1[2] = (float) 204;
      floatArray1[3] = (float) 2774;
      floatArray1[4] = (float) 2633;
      floatArray1[5] = 1112.7726F;
      ArrayUtils.shift(floatArray1, (-1626), 2571, 392);
      assertArrayEquals(new float[] {2633.0F, 1112.7726F, 2727.0F, (-1403.0F), 204.0F, 2774.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)44;
      Byte byte1 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)44, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte)44, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      
      byteArray0[4] = byte5;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1718.23334);
      doubleArray0[1] = (double) byte0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1666);
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) byte0;
      floatArray0[4] = (float) (byte) (-36);
      floatArray0[5] = (float) byte0;
      floatArray0[6] = (float) (byte) (-36);
      floatArray0[7] = (float) (-1666);
      floatArray0[8] = (float) (-1666);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 2571.04F);
      assertArrayEquals(new float[] {(-1666.0F), 44.0F, 44.0F, 44.0F, (-36.0F), 44.0F, (-36.0F), (-1666.0F), (-1666.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1666.0F), 44.0F, 44.0F, 44.0F, (-36.0F), 44.0F, (-36.0F), (-1666.0F), (-1666.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      ArrayUtils.reverse(floatArray1);
      assertArrayEquals(new float[] {(-1666.0F), (-1666.0F), (-36.0F), 44.0F, (-36.0F), 44.0F, 44.0F, 44.0F, (-1666.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1666.0F), 44.0F, 44.0F, 44.0F, (-36.0F), 44.0F, (-36.0F), (-1666.0F), (-1666.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (int) byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 44, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3525.3875487192063);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-3525.3875487192063);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {(-3525.3875487192063), 1.0, (-3525.3875487192063), 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3525.3875487192063), 1.0, (-3525.3875487192063), 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('5');
      assertEquals('5', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('t');
      assertEquals('t', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Character character3 = Character.valueOf('5');
      assertEquals('5', (char)character3);
      assertNotNull(character3);
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      
      Character character4 = Character.valueOf('N');
      assertEquals('N', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      
      Character character5 = Character.valueOf('j');
      assertEquals('j', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      
      Character character6 = new Character('N');
      assertEquals('N', (char)character6);
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character2));
      
      Character character7 = new Character('>');
      assertEquals('>', (char)character7);
      assertNotNull(character7);
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'5'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (char)character1;
      floatArray0[1] = (float) '5';
      ArrayUtils.reverse(floatArray0, 101, 2);
      assertArrayEquals(new float[] {53.0F, 53.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1771);
      floatArray0[1] = (float) (-1771);
      floatArray0[2] = (float) (-1771);
      ArrayUtils.reverse(floatArray0, (-1771), 275);
      assertArrayEquals(new float[] {(-1771.0F), (-1771.0F), (-1771.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ArrayUtils.shift(byteArray0, (int) (byte)17);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, (int) (byte)1, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1524L);
      Byte byte0 = Byte.valueOf((byte)12);
      assertEquals((byte)12, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1524L);
      floatArray0[1] = (float) (-1524L);
      floatArray0[2] = 120.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-5326.4697F));
      assertArrayEquals(new float[] {(-1524.0F), (-1524.0F), 120.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 101;
      intArray0[1] = 1077;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)12;
      intArray0[4] = (-493);
      int[] intArray1 = ArrayUtils.insert((int) (byte)0, intArray0, intArray0);
      assertArrayEquals(new int[] {101, 1077, 0, 12, (-493)}, intArray0);
      assertArrayEquals(new int[] {101, 1077, 0, 12, (-493), 101, 1077, 0, 12, (-493)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 22;
      boolean boolean0 = ArrayUtils.contains(intArray0, 22);
      assertArrayEquals(new int[] {22, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)52;
      Byte byte1 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      int[] intArray0 = new int[6];
      intArray0[0] = 2733;
      intArray0[1] = 1763;
      intArray0[2] = 769;
      intArray0[3] = (int) byte0;
      intArray0[4] = 769;
      intArray0[5] = 2733;
      boolean boolean0 = ArrayUtils.contains(intArray0, 52);
      assertArrayEquals(new int[] {2733, 1763, 769, 52, 769, 2733}, intArray0);
      assertTrue(boolean0);
      assertEquals(6, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-378));
      assertArrayEquals(new int[] {2733, 1763, 769, 52, 769, 2733}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, 2733, (int) byte0, 769);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Byte byte2 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte4 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte2, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      Byte byte0 = ArrayUtils.get((Byte[]) null, 5);
      assertNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Byte byte1 = new Byte((byte)58);
      assertEquals((byte)58, (byte)byte1);
      assertNotNull(byte1);
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, byte1);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'b';
      charArray0[2] = 'A';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '-', 5);
      assertArrayEquals(new char[] {'-', 'b', 'A'}, charArray0);
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '-';
      floatArray0[1] = (float) 'b';
      floatArray0[2] = (float) '-';
      floatArray0[3] = (float) '-';
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) '-';
      floatArray0[6] = (float) 5;
      floatArray0[7] = (float) '-';
      floatArray0[8] = (float) (byte)58;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 5);
      assertArrayEquals(new float[] {45.0F, 98.0F, 45.0F, 45.0F, 0.0F, 45.0F, 45.0F, 58.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {45.0F, 98.0F, 45.0F, 45.0F, 0.0F, 45.0F, 5.0F, 45.0F, 58.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1800));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null, (-1800));
      assertEquals((-1), int0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = '-';
      charArray0[5] = '_';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'-', '-', '-', '-', '-', '_', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(10, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-3566.0F));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      charArray0[7] = '-';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) '_';
      longArray0[4] = (long) '-';
      longArray0[5] = 1L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), 95L, 45L, 1L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(12, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 1873;
      floatArray0[4] = (float) 97;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 97;
      floatArray0[7] = (float) 1873;
      floatArray0[8] = (float) 97;
      ArrayUtils.shift(floatArray0, (-1165), 0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1873.0F, 97.0F, 0.0F, 97.0F, 1873.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-65));
      assertEquals((byte) (-65), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[1] = byte0;
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = 't';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {' ', 't'}, charArray0);
      assertTrue(boolean1);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Byte byte1 = new Byte((byte) (-98));
      assertEquals((byte) (-98), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean2 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {' ', 't'}, charArray0);
      assertTrue(boolean2);
      assertEquals(2, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ArrayUtils.shift(floatArray0, 2146457616, 15705, 51);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1873.0F, 97.0F, 0.0F, 97.0F, 1873.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 2475.85923016215);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-2545), (double) (-2545));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2545, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 0.0F, (-2146767462));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, (-1), 1.5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-25));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-25.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)126);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-18)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-18), (byte)126}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)126;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)126;
      intArray0[3] = (int) (byte) (-25);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-745), 16);
      assertArrayEquals(new int[] {126, 0, 126, (-25)}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(4, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 126;
      longArray0[1] = (long) (byte) (-18);
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 2218L);
      assertArrayEquals(new long[] {126L, (-18L), 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {126L, (-18L), 0L, 0L, (-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-808));
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.swap((Object[]) integerArray0, (-25), 48);
      assertEquals(6, integerArray0.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-25), 5372, (-25));
      assertEquals(6, integerArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      Long long0 = new Long((-25));
      assertEquals((-25L), (long)long0);
      assertNotNull(long0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (byte) (-110));
      assertNull(longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3120.7F);
      floatArray0[1] = (float) (-808);
      floatArray0[2] = (float) (byte) (-110);
      floatArray0[3] = (float) (byte) (-110);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (-808));
      assertArrayEquals(new float[] {(-3120.7F), (-808.0F), (-110.0F), (-110.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray1 = ArrayUtils.addFirst((long[]) null, 1944L);
      assertArrayEquals(new long[] {1944L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1725.107769816081), 972.3879809863744);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2442), (-949));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-593L);
      longArray0[1] = (long) 0;
      longArray0[2] = (-24L);
      longArray0[3] = (-375L);
      longArray0[4] = (-24L);
      longArray0[5] = (-593L);
      longArray0[6] = (-375L);
      ArrayUtils.reverse(longArray0, 1340, 1);
      assertArrayEquals(new long[] {(-593L), 0L, (-24L), (-375L), (-24L), (-593L), (-375L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = 'Y';
      charArray0[2] = 'F';
      charArray0[3] = ')';
      charArray0[4] = '6';
      charArray0[5] = '&';
      charArray0[6] = 'P';
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte)111);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1340;
      doubleArray0[2] = (double) (-24L);
      int int0 = ArrayUtils.indexOf(doubleArray0, 2975.0, 1.5);
      assertArrayEquals(new double[] {1.0, 1340.0, (-24.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      short[] shortArray0 = new short[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[2] = 919L;
      longArray0[2] = (long) (byte) (-18);
      longArray0[4] = (long) (byte)0;
      ArrayUtils.shift(longArray0, (int) (byte)0);
      assertArrayEquals(new long[] {0L, 0L, (-18L), 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-18L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertFalse(boolean0);
      assertEquals(6, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = (-1L);
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 1L;
      longArray1[1] = (-1495L);
      longArray1[2] = (-1495L);
      longArray1[3] = 1L;
      longArray1[4] = 1429L;
      longArray1[5] = (-2950L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertArrayEquals(new long[] {1L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {1L, (-1495L), (-1495L), 1L, 1429L, (-2950L)}, longArray1);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-4536);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-4536));
      assertArrayEquals(new short[] {(short) (-4536)}, shortArray0);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.reverse(shortArray0, 947, (-520));
      assertArrayEquals(new short[] {(short) (-4536)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.reverse((float[]) null, (-1630), (-1630));
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = (-1773L);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0, 6, 113);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      ArrayUtils.reverse((float[]) null, 6, 111);
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      short short0 = (short) (-104);
      // Undeclared exception!
      try { 
        ArrayUtils.add((AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null, (AbstractMap.SimpleImmutableEntry<Byte, Byte>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 764L);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {764L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      ArrayUtils.shift(charArray0, 2588, 2588, 2588);
      assertArrayEquals(new char[] {'6'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, 3590.1F, 2588);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      
      int int1 = ArrayUtils.indexOf(floatArray0, (float) (-1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(0, floatArray0.length);
      assertTrue(int1 == int0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'6'}, charArray0);
      assertArrayEquals(new char[] {'6', '6'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)21);
      assertEquals((byte)21, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      
      byteArray0[4] = byte4;
      byte byte5 = (byte)124;
      Byte byte6 = new Byte((byte)124);
      assertEquals((byte)124, (byte)byte6);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte(byte5);
      assertEquals((byte)124, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte6));
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte8);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte4));
      
      byteArray0[7] = byte8;
      Byte byte9 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte9);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte5));
      assertTrue(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte4));
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte9);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte5));
      assertTrue(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 117.3549671308118, 117.3549671308118);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, Double.NaN, (-2146748735));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      ArrayUtils.swap(byteArray0, (int) (byte) (-105), 1, (int) (byte) (-105));
      assertArrayEquals(new byte[] {(byte) (-105)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)15;
      byteArray0[1] = (byte)15;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0015';
      ArrayUtils.swap((double[]) null, (int) (byte)15, (int) (byte)15, 2);
      double[] doubleArray0 = ArrayUtils.add((double[]) null, Double.NaN);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, Double.NaN, Double.NaN);
      assertFalse(boolean0);
      
      Byte[] byteArray2 = new Byte[2];
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray2[0] = byte1;
      byteArray2[1] = (Byte) (byte)15;
      Byte[] byteArray3 = ArrayUtils.clone(byteArray2);
      assertNotNull(byteArray3);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      
      Double[] doubleArray1 = new Double[3];
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(1951.0);
      assertEquals(1951.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[1] = double1;
      Double double2 = new Double(byte0);
      assertEquals(15.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray1[2] = double2;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 1951.0, 15.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2727;
      doubleArray0[1] = (-1.0);
      doubleArray0[4] = (double) 204;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2727.0);
      assertArrayEquals(new double[] {2727.0, (-1.0), 0.0, 0.0, 204.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('u');
      assertEquals('u', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '.');
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'w', 967);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertFalse(int1 == int0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) characterArray0, (Object) byte0);
      assertFalse(boolean0);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)3;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (int) (byte)3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      Float float0 = new Float((float) (short)55);
      assertEquals(55.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(323.09554);
      assertEquals(323.09555F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) (short)55);
      assertEquals(55.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float((-2740.2852202726));
      assertEquals((-2740.2852F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      Float float4 = new Float(1625.6375F);
      assertEquals(1625.6375F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (short)55);
      assertNull(floatArray0);
      
      ArrayUtils.swap((char[]) null, 0, (int) (short)55);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      ArrayUtils.swap(byteArray0, (int) (short)55, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, 4, (byte)15);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1, (byte)15}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.add((char[]) null, ';');
      assertArrayEquals(new char[] {';'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 55;
      doubleArray0[1] = (double) 55;
      doubleArray0[2] = (double) 55;
      int int0 = ArrayUtils.indexOf(doubleArray0, 55.0, 2);
      assertArrayEquals(new double[] {55.0, 55.0, 55.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)52);
      assertNull(byteArray0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.valueOf((String) null);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-2146851545));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146851545, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)10;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)10);
      assertArrayEquals(new short[] {(short)10}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      float[] floatArray0 = new float[9];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0015';
      Byte byte0 = new Byte((byte)106);
      assertEquals((byte)106, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-50));
      assertEquals((byte) (-50), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray2 = new Byte[0];
      Byte byte2 = new Byte((byte) (-53));
      assertEquals((byte) (-53), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte[] byteArray3 = ArrayUtils.removeAllOccurences(byteArray2, byte2);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2727;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 2727;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 204;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2727.0);
      assertArrayEquals(new double[] {2727.0, (-1.0), 2727.0, (-1.0), 204.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('u');
      assertEquals('u', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '.');
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(104, longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)117);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)117}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(104, shortArray1, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 104, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-116));
      assertEquals((byte) (-116), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte1 = new Byte((byte)54);
      assertEquals((byte)54, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte)54, booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, (-1), 4152}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 2);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, int1);
      assertEquals(9, booleanArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.insert((-35), booleanArray1, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-68);
      longArray0[1] = 1077L;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 104;
      longArray0[7] = (long) 104;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-128), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -128, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2580), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2580, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 2588, (-957), (-3806));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(doubleArray0, 2633, 1878, (-3806));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1878;
      longArray0[1] = (long) 2588;
      longArray0[2] = (long) 1878;
      longArray0[3] = (long) 2633;
      longArray0[4] = (long) 2633;
      longArray0[5] = (long) 2588;
      longArray0[6] = (long) (-3806);
      longArray0[7] = (long) (-3806);
      longArray0[8] = (long) 2588;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {1878L, 2588L, 1878L, 2633L, 2633L, 2588L, (-3806L), (-3806L), 2588L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 1878);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)34, (int) (byte)34);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-3318));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 'i';
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 105L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 105L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1144);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true, true}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(8, booleanArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1144;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (int) 'i';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2017);
      assertArrayEquals(new int[] {1144, 0, 0, 105}, intArray0);
      assertArrayEquals(new int[] {2017, 1144, 0, 0, 105}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)116;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)36);
      assertArrayEquals(new byte[] {(byte)68, (byte)36, (byte) (-128), (byte)27, (byte)49, (byte) (-39), (byte)116}, byteArray0);
      assertEquals(1, int1);
      assertEquals(7, byteArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 189.9F;
      floatArray0[2] = (-1951.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {(-1.0F), 189.9F, (-1951.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 189.9F, (-1951.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)8;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-18));
      assertArrayEquals(new byte[] {(byte) (-18), (byte)126, (byte) (-1), (byte)8}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-18), (byte)126, (byte) (-1), (byte)8, (byte) (-18)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 189.9F;
      doubleArray0[2] = (-825.4269146);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 189.9F);
      assertArrayEquals(new double[] {(-1.0), 189.89999389648438, (-825.4269146)}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)33;
      Byte byte1 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, "");
      assertNotNull(string0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) byteArray1);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) (byte)33;
      shortArray0[3] = (short) (byte)33;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) (byte)33;
      shortArray0[6] = (short) byte0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)33, (short)33, (short)33, (short)33, (short)33, (short)33, (short)33, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(18, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)14;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)9;
      byteArray2[3] = (byte)33;
      byteArray2[4] = (byte)33;
      mockRandom0.nextBytes(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray2);
      assertEquals(5, byteArray2.length);
      
      MockRandom mockRandom1 = new MockRandom((short)33);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      ArrayUtils.shuffle((Object[]) byteArray0, (Random) mockRandom1);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(mockRandom1, mockRandom0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      Byte byte0 = new Byte((byte)24);
      assertEquals((byte)24, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)24);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)24;
      longArray0[1] = (long) (byte)24;
      longArray0[2] = (long) (byte)24;
      boolean boolean0 = ArrayUtils.contains(longArray0, 24L);
      assertArrayEquals(new long[] {24L, 24L, 24L}, longArray0);
      assertTrue(boolean0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-410.88F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-195.653F);
      floatArray0[3] = 1080.7965F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertArrayEquals(new float[] {(-410.88F), (-1.0F), (-195.653F), 1080.7965F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1077;
      intArray0[1] = 1077;
      intArray0[2] = 1077;
      intArray0[3] = 1077;
      intArray0[4] = 1077;
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '1';
      charArray0[4] = '9';
      charArray0[5] = '9';
      charArray0[6] = '9';
      charArray0[7] = '9';
      charArray0[8] = ']';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ']');
      assertArrayEquals(new char[] {'9', '9', '9', '1', '9', '9', '9', '9'}, charArray1);
      assertArrayEquals(new char[] {'9', '9', '9', '1', '9', '9', '9', '9', ']'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {(-410.88F), (-1.0F), (-195.653F), 1080.7965F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = (long) '1';
      longArray0[2] = (long) '1';
      boolean boolean1 = ArrayUtils.contains(longArray0, (long) 1077);
      assertArrayEquals(new long[] {(-1L), 49L, 49L}, longArray0);
      assertFalse(boolean1);
      assertEquals(3, longArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)52;
      Byte byte1 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)115;
      shortArray0[1] = (short) (byte)52;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) (byte)52;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short) (byte)52;
      shortArray0[7] = (short) (byte)52;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)52, (short)52, (short)52, (short)52, (short)52, (short)52, (short)52, (short)115}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      ArrayUtils.shift((long[]) null, (-981));
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (-2075.3921);
      doubleArray0[4] = (double) (byte)82;
      doubleArray0[5] = (double) (byte)82;
      ArrayUtils.swap(doubleArray0, 792, 52);
      assertArrayEquals(new double[] {0.0, 8.0, 0.0, (-2075.3921), 82.0, 82.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'k');
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertNotNull(bitSet1);
      assertEquals(1, charArray0.length);
      assertEquals(1, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      
      ArrayUtils.reverse((Object[]) byteArray1, 8, 52);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (int) byte0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4002.078104515022;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (-923.78733987);
      doubleArray0[3] = (double) 0;
      ArrayUtils.swap(doubleArray0, 0, 0, (-2193));
      assertArrayEquals(new double[] {4002.078104515022, 2.0, (-923.78733987), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = '9';
      charArray0[2] = 'D';
      charArray0[3] = 'Z';
      charArray0[4] = 'G';
      charArray0[5] = 'D';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertArrayEquals(new char[] {'e', '9', 'D', 'Z', 'G', 'D'}, charArray0);
      assertArrayEquals(new char[] {'e', '9', 'D', 'Z', 'G', 'D'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 93, 1541, 93);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = '9';
      charArray0[2] = 'D';
      charArray0[3] = '9';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '9');
      assertArrayEquals(new char[] {'D', '9', 'D', '9'}, charArray0);
      assertArrayEquals(new char[] {'D', 'D', '9'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)84);
      assertEquals((byte)84, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)84, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (int) 84);
      assertNull(object1);
      assertEquals(3, objectArray0.length);
      
      objectArray0[1] = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)84;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)12);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)84, (byte)84, (byte)84, (byte)84, (byte)84}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(7, byteArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      Object object2 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)84, (byte)84, (byte)84, (byte)84, (byte)84}, byteArray0);
      assertNull(object2);
      assertEquals(7, byteArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      objectArray0[2] = null;
      ArrayUtils.swap(objectArray0, (int) (byte)84, Integer.MAX_VALUE, 3);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-410.88F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-195.653F);
      floatArray0[3] = 1080.7965F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertArrayEquals(new float[] {(-410.88F), (-1.0F), (-195.653F), 1080.7965F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1077;
      intArray0[1] = 1077;
      intArray0[2] = 1077;
      intArray0[3] = 1077;
      intArray0[4] = 1077;
      intArray0[5] = 1077;
      intArray0[6] = 1077;
      intArray0[7] = 1077;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1077, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1077, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2146945822);
      intArray0[1] = (-2146945822);
      intArray0[2] = (-2146945822);
      intArray0[3] = (-2146945822);
      int[] intArray1 = ArrayUtils.insert((-2146945822), (int[]) null, intArray0);
      assertArrayEquals(new int[] {(-2146945822), (-2146945822), (-2146945822), (-2146945822)}, intArray0);
      assertNull(intArray1);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)56, (int) (byte)56);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-3814));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-3814), 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      BitSet bitSet0 = null;
      try {
        bitSet0 = new BitSet((-3814));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -3814
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1681);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {1681}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1681);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      int[] intArray0 = new int[10];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2146746212, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146746212, Length: 10
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3037;
      intArray0[1] = 2603;
      intArray0[2] = 7967;
      ArrayUtils.swap(intArray0, 7967, 3037, 12);
      assertArrayEquals(new int[] {3037, 2603, 7967}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte byte0 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, 1, byte0);
      assertEquals((byte)87, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 3037;
      longArray0[2] = (long) 3037;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {1L, 3037L, 3037L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3037;
      intArray1[1] = 3037;
      intArray1[2] = 12;
      intArray1[3] = 1;
      intArray1[4] = 2603;
      intArray1[5] = 7967;
      intArray1[6] = 12;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-1034));
      assertArrayEquals(new int[] {3037, 3037, 12, 1, 2603, 7967, 12}, intArray1);
      assertNotNull(bitSet0);
      assertEquals(7, intArray1.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.addFirst(intArray0, 3037);
      assertArrayEquals(new int[] {3037, 2603, 7967}, intArray0);
      assertArrayEquals(new int[] {3037, 3037, 2603, 7967}, intArray2);
      assertNotNull(intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2738.8697758));
      assertArrayEquals(new double[] {(-2738.8697758)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-642), doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -642, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 2727, 204, 204);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte5 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      
      Byte byte6 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte6);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      
      Byte byte7 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      
      Byte byte8 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte8);
      assertNotNull(byte8);
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte4));
      
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-129.0);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-121);
      byteArray2[2] = (byte) (-103);
      byteArray2[3] = (byte)5;
      byteArray2[4] = (byte) (-103);
      byteArray2[5] = (byte) (-121);
      byteArray2[6] = (byte)48;
      byteArray2[7] = (byte) (-103);
      mockRandom0.nextBytes(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(8, byteArray2.length);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.2, double0, 0.01);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(3, int0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-2143385396));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, '2', (-83));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(3114.2);
      assertEquals(3114.2, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0L);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-4101);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)30706;
      shortArray0[3] = (short) (-3201);
      shortArray0[4] = (short)2278;
      shortArray0[5] = (short) (-2576);
      ArrayUtils.swap(shortArray0, (int) (short) (-2576), (-3305), (int) (short) (-3201));
      assertArrayEquals(new short[] {(short) (-4101), (short)2, (short)30706, (short) (-3201), (short)2278, (short) (-2576)}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)0;
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte) (-1), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte0 == byte3);
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      
      byteArray0[3] = byte5;
      byte byte6 = (byte) (-84);
      Byte byte7 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte6));
      
      byteArray0[4] = byte7;
      Byte byte8 = new Byte(byte6);
      assertEquals((byte) (-84), (byte)byte8);
      assertNotNull(byte8);
      assertFalse(byte6 == byte0);
      assertFalse(byte6 == byte3);
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte6));
      
      Byte byte9 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte9);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte2));
      assertTrue(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte3));
      assertTrue(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte1));
      assertTrue(byte9.equals((Object)byte6));
      
      Byte byte10 = ArrayUtils.get(byteArray0, (int) byte0, byte9);
      assertEquals((byte) (-84), (byte)byte10);
      assertNotNull(byte10);
      assertEquals(7, byteArray0.length);
      assertFalse(byte10.equals((Object)byte1));
      assertFalse(byte10.equals((Object)byte2));
      assertTrue(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte5));
      assertTrue(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte4));
      assertTrue(byte10.equals((Object)byte6));
      assertFalse(byte0 == byte6);
      assertFalse(byte0 == byte3);
      assertFalse(byte9.equals((Object)byte2));
      assertTrue(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte3));
      assertTrue(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte1));
      assertTrue(byte9.equals((Object)byte6));
      
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((byte) (-1));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double1;
      Double double2 = new Double(byte0);
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertFalse(byte0 == byte6);
      assertFalse(byte0 == byte3);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(byte0);
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertFalse(byte0 == byte6);
      assertFalse(byte0 == byte3);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      
      Double double4 = new Double(380.18);
      assertEquals(380.18, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift((Object[]) doubleArray1, 898);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      Byte byte11 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte11);
      assertNotNull(byte11);
      assertFalse(byte11.equals((Object)byte6));
      assertFalse(byte11.equals((Object)byte10));
      assertFalse(byte11.equals((Object)byte1));
      assertFalse(byte11.equals((Object)byte2));
      assertFalse(byte11.equals((Object)byte7));
      assertFalse(byte11.equals((Object)byte3));
      assertFalse(byte11.equals((Object)byte9));
      assertFalse(byte11.equals((Object)byte8));
      assertFalse(byte11.equals((Object)byte4));
      assertFalse(byte11.equals((Object)byte0));
      assertFalse(byte11.equals((Object)byte5));
      
      boolean boolean0 = ArrayUtils.isSameType(byte11, byte0);
      assertTrue(boolean0);
      assertFalse(byte0 == byte6);
      assertFalse(byte0 == byte3);
      assertFalse(byte11.equals((Object)byte6));
      assertFalse(byte11.equals((Object)byte10));
      assertFalse(byte11.equals((Object)byte1));
      assertFalse(byte11.equals((Object)byte2));
      assertFalse(byte11.equals((Object)byte7));
      assertFalse(byte11.equals((Object)byte3));
      assertFalse(byte11.equals((Object)byte9));
      assertFalse(byte11.equals((Object)byte8));
      assertFalse(byte11.equals((Object)byte4));
      assertFalse(byte11.equals((Object)byte0));
      assertFalse(byte11.equals((Object)byte5));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)90;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte3;
      shortArray0[3] = (short) (byte)90;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short)2070;
      shortArray0[6] = (short) byte0;
      shortArray0[7] = (short) (-412);
      shortArray0[8] = (short) byte6;
      ArrayUtils.swap(shortArray0, 79, 2439, 2);
      assertArrayEquals(new short[] {(short)90, (short) (-1), (short)0, (short)90, (short) (-1), (short)2070, (short) (-1), (short) (-412), (short) (-84)}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      ArrayUtils.shift((float[]) null, 97, (-524), 1873);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)111);
      assertEquals((byte)111, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = Byte.valueOf((byte)116);
      assertEquals((byte)116, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = Byte.valueOf((byte)111);
      assertEquals((byte)111, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte)95);
      assertEquals((byte)95, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      
      Byte[] byteArray0 = ArrayUtils.removeAllOccurrences((Byte[]) null, byte2);
      assertNull(byteArray0);
      assertFalse(byte2.equals((Object)byte3));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte4));
      assertFalse(byte2.equals((Object)byte1));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Byte[] byteArray1 = ArrayUtils.removeElement((Byte[]) null, (Object) byte1);
      assertNull(byteArray1);
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte4));
      assertTrue(byte1.equals((Object)byte3));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1873;
      doubleArray0[1] = (double) (byte)116;
      doubleArray0[2] = (double) 1734;
      doubleArray0[3] = (double) (byte)111;
      doubleArray0[4] = (double) (-524);
      doubleArray0[5] = (double) (-524);
      doubleArray0[6] = (double) 97;
      doubleArray0[7] = (double) (byte)95;
      doubleArray0[8] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (double) 0);
      assertArrayEquals(new double[] {1873.0, 116.0, 1734.0, 111.0, (-524.0), (-524.0), 97.0, 95.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.shift((Object[]) null, (int) (byte)3, 0, 97);
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 4);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(4, classArray1.length);
      assertEquals(4, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 2);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, (-1), 4152}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte)8;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte)8;
      shortArray0[5] = (short) (byte)8;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)4, (short) (-1), (short)8, (short) (-1), (short)8, (short)8}, shortArray0);
      assertTrue(boolean0);
      assertEquals(6, shortArray0.length);
      
      ArrayUtils.shift(doubleArray0, (int) (short) (-1), (int) (byte)8, (-3647));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      Float float0 = new Float((float) (short)55);
      assertEquals(55.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(323.09554);
      assertEquals(323.09555F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) (short)55);
      assertEquals(55.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float(1625.6375F);
      assertEquals(1625.6375F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      ArrayUtils.swap((char[]) null, 0, (int) (short)55);
      byte byte0 = (byte)43;
      Byte byte1 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte byte2 = (byte)120;
      Byte byte3 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[9];
      byte byte4 = (byte)8;
      Byte byte5 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      
      byteArray0[0] = byte5;
      byteArray0[2] = byte3;
      byteArray0[2] = byte3;
      byteArray0[3] = byte3;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      byteArray0[6] = byte1;
      byteArray0[7] = byte1;
      byteArray0[8] = byte1;
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) byte2;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) byte4;
      ArrayUtils.shift(doubleArray0, (-1), 0, (int) byte2);
      assertArrayEquals(new double[] {120.0, 43.0, 8.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte4);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte4, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2.0, 2);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = null;
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short)2798);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Short short0 = new Short((short)1103);
      assertEquals((short)1103, (short)short0);
      assertNotNull(short0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = '=';
      charArray0[2] = '|';
      charArray0[3] = '0';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2948), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2948, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      char[] charArray0 = new char[6];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'm', (-628));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(6, charArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1072, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1072, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 2727, 204, 204);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte byte0 = (byte) (-103);
      Byte byte1 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte byte2 = (byte)5;
      Byte byte3 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      
      Byte byte5 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      
      Byte byte6 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte6);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte6;
      byteArray0[1] = byte1;
      byteArray0[2] = byte3;
      Byte byte7 = new Byte(byte2);
      assertEquals((byte)5, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte2 == byte0);
      assertTrue(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      
      Byte byte8 = ArrayUtils.get(byteArray0, 23, byte7);
      assertEquals((byte)5, (byte)byte8);
      assertNotNull(byte8);
      assertEquals(4, byteArray0.length);
      assertFalse(byte2 == byte0);
      assertTrue(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte3));
      
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      Double double1 = new Double(byte0);
      assertEquals((-103.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertFalse(byte0 == byte2);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift((Object[]) doubleArray1, (-2));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameType(byte2, byte2);
      assertTrue(boolean0);
      assertFalse(byte2 == byte0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      charArray0[6] = 'b';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(23, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3037;
      intArray0[1] = 2603;
      intArray0[2] = 7967;
      ArrayUtils.swap(intArray0, 7967, 3037, 12);
      assertArrayEquals(new int[] {3037, 2603, 7967}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte byte0 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, 1, byte0);
      assertEquals((byte)87, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 3037;
      longArray0[2] = (long) 3037;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {1L, 3037L, 3037L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3037;
      intArray1[1] = 3037;
      intArray1[2] = 12;
      intArray1[3] = 1;
      intArray1[4] = 2603;
      intArray1[5] = 7967;
      intArray1[6] = 12;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-1034));
      assertArrayEquals(new int[] {3037, 3037, 12, 1, 2603, 7967, 12}, intArray1);
      assertNotNull(bitSet0);
      assertEquals(7, intArray1.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 'T';
      charArray0[2] = 'j';
      charArray0[3] = 'C';
      charArray0[4] = 'P';
      charArray0[5] = 'H';
      charArray0[6] = '^';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'z');
      assertArrayEquals(new char[] {'T', 'j', 'C', 'P', 'H', '^'}, charArray1);
      assertArrayEquals(new char[] {'z', 'T', 'j', 'C', 'P', 'H', '^'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      ArrayUtils.shift(charArray0, (int) (byte)1, (-331), 8);
      assertArrayEquals(new char[] {'X', 'X'}, charArray0);
      assertEquals(2, charArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-36);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)82, (byte)82, (byte) (-36), (byte)82}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)104, (-2634));
      assertArrayEquals(new byte[] {(byte)82, (byte)82, (byte) (-36), (byte)82}, byteArray0);
      assertNotNull(bitSet1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-1904.73F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0, 1112, 1112);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertNotNull(bitSet0);
      assertEquals(3, objectArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(91, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-56));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)91);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(4, longArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)56;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (-3543));
      assertArrayEquals(new byte[] {(byte) (-63), (byte)45, (byte)10, (byte)2, (byte)56}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
      assertEquals("{3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)45, (byte)10, (byte)2, (byte)56}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)45, 3);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)45, (byte)10, (byte)2, (byte)56}, byteArray0);
      assertEquals(1, int0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-72);
      ArrayUtils.swap(intArray0, 2781, 2);
      assertArrayEquals(new int[] {(-72)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Byte byte0 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte)37;
      Byte byte2 = new Byte((byte)37);
      assertEquals((byte)37, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = Byte.valueOf((byte)1);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte byte4 = Byte.valueOf((byte) (-68));
      assertEquals((byte) (-68), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte2;
      byteArray0[1] = byte0;
      Byte byte5 = new Byte((byte) (-68));
      assertEquals((byte) (-68), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte5);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      MockRandom mockRandom0 = new MockRandom((byte)7);
      assertNotNull(mockRandom0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {(-72)}, intArray0);
      assertArrayEquals(new int[] {(-72)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)10;
      byteArray2[1] = (byte)37;
      byteArray2[2] = (byte)2;
      byteArray2[3] = byte1;
      int int0 = ArrayUtils.lastIndexOf(byteArray2, (byte)99);
      assertArrayEquals(new byte[] {(byte)10, (byte)37, (byte)2, (byte)37}, byteArray2);
      assertEquals((-1), int0);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2105.128);
      doubleArray0[3] = (-304.273386060069);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      Byte byte0 = new Byte((byte) (-67));
      assertEquals((byte) (-67), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-67));
      assertEquals((byte) (-67), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-50));
      assertEquals((byte) (-50), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte) (-67));
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-50);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-67));
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-50), (byte) (-50), (byte) (-67), (byte) (-50)}, byteArray0);
      assertEquals(3, int0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 74);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, (-2008), (-2008));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(4, intArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) ';';
      intArray0[1] = (int) ';';
      int int0 = ArrayUtils.indexOf(intArray0, 59, 59);
      assertArrayEquals(new int[] {59, 59}, intArray0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-677), (-45));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {0, (-1)}, intArray0);
      assertArrayEquals(new int[] {0, (-1), 4152}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      Character character0 = Character.valueOf('r');
      assertEquals('r', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('y');
      assertEquals('y', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('/');
      assertEquals('/', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Character character3 = new Character('\\');
      assertEquals('\\', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      
      Character character4 = new Character('7');
      assertEquals('7', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      
      Character[] characterArray0 = new Character[2];
      Character character5 = Character.valueOf('/');
      assertEquals('/', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      
      characterArray0[0] = character5;
      characterArray0[1] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'/', '7'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      ArrayUtils.swap((Object[]) characterArray0, 40, 2284, 1);
      assertEquals(2, characterArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-5666);
      shortArray0[4] = (short)2044;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-30516);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), (-1082));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)7, (short)3, (short) (-1), (short) (-5666), (short)2044, (short)0, (short) (-30516)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)8192;
      shortArray0[2] = (short)2727;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)8;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 108, (-2680));
      assertArrayEquals(new short[] {(short)4, (short)8192, (short)2727, (short)0, (short)2, (short)8}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 4032, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 4002.5666623502693;
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '8', Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = 'z';
      charArray0[2] = '+';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {'+', 'z', '+'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '+';
      intArray0[1] = (int) '+';
      int int0 = ArrayUtils.indexOf(intArray0, 43, 43);
      assertArrayEquals(new int[] {43, 43}, intArray0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 351L;
      longArray0[1] = (long) 43;
      longArray0[2] = (long) ',';
      longArray0[3] = (-1632L);
      longArray0[4] = (long) '+';
      Integer integer0 = new Integer(43);
      assertEquals(43, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(43);
      assertEquals(43, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      char[] charArray2 = new char[8];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = '+';
      charArray2[1] = '~';
      charArray2[2] = '\"';
      charArray2[3] = '+';
      charArray2[4] = 'z';
      charArray2[5] = 'z';
      charArray2[6] = '+';
      charArray2[7] = 'z';
      char[] charArray3 = ArrayUtils.removeElements(charArray2, charArray1);
      assertArrayEquals(new char[] {'+', 'z', '+'}, charArray0);
      assertArrayEquals(new char[] {'+', '~', '\"', '+', 'z', 'z', '+', 'z'}, charArray2);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'+', '~', '\"', '+', 'z', 'z', '+', 'z'}, charArray3);
      assertNotNull(charArray3);
      assertEquals(3, charArray0.length);
      assertEquals(8, charArray2.length);
      assertEquals(0, charArray1.length);
      assertEquals(8, charArray3.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, 2, 2, 2);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('i');
      assertEquals('i', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1372);
      floatArray0[1] = (float) 376;
      ArrayUtils.swap(floatArray0, (-2140622896), 1378, 2103);
      assertArrayEquals(new float[] {(-1372.0F), 376.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'i');
      assertArrayEquals(new char[] {'i'}, charArray0);
      assertTrue(boolean1);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Float[] floatArray1 = new Float[8];
      floatArray1[0] = (Float) 376.0F;
      floatArray1[1] = (Float) (-1372.0F);
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.shift((Object[]) floatArray1, 1378);
      assertEquals(8, floatArray1.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, (int)  (-1));
      assertNull(byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)108);
      assertEquals((short)108, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[17];
      floatArray0[0] = (float) (short)108;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(17, floatArray0.length);
      assertEquals(34, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 108.0F;
      doubleArray0[1] = (double) 108.0F;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {108.0, 108.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {108.0, 108.0, 108.0, 108.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '\"';
      charArray0[2] = 'Q';
      charArray0[3] = 'G';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'G', 'Q', '\"', '2'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      int[] intArray0 = new int[21];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(21, intArray0.length);
      assertEquals(21, integerArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "ybo6Jm`_sr(E&wDGX3");
      assertNotNull(stringArray0);
      assertEquals(21, intArray0.length);
      assertEquals(21, integerArray0.length);
      assertEquals(21, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      char[] charArray0 = new char[3];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '\u0000';
      longArray0[1] = (-560L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, (-560L)}, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) 'l';
      floatArray0[4] = (float) (-560L);
      floatArray0[5] = (float) (byte)0;
      ArrayUtils.swap(floatArray0, (int) (byte)0, (-1), (-1650));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 108.0F, (-560.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1532.03F));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 108.0F, (-560.0F), 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(6, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "");
      assertNotNull(stringArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'l';
      intArray0[1] = (int) 'l';
      intArray0[2] = (int) 'l';
      intArray0[3] = (int) 'l';
      intArray0[4] = (int) 'l';
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) byte0;
      intArray0[7] = (int) byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 108, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0, "");
      assertNotNull(stringArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = 'z';
      charArray0[2] = '.';
      charArray0[3] = 'i';
      charArray0[4] = '~';
      charArray0[5] = 'A';
      charArray0[6] = 'z';
      charArray0[7] = ':';
      charArray0[8] = '`';
      ArrayUtils.swap(charArray0, 1, (-1726), 0);
      assertArrayEquals(new char[] {'V', 'z', '.', 'i', '~', 'A', 'z', ':', '`'}, charArray0);
      assertEquals(9, charArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-610);
      shortArray0[2] = (short) (-775);
      shortArray0[3] = (short)4022;
      shortArray0[4] = (short)1308;
      shortArray0[5] = (short)425;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short) (-610), (short) (-775), (short)4022, (short)1308, (short)425}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)371;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)371}, shortArray0);
      assertArrayEquals(new short[] {(short)371, (short)371}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertArrayEquals(new short[] {(short)371}, shortArray0);
      assertArrayEquals(new short[] {(short)371, (short)371}, shortArray1);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 99);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 99;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1014.67F, 99);
      assertArrayEquals(new float[] {99.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-595.389F);
      floatArray0[1] = (-1491.0282F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1491.0282F), 2144106198);
      assertArrayEquals(new float[] {(-595.389F), (-1491.0282F)}, floatArray0, 0.01F);
      assertEquals(1, int0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 77);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-31)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) (byte)0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 2304, (-2224), 528);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)425;
      shortArray0[1] = (short)425;
      shortArray0[2] = (short) (byte) (-31);
      shortArray0[3] = (short) (byte) (-31);
      shortArray0[4] = (short)425;
      shortArray0[5] = (short)425;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)0;
      shortArray0[8] = (short) (byte)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0, (-1125));
      assertArrayEquals(new short[] {(short)425, (short)425, (short) (-31), (short) (-31), (short)425, (short)425, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, int0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 77);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-31)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) (byte)0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1), (int) (byte)0, (-2145533817));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (-3333);
      shortArray0[2] = (short) (-112);
      shortArray0[3] = (short) (byte) (-31);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-5173), Integer.MAX_VALUE);
      assertArrayEquals(new short[] {(short)0, (short) (-3333), (short) (-112), (short) (-31), (short)1, (short) (-1)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (byte)1;
      ArrayUtils.shift(doubleArray0, (int) (byte)1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, 64, 1.0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Short short0 = new Short((short)1279);
      assertEquals((short)1279, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 124);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(1, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)1279;
      floatArray0[1] = (float) (-1926);
      floatArray0[2] = (float) 124;
      floatArray0[3] = (float) 124;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (short)1279;
      floatArray0[6] = (float) (short)1279;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {1279.0F, (-1926.0F), 124.0F, 124.0F, 0.0F, 1279.0F, 1279.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 9);
      assertArrayEquals(new int[] {9}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      int[] intArray0 = new int[17];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(17, intArray0.length);
      assertEquals(17, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-593L);
      longArray0[1] = (long) 0;
      longArray0[2] = (-24L);
      longArray0[3] = (-375L);
      longArray0[4] = (-24L);
      longArray0[5] = (-593L);
      longArray0[6] = (-375L);
      Byte byte0 = new Byte((byte) (-75));
      assertEquals((byte) (-75), (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'~', '~', '~', '~', '~'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '+';
      charArray1[1] = '~';
      int int0 = ArrayUtils.lastIndexOf(charArray1, '+', (-554));
      assertArrayEquals(new char[] {'+', '~'}, charArray1);
      assertEquals((-1), int0);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte) (-75);
      intArray0[2] = 89;
      intArray0[3] = (int) '~';
      intArray0[4] = (int) '~';
      intArray0[5] = (int) '~';
      intArray0[6] = (int) (byte) (-75);
      intArray0[7] = (int) (byte) (-75);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, (-75), 89, 126, 126, 126, (-75), (-75)}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = (-1773L);
      longArray0[4] = (-1495L);
      longArray0[6] = 1L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1L, (-1773L), (-1495L), 0L, 1L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(8, longArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) (-1773L);
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) 1L;
      floatArray0[6] = 977.4651F;
      floatArray0[7] = (float) 0L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[2];
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      shortArray0[0] = (short) (-1130);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockRandom0;
      ArrayUtils.shift(objectArray0, (int) (short) (-1130));
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.swap((byte[]) null, (-3543), (-3543), 51);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, (-1), 4152}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 2);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, int1);
      assertEquals(9, booleanArray0.length);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ArrayUtils.shift(doubleArray0, 335, (-1), (int) (byte)0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[5];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) true;
      booleanArray1[4] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (byte) (-68);
      longArray0[2] = (long) (byte)72;
      longArray0[3] = (long) 0;
      int int2 = ArrayUtils.indexOf(longArray0, (-1L));
      assertArrayEquals(new long[] {(-1L), (-68L), 72L, 0L}, longArray0);
      assertEquals(0, int2);
      assertEquals(4, longArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 77);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Float float0 = new Float((double) (byte) (-31));
      assertEquals((-31.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.1);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(3320.2049183628446);
      assertEquals(3320.2048F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1625.6375F;
      floatArray0[1] = (float) 77;
      ArrayUtils.shift(floatArray0, (-1990));
      assertArrayEquals(new float[] {1625.6375F, 77.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('r');
      assertEquals('r', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Double double0 = new Double((-2833.63958861527));
      assertEquals((-2833.63958861527), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.shift((Object[]) doubleArray1, (-1990));
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.swap((byte[]) null, 629, (-495), (-1990));
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray1.length);
      assertEquals(0, classArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'r'}, charArray0);
      assertArrayEquals(new char[] {'r', 'r'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1810L);
      longArray0[1] = (-106L);
      longArray0[2] = (long) (short)2;
      longArray0[3] = (-1L);
      longArray0[4] = (-1810L);
      longArray0[5] = 0L;
      longArray0[6] = (-106L);
      longArray0[7] = 0L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1137L));
      assertArrayEquals(new long[] {(-1810L), (-106L), 2L, (-1L), (-1810L), 0L, (-106L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-1137L), (-1810L), (-106L), 2L, (-1L), (-1810L), 0L, (-106L), 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1381);
      intArray0[1] = (-1381);
      intArray0[2] = (int) (short)2;
      intArray0[3] = (int) (byte) (-29);
      intArray0[4] = (int) 'H';
      intArray0[5] = (int) (byte) (-29);
      intArray0[6] = (int) (short)2;
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 1188);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-737.0F);
      floatArray0[1] = 2500.753F;
      floatArray0[2] = (-461.0F);
      floatArray0[3] = (-1344.0F);
      floatArray0[4] = 487.5F;
      floatArray0[5] = 1153.9432F;
      floatArray0[6] = Float.NaN;
      int int0 = ArrayUtils.indexOf(floatArray0, (-2140.9F));
      assertArrayEquals(new float[] {(-737.0F), 2500.753F, (-461.0F), (-1344.0F), 487.5F, 1153.9432F, Float.NaN}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-114);
      Byte byte1 = new Byte((byte) (-114));
      assertEquals((byte) (-114), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-114), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-114));
      assertEquals((byte) (-114), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      try { 
        Byte.valueOf("java.lang.Boolean");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Boolean\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-105);
      doubleArray0[1] = (double) (byte) (-105);
      doubleArray0[2] = (double) (-380);
      doubleArray0[3] = (double) (byte) (-105);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = 1.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-105.0), (-105.0), (-380.0), (-105.0), (-1.0), 1.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 99, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      intArray0[1] = 0;
      intArray0[2] = 1541;
      intArray0[3] = 99;
      intArray0[4] = 99;
      intArray0[5] = 99;
      intArray0[6] = 1734;
      intArray0[7] = 99;
      intArray0[8] = 1541;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1178;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)1178}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.nextBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, (-1), 4152}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, false, true, false}, booleanArray0));
      assertEquals((-1), int1);
      assertEquals(9, booleanArray0.length);
      assertTrue(int1 == int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (-1283L);
      longArray0[3] = (long) 1;
      longArray0[4] = 1L;
      int int2 = ArrayUtils.indexOf(longArray0, (-2166L));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1283L), 1L, 1L}, longArray0);
      assertEquals((-1), int2);
      assertEquals(5, longArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2396.594631);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'g';
      charArray0[2] = '~';
      charArray0[3] = '<';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'K', 87);
      assertArrayEquals(new char[] {'1', 'g', '~', '<'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences((float[]) null, (float) 87);
      assertNull(floatArray1);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '1';
      intArray0[1] = (-1);
      intArray0[2] = (int) 'g';
      intArray0[3] = (int) '1';
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 37);
      assertArrayEquals(new int[] {49, (-1), 103, 49}, intArray0);
      assertArrayEquals(new int[] {49, (-1), 103, 49}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-25);
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 49L;
      longArray0[3] = (long) (byte) (-25);
      longArray0[4] = (-562L);
      longArray0[5] = (-1L);
      longArray0[6] = (long) 0;
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray1, (byte) (-25));
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-25);
      shortArray0[1] = (short)1220;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 99, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, '3');
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-331));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '1', (-1));
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1, "-/z*5jbjN-;VQ$a");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = (-1773L);
      longArray0[4] = (-1495L);
      longArray0[5] = (-1L);
      longArray0[7] = 1L;
      longArray0[7] = (-1495L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 1L, (-1773L), (-1495L), (-1L), 0L, (-1495L)}, longArray0);
      assertTrue(boolean0);
      assertEquals(8, longArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) (-2950L);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) (-1773L);
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) 0L;
      floatArray0[6] = 977.4651F;
      floatArray0[7] = (float) 0L;
      ArrayUtils.swap(floatArray0, (-1650), (-1650), (-1));
      assertArrayEquals(new float[] {0.0F, (-2950.0F), 0.0F, (-1773.0F), (-1.0F), 0.0F, 977.4651F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, (-2950.0F), 0.0F, (-1773.0F), (-1.0F), 0.0F, 977.4651F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2, 5, 7}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, (-1), 4152}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 85);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, int1);
      assertEquals(9, booleanArray0.length);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-68);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-68), (byte)0, (byte)72, (byte)72}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-1);
      objectArray0[1] = (Object) 1;
      objectArray0[2] = (Object) (byte) (-68);
      objectArray0[3] = (Object) (byte)72;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertEquals(1, object0);
      assertNotNull(object0);
      assertEquals(5, objectArray0.length);
      assertFalse(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)int1));
      
      objectArray0[4] = object0;
      int int2 = ArrayUtils.indexOf(objectArray0, objectArray0[4]);
      assertEquals(1, int2);
      assertEquals(5, objectArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, (-1), 4152}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 2);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, int1);
      assertEquals(9, booleanArray0.length);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)24, (byte)0, (byte) (-68), (byte)72, (byte) (-83), (byte)72}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      char[] charArray0 = new char[7];
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.reverse((Object[]) byteArray0, (-2146945687), (-2130964542));
      assertEquals(0, byteArray0.length);
      
      Byte byte0 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      ArrayUtils.shift((float[]) null, 97, (-524), 1873);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      int[] intArray0 = new int[4];
      intArray0[0] = 1734;
      intArray0[1] = 97;
      intArray0[2] = 1734;
      intArray0[3] = 97;
      ArrayUtils.swap(intArray0, (-7), 121);
      assertArrayEquals(new int[] {1734, 97, 1734, 97}, intArray0);
      assertEquals(4, intArray0.length);
      
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)111);
      assertEquals((byte)111, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = Byte.valueOf((byte)116);
      assertEquals((byte)116, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = Byte.valueOf((byte)111);
      assertEquals((byte)111, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte)95);
      assertEquals((byte)95, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte[] byteArray0 = ArrayUtils.removeAllOccurrences((Byte[]) null, byte2);
      assertNull(byteArray0);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte4));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte3));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {1734, 97, 1734, 97}, intArray1);
      assertArrayEquals(new int[] {1734, 97, 1734, 97}, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      Byte[] byteArray1 = ArrayUtils.removeElement((Byte[]) null, (Object) byte1);
      assertNull(byteArray1);
      assertFalse(byte1.equals((Object)byte4));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte3));
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, (-1), 4152}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 4152;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 4152;
      floatArray0[6] = (float) (-1);
      ArrayUtils.shift(floatArray0, (-1));
      assertArrayEquals(new float[] {(-1.0F), 1.0F, 1.0F, 1.0F, 4152.0F, (-1.0F), 4152.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Character character0 = new Character('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('$');
      assertEquals('$', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Double double0 = new Double(3439.3);
      assertEquals(3439.3, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[0];
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      ArrayUtils.shift((Object[]) doubleArray1, 402);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray1, doubleArray2);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, true, 2004);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals((-1), int1);
      assertEquals(9, booleanArray0.length);
      assertTrue(int1 == int0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2262));
      assertEquals((-2262), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      
      integerArray0[1] = integer1;
      integerArray0[2] = (Integer) 1;
      integerArray0[3] = (Integer) 1;
      integerArray0[4] = (Integer) (-1);
      integerArray0[5] = (Integer) 1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      int[] intArray0 = new int[15];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1316, booleanArray0, booleanArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1316, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-42);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, (int) (byte) (-42));
      assertArrayEquals(new byte[] {(byte) (-42)}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-42);
      longArray0[1] = (long) (byte) (-42);
      longArray0[2] = (long) (byte)3;
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-2509.0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2509.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-42), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -42, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 2645L;
      longArray0[2] = (-1L);
      longArray0[3] = 49L;
      longArray0[4] = 0L;
      longArray0[5] = (-240L);
      longArray0[6] = 23L;
      longArray0[7] = (-45L);
      longArray0[8] = 573L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 2645L, (-1L), 49L, 0L, (-240L), 23L, (-45L), 573L}, longArray0);
      assertTrue(boolean0);
      assertEquals(9, longArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte) (-83);
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-71));
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-83), (byte)9, (byte) (-1), (byte)0}, byteArray1);
      assertEquals((-1), int0);
      assertEquals(5, byteArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = 'b';
      charArray0[2] = '7';
      charArray0[3] = '6';
      charArray0[4] = '=';
      charArray0[5] = 'd';
      charArray0[6] = 'o';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'I', (int) (byte) (-1));
      assertArrayEquals(new char[] {'%', 'b', '7', '6', '=', 'd', 'o'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(7, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      Byte byte0 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1459.48);
      doubleArray0[1] = (double) (byte)88;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (-1459.48);
      doubleArray0[4] = (double) (byte)13;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 3520);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertEquals(2, int0);
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte)13;
      ArrayUtils.reverse(byteArray1);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-68)}, byteArray1);
      assertEquals(2, byteArray1.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-1459.48), 88.0, 0.0, (-1459.48), 13.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1459.48), 88.0, 0.0, (-1459.48), 13.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-68);
      longArray0[1] = 0L;
      longArray0[2] = (long) (byte)13;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-68L), 0L, 13L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)88;
      shortArray0[1] = (short) (byte) (-68);
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)88, (short) (-68)}, shortArray0);
      assertFalse(boolean1);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('i');
      assertEquals('i', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 1774L);
      assertArrayEquals(new long[] {1774L}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      charArray0[6] = 'i';
      ArrayUtils.shift(charArray0, (-423), 2002, 4);
      assertArrayEquals(new char[] {'i', 'i', 'i', 'i', 'i', 'i', 'i'}, charArray0);
      assertEquals(7, charArray0.length);
      
      ArrayUtils.shift(charArray0, (int) (byte)1, 0, 0);
      assertArrayEquals(new char[] {'i', 'i', 'i', 'i', 'i', 'i', 'i'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1976.2934168391;
      doubleArray0[1] = (-310.2);
      doubleArray0[2] = 1.0;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 2);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byte byte0 = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-107);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)49, (byte) (-1), (byte)27, (byte) (-107)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1699.826934831769, (double) (byte)27);
      assertEquals((-1), int0);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte)27;
      byteArray1[1] = (Byte) (byte)49;
      byteArray1[2] = (Byte) (byte) (-79);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-768), 0, 55);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift((double[]) null, (int) (byte)27, (-768), (int) byte0);
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 16, 16, 16);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = 1L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 461L);
      assertArrayEquals(new long[] {(-1L), 1L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, "W&8EP13");
      assertEquals("W&8EP13", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1794;
      short short0 = (short) (-3816);
      shortArray0[1] = (short) (-3816);
      shortArray0[2] = (short) (-2397);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)1794, (short) (-3816), (short) (-2397)}, shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_SHORT_ARRAY, (int) (short) (-3816));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3816, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      float[] floatArray0 = new float[17];
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(17, floatArray0.length);
      assertEquals(34, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 619L;
      longArray0[1] = 2001L;
      longArray0[2] = (-1926L);
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {619L, 2001L, (-1926L)}, longArray0);
      assertFalse(boolean1);
      assertEquals(3, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.swap(longArray0, (-493), 82, (-102));
      assertArrayEquals(new long[] {619L, 2001L, (-1926L)}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 0;
      longArray0[2] = (-24L);
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)125);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.swap(longArray0, (-1), 0);
      assertArrayEquals(new long[] {0L, 0L, (-24L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertArrayEquals(new char[] {'2', '2'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-24L);
      doubleArray0[1] = (double) (-593L);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-593L);
      doubleArray0[5] = (double) (-24L);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-24.0), (-593.0), 0.0, 0.0, (-593.0), (-24.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)52);
      assertNull(byteArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1437);
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      shortArray0[1] = (short) (-770);
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-1437), (short) (-770)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = (-1773L);
      longArray0[4] = (-1495L);
      longArray0[6] = 1L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1L, (-1773L), (-1495L), 0L, 1L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(8, longArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) (-1773L);
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) 1L;
      floatArray0[6] = 977.4651F;
      floatArray0[7] = (float) 0L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[2];
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      shortArray0[0] = (short) (-1130);
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-1130), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-2146851545));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-25);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-25), (-947), (-947));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-25);
      floatArray0[1] = (float) (byte) (-25);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (byte) (-25);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-25.0F), (-25.0F), 0.0F, (-25.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, int0);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-2303L);
      longArray0[1] = (long) (-947);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-947);
      ArrayUtils.reverse(longArray0, 0, (int) (byte) (-25));
      assertArrayEquals(new long[] {(-2303L), (-947L), 0L, (-947L)}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-76), (int) (byte) (-76));
      assertArrayEquals(new byte[] {(byte) (-76)}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 99, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      intArray0[1] = 0;
      intArray0[2] = 1541;
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-610), 33, 1541);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-331));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1541);
      assertEquals(1541L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(1541);
      assertEquals(1541L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      Byte byte0 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      long[] longArray0 = new long[8];
      longArray0[0] = (-1137L);
      longArray0[1] = (long) (byte)88;
      longArray0[2] = (long) (byte)88;
      longArray0[3] = (long) (byte)88;
      longArray0[4] = (long) (byte)88;
      longArray0[5] = (-1137L);
      longArray0[6] = (-1137L);
      longArray0[7] = (-1137L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-6747L));
      assertArrayEquals(new long[] {(-6747L), (-1137L), 88L, 88L, 88L, 88L, (-1137L), (-1137L), (-1137L)}, longArray1);
      assertArrayEquals(new long[] {(-1137L), 88L, 88L, 88L, 88L, (-1137L), (-1137L), (-1137L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      ArrayUtils.shift(charArray0, 5513, (-3226), (-96));
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H'}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1137L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2234.0));
      assertArrayEquals(new double[] {(-1137.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Long[] longArray2 = new Long[7];
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray2[0] = long0;
      longArray2[1] = (Long) 88L;
      Long long1 = new Long((-1890L));
      assertEquals((-1890L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray2[2] = long1;
      longArray2[3] = (Long) 88L;
      longArray2[4] = (Long) 88L;
      Long long2 = new Long((-3226));
      assertEquals((-3226L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray2[5] = long2;
      longArray2[6] = (Long) 88L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertArrayEquals(new long[] {(-1L), 88L, (-1890L), 88L, 88L, (-3226L), 88L}, longArray3);
      assertNotNull(longArray3);
      assertEquals(7, longArray3.length);
      assertEquals(7, longArray2.length);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte) (-111));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-111), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-5577);
      shortArray0[1] = (short)672;
      shortArray0[2] = (short) (-96);
      shortArray0[3] = (short)35;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)2254;
      shortArray0[6] = (short) (-2856);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)672, (int) (short)1);
      assertArrayEquals(new short[] {(short) (-5577), (short)672, (short) (-96), (short)35, (short)1, (short)2254, (short) (-2856)}, shortArray0);
      assertEquals(1, int0);
      assertEquals(7, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short) (-5577);
      objectArray0[1] = (Object) (short) (-5577);
      objectArray0[2] = (Object) (short) (-96);
      objectArray0[3] = (Object) (short)1;
      Byte byte0 = new Byte((byte) (-17));
      assertEquals((byte) (-17), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) byte0);
      assertFalse(boolean1);
      assertEquals(4, objectArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = '^';
      charArray0[3] = '/';
      charArray0[4] = 'l';
      charArray0[5] = 'v';
      charArray0[6] = '9';
      ArrayUtils.swap(charArray0, (-1372), (-168), (-1372));
      assertArrayEquals(new char[] {'k', 'k', '^', '/', 'l', 'v', '9'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '/';
      objectArray0[1] = (Object) 'l';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)125;
      shortArray0[1] = (short)125;
      shortArray0[2] = (short) (byte)29;
      shortArray0[3] = (short)125;
      shortArray0[4] = (short)125;
      shortArray0[5] = (short) (byte)29;
      shortArray0[6] = (short) (byte)29;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)29);
      assertArrayEquals(new short[] {(short)125, (short)125, (short)29, (short)125, (short)125, (short)29, (short)29}, shortArray0);
      assertEquals(6, int0);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils.shift(byteArray0, 0);
      assertArrayEquals(new byte[] {(byte)29, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      Byte byte0 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)3, (int) (byte) (-42));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-3644), (-3644), (-3644));
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 123;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 123);
      assertArrayEquals(new int[] {123}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-544.0763F);
      floatArray0[2] = (-2460.215F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1677.766F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 3396.374F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, (-544.0763F), (-2460.215F), 0.0F, (-1677.766F), 0.0F, 3396.374F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(7, floatArray0.length);
      assertEquals("{0, 3, 5}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 7797;
      intArray0[1] = (-1111);
      intArray0[2] = 1683;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(1.5, 2198.261224915);
      assertNotNull(doubleStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.1, double0, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0F;
      int int0 = mockRandom0.nextInt();
      assertEquals(2, int0);
      
      objectArray0[1] = (Object) (-544.0763F);
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) (byte)0;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(4, objectArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1683);
      assertArrayEquals(new int[] {7797, (-1111), 1683, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {7797, (-1111), 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1217);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-1217), 1360);
      assertArrayEquals(new double[] {(-1217.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-1217.0), 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), (-1), (double) (-1217));
      assertArrayEquals(new double[] {(-1217.0), 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      ArrayUtils.shift((float[]) null, 97, (-524), 1873);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      Byte byte0 = new Byte((byte) (-56));
      assertEquals((byte) (-56), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      Byte[] byteArray1 = new Byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte1 = (byte) (-1);
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray1[0] = byte2;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-56);
      doubleArray0[1] = (double) 97;
      doubleArray0[2] = (double) (byte) (-56);
      doubleArray0[3] = (double) byte1;
      doubleArray0[4] = 100.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte) (-1));
      assertArrayEquals(new double[] {(-56.0), 97.0, (-56.0), (-1.0), 100.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-56.0), 97.0, (-56.0), (-1.0), 100.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1873, (int) byte1, 672.630540282114);
      assertArrayEquals(new double[] {(-56.0), 97.0, (-56.0), (-1.0), 100.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) 0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertEquals(1, int1);
      assertEquals(2, longArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 87.8, 87.8);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift((float[]) null, 122, (-3731), 97);
      byte byte0 = (byte) (-56);
      Byte byte1 = new Byte((byte) (-56));
      assertEquals((byte) (-56), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-56));
      assertEquals((byte) (-56), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte1;
      byteArray0[1] = byte2;
      byteArray0[2] = byte1;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte) (-56), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[3] = byte3;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 100.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {100.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 1250.721564622202, (-848), 1250.721564622202);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {100.0}, doubleArray1, 0.01);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) (-848);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertArrayEquals(new long[] {0L, (-848L)}, longArray0);
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = byte0;
      byteArray2[1] = (byte) (-56);
      byteArray2[2] = byte0;
      byteArray2[3] = byte0;
      byte[] byteArray3 = ArrayUtils.removeElement(byteArray2, (byte) (-80));
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-56), (byte) (-56), (byte) (-56)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-56), (byte) (-56), (byte) (-56)}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(4, byteArray2.length);
      assertEquals(4, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.0;
      ArrayUtils.shift(doubleArray0, 2588);
      assertArrayEquals(new double[] {3.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, true, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2234.0), 2588, 3.0);
      assertArrayEquals(new double[] {3.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-16));
      assertEquals((byte) (-16), (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElements((AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null, (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-16);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-808));
      assertArrayEquals(new int[] {(-16)}, intArray0);
      assertArrayEquals(new int[] {(-808), (-16)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-808);
      floatArray0[1] = (float) (byte) (-16);
      floatArray0[2] = (float) (-808);
      floatArray0[3] = (float) (byte) (-16);
      floatArray0[4] = (float) (-16);
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-808);
      floatArray1[1] = (float) (byte) (-16);
      floatArray1[2] = (float) (-16);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-808.0F), (-16.0F), (-808.0F), (-16.0F), (-16.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-808.0F), (-16.0F), (-16.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-808.0F), (-16.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(5, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 560);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 560, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-25);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = 'b';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'b', '`'}, charArray0);
      assertEquals(2, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '`');
      assertArrayEquals(new char[] {'`', 'b', '`'}, charArray1);
      assertArrayEquals(new char[] {'b', '`'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(3, charArray1.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '`';
      int int0 = ArrayUtils.indexOf(intArray0, 96, 2146611118);
      assertArrayEquals(new int[] {96}, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-25);
      floatArray0[1] = (float) 'b';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-25.0F), 98.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (int) (byte) (-25));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -25, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 732L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 732L);
      assertArrayEquals(new long[] {732L}, longArray0);
      assertArrayEquals(new long[] {732L, 732L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = 'O';
      ArrayUtils.shift(charArray0, 2, Integer.MAX_VALUE, 1424);
      assertArrayEquals(new char[] {'6', '6', '6', '6', '6', 'O'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1037.463F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 732L);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {732L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      ArrayUtils.shift(charArray0, 2588, 2588, 2588);
      assertArrayEquals(new char[] {'6'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, 3590.1F, 2588);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1885;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1885, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1541;
      doubleArray0[1] = (double) 1541;
      doubleArray0[2] = (double) (-331);
      doubleArray0[3] = (double) 99;
      doubleArray0[4] = (double) (-331);
      ArrayUtils.swap(doubleArray0, 1, 1, (-331));
      assertArrayEquals(new double[] {1541.0, 1541.0, (-331.0), 99.0, (-331.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, '3');
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '3';
      longArray0[1] = (long) (-331);
      longArray0[2] = (-596L);
      longArray0[3] = (long) (byte)65;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-596L));
      assertArrayEquals(new long[] {51L, (-331L), (-596L), 65L}, longArray0);
      assertEquals(2, int0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-596L);
      floatArray0[1] = (float) 51L;
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {51.0F, (-596.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int[] intArray0 = new int[7];
      intArray0[0] = (-331);
      intArray0[1] = 99;
      intArray0[2] = (-2338);
      intArray0[3] = 1541;
      intArray0[4] = (int) '3';
      intArray0[5] = (-2074);
      intArray0[6] = (-331);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1541, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1524L);
      byte byte0 = (byte)12;
      Byte byte1 = Byte.valueOf((byte)12);
      assertEquals((byte)12, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)12;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) byte0;
      intArray0[5] = Integer.MAX_VALUE;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 12, Integer.MAX_VALUE, 12}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) (byte)12;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1976.2934168391;
      doubleArray0[1] = (-310.2);
      doubleArray0[2] = 1.0;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.swap(booleanArray0, 889, 1061, 889);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(doubleArray0, (-1780), 100, 2953);
      assertArrayEquals(new double[] {0.0, 1976.2934168391, (-310.2), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-593L);
      longArray0[1] = (long) 0;
      longArray0[2] = (-24L);
      longArray0[3] = (-375L);
      longArray0[4] = (-24L);
      longArray0[5] = (-593L);
      longArray0[6] = (-375L);
      Byte byte0 = new Byte((byte) (-75));
      assertEquals((byte) (-75), (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'~', '~', '~', '~', '~'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap(longArray0, 0, 0, 0);
      assertArrayEquals(new long[] {(-593L), 0L, (-24L), (-375L), (-24L), (-593L), (-375L)}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-544.0763F);
      floatArray0[2] = (-2460.215F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1677.766F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 3396.374F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, (-544.0763F), (-2460.215F), 0.0F, (-1677.766F), 0.0F, 3396.374F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(7, floatArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{0, 3, 5}", bitSet0.toString());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 7797;
      intArray0[1] = (-1111);
      intArray0[2] = 1683;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(1.5, 2198.261224915);
      assertNotNull(doubleStream0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1677.766F);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (-544.0763F);
      doubleArray0[3] = (double) 7797;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1498), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1498, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)127;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)127, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)0;
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte) (-1), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte0 == byte3);
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte) (-41));
      assertEquals((byte) (-41), (byte)byte8);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte0));
      
      byteArray0[6] = byte8;
      Byte[] byteArray1 = new Byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte byte9 = new Byte(byte3);
      assertEquals((byte)0, (byte)byte9);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte6));
      assertTrue(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte2));
      assertTrue(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte3 == byte0);
      
      byteArray1[0] = byte9;
      byte byte10 = (byte)48;
      Byte byte11 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte11);
      assertNotNull(byte11);
      assertFalse(byte11.equals((Object)byte4));
      assertFalse(byte11.equals((Object)byte1));
      assertFalse(byte11.equals((Object)byte3));
      assertFalse(byte11.equals((Object)byte0));
      assertFalse(byte11.equals((Object)byte7));
      assertFalse(byte11.equals((Object)byte5));
      assertTrue(byte11.equals((Object)byte10));
      assertFalse(byte11.equals((Object)byte9));
      assertFalse(byte11.equals((Object)byte6));
      assertFalse(byte11.equals((Object)byte2));
      assertFalse(byte11.equals((Object)byte8));
      
      byteArray1[1] = byte11;
      byteArray1[2] = byte5;
      byteArray1[3] = byte5;
      byteArray1[4] = byte7;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(7, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) byte10;
      doubleArray0[1] = (double) byte3;
      doubleArray0[2] = (double) byte0;
      doubleArray0[3] = (double) byte3;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) byte10, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(3114.2);
      assertEquals(3114.2, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, (double) 0L, 246);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray2.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray3 = ArrayUtils.insert(246, doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = 'C';
      charArray0[2] = '!';
      charArray0[3] = 'H';
      charArray0[4] = 'K';
      charArray0[5] = 'h';
      charArray0[6] = '@';
      charArray0[7] = '@';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'C', '!', 'H', 'K', 'h', '@', '@'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)101;
      Byte byte1 = new Byte((byte)101);
      assertEquals((byte)101, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'C', '!', 'H', 'K', 'h', '@', '@'}, charArray0);
      assertTrue(boolean1);
      assertEquals(8, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) (byte)101;
      shortArray0[3] = (short) (byte)101;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short) byte0;
      shortArray0[7] = (short) (byte)101;
      shortArray0[8] = (short) byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)39);
      assertArrayEquals(new short[] {(short)101, (short)101, (short)101, (short)101, (short)101, (short)101, (short)101, (short)101, (short)101}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(9, shortArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 335.79844644;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      ArrayUtils.shift(doubleArray0, 2588);
      assertArrayEquals(new double[] {0.0, 0.0, 335.79844644}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte) (-25)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-25);
      floatArray0[1] = (float) (byte) (-25);
      floatArray0[2] = (float) (byte) (-25);
      floatArray0[3] = (float) 0L;
      floatArray0[1] = (float) (byte) (-25);
      floatArray0[5] = (float) (byte) (-25);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-25.0F), (-25.0F), (-25.0F), 0.0F, 0.0F, (-25.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-25.0F), (-25.0F), (-25.0F), 0.0F, 0.0F, (-25.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = (long) (byte) (-25);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-25L), 0L, (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      Float float0 = new Float((float) (short)55);
      assertEquals(55.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(323.09554);
      assertEquals(323.09555F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) (short)55);
      assertEquals(55.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float((-2740.2852202726));
      assertEquals((-2740.2852F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Float float4 = new Float(1625.6375F);
      assertEquals(1625.6375F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      ArrayUtils.swap((char[]) null, 0, (int) (short)55);
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[9];
      byte byte2 = (byte)8;
      Byte byte3 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[0] = byte3;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte0;
      byteArray0[5] = byte1;
      byteArray0[6] = byte0;
      byteArray0[7] = byte0;
      byteArray0[8] = byte0;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) byte2);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)960, (int) (short)960);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-277L));
      assertEquals((-277L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-277L));
      assertArrayEquals(new long[] {(-277L), (-277L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((short) (-1130));
      assertEquals((-1130L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((short)75);
      assertEquals(75L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      Long long3 = new Long((short) (-1130));
      assertEquals((-1130L), (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = long2;
      longArray1[1] = long0;
      longArray1[2] = long0;
      longArray1[3] = long2;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-1495L));
      assertArrayEquals(new long[] {75L, 1L, 1L, 75L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray2, longArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2115.4F;
      floatArray0[1] = 2115.4F;
      floatArray0[2] = (float) (short) (-1130);
      floatArray0[3] = (float) (short)75;
      floatArray0[4] = (float) (long)longArray1[3];
      floatArray0[5] = (float) (short) (-1130);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (short)75);
      assertArrayEquals(new float[] {2115.4F, 2115.4F, (-1130.0F), 75.0F, 75.0F, (-1130.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-23.0);
      doubleArray0[1] = (double) 2147012708;
      doubleArray0[3] = (-23.0);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)120;
      shortArray0[1] = (short) (-1130);
      shortArray0[2] = (short)75;
      shortArray0[3] = (short) (byte)120;
      shortArray0[4] = (short) (-1130);
      shortArray0[5] = (short) (byte)120;
      shortArray0[6] = (short) (byte)120;
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-1130), (short)75, (short)120, (short) (-1130), (short)120, (short)120, (short)120}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((short) (-1130));
      assertEquals((-1130L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2193L));
      assertEquals((-2193L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long(2709L);
      assertEquals(2709L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long long3 = new Long((short)120);
      assertEquals(120L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short) (-1130));
      assertArrayEquals(new long[] {(-1130L), (-2193L), 2709L, 120L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)75;
      floatArray0[1] = (float) (-2193L);
      floatArray0[2] = (float) (short)75;
      floatArray0[3] = (float) 2147012708;
      floatArray0[4] = (float) (-2193L);
      floatArray0[5] = (float) (-2193L);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 2115.4F);
      assertArrayEquals(new float[] {75.0F, (-2193.0F), 75.0F, 2.14701274E9F, (-2193.0F), (-2193.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      Long long2 = new Long((-1L));
      assertEquals((-1L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      Long long3 = new Long(3324L);
      assertEquals(3324L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      
      Long long4 = new Long(3324L);
      assertEquals(3324L, (long)long4);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      
      Long[] longArray0 = new Long[18];
      longArray0[0] = long2;
      longArray0[1] = long2;
      longArray0[2] = long3;
      longArray0[3] = long1;
      longArray0[4] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short) (-1130));
      assertNotNull(longArray1);
      assertEquals(18, longArray0.length);
      assertEquals(18, longArray1.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) long0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (short)969);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 640);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 640, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2396.594631);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'g';
      charArray0[2] = 'j';
      charArray0[3] = '<';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'K', 87);
      assertArrayEquals(new char[] {'1', 'g', 'j', '<'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences((float[]) null, (float) 87);
      assertNull(floatArray1);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-95);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)39);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 39, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[0] = 'K';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(14, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = '-';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'-', '-', '-', '-', '-'}, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '-';
      floatArray0[1] = (float) '-';
      floatArray0[2] = (float) '-';
      floatArray0[3] = 1144.0F;
      floatArray0[4] = (float) 488;
      floatArray0[5] = 1144.0F;
      floatArray0[6] = (float) '-';
      floatArray0[7] = (float) '-';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 360.7281F);
      assertArrayEquals(new float[] {45.0F, 45.0F, 45.0F, 1144.0F, 488.0F, 1144.0F, 45.0F, 45.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '-';
      longArray0[1] = (long) '-';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {45L, 45L}, longArray0);
      assertArrayEquals(new long[] {45L, 45L, 45L, 45L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      float[] floatArray0 = new float[6];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 490.47617F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 1114111, (float) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1114111, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '3';
      int int0 = ArrayUtils.indexOf(charArray0, 'E', (int) '3');
      assertArrayEquals(new char[] {'4', '3'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.reverse((long[]) null);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'E';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 69);
      assertArrayEquals(new int[] {69}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (-1));
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) '4';
      doubleArray0[2] = (double) 'E';
      doubleArray0[3] = (double) 69;
      doubleArray0[4] = (double) (-1);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) '4';
      doubleArray1[1] = (double) '4';
      doubleArray1[2] = (double) '3';
      doubleArray1[3] = (double) 'E';
      doubleArray1[4] = (double) 69;
      doubleArray1[5] = (double) '3';
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {52.0, 52.0, 51.0, 69.0, 69.0, 51.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 52.0, 69.0, 69.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'4', '3'}, charArray0);
      assertFalse(boolean1);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(0, floatArray0.length);
      assertTrue(int1 == int0);
      
      long[] longArray1 = new long[2];
      longArray1[0] = (-1630L);
      longArray1[1] = (long) '3';
      long[] longArray2 = ArrayUtils.addAll(longArray1, (long[]) null);
      assertArrayEquals(new long[] {(-1630L), 51L}, longArray2);
      assertArrayEquals(new long[] {(-1630L), 51L}, longArray1);
      assertNotNull(longArray2);
      assertEquals(2, longArray2.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '3';
      int int0 = ArrayUtils.indexOf(charArray0, 'E', (int) '3');
      assertArrayEquals(new char[] {'4', '3'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.reverse((long[]) null);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'E';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 69);
      assertArrayEquals(new int[] {69}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (-1));
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '3';
      doubleArray0[1] = (double) '4';
      doubleArray0[2] = (double) 'E';
      doubleArray0[3] = (double) 69;
      doubleArray0[4] = (double) (-1);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) '4';
      doubleArray1[1] = (double) '4';
      doubleArray1[2] = (double) '3';
      doubleArray1[3] = (double) 'E';
      doubleArray1[4] = (double) 69;
      doubleArray1[5] = (double) '3';
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {52.0, 52.0, 51.0, 69.0, 69.0, 51.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {51.0, 52.0, 69.0, 69.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'4', '3'}, charArray0);
      assertFalse(boolean1);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(0, floatArray0.length);
      assertTrue(int1 == int0);
      
      long[] longArray1 = new long[2];
      longArray1[0] = (-1630L);
      longArray1[1] = (long) '3';
      long[] longArray2 = ArrayUtils.addAll(longArray1, (long[]) null);
      assertArrayEquals(new long[] {(-1630L), 51L}, longArray2);
      assertArrayEquals(new long[] {(-1630L), 51L}, longArray1);
      assertNotNull(longArray2);
      assertEquals(2, longArray2.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-25);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 3698.075F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (byte) (-25);
      floatArray0[3] = (float) (byte) (-25);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {3698.075F, 0.0F, (-25.0F), (-25.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'j', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-25);
      longArray0[1] = (long) 0;
      longArray0[2] = (-331L);
      longArray0[3] = (long) 'o';
      longArray0[4] = (long) 'o';
      longArray0[5] = (long) 'j';
      longArray0[6] = (long) (byte) (-25);
      longArray0[7] = (long) 0;
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (int) (byte) (-25));
      assertArrayEquals(new long[] {(-25L), 0L, (-331L), 111L, 111L, 106L, (-25L), 0L}, longArray0);
      assertEquals(1, int0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1401L, (-2147048712));
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 97;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 97;
      floatArray0[7] = (float) 97;
      floatArray0[8] = (float) 97;
      ArrayUtils.shift(floatArray0, (-1165), 0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 97.0F, 0.0F, 97.0F, 97.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)559);
      assertEquals((short)559, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      Short short3 = new Short((short)52);
      assertEquals((short)52, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      long[] longArray0 = new long[5];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-34), (-3543));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1494.7056F;
      floatArray0[1] = (float) (byte) (-34);
      floatArray0[2] = (float) (byte) (-34);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {1494.7056F, (-34.0F), (-34.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      short[] shortArray0 = new short[6];
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1810L);
      longArray0[3] = (long) (short)0;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1810L));
      assertArrayEquals(new long[] {0L, 0L, (-1810L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1810L), 0L, 0L, (-1810L), 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte1;
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[1] = byte3;
      byteArray0[2] = byte2;
      byteArray0[3] = byte1;
      byteArray0[5] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray0 = new float[8];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, (-947), (int) byte0, 3603);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-1810L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1810L), 0L, 0L, (-1810L), 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {(-1810L), 0L, 0L, (-1810L), 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1810L);
      longArray0[1] = (-1810L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 1L;
      longArray0[5] = (-1810L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1L);
      assertArrayEquals(new long[] {(-1810L), (-1810L), 0L, 0L, 1L, (-1810L)}, longArray0);
      assertArrayEquals(new long[] {1L, (-1810L), (-1810L), 0L, 0L, 1L, (-1810L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      ArrayUtils.shift(charArray0, (-2140622896), (-1843), 2588);
      assertArrayEquals(new char[] {'H', 'H', '\"', '\"'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'c';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {99.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {99.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-344);
      shortArray0[1] = (short) (-344);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)2678;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)76;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)125);
      assertArrayEquals(new short[] {(short) (-344), (short) (-344), (short) (-1), (short)2678, (short) (-1), (short)76}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(6, shortArray0.length);
      
      byte[] byteArray0 = new byte[7];
      ArrayUtils.shift(byteArray0, (int) (short) (-344));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'r';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      charArray0[6] = 'J';
      charArray0[7] = 'c';
      charArray0[8] = 'c';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'J');
      assertArrayEquals(new char[] {'c', 'c', 'r', 'c', 'c', 'c', 'c', 'c'}, charArray1);
      assertArrayEquals(new char[] {'c', 'c', 'r', 'c', 'c', 'c', 'J', 'c', 'c'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) 'c';
      intArray0[3] = (int) (short)76;
      intArray0[4] = (int) (short)125;
      intArray0[5] = (int) (short) (-1);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {0, (-1), 99, 76, 125, (-1)}, intArray0);
      assertArrayEquals(new int[] {0, (-1), 99, 76, 125, (-1)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(10, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.swap(floatArray0, 1, 5684, 2556);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 5684;
      intArray0[1] = (-1);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {5684, (-1)}, intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('i');
      assertEquals('i', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1372);
      floatArray0[1] = (float) 376;
      ArrayUtils.swap(floatArray0, (-2140622896), 1378, 2103);
      assertArrayEquals(new float[] {(-1372.0F), 376.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'i');
      assertArrayEquals(new char[] {'i'}, charArray0);
      assertTrue(boolean1);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Float[] floatArray1 = new Float[8];
      floatArray1[0] = (Float) 376.0F;
      floatArray1[1] = (Float) (-1372.0F);
      floatArray1[2] = (Float) 376.0F;
      floatArray1[3] = (Float) 376.0F;
      floatArray1[4] = (Float) 376.0F;
      floatArray1[5] = (Float) 376.0F;
      Float float0 = new Float((double) 1378);
      assertEquals(1378.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[6] = float0;
      floatArray1[7] = (Float) 376.0F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) floatArray1[3]);
      assertArrayEquals(new float[] {376.0F, (-1372.0F), 376.0F, 376.0F, 376.0F, 376.0F, 1378.0F, 376.0F}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      int[] intArray0 = new int[5];
      Byte byte0 = new Byte((byte)62);
      assertEquals((byte)62, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)62);
      assertEquals((byte)62, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte2);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)62;
      longArray0[1] = (long) (byte)62;
      longArray0[2] = (long) (byte) (-25);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 62L, (int) (byte) (-25));
      assertArrayEquals(new long[] {62L, 62L, (-25L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 93.0F);
      assertArrayEquals(new float[] {93.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Byte byte0 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-2));
      assertEquals((byte) (-2), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(false, (byte) (-105));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-593L);
      longArray0[1] = (long) 0;
      longArray0[2] = (-24L);
      longArray0[3] = (-375L);
      longArray0[4] = (-24L);
      longArray0[5] = (-593L);
      longArray0[6] = (-375L);
      ArrayUtils.reverse(longArray0, 1340, 1);
      assertArrayEquals(new long[] {(-593L), 0L, (-24L), (-375L), (-24L), (-593L), (-375L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = 'Y';
      charArray0[2] = 'F';
      charArray0[3] = ')';
      charArray0[4] = '6';
      charArray0[5] = '&';
      charArray0[6] = 'P';
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)72);
      assertEquals((byte)72, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, byte1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-72);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2304, 76);
      assertArrayEquals(new int[] {(-72)}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1976.2934168391;
      doubleArray0[1] = (-310.2);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-106.0);
      doubleArray0[4] = (-823.6471305669281);
      doubleArray0[5] = 2474.804;
      doubleArray0[6] = 177.62;
      doubleArray0[7] = 1116.73998;
      doubleArray0[8] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-106.0), 36);
      assertArrayEquals(new double[] {1976.2934168391, (-310.2), 1.0, (-106.0), (-823.6471305669281), 2474.804, 177.62, 1116.73998, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)4);
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      boolean boolean0 = ArrayUtils.isEquals(objectArray0[0], objectArray0[1]);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)61;
      Byte byte1 = new Byte((byte)61);
      assertEquals((byte)61, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)42;
      Byte byte3 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[2] = byte4;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2819, 1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte[] byteArray2 = new Byte[7];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = byte4;
      byteArray2[1] = byte3;
      byteArray2[2] = byte3;
      byteArray2[3] = byte3;
      byteArray2[4] = byte1;
      byteArray2[5] = byte1;
      byteArray2[6] = byte4;
      Byte byte5 = ArrayUtils.get(byteArray2, (int) 0);
      assertEquals((byte)0, (byte)byte5);
      assertNotNull(byte5);
      assertEquals(7, byteArray2.length);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      boolean boolean0 = ArrayUtils.isEquals(byte4, byte5);
      assertTrue(boolean0);
      assertEquals(7, byteArray2.length);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte5));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = byte0;
      byte[] byteArray4 = ArrayUtils.add(byteArray3, byte2);
      assertArrayEquals(new byte[] {(byte)61}, byteArray3);
      assertArrayEquals(new byte[] {(byte)61, (byte)42}, byteArray4);
      assertNotNull(byteArray4);
      assertEquals(1, byteArray3.length);
      assertEquals(2, byteArray4.length);
      assertFalse(byte2 == byte0);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray3);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('t');
      assertEquals('t', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      char[] charArray0 = new char[3];
      charArray0[1] = 't';
      charArray0[2] = 't';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'm');
      assertArrayEquals(new char[] {'\u0000', 't', 't'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 't', 't'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      ArrayUtils.shift((char[]) null, 3083, 3083, 3083);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ArrayUtils.shift(byteArray0, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ArrayUtils.shift(byteArray0, 231);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-593L);
      longArray0[1] = (long) 0;
      longArray0[2] = (-24L);
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)125);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)36;
      byteArray2[1] = (byte)85;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)17;
      byteArray2[4] = (byte) (-103);
      ArrayUtils.shift(byteArray2, (int) (byte)17);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-103), (byte)36, (byte)85, (byte)1}, byteArray2);
      assertEquals(5, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      Character character0 = Character.valueOf('2');
      assertEquals('2', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('g');
      assertEquals('g', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('>');
      assertEquals('>', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Character character3 = Character.valueOf('i');
      assertEquals('i', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      
      Character character4 = new Character('/');
      assertEquals('/', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      
      Character character5 = new Character('F');
      assertEquals('F', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      Byte byte0 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[1];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)14;
      longArray0[1] = (long) (byte)14;
      longArray0[2] = (long) (byte)13;
      longArray0[3] = 1342L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {14L, 14L, 13L, 1342L}, longArray1);
      assertArrayEquals(new long[] {14L, 14L, 13L, 1342L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int[] intArray0 = new int[1];
      intArray0[0] = (-2191);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-2191)}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-851L);
      longArray0[2] = 0L;
      ArrayUtils.shift(longArray0, 0, 0, 0);
      assertArrayEquals(new long[] {(-851L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)59;
      Byte byte1 = new Byte((byte)59);
      assertEquals((byte)59, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)59, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byte byte3 = (byte) (-60);
      Byte byte4 = new Byte((byte) (-60));
      assertEquals((byte) (-60), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      
      byteArray0[2] = byte4;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-60);
      intArray0[1] = (int) byte3;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-60));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(6, booleanArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{0, 1, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-60), (-60)}, intArray0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) (byte)59;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)76);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)59, (short)59, (short)59}, shortArray0);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)59, (short)59, (short)59}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'b', 'b'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.swap(charArray0, 1087, 1087, 1087);
      assertArrayEquals(new char[] {'b', 'b'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)52;
      Byte byte1 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      ArrayUtils.swap(charArray0, (int) byte0, 135, 0);
      assertArrayEquals(new char[] {'z', 'z', 'z'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (-2075.3921);
      doubleArray0[4] = (double) (byte)82;
      doubleArray0[5] = (double) (byte)82;
      ArrayUtils.swap(doubleArray0, 792, 52);
      assertArrayEquals(new double[] {0.0, 8.0, 0.0, (-2075.3921), 82.0, 82.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'k');
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertNotNull(bitSet1);
      assertEquals(1, charArray0.length);
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 4013.2852390026, 4013.2852390026);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      ArrayUtils.reverse(intArray0, 0, 1637);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-2061L));
      assertEquals((-2061L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(60L);
      assertEquals(60L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((-657L));
      assertEquals((-657L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      Byte byte0 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1459.48);
      doubleArray0[1] = (double) (byte)88;
      doubleArray0[2] = (double) (byte)14;
      doubleArray0[3] = (-1459.48);
      doubleArray0[4] = (double) (byte)13;
      doubleArray0[5] = (double) (byte)88;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 88.0, (double) (byte)88);
      assertArrayEquals(new double[] {(-1459.48), 88.0, 14.0, (-1459.48), 13.0, 88.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[0];
      boolean boolean2 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean2);
      assertEquals(0, longArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)77;
      intArray0[1] = (int) (byte)77;
      intArray0[2] = (int) (byte)77;
      intArray0[3] = (int) (byte)13;
      intArray0[4] = (int) (byte)14;
      intArray0[5] = (int) (byte)77;
      intArray0[6] = (int) (byte)88;
      ArrayUtils.reverse(intArray0, (-1726), 77);
      assertArrayEquals(new int[] {88, 77, 14, 13, 77, 77, 77}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2474.804;
      doubleArray0[1] = 2334.438757;
      doubleArray0[2] = 100.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {2474.804, 2334.438757, 100.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2474.804, 2334.438757, 100.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)72);
      assertEquals((byte)72, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)115);
      assertEquals((byte)115, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte4);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      Short short0 = new Short((short)7);
      assertEquals((short)7, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-396), floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Byte byte0 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-186.0F), (int) (short)108);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, 1, 6, 1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)16);
      assertEquals((short)16, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2833.63958861527);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2833.63958861527);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {(-2833.63958861527), 0.0, (-2833.63958861527)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) (-2833.63958861527);
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) (-2833.63958861527);
      doubleArray1[4] = (Double) (-2833.63958861527);
      Double double0 = new Double((-1.0F));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[5] = double0;
      doubleArray1[6] = (Double) 0.0;
      doubleArray1[7] = (Double) (-2833.63958861527);
      doubleArray1[8] = (Double) 0.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, 65L, 1399);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      assertEquals((-1), int1);
      assertEquals(2, longArray0.length);
      assertTrue(int1 == int0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)3189);
      assertEquals((short)3189, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)3189);
      assertEquals((short)3189, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4002.5666623502693;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (-923.78733987);
      doubleArray0[3] = (double) (-1630);
      ArrayUtils.swap(doubleArray0, 0, 0, (-2193));
      assertArrayEquals(new double[] {4002.5666623502693, 2.0, (-923.78733987), (-1630.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 1185.0137F);
      assertArrayEquals(new float[] {1185.0137F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-1630);
      longArray0[4] = (long) (-2193);
      longArray0[5] = (long) (-2193);
      longArray0[6] = (long) 0;
      longArray0[7] = 0L;
      longArray0[8] = (long) (-2193);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, (-1630L), (-2193L), (-2193L), 0L, 0L, (-2193L)}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(9, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, (-25));
      assertArrayEquals(new long[] {(-1L), 0L, 0L, (-1630L), (-2193L), (-2193L), 0L, 0L, (-2193L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-6608.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-405.0F);
      floatArray0[3] = 1144.0F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertArrayEquals(new float[] {(-6608.0F), 1.0F, (-405.0F), 1144.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-6608.0F), 1.0F, (-405.0F), 1144.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-21);
      Byte byte1 = new Byte((byte) (-21));
      assertEquals((byte) (-21), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string0 = ArrayUtils.toString((Object) byte1, "");
      assertEquals("-21", string0);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) byteArray1);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) byte0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-21)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-21), (short) (-21)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-21);
      byteArray2[1] = (byte) (-21);
      byteArray2[2] = (byte) (-21);
      byteArray2[3] = (byte) (-21);
      byteArray2[4] = (byte) (-7);
      byteArray2[5] = (byte)14;
      byteArray2[6] = (byte)9;
      byteArray2[7] = (byte) (-21);
      byteArray2[8] = (byte) (-21);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-7);
      intArray0[1] = (int) (byte) (-21);
      intArray0[2] = (int) (byte) (-7);
      intArray0[3] = 50;
      intArray0[4] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-39));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-544.0763F);
      floatArray0[2] = (-2460.215F);
      Byte byte0 = new Byte((byte) (-88));
      assertEquals((byte) (-88), (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-1192);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)91;
      shortArray0[4] = (short)91;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short)2, (short) (-1192), (short)2, (short)91, (short)91}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1192), (short)2, (short)91, (short)91}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-88));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)79);
      assertArrayEquals(new byte[] {(byte)79, (byte)79, (byte)79, (byte)79, (byte)79, (byte)79, (byte)79, (byte)79, (byte)79}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)65;
      Byte byte1 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)65, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte)65, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte0));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-36));
      assertEquals((byte) (-36), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1718.23334);
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) (-1666);
      doubleArray0[3] = (double) (byte) (-36);
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) byte0;
      doubleArray0[6] = (double) (byte) (-36);
      ArrayUtils.shift(doubleArray0, (int) byte0);
      assertArrayEquals(new double[] {65.0, (-36.0), (-1718.23334), 65.0, (-1666.0), (-36.0), 65.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-57));
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-57)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-79);
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-1);
      byte byte1 = (byte)27;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-107);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)49, (byte) (-1), (byte)27, (byte) (-107)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1699.826934831769, (double) (byte)27);
      assertEquals((-1), int0);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte)27;
      byteArray1[1] = (Byte) (byte)49;
      byteArray1[2] = (Byte) (byte) (-79);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-107));
      assertArrayEquals(new byte[] {(byte)27, (byte)49, (byte) (-79)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-107);
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) (byte) (-107);
      shortArray0[3] = (short) (byte)49;
      shortArray0[4] = (short) byte1;
      shortArray0[5] = (short) (byte)27;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)27;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-2941));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2941, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 2645L;
      longArray0[2] = (-1L);
      longArray0[3] = 49L;
      longArray0[4] = 0L;
      longArray0[5] = (-240L);
      longArray0[6] = (-1L);
      longArray0[7] = (-45L);
      longArray0[8] = 573L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 2645L, (-1L), 49L, 0L, (-240L), (-1L), (-45L), 573L}, longArray0);
      assertTrue(boolean0);
      assertEquals(9, longArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte) (-83);
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-71));
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-83), (byte)9, (byte) (-1), (byte)0}, byteArray1);
      assertEquals((-1), int0);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      Float float0 = new Float((float) (short)55);
      assertEquals(55.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(323.09554);
      assertEquals(323.09555F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) (short)55);
      assertEquals(55.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((-2740.2852202726));
      assertEquals((-2740.2852F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1625.6375F;
      floatArray0[1] = (float) (short)55;
      floatArray0[2] = 1625.6375F;
      floatArray0[3] = 1625.6375F;
      floatArray0[4] = (float) Integer.MAX_VALUE;
      ArrayUtils.shift(floatArray0, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {1625.6375F, 2.14748365E9F, 1625.6375F, 55.0F, 1625.6375F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('D');
      assertEquals('D', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Double double0 = new Double(323.09554);
      assertEquals(323.09554, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) null, (-3543));
      ArrayUtils.swap((byte[]) null, 11, (-495), 374);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 0, 0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, (-1957), 6, 1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2833.63958861527);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {(-2833.63958861527), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('c');
      assertEquals('c', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'F');
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3828;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short)3828);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3828, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2105.128);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-304.273386060069);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1055;
      floatArray0[1] = (float) 1055;
      floatArray0[2] = (float) 1055;
      floatArray0[3] = (float) 1055;
      Byte byte0 = new Byte((byte) (-67));
      assertEquals((byte) (-67), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-67));
      assertEquals((byte) (-67), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-50));
      assertEquals((byte) (-50), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte) (-67));
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)27213);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-242));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[0] = 'Q';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Q'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[0];
      Float[] floatArray1 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Q'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-2166L), (-2764));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      short[] shortArray0 = new short[6];
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1810L);
      longArray0[3] = (long) (short)0;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1810L));
      assertArrayEquals(new long[] {0L, 0L, (-1810L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1810L), 0L, 0L, (-1810L), 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte0;
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byteArray0[2] = byte1;
      byteArray0[3] = byte0;
      byteArray0[4] = byte1;
      byteArray0[5] = byte0;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) (-1810L);
      floatArray0[5] = (float) (byte) (-1);
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F, (-1810.0F), (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = '1';
      charArray0[2] = 'o';
      charArray0[3] = 'I';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', '1', 'o', 'I'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      Byte byte0 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      short short0 = (short)2002;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2002;
      shortArray0[1] = (short) (-539);
      shortArray0[2] = (short)2002;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)506, (int) (short) (-539));
      assertArrayEquals(new short[] {(short)2002, (short) (-539), (short)2002}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) (-1), (long) (short)2002, 664L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 77);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-31)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) (byte)0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-411), 2304, 2588);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)72;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)4;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (byte) (-31);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), (-2232));
      assertArrayEquals(new short[] {(short)72, (short) (-1), (short)4, (short)1, (short) (-31)}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(5, shortArray0.length);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      MockRandom mockRandom0 = new MockRandom((short)4);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 48;
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(48);
      assertEquals(48, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(48);
      assertEquals(48, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(48, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertEquals(48, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(48);
      assertEquals(48, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertArrayEquals(new int[] {48, 48, 48, 48, 48, 48}, intArray0);
      assertNotNull(intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {48, 48, 48, 48, 48, 48}, intArray0);
      assertArrayEquals(new int[] {48, 48, 48, 48, 48, 48}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1444);
      shortArray0[1] = (short)1383;
      shortArray0[2] = (short)5;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1017), int0);
      assertArrayEquals(new short[] {(short) (-1444), (short)1383, (short)5, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(9, shortArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (int) (short) (-1017), 48, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-4));
      assertNull(byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-4));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-4);
      floatArray0[1] = (float) (byte) (-4);
      floatArray0[2] = (float) (byte) (-4);
      floatArray0[3] = (float) (byte) (-4);
      ArrayUtils.swap(floatArray0, 8192, 786, (-685));
      assertArrayEquals(new float[] {(-4.0F), (-4.0F), (-4.0F), (-4.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray1, 55);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 55;
      intArray0[1] = 0;
      intArray0[2] = 55;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 55;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 55;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, (-716));
      assertArrayEquals(new int[] {(-716), 55, 0, 55, 0, 0, 55, 0, 0, 55}, intArray1);
      assertArrayEquals(new int[] {55, 0, 55, 0, 0, 55, 0, 0, 55}, intArray0);
      assertNotNull(intArray1);
      assertEquals(10, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {'%'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertArrayEquals(new char[] {'-', '-'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'c';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {99.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {99.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-344);
      shortArray0[1] = (short) (-344);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)2678;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)76;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)108;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-42), (byte)108}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)108);
      assertArrayEquals(new short[] {(short) (-344), (short) (-344), (short) (-1), (short)2678, (short) (-1), (short)76}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(6, shortArray0.length);
      
      ArrayUtils.reverse(shortArray0, 947, (int) (short) (-1));
      assertArrayEquals(new short[] {(short) (-344), (short) (-344), (short) (-1), (short)2678, (short) (-1), (short)76}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = '^';
      charArray0[3] = '/';
      charArray0[4] = 'l';
      charArray0[5] = 'v';
      charArray0[6] = '9';
      ArrayUtils.swap(charArray0, (-1372), (-168), (-1372));
      assertArrayEquals(new char[] {'k', 'k', '^', '/', 'l', 'v', '9'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '/';
      objectArray0[1] = (Object) 'l';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)29, (byte)29}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)0);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((short[]) null, 0, (int) (byte)29);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = '[';
      charArray0[2] = '^';
      charArray0[3] = '/';
      charArray0[4] = 'l';
      charArray0[5] = 'v';
      charArray0[6] = '9';
      ArrayUtils.swap(charArray0, (-1372), (-168), (-1372));
      assertArrayEquals(new char[] {'k', '[', '^', '/', 'l', 'v', '9'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) '/';
      objectArray0[1] = (Object) 'l';
      Object object0 = new Object();
      assertNotNull(object0);
      
      org.evosuite.runtime.Random.setNextRandom((-168));
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2045, (-1381));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      byte byte0 = (byte) (-50);
      Byte byte1 = new Byte((byte) (-50));
      assertEquals((byte) (-50), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = (Byte) byte0;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-50), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = byte2;
      byteArray1[1] = byte1;
      byteArray1[2] = byte2;
      byteArray1[3] = byte1;
      byteArray1[4] = byte2;
      byteArray1[5] = byte2;
      byteArray1[6] = byte2;
      byteArray1[7] = byte2;
      byteArray1[8] = byte2;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(8, byteArray0.length);
      assertEquals(3, byteArray2.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'o');
      assertArrayEquals(new char[] {'o'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4152;
      intArray0[1] = (int) (short)55;
      intArray0[2] = (int) (short)55;
      intArray0[3] = (int) (short)55;
      intArray0[4] = (int) (short)55;
      intArray0[5] = (int) (short)55;
      int[] intArray1 = ArrayUtils.add(intArray0, (-1));
      assertArrayEquals(new int[] {4152, 55, 55, 55, 55, 55}, intArray0);
      assertArrayEquals(new int[] {4152, 55, 55, 55, 55, 55, (-1)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Character character0 = Character.valueOf('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('t');
      assertEquals('t', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = 't';
      charArray0[2] = 't';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'm');
      assertArrayEquals(new char[] {'#', 't', 't'}, charArray1);
      assertArrayEquals(new char[] {'#', 't', 't'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, (-1), 4152}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      Character character0 = Character.valueOf('r');
      assertEquals('r', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('y');
      assertEquals('y', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'r';
      charArray0[2] = 'Z';
      charArray0[3] = '/';
      charArray0[4] = 'y';
      charArray0[5] = 'e';
      charArray0[6] = 'Z';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'e');
      assertArrayEquals(new char[] {'9', 'r', 'Z', '/', 'y', 'Z'}, charArray1);
      assertArrayEquals(new char[] {'9', 'r', 'Z', '/', 'y', 'e', 'Z'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      Byte[] byteArray0 = new Byte[10];
      Byte byte0 = ArrayUtils.get(byteArray0, (-375));
      assertNull(byte0);
      assertEquals(10, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) null);
      assertNotNull(byteArray1);
      assertEquals(10, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[2];
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1490;
      shortArray0[1] = (short) (-72);
      shortArray0[2] = (short)37;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)1490, (short) (-72), (short)37}, shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)1490;
      doubleArray0[1] = (double) (short)1490;
      doubleArray0[2] = (double) (short)37;
      doubleArray0[3] = (double) (short) (-72);
      doubleArray0[4] = (double) (short) (-72);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {1490.0, 37.0, (-72.0), (-72.0), 1490.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 15);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-238), 4927, 15);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)52;
      Byte byte1 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'l';
      charArray0[2] = 'X';
      ArrayUtils.shift(charArray0, (int) (byte)52, 2963, (int) byte0);
      assertArrayEquals(new char[] {'x', 'l', 'X'}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-36);
      byteArray1[1] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(byteArray1, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      short[] shortArray0 = new short[6];
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1810L);
      longArray0[3] = (long) (short)0;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1810L));
      assertArrayEquals(new long[] {0L, 0L, (-1810L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1810L), 0L, 0L, (-1810L), 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = 'H';
      ArrayUtils.shift(charArray0, (-1381), 1838, 2588);
      assertArrayEquals(new char[] {'\"', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byte byte0 = (byte)25;
      byteArray0[1] = (byte)25;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(byteArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('i');
      assertEquals('i', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-41);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)29, (byte) (-41)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      Byte byte0 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 63, 63);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-102));
      assertEquals((byte) (-102), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)127);
      assertEquals((byte)127, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte) byte3);
      assertEquals((byte)31, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-102);
      longArray0[1] = (long) (byte)127;
      longArray0[2] = (long) (byte) (-102);
      longArray0[3] = (long) (byte) (-102);
      longArray0[4] = (long) (byte)127;
      longArray0[5] = (long) (byte) (-102);
      longArray0[6] = (long) (byte) (-102);
      longArray0[7] = (-620L);
      longArray0[8] = (long) (byte) (-102);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-102L), 127L, (-102L), (-102L), 127L, (-102L), (-102L), (-620L), (-102L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(9, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-25);
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 49L;
      longArray0[3] = (long) (byte) (-25);
      longArray0[4] = (-562L);
      longArray0[5] = (-1L);
      longArray0[6] = (long) 0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 49L, (-25L), (-562L), (-1L), 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 49L, (-25L), (-562L), (-1L), 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Byte byte0 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray3 = ArrayUtils.insert((int)  (-38), byteArray0, byteArray1);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      
      byte[] byteArray4 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-93));
      assertNull(byteArray4);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(byteArray0);
      assertNotNull(map0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Byte[] byteArray1 = ArrayUtils.insert((-4), byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2899.13643855917, 488);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)52);
      assertNull(byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)52;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 488;
      intArray0[4] = 5;
      intArray0[5] = (-1);
      intArray0[6] = 488;
      intArray0[7] = (-1);
      intArray0[8] = 34;
      ArrayUtils.reverse(intArray0, 1, (-1));
      assertArrayEquals(new int[] {52, (-1), (-1), 488, 5, (-1), 488, (-1), 34}, intArray0);
      assertEquals(9, intArray0.length);
      
      ArrayUtils.shift((double[]) null, (-1));
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (float) 34;
      floatArray0[2] = (float) (-1);
      ArrayUtils.swap(floatArray0, 52, (-1), 2315);
      assertArrayEquals(new float[] {5.0F, 34.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = (-1773L);
      longArray0[4] = (-1495L);
      longArray0[6] = 1L;
      longArray0[7] = (-2950L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 1L, (-1773L), (-1495L), 0L, 1L, (-2950L)}, longArray0);
      assertTrue(boolean0);
      assertEquals(8, longArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) (-2950L);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) (-1773L);
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) 1L;
      floatArray0[6] = 977.4651F;
      floatArray0[7] = (float) 0L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1130);
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short) (-1130)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3525.3875487192063);
      doubleArray0[2] = (-3525.3875487192063);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {(-3525.3875487192063), 0.0, (-3525.3875487192063), 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3525.3875487192063), 0.0, (-3525.3875487192063), 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('5');
      assertEquals('5', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('t');
      assertEquals('t', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 84);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, true}, booleanArray0));
      assertEquals(5, int0);
      assertEquals(7, booleanArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-3525.3875487192063), 0.0, (-3525.3875487192063), 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3525.3875487192063), 0.0, (-3525.3875487192063), 1.0, 1.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(doubleArray2, doubleArray0);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((byte)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      try { 
        Long.valueOf("The type must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"The type must not be null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 99);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      ArrayUtils.swap((Object[]) doubleArray1, 99, (-1688), (-1688));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, (-1), 4152}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      Character character0 = Character.valueOf('r');
      assertEquals('r', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('y');
      assertEquals('y', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('/');
      assertEquals('/', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Character character3 = new Character('\\');
      assertEquals('\\', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      
      Character character4 = new Character('7');
      assertEquals('7', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      
      Character[] characterArray0 = new Character[2];
      Character character5 = Character.valueOf('/');
      assertEquals('/', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      
      characterArray0[0] = character5;
      characterArray0[1] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'/', '7'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      ArrayUtils.swap((Object[]) characterArray0, 40, 2284, 1);
      assertEquals(2, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short short0 = (short)108;
      Short short1 = new Short((short)108);
      assertEquals((short)108, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)108;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertArrayEquals(new float[] {108.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {108.0F, 108.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 108.0F;
      doubleArray0[1] = (double) 108.0F;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {108.0, 108.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {108.0, 108.0, 108.0, 108.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '1';
      charArray0[2] = 'Q';
      charArray0[3] = 'G';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'G', 'Q', '1', '2'}, charArray0);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'Q';
      longArray0[1] = (long) '2';
      longArray0[2] = 1L;
      longArray0[3] = (long) '2';
      longArray0[4] = (long) 'Q';
      longArray0[5] = (long) '1';
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 'G';
      ArrayUtils.swap(longArray0, (-70), (int) short0);
      assertArrayEquals(new long[] {81L, 50L, 1L, 50L, 81L, 49L, 1L, 71L}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) 87;
      ArrayUtils.swap(longArray0, (-2224), 0, (-1093));
      assertArrayEquals(new long[] {66L, 87L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2105.128);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-304.273386060069);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-2105.128), 0.0, (-304.273386060069), 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) (-1.0);
      doubleArray1[3] = (Double) (-1.0);
      doubleArray1[4] = (Double) 0.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      longArray0[4] = (-1L);
      ArrayUtils.swap(longArray0, 69, 69, 121);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 1L, (-1L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      Byte byte0 = new Byte((byte)60);
      assertEquals((byte)60, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[4];
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertNotNull(bitSet0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)60;
      ArrayUtils.swap(longArray0, (int) (byte)60, 0, 768);
      assertArrayEquals(new long[] {60L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)3798;
      doubleArray0[1] = (double) (short) (-3023);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (short)3798;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3798.0, (-3023.0), 0.0, 3798.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short short0 = new Short((short) (-180));
      assertEquals((short) (-180), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-180));
      assertEquals((short) (-180), (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-2036));
      assertEquals((short) (-2036), (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      Short short3 = new Short((short) (-2036));
      assertEquals((short) (-2036), (short)short3);
      assertNotNull(short3);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      
      Short short4 = new Short((short)146);
      assertEquals((short)146, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[1]);
      assertArrayEquals(new short[] {(short) (-180), (short) (-180)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {3798.0, (-3023.0), 0.0, 3798.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (int) (short)5312);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 97;
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      intArray0[0] = 97;
      floatArray0[5] = (float) 0;
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 97;
      MutableInt mutableInt0 = new MutableInt(0.0F);
      assertNotNull(mutableInt0);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertFalse(integer0.equals((Object)int1));
      
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(int0 == int1);
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[2] = integer1;
      integerArray0[3] = (Integer) 97;
      integerArray0[4] = (Integer) 97;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 2038);
      assertArrayEquals(new int[] {97, 0, 0, 97, 97}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(5, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1243, int1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertTrue(boolean0);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      Byte byte0 = new Byte((byte)78);
      assertEquals((byte)78, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)78;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {78}, intArray0);
      assertArrayEquals(new int[] {78}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 48;
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(48);
      assertEquals(48, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(48);
      assertEquals(48, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(48, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertEquals(48, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(48);
      assertEquals(48, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertArrayEquals(new int[] {48, 48, 48, 48, 48, 48}, intArray0);
      assertNotNull(intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {48, 48, 48, 48, 48, 48}, intArray0);
      assertArrayEquals(new int[] {48, 48, 48, 48, 48, 48}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1444);
      shortArray0[1] = (short)1383;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short)72;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)1243;
      shortArray0[6] = (short)4;
      shortArray0[7] = (short) (-748);
      shortArray0[8] = (short)1427;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)72, int0);
      assertArrayEquals(new short[] {(short) (-1444), (short)1383, (short)5, (short)72, (short) (-1), (short)1243, (short)4, (short) (-748), (short)1427}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(9, shortArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean[] booleanArray0 = new boolean[0];
      MockRandom mockRandom0 = new MockRandom(int0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'c';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {99.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {99.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-344);
      shortArray0[1] = (short)2564;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)2678;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)76;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)125);
      assertArrayEquals(new short[] {(short) (-344), (short)2564, (short) (-1), (short)2678, (short) (-1), (short)76}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(6, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (short)2564);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3037;
      intArray0[1] = 2603;
      intArray0[2] = 7967;
      ArrayUtils.swap(intArray0, 7967, 3037, 12);
      assertArrayEquals(new int[] {3037, 2603, 7967}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte byte0 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, 1, byte0);
      assertEquals((byte)87, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      boolean boolean1 = ArrayUtils.isSameType(byte1, byte2);
      assertTrue(boolean1);
      assertTrue(byte0.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte2));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 3037;
      longArray0[2] = (long) 3037;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {1L, 3037L, 3037L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3037;
      intArray1[1] = 3037;
      intArray1[2] = 12;
      intArray1[3] = 1;
      intArray1[4] = 2603;
      intArray1[5] = 7967;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 1873;
      floatArray0[4] = (float) 97;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 97;
      floatArray0[7] = (float) 1873;
      floatArray0[8] = (float) 97;
      ArrayUtils.shift(floatArray0, (-1165), 0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1873.0F, 97.0F, 0.0F, 97.0F, 1873.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-65);
      Byte byte1 = new Byte((byte) (-65));
      assertEquals((byte) (-65), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-65));
      assertEquals((byte) (-65), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte) (-65), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)83);
      assertEquals((byte)83, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, byte4);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'f';
      charArray0[2] = '';
      charArray0[3] = ']';
      charArray0[4] = '?';
      charArray0[5] = ':';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '\'');
      assertArrayEquals(new char[] {'P', 'f', '', ']', '?', ':'}, charArray1);
      assertArrayEquals(new char[] {'P', 'f', '', ']', '?', ':'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(8, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      ArrayUtils.shift((float[]) null, (-670));
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('Z');
      assertEquals('Z', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Double double0 = new Double(0.1);
      assertEquals(0.1, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) null, 864);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte) (-87);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)1, (byte) (-1), (byte) (-78), (byte) (-57), (byte)107, (byte) (-87)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)52;
      Byte byte1 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)52;
      floatArray0[1] = (float) byte0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (byte)52);
      assertArrayEquals(new float[] {52.0F, 52.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3722);
      doubleArray0[1] = (double) 52.0F;
      doubleArray0[2] = (double) 52.0F;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (byte)52;
      ArrayUtils.swap(doubleArray0, 14, (-3722));
      assertArrayEquals(new double[] {(-3722.0), 52.0, 52.0, Double.NaN, 52.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 818);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(3, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      
      // Undeclared exception!
      try { 
        bitSet0.flip((-3722), (-304));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -3722
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2242);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2242, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[3];
      intArray0[0] = 99;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 99);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)356);
      assertArrayEquals(new short[] {(short)356}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)72;
      Byte byte1 = new Byte((byte)72);
      assertEquals((byte)72, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)72);
      assertEquals((byte)72, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)72, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-95));
      assertEquals((byte) (-95), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      
      byteArray0[3] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)72, (byte)72, (byte) (-95)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {(byte)72, (byte)72, (byte)72, (byte) (-95)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)72, (byte)72, (byte)72, (byte) (-95), (byte)72, (byte)72, (byte)72, (byte) (-95)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 48;
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(48);
      assertEquals(48, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(48);
      assertEquals(48, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(48, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertEquals(48, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(48);
      assertEquals(48, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)int0));
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertArrayEquals(new int[] {48, 48, 48, 48, 48, 48}, intArray0);
      assertNotNull(intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)7;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)7);
      assertArrayEquals(new short[] {(short)7, (short)1, (short)7}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)7}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte) (-93));
      assertEquals((byte) (-93), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)113;
      Byte byte2 = new Byte((byte)113);
      assertEquals((byte)113, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byte byte3 = (byte) (-82);
      Byte byte4 = new Byte((byte) (-82));
      assertEquals((byte) (-82), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)113);
      assertEquals((byte)113, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte) (-82));
      assertEquals((byte) (-82), (byte)byte6);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte3);
      assertEquals((byte) (-82), (byte)byte7);
      assertNotNull(byte7);
      assertTrue(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte3 == byte1);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte(byte1);
      assertEquals((byte)113, (byte)byte8);
      assertNotNull(byte8);
      assertTrue(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte1 == byte3);
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte(byte1);
      assertEquals((byte)113, (byte)byte9);
      assertNotNull(byte9);
      assertTrue(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte4));
      assertTrue(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte0));
      assertTrue(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte3));
      assertTrue(byte9.equals((Object)byte1));
      assertFalse(byte1 == byte3);
      
      byteArray0[7] = byte9;
      Byte byte10 = ArrayUtils.get(byteArray0, (int) 113, byte4);
      assertEquals((byte) (-82), (byte)byte10);
      assertNotNull(byte10);
      assertEquals(8, byteArray0.length);
      assertFalse(byte10.equals((Object)byte5));
      assertTrue(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte1));
      assertTrue(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte2));
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte9));
      assertTrue(byte10.equals((Object)byte6));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte7));
      assertFalse(byte4.equals((Object)byte8));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte5));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte9));
      assertTrue(byte4.equals((Object)byte6));
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte10);
      assertEquals((byte) (-82), object0);
      assertNotNull(object0);
      assertEquals(8, byteArray0.length);
      assertFalse(byte10.equals((Object)byte5));
      assertTrue(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte1));
      assertTrue(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte2));
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte9));
      assertTrue(byte10.equals((Object)byte6));
      assertTrue(object0.equals((Object)byte6));
      assertFalse(object0.equals((Object)byte2));
      assertTrue(object0.equals((Object)byte7));
      assertFalse(object0.equals((Object)byte8));
      assertFalse(object0.equals((Object)byte9));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte5));
      assertTrue(object0.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte7));
      assertFalse(byte4.equals((Object)byte8));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte5));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte9));
      assertTrue(byte4.equals((Object)byte6));
      
      int int1 = ArrayUtils.hashCode(object0);
      assertEquals(8, byteArray0.length);
      assertFalse(byte10.equals((Object)byte5));
      assertTrue(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte1));
      assertTrue(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte2));
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte9));
      assertTrue(byte10.equals((Object)byte6));
      assertTrue(object0.equals((Object)byte6));
      assertFalse(object0.equals((Object)byte2));
      assertTrue(object0.equals((Object)byte7));
      assertFalse(object0.equals((Object)byte8));
      assertFalse(object0.equals((Object)byte9));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte5));
      assertTrue(object0.equals((Object)byte3));
      assertFalse(int1 == int0);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte7));
      assertFalse(byte4.equals((Object)byte8));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte5));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte9));
      assertTrue(byte4.equals((Object)byte6));
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-25);
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 49L;
      longArray0[3] = (long) (byte) (-25);
      longArray0[4] = (-562L);
      longArray0[5] = (-1L);
      longArray0[6] = (long) 0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 49L, (-25L), (-562L), (-1L), 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 49L, (-25L), (-562L), (-1L), 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = '^';
      ArrayUtils.shift(charArray0, 0, 0, (int) (byte) (-25));
      assertArrayEquals(new char[] {')', ')', '^'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray2, (byte)34, (-2146459383));
      assertArrayEquals(new byte[] {(byte) (-25)}, byteArray2);
      assertEquals((-1), int0);
      assertEquals(1, byteArray2.length);
      
      byte[] byteArray3 = ArrayUtils.removeElement(byteArray2, (byte) (-25));
      assertArrayEquals(new byte[] {(byte) (-25)}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(1, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)34;
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte) (-25);
      ArrayUtils.reverse(intArray0, (-1), 0);
      assertArrayEquals(new int[] {34, (-1), (-25)}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 421);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, true}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(9, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1541;
      doubleArray0[1] = (double) 1541;
      doubleArray0[2] = (double) (-331);
      doubleArray0[3] = (double) 99;
      doubleArray0[4] = (double) (-331);
      ArrayUtils.swap(doubleArray0, 1, 1, (-331));
      assertArrayEquals(new double[] {1541.0, 1541.0, (-331.0), 99.0, (-331.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, '3');
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '3';
      longArray0[1] = (long) (-331);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (-331L);
      floatArray0[2] = (float) 51L;
      floatArray0[3] = (float) '3';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {1.0F, (-331.0F), 51.0F, 51.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-331.0F), 51.0F, 51.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)65}, byteArray2);
      assertArrayEquals(new byte[] {(byte)65}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (byte)1;
      ArrayUtils.shift(doubleArray0, (int) (byte)1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)0, (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)1, (int) (byte)1, 88.0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)0, (byte)1}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, int1);
      assertEquals(5, doubleArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, (-1), 4152}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      ArrayUtils.swap(booleanArray0, 0, 1, 2404);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, true, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      booleanArray1[7] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(9, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 4152;
      floatArray0[4] = (float) 2404;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 2404;
      floatArray0[7] = (float) (-1);
      floatArray0[8] = (float) 1;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {1.0F, (-1.0F), 1.0F, 4152.0F, 2404.0F, 0.0F, 2404.0F, (-1.0F), 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-1.0F), 1.0F, 4152.0F, 2404.0F, 0.0F, 2404.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      int int0 = new Byte((byte)9);
      assertEquals((byte)9, int0);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, true, 2052);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      int int0 = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-25);
      intArray0[1] = 97;
      intArray0[2] = (int) (byte) (-25);
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.swap(intArray0, (-25), (-25), 97);
      assertArrayEquals(new int[] {(-25), 97, (-25), 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte byte0 = (byte)87;
      Byte byte1 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = ArrayUtils.get(byteArray0, 97, (Byte) null);
      assertNull(byte2);
      assertEquals(0, byteArray0.length);
      
      Byte byte3 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(byte4, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Byte byte0 = new Byte((byte)84);
      assertEquals((byte)84, (byte)byte0);
      assertNotNull(byte0);
      
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      ArrayUtils.shift((Object[]) floatArray0, (int) (byte)84);
      assertEquals(0, floatArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      Byte byte1 = ArrayUtils.get(byteArray0, (-1));
      assertNull(byte1);
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(byte0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2588;
      doubleArray0[1] = (double) 2588;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = 335.79844644;
      doubleArray0[4] = 335.79844644;
      doubleArray0[5] = 335.79844644;
      doubleArray0[6] = 335.79844644;
      ArrayUtils.shift(doubleArray0, 2383);
      assertArrayEquals(new double[] {335.79844644, 335.79844644, 335.79844644, 2588.0, 2588.0, 1.5, 335.79844644}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      byte byte0 = (byte) (-25);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 99, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      intArray0[1] = 0;
      intArray0[2] = 1541;
      intArray0[3] = 99;
      intArray0[4] = 99;
      intArray0[5] = 99;
      intArray0[6] = 1734;
      intArray0[7] = 99;
      intArray0[8] = 1541;
      ArrayUtils.swap(intArray0, 1541, 2);
      assertArrayEquals(new int[] {(-331), 0, 1541, 99, 99, 99, 1734, 99, 1541}, intArray0);
      assertEquals(9, intArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)7;
      Byte byte1 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[1] = (Byte) byte0;
      Byte byte3 = Byte.valueOf((byte)7);
      assertEquals((byte)7, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = Byte.valueOf(byte0);
      assertEquals((byte)7, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte4);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      MockRandom mockRandom0 = new MockRandom(978L);
      assertNotNull(mockRandom0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {(-331), 0, 1541, 99, 99, 99, 1734, 99, 1541}, intArray0);
      assertArrayEquals(new int[] {(-331), 0, 1541, 99, 99, 99, 1734, 99, 1541}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)18688;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)18688;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-1512);
      ArrayUtils.swap((double[]) null, (-2356), (int) (short) (-1512), 3015);
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) (short)18688);
      assertArrayEquals(new double[] {18688.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 1227, (double) (short) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-707.2917266233264), (-707.2917266233264));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-23.0);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      mockRandom1.setSeed((byte)60);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)0;
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom1);
      assertEquals(0, objectArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)52);
      assertArrayEquals(new byte[] {(byte)60, (byte)22, (byte)120, (byte)0, (byte)0, (byte)120, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-23.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      Float float0 = new Float(323.09554);
      assertEquals(323.09555F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2740.2852202726));
      assertEquals((-2740.2852F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)121);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 323.09554;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = 323.09554;
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) (byte)1;
      doubleArray0[8] = (double) (byte)0;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 323.09554, 0.0, 0.0, 1.0, 323.09554, 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1672));
      assertArrayEquals(new short[] {(short) (-1672)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (-1672), (int) (short) (-1672));
      assertArrayEquals(new short[] {(short) (-1672)}, shortArray1);
      assertNotNull(bitSet0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 3448L);
      assertArrayEquals(new long[] {3448L}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.insert(57, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.insert((-2234), (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = ArrayUtils.insert((-2234), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-63);
      Byte byte1 = new Byte((byte) (-63));
      assertEquals((byte) (-63), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) (byte) (-63);
      floatArray0[2] = (float) byte0;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-405.0F));
      assertArrayEquals(new float[] {(-63.0F), (-63.0F), (-63.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-63.0F), (-63.0F), (-63.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Byte[] byteArray2 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-63);
      ArrayUtils.reverse(longArray0, (int) (byte) (-63), (-1309));
      assertArrayEquals(new long[] {(-63L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (-1309);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift((float[]) null, 122, (-3731), 97);
      byte byte0 = (byte) (-56);
      Byte byte1 = new Byte((byte) (-56));
      assertEquals((byte) (-56), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 100.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {100.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 1250.721564622202, (-848), 1250.721564622202);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {100.0}, doubleArray1, 0.01);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-56), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray0, byte1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertTrue(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Byte byte3 = ArrayUtils.get((Byte[]) null, (-331));
      assertNull(byte3);
      
      Byte[] byteArray3 = ArrayUtils.removeElement(byteArray1, (Object) null);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) shortArray0, object0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      Byte byte0 = ArrayUtils.get((Byte[]) null, 99);
      assertNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 99, (-331), 1537);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      intArray0[1] = 0;
      intArray0[2] = 1537;
      intArray0[3] = 99;
      intArray0[4] = 99;
      intArray0[5] = 99;
      intArray0[6] = 1734;
      intArray0[7] = 99;
      intArray0[8] = 1537;
      ArrayUtils.swap(intArray0, 1537, 2);
      assertArrayEquals(new int[] {(-331), 0, 1537, 99, 99, 99, 1734, 99, 1537}, intArray0);
      assertEquals(9, intArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)7;
      Byte byte1 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = Byte.valueOf((byte)7);
      assertEquals((byte)7, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = Byte.valueOf(byte0);
      assertEquals((byte)7, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte5);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      MockRandom mockRandom0 = new MockRandom(1537);
      assertNotNull(mockRandom0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {(-331), 0, 1537, 99, 99, 99, 1734, 99, 1537}, intArray0);
      assertArrayEquals(new int[] {(-331), 0, 1537, 99, 99, 99, 1734, 99, 1537}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (Object) byte0);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) 99;
      floatArray0[3] = (float) byte0;
      floatArray0[4] = (float) 1734;
      floatArray0[5] = (float) 99;
      floatArray0[6] = (float) 99;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 7.0F, 99.0F, 7.0F, 1734.0F, 99.0F, 99.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(16, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, 60, 210);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 5, 792);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'k');
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.reverse((Object[]) byteArray1, 210, 5);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse((Object[]) byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      ArrayUtils.shift((Object[]) byteArray1, 52, 60, 2146766547);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      Byte byte0 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[2];
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[0] = 'K';
      boolean[] booleanArray0 = new boolean[2];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte) (-82));
      assertEquals((byte) (-82), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte((byte) (-82));
      assertEquals((byte) (-82), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      
      byteArray0[5] = byte5;
      Byte[] byteArray1 = ArrayUtils.insert(5, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(12, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)52;
      Byte byte1 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)52;
      floatArray0[1] = (float) byte0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (byte)52);
      assertArrayEquals(new float[] {52.0F, 52.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3722);
      doubleArray0[1] = (double) 52.0F;
      doubleArray0[2] = (double) 52.0F;
      doubleArray0[3] = Double.NaN;
      Byte byte2 = new Byte((byte) (-38));
      assertEquals((byte) (-38), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      Byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-38));
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-53);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)16;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-53)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)94, (byte)16}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-53)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short short0 = (short)108;
      Short short1 = new Short((short)108);
      assertEquals((short)108, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object object0 = ArrayUtils.get((Object[]) shortArray0, 3448);
      assertNull(object0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.swap((Object[]) shortArray0, 3448, (int) short0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.shift(byteArray0, (int) (short)108, 18688, (int) short0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)48;
      intArray0[1] = 9;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)2, 3448);
      assertArrayEquals(new int[] {48, 9}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(2, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray0, (byte)2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1134));
      assertArrayEquals(new int[] {48, 9}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) short0);
      assertArrayEquals(new int[] {48, 9}, intArray1);
      assertArrayEquals(new int[] {48, 9}, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      byte[] byteArray3 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray3);
      assertEquals(3, byteArray3.length);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 4184;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 4184, 0}, intArray0);
      assertArrayEquals(new int[] {0, 4184, 0, 0, 4184, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-82.1F);
      floatArray0[1] = 1643.3F;
      ArrayUtils.shift(floatArray0, 1055);
      assertArrayEquals(new float[] {1643.3F, 0.0F, (-82.1F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('R');
      assertEquals('R', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) doubleArray0, 0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)29;
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte) (-41);
      byteArray1[2] = (byte) (-41);
      byteArray1[3] = (byte) (-41);
      byteArray1[4] = (byte)67;
      byteArray1[5] = (byte) (-41);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)29, (byte) (-41), (byte) (-41), (byte) (-41), (byte)67, (byte) (-41)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)72}, byteArray2);
      assertArrayEquals(new byte[] {(byte)72, (byte) (-41), (byte)67, (byte) (-41), (byte)29}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      Byte byte0 = new Byte((byte)78);
      assertEquals((byte)78, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) byte0, (Object) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      long[] longArray0 = new long[16];
      longArray0[0] = (long) '~';
      longArray0[1] = 674L;
      longArray0[2] = (long) '~';
      longArray0[3] = (long) '~';
      longArray0[4] = (long) 11;
      Boolean boolean0 = Boolean.valueOf("{N&}*ZKL*pYA2uu~c");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("{N&}*ZKL*pYA2uu~c");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.shift(longArray0, 703, (-1117), 0);
      assertEquals(16, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-320.982866));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[15];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      byteArray0[3] = (Byte) byte0;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      
      byteArray0[4] = byte4;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) byte0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte5 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte3));
      
      Byte byte6 = new Byte((byte) (-40));
      assertEquals((byte) (-40), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) byte3, (Object) byte5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, (-1677));
      assertArrayEquals(new int[] {0, 1, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 126.0F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Byte byte0 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (byte)100);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-1677));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1677.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1203));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1203)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-1203));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1203)}, intArray1);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)20;
      Byte byte1 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = Byte.valueOf((byte)75);
      assertEquals((byte)75, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      assertEquals((byte)20, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte1));
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      
      byteArray0[6] = byte7;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)124);
      assertEquals((byte)124, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1510), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1510, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      Integer integer0 = new Integer((-300));
      assertEquals((-300), (int)integer0);
      assertNotNull(integer0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ' ';
      charArray1[1] = '%';
      charArray1[2] = ' ';
      charArray1[3] = ';';
      charArray1[4] = '%';
      charArray1[5] = '1';
      charArray1[6] = '%';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {' ', '%', ' ', ';', '%', '1', '%'}, charArray1);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      assertEquals(0, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(charArray0, charArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) (-5));
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      Byte byte0 = new Byte((byte)68);
      assertEquals((byte)68, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = 'C';
      charArray0[2] = '!';
      charArray0[3] = 'H';
      charArray0[4] = 'K';
      charArray0[5] = 'h';
      charArray0[6] = '@';
      charArray0[7] = 'y';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'[', 'C', '!', 'H', 'K', 'h', '@', 'y'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)101;
      Byte byte1 = new Byte((byte)101);
      assertEquals((byte)101, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)101, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)101, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)101, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-123), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -123, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('i');
      assertEquals('i', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.reverse(doubleArray0, (-1372), 376);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = '[';
      charArray0[2] = '^';
      charArray0[3] = '/';
      charArray0[4] = 'l';
      charArray0[5] = 'v';
      charArray0[6] = '9';
      int int0 = (-1372);
      ArrayUtils.swap(charArray0, (-1372), (-168), (-1372));
      assertArrayEquals(new char[] {'k', '[', '^', '/', 'l', 'v', '9'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '/';
      objectArray0[1] = (Object) 'l';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 'v';
      objectArray0[4] = (Object) '[';
      objectArray0[5] = (Object) '/';
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '/', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = '[';
      ArrayUtils.swap(charArray0, (-2185), 0, (-2185));
      assertArrayEquals(new char[] {'J', '['}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      
      Byte[] byteArray2 = new Byte[0];
      Byte byte0 = ArrayUtils.get(byteArray2, Integer.MAX_VALUE);
      assertNull(byte0);
      assertEquals(0, byteArray2.length);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, 86);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1417.7952553;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {1417.7952553}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      ArrayUtils.shift(byteArray0, (int) (byte)2, (int) (byte) (-65), (-62));
      assertArrayEquals(new byte[] {(byte)125, (byte) (-65), (byte)9, (byte)14, (byte)61, (byte)2, (byte)2}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (-1), (int) (byte)2, (int) (byte)61);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-610));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      byteArray0[3] = (Byte) byte0;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      
      byteArray0[4] = byte4;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte0;
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertEquals(3, intArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byte0;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift((boolean[]) null, (int) byte0);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (-2146680966));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, 69);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2899.13643855917, 488);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)52);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Long long0 = new Long((-1));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte)52);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-25), (int) (byte)52);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-25);
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 49L;
      longArray0[3] = (long) (byte) (-25);
      longArray0[4] = (-562L);
      longArray0[5] = (-1L);
      longArray0[6] = (long) 0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 49L, (-25L), (-562L), (-1L), 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 49L, (-25L), (-562L), (-1L), 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = '^';
      ArrayUtils.shift(charArray0, 0, 0, (int) (byte) (-25));
      assertArrayEquals(new char[] {')', ')', '^'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray2, (byte)34, (-2146459383));
      assertArrayEquals(new byte[] {(byte) (-25)}, byteArray2);
      assertEquals((-1), int0);
      assertEquals(1, byteArray2.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte) (-25));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      Byte byte0 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte3;
      Byte byte5 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      
      byteArray0[1] = byte5;
      byteArray0[2] = byte3;
      byteArray0[3] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertFalse(boolean1);
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      byte byte4 = (byte)49;
      Byte byte5 = new Byte((byte)49);
      assertEquals((byte)49, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte0 == byte4);
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      
      byteArray0[4] = byte6;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) byte0;
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertEquals(3, intArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byte0;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.indexOf(longArray1, (long) byte4);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(byte4 == byte0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      Byte byte0 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)52;
      longArray0[1] = (long) (byte)52;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 5, 5);
      assertArrayEquals(new long[] {52L, 52L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {52L, 52L}, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      boolean[] booleanArray0 = new boolean[2];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'K';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 75L, 5);
      assertArrayEquals(new long[] {75L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0, int0);
      assertEquals(8, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {75L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[9];
      intArray0[0] = 99;
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 99);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1, "-/z*5jbjN-;VQ$a");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 99, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      intArray0[2] = 1541;
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, '3');
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1541;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-331));
      assertArrayEquals(new long[] {1541L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1541L;
      floatArray0[1] = (float) 99;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 1541;
      floatArray0[4] = (float) 1541;
      floatArray0[5] = (float) 1541L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {99.0F, (-1.0F), 1541.0F, 1541.0F, 1541.0F, 1541.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)1072);
      assertEquals((short)1072, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertArrayEquals(new short[] {(short)1072}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)90;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)792;
      shortArray0[3] = (short)792;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)90, (short)2, (short)792, (short)792, (short)0}, shortArray0);
      assertFalse(boolean0);
      assertEquals(5, shortArray0.length);
      
      Short short0 = new Short((short)792);
      assertEquals((short)792, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray1 = new Short[4];
      shortArray1[0] = (Short) (short)2;
      shortArray0[1] = (short)90;
      shortArray1[2] = (Short) (short)90;
      shortArray1[3] = short0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)3249);
      assertArrayEquals(new short[] {(short)2, (short)3249, (short)90, (short)792}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)27213);
      assertArrayEquals(new short[] {(short)27213}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = ' ';
      charArray0[2] = '{';
      charArray0[3] = 'Z';
      ArrayUtils.reverse(charArray0, (int) (byte)0, (int) (byte)15);
      assertArrayEquals(new char[] {'Z', '{', ' ', '%'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertEquals(8, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1510));
      assertEquals((short) (-1510), (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1510));
      assertEquals((short) (-1510), (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-2310));
      assertEquals((short) (-2310), (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short5);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      
      shortArray0[5] = short5;
      Short short6 = new Short((byte)0);
      assertEquals((short)0, (short)short6);
      assertNotNull(short6);
      assertTrue(short6.equals((Object)short1));
      assertTrue(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      
      shortArray0[6] = short6;
      Short short7 = new Short((short) (-3158));
      assertEquals((short) (-3158), (short)short7);
      assertNotNull(short7);
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short1));
      
      shortArray0[7] = short7;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[2]);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1510), (short) (-1510), (short) (-2310), (short) (-1), (short)0, (short) (-3158)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-544.0763F));
      assertEquals((-544.0763F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift(doubleArray1, (-1499), 3671, 2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, 743, 743, 77);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.insert((-2234), (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      ArrayUtils.swap((boolean[]) null, 66, 66, 1);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      Float float0 = new Float((float) (short)55);
      assertEquals(55.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(323.09554);
      assertEquals(323.09555F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((-2740.2852202726));
      assertEquals((-2740.2852F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float(1625.6375F);
      assertEquals(1625.6375F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (short)55);
      assertNull(floatArray0);
      
      ArrayUtils.swap((char[]) null, 0, (int) (short)55);
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)985);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, (-675.4));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-276.05), 764, 1436.9);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-344);
      shortArray0[1] = (short)2564;
      shortArray0[2] = (short) (-1);
      byte[] byteArray0 = new byte[5];
      ArrayUtils.swap(byteArray0, 204, 204);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (-2648L);
      Byte[] byteArray2 = new Byte[0];
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      
      ArrayUtils.swap(floatArray0, (int) (short)2564, (int) (byte)0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)9;
      intArray0[1] = (int) (byte)9;
      intArray0[2] = (int) (byte)9;
      intArray0[3] = (int) (byte)9;
      ArrayUtils.swap(intArray0, 2, (-616), 9);
      assertArrayEquals(new int[] {9, 9, 9, 9}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 204.0;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) (byte)9;
      doubleArray0[4] = (double) (byte)9;
      doubleArray0[5] = (double) (-616);
      doubleArray0[6] = (double) 9;
      doubleArray0[7] = (double) (byte)9;
      doubleArray0[8] = (double) 2;
      ArrayUtils.shift(doubleArray0, (-616), 9, (-1081));
      assertArrayEquals(new double[] {9.0, 9.0, 9.0, 9.0, (-616.0), 9.0, 9.0, 2.0, 204.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift(doubleArray0, (-2147133622), (-2147133622), 128);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)6, 2);
      assertEquals((-1), int0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (-1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.Object";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-910.4652088271758);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1650.860329791577;
      doubleArray0[4] = 1.5;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-65.772410883431);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2002;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-539), (-1953));
      assertArrayEquals(new short[] {(short)2002}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = (long) (short) (-539);
      longArray0[2] = (long) (-1953);
      longArray0[3] = (long) (-1);
      longArray0[4] = (-1482L);
      longArray0[5] = (long) (short)2002;
      longArray0[6] = (long) (short) (-539);
      longArray0[7] = (long) (short)2002;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {(-539L), (-1953L), (-1L), (-1482L), 2002L, (-539L), 2002L, 1L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 6;
      floatArray0[1] = (float) 6;
      floatArray0[2] = (float) 6;
      ArrayUtils.shift(floatArray0, (-608), 3496, (-1940));
      assertArrayEquals(new float[] {6.0F, 6.0F, 6.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2105.128);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-304.273386060069);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1055;
      floatArray0[1] = (float) 1055;
      floatArray0[2] = (float) 1055;
      floatArray0[3] = (float) 1055;
      ArrayUtils.shift(floatArray0, (-1));
      assertArrayEquals(new float[] {1055.0F, 1055.0F, 1055.0F, 1055.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('A');
      assertEquals('A', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[0];
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      ArrayUtils.shift((Object[]) doubleArray1, 2);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      byte byte0 = (byte)83;
      Byte byte1 = new Byte((byte)83);
      assertEquals((byte)83, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) 83, (Byte) byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 83, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      Float float0 = new Float((float) (short)55);
      assertEquals(55.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(323.09554);
      assertEquals(323.09555F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) (short)55);
      assertEquals(55.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((-2740.2852202726));
      assertEquals((-2740.2852F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      Float float4 = new Float(1625.6375F);
      assertEquals(1625.6375F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      ArrayUtils.swap((char[]) null, 0, (int) (short)55);
      byte byte0 = (byte)43;
      Byte byte1 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte byte2 = (byte)120;
      Byte byte3 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[9];
      byte byte4 = (byte)8;
      Byte byte5 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      
      byteArray0[0] = byte5;
      byteArray0[1] = byte3;
      byteArray0[2] = byte3;
      byteArray0[3] = byte3;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      byteArray0[6] = byte1;
      byteArray0[7] = byte1;
      byteArray0[8] = byte1;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) byte2;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) byte4;
      ArrayUtils.shift(doubleArray0, (-1), 0, (int) byte2);
      assertArrayEquals(new double[] {120.0, 43.0, 8.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(byte2 == byte4);
      assertFalse(byte2 == byte0);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      Float float0 = new Float(14.210481F);
      assertEquals(14.210481F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (-1485), (-1485), 102);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = '&';
      charArray0[4] = '&';
      charArray0[5] = '&';
      charArray0[6] = 'g';
      charArray0[7] = '&';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'g', 33);
      assertArrayEquals(new char[] {'g', 'g', 'g', '&', '&', '&', 'g', '&'}, charArray0);
      assertEquals(6, int0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, (-1), 4152}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      ArrayUtils.reverse(intArray0, 321, (-1));
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      
      ArrayUtils.shift(doubleArray0, (-3));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'P';
      charArray0[2] = '4';
      charArray0[3] = '?';
      charArray0[4] = '.';
      charArray0[5] = '5';
      charArray0[6] = '_';
      charArray0[7] = 'D';
      charArray0[8] = '>';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'D');
      assertArrayEquals(new char[] {'h', 'P', '4', '?', '.', '5', '_', 'D', '>'}, charArray0);
      assertEquals(7, int1);
      assertEquals(9, charArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.insert(1, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '\u0018';
      charArray0[2] = 'N';
      charArray0[3] = '\u0018';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0018', 'N', '\u0018', '0'}, charArray0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '\u0018');
      assertArrayEquals(new char[] {'\u0018', 'N', '\u0018', '0'}, charArray0);
      assertArrayEquals(new char[] {'\u0018', '\u0018', 'N', '\u0018', '0'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.toPrimitive((Character[]) null, '0');
      assertNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'L');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[] longArray0 = new long[8];
      longArray0[0] = (-1810L);
      longArray0[1] = (-106L);
      longArray0[2] = (long) (short)2;
      longArray0[3] = (-1L);
      longArray0[4] = (-1810L);
      longArray0[5] = 0L;
      longArray0[6] = (-106L);
      longArray0[7] = 0L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1137L));
      assertArrayEquals(new long[] {(-1810L), (-106L), 2L, (-1L), (-1810L), 0L, (-106L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-1137L), (-1810L), (-106L), 2L, (-1L), (-1810L), 0L, (-106L), 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      ArrayUtils.shift(charArray0, (-1381), (int) (short)2, 9);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1192.17));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Double double0 = new Double(123.7506);
      assertEquals(123.7506, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, 10);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-106L);
      longArray0[1] = (long) (-2234);
      longArray0[2] = (-106L);
      longArray0[3] = (-106L);
      longArray0[4] = (long) (-2234);
      longArray0[5] = (-106L);
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1810L));
      assertArrayEquals(new long[] {(-106L), (-2234L), (-106L), (-106L), (-2234L), (-106L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1810L), (-106L), (-2234L), (-106L), (-106L), (-2234L), (-106L), 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 1838, (-2234), (-1144));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1810L);
      doubleArray0[1] = 332.162644957;
      doubleArray0[2] = (double) (-106L);
      doubleArray0[0] = (double) 0L;
      doubleArray0[4] = (double) (-106L);
      doubleArray0[5] = 2095.6099551977854;
      doubleArray0[6] = (double) (-106L);
      doubleArray0[7] = (double) (-2234L);
      doubleArray0[8] = (double) (-106L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0L);
      assertArrayEquals(new double[] {0.0, 332.162644957, (-106.0), 0.0, (-106.0), 2095.6099551977854, (-106.0), (-2234.0), (-106.0)}, doubleArray0, 0.01);
      assertEquals(3, int0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-109));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)52}, byteArray0);
      assertArrayEquals(new byte[] {(byte)52}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      ArrayUtils.shift((Object[]) byteArray0, 2368, 3023, 3023);
      assertEquals(0, byteArray0.length);
      
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 3023, byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3023, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, 557, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      byte byte0 = (byte) (-81);
      byte byte1 = (byte)0;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, (int)  (-81), byte2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -81, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      Byte byte0 = ArrayUtils.get((Byte[]) null, 99);
      assertNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, 99, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, 69, byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 69, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, 63, 63);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 63, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(4, booleanArray0.length);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 953, 953, 953);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      ArrayUtils.shift((float[]) null, 97, (-524), 1873);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false, true, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-372));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1103));
      assertEquals((-1103), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-1103)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '{';
      charArray0[2] = 'y';
      charArray0[3] = 'n';
      charArray0[4] = 'L';
      charArray0[5] = '!';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'3', '{', 'y', 'n', 'L', '!'}, charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)35;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-71));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)9, (byte)35, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      
      float[] floatArray0 = new float[2];
      Byte byte0 = new Byte((byte)45);
      assertEquals((byte)45, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) (byte)35, (int) (byte)35);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = (-300);
      Integer integer0 = new Integer((-300));
      assertEquals((-300), (int)integer0);
      assertNotNull(integer0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = 'z';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'z', '\u0000', 'z', ',', ',', 'z'}, charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'z', '\u0000', 'z', ',', ',', 'z'}, charArray0);
      assertTrue(boolean1);
      assertEquals(6, charArray0.length);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)3, (int) (byte)3);
      assertArrayEquals(new char[] {'z', '\u0000', 'z', ',', ',', 'z'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = ' ';
      charArray0[2] = '{';
      charArray0[3] = 'Z';
      ArrayUtils.reverse(charArray0, (int) (byte)0, (int) (byte)15);
      assertArrayEquals(new char[] {'Z', '{', ' ', '%'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(3, int0);
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'Z';
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) ' ';
      floatArray0[4] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {90.0F, 0.0F, 0.0F, 32.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {90.0F, 0.0F, 0.0F, 32.0F, 0.0F, 90.0F, 0.0F, 0.0F, 32.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'k', (-1495));
      assertArrayEquals(new char[] {'Z', '{', ' ', '%'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(4, charArray0.length);
      assertFalse(int1 == int0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)0, (-1));
      assertArrayEquals(new char[] {'Z', '{', ' ', '%'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)15);
      assertEquals(15, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3360);
      assertEquals(3360, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      assertEquals((-1), (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[4]);
      assertEquals((-1), (int)integer5);
      assertNotNull(integer5);
      assertEquals(8, integerArray0.length);
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(6);
      assertEquals(6, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      assertEquals(0, (int)integer7);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer2));
      
      integerArray0[7] = integer7;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {0, 15, (-1), 3360, (-1), (-1), 6, 0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2085;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)2085}, shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2085);
      assertArrayEquals(new short[] {(short)2085}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = '@';
      charArray0[2] = '+';
      charArray0[3] = '=';
      charArray0[4] = 'u';
      charArray0[5] = 'h';
      charArray0[6] = 'l';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-3798), (-3798));
      assertArrayEquals(new char[] {'4', '@', '+', '=', 'u', 'h', 'l'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[15];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      byteArray0[3] = (Byte) byte0;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      
      byteArray0[4] = byte4;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte0;
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(byteArray1);
      assertEquals(14, byteArray1.length);
      assertEquals(15, byteArray0.length);
      assertEquals(3, intArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 126.0, (-712));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.insert((-712), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.reverse((boolean[]) null);
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      Byte byte0 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = '}';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'c');
      assertArrayEquals(new char[] {'(', '}'}, charArray0);
      assertArrayEquals(new char[] {'(', '}'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)14;
      Byte byte2 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte1);
      assertEquals((byte)14, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      
      byteArray0[5] = byte6;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 3119L;
      longArray0[1] = 1L;
      longArray0[2] = (-331L);
      longArray0[3] = 541L;
      longArray0[4] = 1428L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {3119L, 1L, (-331L), 541L, 1428L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      int int0 = (-1);
      ArrayUtils.reverse(charArray0, (-1), (-1));
      assertArrayEquals(new char[] {'%', '%', ' ', ' '}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(1, int1);
      assertEquals(4, booleanArray0.length);
      assertFalse(int1 == int0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      int int2 = (-3);
      Integer integer2 = new Integer((-3));
      assertEquals((-3), (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2884);
      assertEquals(2884, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2147012708);
      assertEquals(2147012708, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)int1));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int2);
      assertEquals((-3), (int)integer6);
      assertNotNull(integer6);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)int2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      
      integerArray0[6] = integer6;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 11);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)52;
      shortArray0[2] = (short) (-983);
      shortArray0[3] = (short) (-983);
      shortArray0[4] = (short)52;
      shortArray0[5] = (short) (-983);
      shortArray0[6] = (short) (-983);
      shortArray0[7] = (short)13;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)3029);
      assertArrayEquals(new short[] {(short)0, (short)52, (short) (-983), (short) (-983), (short)52, (short) (-983), (short) (-983), (short)13}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)52, (short) (-983), (short) (-983), (short)52, (short) (-983), (short) (-983), (short)13}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (short)52);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[7];
      Byte byte0 = new Byte((byte)111);
      assertEquals((byte)111, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (-213L);
      longArray0[2] = (long) (short)3029;
      longArray0[3] = (long) (short) (-983);
      longArray0[4] = (long) (short)52;
      // Undeclared exception!
      try { 
        LongBuffer.wrap(longArray0, (int) (short) (-983), 2599);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.LongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      ArrayUtils.shift((Object[]) integerArray0, (-4), 5372, (-4));
      assertEquals(6, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 48;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-808));
      assertArrayEquals(new int[] {48}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      Object object0 = ArrayUtils.get((Object[]) integerArray0, (-2336));
      assertNull(object0);
      assertEquals(6, integerArray0.length);
      
      ArrayUtils.swap((Object[]) integerArray0, (-25), 48);
      assertEquals(6, integerArray0.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (-25), 750, (-1394));
      assertEquals(6, integerArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-98);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-110));
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-98)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-98)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      ArrayUtils.shift((Object[]) integerArray0, 0, 2, 2);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 1, 6, 1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      ArrayUtils.shift((Object[]) integerArray0, (-4), 12, 12);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      intArray0[0] = 97;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 97;
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-1093), (-1093), 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      Byte[] byteArray0 = new Byte[1];
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-593L);
      longArray0[1] = (long) 0;
      longArray0[2] = (-24L);
      longArray0[3] = (-375L);
      longArray0[4] = (-24L);
      longArray0[5] = (-593L);
      longArray0[6] = (-375L);
      ArrayUtils.reverse(longArray0, 1340, 1);
      assertArrayEquals(new long[] {(-593L), 0L, (-24L), (-375L), (-24L), (-593L), (-375L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = 'Y';
      charArray0[2] = 'F';
      charArray0[3] = ')';
      charArray0[4] = '6';
      charArray0[5] = '&';
      charArray0[6] = 'P';
      charArray0[7] = '~';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'~', 'P', '&', '6', ')', 'F', 'Y', '-'}, charArray0);
      assertEquals(8, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.shift((Object[]) null, (-26));
      boolean[] booleanArray0 = new boolean[4];
      char[] charArray0 = new char[5];
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 540;
      intArray0[1] = (-6608);
      intArray0[2] = (-2049);
      intArray0[3] = (-6608);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {540, (-6608), (-2049), (-6608)}, intArray0);
      assertArrayEquals(new int[] {540, (-6608), (-2049), (-6608)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      
      intArray0[0] = 1838;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)91;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)91);
      assertArrayEquals(new short[] {(short)91}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Byte byte0 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("85", string0);
      assertNotNull(string0);
      
      Long[] longArray0 = new Long[8];
      Long long0 = new Long(1838);
      assertEquals(1838L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long(0L);
      assertEquals(0L, (long)long2);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long long3 = new Long(1097L);
      assertEquals(1097L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      
      longArray0[3] = long3;
      Long long4 = new Long((byte)85);
      assertEquals(85L, (long)long4);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      
      longArray0[4] = long4;
      try { 
        Long.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1524L);
      byte byte0 = (byte)12;
      Byte byte1 = Byte.valueOf((byte)12);
      assertEquals((byte)12, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)12;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) byte0;
      intArray0[5] = Integer.MAX_VALUE;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 12, Integer.MAX_VALUE, 12}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) (byte)12;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) (byte)12;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-1524L));
      assertArrayEquals(new double[] {12.0, 2.147483647E9, 2.147483647E9, 12.0, 2.147483647E9, 12.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1524.0), 12.0, 2.147483647E9, 2.147483647E9, 12.0, 2.147483647E9, 12.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-25);
      ArrayUtils.shuffle(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-25)}, byteArray1);
      assertEquals(1, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-25), (-947), (-947));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      Byte byte0 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byte byte3 = (byte) (-70);
      Byte byte4 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      
      Byte byte5 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte4;
      Byte byte6 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte5));
      
      byteArray0[1] = byte6;
      byteArray0[2] = byte4;
      byteArray0[3] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(charArray0, (int) byte3, 2304, (-575));
      assertArrayEquals(new char[] {'\u0000', '4'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1976.2934168391;
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '/', 87);
      assertEquals((-1), int0);
      
      Character character0 = Character.valueOf('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.insert((-2234), (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 2147012708;
      doubleArray0[2] = (double) 2147012708;
      doubleArray0[3] = (double) 7;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2.147012708E9, 7);
      assertArrayEquals(new double[] {Double.NaN, 2.147012708E9, 2.147012708E9, 7.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new double[] {Double.NaN, 2.147012708E9, 2.147012708E9, 7.0}, doubleArray0, 0.01);
      assertNull(object0);
      assertEquals(4, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1541L);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1541L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2105.128);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-304.273386060069);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2146515877;
      floatArray0[1] = (float) 2146515877;
      floatArray0[2] = (float) 2146515877;
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-331L);
      longArray0[1] = (-331L);
      longArray0[2] = (-331L);
      longArray0[3] = (long) 2146515877;
      longArray0[4] = (-331L);
      longArray0[5] = (long) 2146515877;
      longArray0[6] = (long) 2146515877;
      longArray0[7] = (long) 2146515877;
      longArray0[8] = (-331L);
      int int0 = ArrayUtils.indexOf(longArray0, 2146515877L, 2146515877);
      assertArrayEquals(new long[] {(-331L), (-331L), (-331L), 2146515877L, (-331L), 2146515877L, 2146515877L, 2146515877L, (-331L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = '%';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'%', '%', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'%', '%', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1897L);
      longArray0[1] = (-1L);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = 336.2567526193;
      doubleArray0[2] = (double) (-1897L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      int int0 = 59;
      ArrayUtils.reverse(doubleArray0, (-1), 59);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1897.0), 336.2567526193, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = 'm';
      charArray0[2] = 'L';
      charArray0[3] = 'c';
      charArray0[4] = ']';
      charArray0[5] = '(';
      charArray0[6] = '';
      charArray0[7] = '}';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'5', 'm', 'L', 'c', ']', '(', '', '}'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      try { 
        Integer.valueOf("WZvv-J4hAx2(|H");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"WZvv-J4hAx2(|H\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '\u0000');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2396.594631);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = 'g';
      charArray0[2] = '~';
      charArray0[3] = '<';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'K', 87);
      assertArrayEquals(new char[] {'1', 'g', '~', '<'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences((float[]) null, (float) 87);
      assertNull(floatArray1);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2714.28645518706;
      doubleArray0[1] = (double) (-277L);
      doubleArray0[2] = (double) (-2402L);
      doubleArray0[3] = (double) (-2402L);
      doubleArray0[4] = (double) (-2402L);
      doubleArray0[5] = (double) (-277L);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {2714.28645518706, (-277.0), (-2402.0), (-2402.0), (-2402.0), (-277.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {2714.28645518706, (-277.0), (-2402.0), (-2402.0), (-2402.0), (-277.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2714.28645518706, (-277.0), (-2402.0), (-2402.0), (-2402.0), (-277.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray2, 578.18362267998, 207);
      assertArrayEquals(new double[] {2714.28645518706, (-277.0), (-2402.0), (-2402.0), (-2402.0), (-277.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2714.28645518706, (-277.0), (-2402.0), (-2402.0), (-2402.0), (-277.0)}, doubleArray2, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1897L);
      longArray0[1] = (-1L);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1897L);
      doubleArray0[2] = (double) (short)2;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-459.07008054474016);
      doubleArray1[1] = (double) (short)2;
      doubleArray1[2] = 300.15681745;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (double) (-1L);
      doubleArray1[5] = (double) (-1630);
      ArrayUtils.swap(doubleArray1, 81, (-2918), 0);
      assertArrayEquals(new double[] {(-459.07008054474016), 2.0, 300.15681745, (-1.0), (-1.0), (-1630.0)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 7;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 9);
      assertArrayEquals(new double[] {7.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1726);
      intArray0[1] = 2147012708;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147012708, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-111);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)55);
      assertArrayEquals(new byte[] {(byte)0, (byte)55, (byte) (-111)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-36.0), (-0.6105689908278189));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-111));
      assertArrayEquals(new byte[] {(byte)0, (byte)55, (byte) (-111)}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)127);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-23.0);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)0;
      mockRandom1.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.2, double0, 0.01);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom1);
      assertEquals(0, objectArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)52);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-1), (-1));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 20);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, 2393);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2393, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = '\\';
      charArray0[2] = 'L';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-3048));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3048, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2643.4286), (-2643.4286));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap((double[]) null, (-1630), 1227, 0);
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 966.80901108951);
      assertArrayEquals(new double[] {966.80901108951}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1459.48), (double) 1227);
      assertArrayEquals(new double[] {966.80901108951}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1004);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-808));
      assertArrayEquals(new int[] {(-1004)}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      Object object0 = ArrayUtils.get((Object[]) integerArray0, (-2336));
      assertNull(object0);
      assertEquals(6, integerArray0.length);
      
      ArrayUtils.swap((Object[]) integerArray0, (-25), (-1004));
      assertEquals(6, integerArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (byte)48, 8, (int) (byte)1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.toObject(doubleArray0);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 9, 1);
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      ArrayUtils.shift((Object[]) integerArray0, (-25), 5372, (-25));
      assertEquals(6, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      Integer integer0 = new Integer((-2123));
      assertEquals((-2123), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2123);
      ArrayUtils.swap(floatArray0, (-2123), (int) integerArray0[0], (int) integerArray0[0]);
      assertArrayEquals(new float[] {(-2123.0F)}, floatArray0, 0.01F);
      assertEquals(1, integerArray0.length);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = (-1773L);
      longArray0[4] = (-1495L);
      longArray0[5] = (-1L);
      longArray0[6] = 1L;
      longArray0[7] = (-2950L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 1L, (-1773L), (-1495L), (-1L), 1L, (-2950L)}, longArray0);
      assertTrue(boolean0);
      assertEquals(8, longArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) (-2950L);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) (-1773L);
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) 1L;
      floatArray0[6] = 977.4651F;
      floatArray0[7] = (float) 0L;
      ArrayUtils.swap(floatArray0, (-1650), (-1650), (-1));
      assertArrayEquals(new float[] {1.0F, (-2950.0F), 0.0F, (-1773.0F), (-1.0F), 1.0F, 977.4651F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 205.5);
      assertArrayEquals(new double[] {3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(48, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), (-1));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2833.63958861527);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {(-2833.63958861527), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) (-1);
      floatArray0[0] = (float) (-1);
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('c');
      assertEquals('c', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'F');
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) doubleArray1[0]);
      assertArrayEquals(new double[] {(-2833.63958861527), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2833.63958861527)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-76);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)95, (byte) (-2), (byte)61, (byte) (-76)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)95, (byte) (-2), (byte)61, (byte) (-76)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Byte", e);
      }
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-57);
      Byte byte1 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = byte1;
      byteArray1[1] = (Byte) (byte)0;
      byteArray1[2] = byte1;
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = (Byte) (byte)0;
      byteArray1[5] = (Byte) (byte)0;
      byteArray1[6] = (Byte) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertFalse(boolean0);
      assertEquals(7, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) byte0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {(-57L)}, longArray1);
      assertArrayEquals(new long[] {(-57L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short) byte0);
      assertArrayEquals(new short[] {(short) (-57)}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3525.3875487192063);
      doubleArray0[1] = (-0.6105689908278189);
      doubleArray0[2] = (-3525.3875487192063);
      doubleArray0[3] = (-0.6105689908278189);
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)77;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {77L}, longArray0);
      assertArrayEquals(new long[] {77L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3525.3875487192063);
      doubleArray0[1] = (-0.6105689908278189);
      doubleArray0[2] = (-3525.3875487192063);
      doubleArray0[3] = (-0.6105689908278189);
      Byte[] byteArray0 = new Byte[4];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-23.0);
      doubleArray0[1] = (double) 2147012708;
      doubleArray0[2] = (double) 2147012708;
      doubleArray0[3] = (-23.0);
      doubleArray0[4] = (-23.0);
      doubleArray0[5] = (double) (byte)120;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-23.0), 7);
      assertArrayEquals(new double[] {(-23.0), 2.147012708E9, 2.147012708E9, (-23.0), (-23.0), 120.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new double[] {(-23.0), 2.147012708E9, 2.147012708E9, (-23.0), (-23.0), 120.0}, doubleArray0, 0.01);
      assertNull(object0);
      assertEquals(6, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = ':';
      charArray0[3] = '`';
      charArray0[4] = '7';
      charArray0[5] = '`';
      ArrayUtils.swap(charArray0, 1, (-1726), 0);
      assertArrayEquals(new char[] {'`', '`', ':', '`', '7', '`'}, charArray0);
      assertEquals(6, charArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)11;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)1, (byte)16);
      assertArrayEquals(new byte[] {(byte)118, (byte)11}, byteArray0);
      assertArrayEquals(new byte[] {(byte)118, (byte)16, (byte)11}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(5, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)16;
      shortArray0[1] = (short) (byte)16;
      shortArray0[2] = (short) (byte)118;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (byte)118);
      assertArrayEquals(new short[] {(short)16, (short)16, (short)118}, shortArray0);
      assertArrayEquals(new short[] {(short)16, (short)16}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 7;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 9);
      assertArrayEquals(new double[] {7.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.shift(booleanArray0, 0, (-1726), (-1709));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'E';
      charArray0[2] = '?';
      charArray0[3] = 'q';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '', 0);
      assertArrayEquals(new char[] {'q', 'E', '?', 'q'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(boolean0);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 540;
      intArray0[1] = (-6608);
      intArray0[2] = (-2049);
      intArray0[3] = (-6608);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {540, (-6608), (-2049), (-6608)}, intArray0);
      assertArrayEquals(new int[] {540, (-6608), (-2049), (-6608)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      intArray0[0] = 1838;
      floatArray0[1] = (float) (-6608);
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-6608.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-6608.0F), 0.0F, (-6608.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = 'k';
      charArray0[7] = 'k';
      charArray0[8] = 'k';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'D', 4274);
      assertArrayEquals(new char[] {'}', 'k', 'k', 'k', 'k', 'k', 'k', 'k', 'k'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(9, charArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      ArrayUtils.reverse((char[]) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 120;
      intArray0[1] = 0;
      intArray0[2] = (-846);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 441);
      assertArrayEquals(new int[] {120, 0, (-846)}, intArray0);
      assertArrayEquals(new int[] {441, 120, 0, (-846)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-846);
      doubleArray0[1] = (double) 120;
      doubleArray0[2] = (double) 441;
      doubleArray0[3] = (double) 120;
      doubleArray0[4] = (double) 120;
      doubleArray0[5] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, (double) 120);
      assertArrayEquals(new double[] {(-846.0), 120.0, 441.0, 120.0, 120.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, int0);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-846);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 5, (-1729));
      assertArrayEquals(new float[] {(-846.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)15;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-22), (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-22), (byte)15}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((int) (byte)15, shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = ' ';
      charArray0[2] = '{';
      charArray0[3] = 'Z';
      ArrayUtils.reverse(charArray0, (int) (byte) (-22), (int) (byte)15);
      assertArrayEquals(new char[] {'Z', '{', ' ', '%'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'Z';
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (byte)15);
      assertArrayEquals(new float[] {90.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {90.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-921.0);
      doubleArray0[1] = (double) 'Z';
      doubleArray0[2] = (double) (byte)15;
      doubleArray0[3] = (double) '{';
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ' ';
      charArray1[1] = '%';
      charArray1[2] = 'Z';
      charArray1[3] = ' ';
      charArray1[4] = 'Z';
      charArray1[5] = 'Z';
      charArray1[6] = ' ';
      charArray1[7] = 'Z';
      charArray1[8] = '{';
      ArrayUtils.reverse(charArray1);
      assertArrayEquals(new char[] {'{', 'Z', ' ', 'Z', 'Z', ' ', 'Z', '%', ' '}, charArray1);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-2643.43));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1897L);
      longArray0[1] = (-1L);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1897L);
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2396.594631);
      assertArrayEquals(new double[] {(-1.0), (-1897.0), 2.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      ArrayUtils.swap(booleanArray0, 105, 105, 105);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, 60, 210);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)118;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)115, (byte)97, (byte) (-64), (byte) (-49), (byte)78, (byte)118}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray0, (byte)97);
      assertArrayEquals(new byte[] {(byte)5, (byte)115, (byte)97, (byte) (-64), (byte) (-49), (byte)78, (byte)118, (byte)97}, byteArray2);
      assertArrayEquals(new byte[] {(byte)5, (byte)115, (byte)97, (byte) (-64), (byte) (-49), (byte)78, (byte)118}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(8, byteArray2.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 99, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      intArray0[1] = 0;
      intArray0[2] = 1541;
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      byte[] byteArray0 = new byte[8];
      double double0 = mockRandom1.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      mockRandom1.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      double double1 = mockRandom0.nextDouble();
      assertEquals(0.3, double1, 0.01);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(mockRandom0, mockRandom1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (Random) mockRandom1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-2884);
      shortArray0[2] = (short) (-2884);
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (short) (-2884));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-2884)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.swap(intArray1, (int) (short) (-2884), 2147122987, 1889);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-2884)}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(0, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      Short short0 = new Short((short) (-2107));
      assertEquals((short) (-2107), (short)short0);
      assertNotNull(short0);
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertSame(floatArray0, floatArray2);
      assertSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)37;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)37, (short)0}, shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)37, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)37, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)37;
      shortArray0[1] = (short)37;
      shortArray0[2] = (short)37;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)37, (short)37, (short)37}, shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)37;
      doubleArray0[1] = (double) ':';
      doubleArray0[2] = (double) '`';
      doubleArray0[3] = (double) (short)37;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {58.0, 96.0, 37.0, 37.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-544.0763F);
      floatArray0[2] = (-2460.215F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1677.766F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 3396.374F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, (-544.0763F), (-2460.215F), 0.0F, (-1677.766F), 0.0F, 3396.374F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(7, floatArray0.length);
      assertEquals(3, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals("{0, 3, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)72}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2460.215F);
      doubleArray0[0] = 1204.11;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {1204.11, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1204.11, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)72;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)72;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)72, (short)0, (short)72}, shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      ArrayUtils.shift(doubleArray0, (-2873));
      assertEquals(13, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(13, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 124);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'N';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'N', '\\'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.swap(shortArray0, (-4), 1884, 1884);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '\\';
      floatArray0[1] = (float) '\\';
      floatArray0[2] = (float) 'N';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 124, 127);
      assertArrayEquals(new float[] {92.0F, 92.0F, 78.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\\');
      assertArrayEquals(new char[] {'N'}, charArray1);
      assertArrayEquals(new char[] {'N', '\\'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      char[] charArray2 = ArrayUtils.add(charArray0, '#');
      assertArrayEquals(new char[] {'N', '\\', '#'}, charArray2);
      assertArrayEquals(new char[] {'N', '\\'}, charArray0);
      assertNotNull(charArray2);
      assertEquals(3, charArray2.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, (-1), 4152}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift((char[]) null, 1, (-138), 31);
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-1), 1019);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, Integer.MAX_VALUE, 4152);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 11);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)449;
      shortArray0[1] = (short) (-412);
      ArrayUtils.swap(shortArray0, 2, (-2902), (-1923));
      assertArrayEquals(new short[] {(short)449, (short) (-412)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-412));
      assertArrayEquals(new short[] {(short)449, (short) (-412)}, shortArray0);
      assertArrayEquals(new short[] {(short)449}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-4), (-4));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2105.128);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-304.273386060069);
      ArrayUtils.shift((char[]) null, 1, (-138), 1);
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 85, 1);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short)46;
      shortArray0[2] = (short)46;
      ArrayUtils.swap(shortArray0, Integer.MAX_VALUE, 2147);
      assertArrayEquals(new short[] {(short)13, (short)46, (short)46}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, (-1), 4152}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      ArrayUtils.shift(charArray0, 4152, 0, 0);
      assertArrayEquals(new char[] {'H', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-1), 3105);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)46;
      shortArray0[1] = (short)3;
      ArrayUtils.swap(shortArray0, 1706, (-236));
      assertArrayEquals(new short[] {(short)46, (short)3}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-25);
      floatArray0[1] = (float) 5372;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-25), 109);
      assertArrayEquals(new float[] {(-25.0F), 5372.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-25.0F), 5372.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1808, 1808);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-300);
      Integer integer0 = new Integer((-300));
      assertEquals((-300), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-300));
      assertEquals((-300), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-2141434397));
      assertEquals((-2141434397), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 69);
      assertArrayEquals(new int[] {(-300)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray0);
      assertArrayEquals(new int[] {(-300)}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short) (-1444);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1243, (-300));
      assertArrayEquals(new short[] {(short)4, (short) (-1444)}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) null);
      assertFalse(boolean0);
      assertEquals(1, integerArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 69;
      doubleArray0[1] = (double) 69;
      doubleArray0[2] = (double) (short)1243;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 69, (double) (short)4);
      assertArrayEquals(new double[] {69.0, 69.0, 1243.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-99);
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)75, (byte) (-1), (byte)82, (byte)0, (byte) (-99)}, byteArray0);
      assertTrue(boolean1);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '[';
      charArray0[3] = '/';
      charArray0[4] = '^';
      charArray0[5] = 'l';
      ArrayUtils.swap(charArray0, (int) (byte)33, (-864), (-864));
      assertArrayEquals(new char[] {'^', '^', '[', '/', '^', 'l'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      org.evosuite.runtime.Random.setNextRandom((-2436));
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'v';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2436), 6);
      assertArrayEquals(new float[] {118.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {118.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2899.13643855917, 488);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)52);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) floatArray1, (Random) mockRandom0);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) floatArray1, (Object[]) floatArray1);
      assertTrue(boolean0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-910.4652088271758);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1650.860329791577;
      doubleArray0[4] = 1.5;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-65.772410883431);
      doubleArray1[2] = 1650.860329791577;
      doubleArray1[3] = 1650.860329791577;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.5, (-910.4652088271758), 0.0, 1650.860329791577, 1.5, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-65.772410883431), 1650.860329791577, 1650.860329791577}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.5, (-910.4652088271758), 1.5, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-51);
      ArrayUtils.reverse(byteArray0, (-4750), 52);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)6, (byte)0, (byte)6}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom(2045);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2049.0F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 310);
      assertArrayEquals(new float[] {(-2049.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2049.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 1.5;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) (byte)6;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) 1650.860329791577;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-354), (-354));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -354, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 48;
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(48);
      assertEquals(48, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(int0);
      assertEquals(48, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(48, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer(48);
      assertEquals(48, (int)integer4);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      
      integerArray0[5] = integer4;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertArrayEquals(new int[] {48, 48, 48, 48, 48, 48}, intArray0);
      assertNotNull(intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      Byte byte1 = new Byte((byte)61);
      assertEquals((byte)61, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte1);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(byte0.equals((Object)byte1));
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry4;
      Byte byte2 = new Byte((byte)61);
      assertEquals((byte)61, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-38));
      assertEquals((byte) (-38), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte2, byte3);
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte3));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeAllOccurrences(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry5);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(5, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte3));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntry5, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry5, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry5, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry5, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry5, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = 'x';
      charArray0[2] = 'A';
      charArray0[3] = '\\';
      charArray0[4] = 'x';
      charArray0[5] = 'Y';
      charArray0[6] = '';
      charArray0[7] = 'A';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-668), 'J');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -668, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 658, '.');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 658, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-23));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 49L;
      longArray0[2] = (-1L);
      longArray0[3] = (-45L);
      longArray0[4] = (-1L);
      longArray0[5] = (-1L);
      longArray0[6] = 0L;
      longArray0[8] = (long) 2603;
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertArrayEquals(new long[] {49L, 0L, (-1L), (-45L), (-1L), (-1L), 0L, 0L, 2603L}, longArray0);
      assertFalse(boolean0);
      assertEquals(9, longArray0.length);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte1;
      byteArray0[3] = byte0;
      byteArray0[4] = byte1;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0, (Comparator<Byte>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(9, booleanArray0.length);
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ArrayUtils.isSorted((Byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)77;
      longArray0[1] = (long) (byte)77;
      longArray0[2] = (long) (byte)77;
      longArray0[3] = (long) (byte)77;
      longArray0[4] = (long) (byte)77;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {77L, 77L, 77L, 77L, 77L}, longArray1);
      assertArrayEquals(new long[] {77L, 77L, 77L, 77L, 77L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false, false, false}, booleanArray0));
      assertFalse(boolean2);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = Integer.valueOf((int) (byte)77);
      assertEquals(77, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2322);
      assertEquals(2322, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      int int0 = 2;
      Integer integer2 = new Integer(2);
      assertEquals(2, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertEquals(2, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      
      integerArray0[4] = integer4;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 82, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      intArray0[3] = 1541;
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1963);
      assertArrayEquals(new int[] {(-331), 0, 0, 1541, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(9, intArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      char[] charArray0 = new char[2];
      intArray0[3] = (int) 'j';
      charArray0[1] = 'j';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '9');
      assertArrayEquals(new char[] {'\u0000', 'j'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'j'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-1130), (-405));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1130);
      floatArray0[1] = (float) (-1130);
      floatArray0[2] = (float) (-1130);
      floatArray0[3] = (float) (-405);
      floatArray0[4] = (float) (-405);
      floatArray0[5] = (float) (-1130);
      floatArray0[6] = (float) (-1130);
      floatArray0[7] = (float) (-405);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-312.01F));
      assertArrayEquals(new float[] {(-1130.0F), (-1130.0F), (-1130.0F), (-405.0F), (-405.0F), (-1130.0F), (-1130.0F), (-405.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1130.0F), (-1130.0F), (-1130.0F), (-405.0F), (-405.0F), (-1130.0F), (-1130.0F), (-405.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-405);
      intArray0[1] = (-1130);
      intArray0[2] = (-405);
      intArray0[3] = 34;
      intArray0[4] = (-405);
      intArray0[5] = (-405);
      intArray0[6] = (-405);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1130));
      assertArrayEquals(new int[] {(-405), (-405), 34, (-405), (-405), (-405)}, intArray1);
      assertArrayEquals(new int[] {(-405), (-1130), (-405), 34, (-405), (-405), (-405)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      Byte byte0 = new Byte((byte) (-40));
      assertEquals((byte) (-40), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object1, (Object) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      int[] intArray0 = new int[12];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2335);
      assertNotNull(bitSet0);
      assertEquals(12, intArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 99, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      intArray0[1] = 0;
      intArray0[2] = 1541;
      intArray0[3] = 99;
      intArray0[4] = 99;
      intArray0[5] = 99;
      intArray0[6] = 1734;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2125791893, (-2855));
      assertArrayEquals(new int[] {(-331), 0, 1541, 99, 99, 99, 1734, 0, 0}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(9, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      Byte byte0 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte)62);
      assertEquals((byte)62, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1681);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 2926);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3037;
      intArray0[1] = 2603;
      intArray0[2] = 7967;
      ArrayUtils.swap(intArray0, 7967, 3037, 12);
      assertArrayEquals(new int[] {3037, 2603, 7967}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte byte0 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, 1, byte0);
      assertEquals((byte)87, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      boolean boolean1 = ArrayUtils.isSameType(byte1, byte2);
      assertTrue(boolean1);
      assertTrue(byte0.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte2));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 3037;
      longArray0[2] = (long) 3037;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {1L, 3037L, 3037L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3037;
      intArray1[1] = 3037;
      intArray1[2] = 12;
      intArray1[3] = 1;
      intArray1[4] = 2603;
      intArray1[5] = 7967;
      intArray1[6] = 12;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-1034));
      assertArrayEquals(new int[] {3037, 3037, 12, 1, 2603, 7967, 12}, intArray1);
      assertNotNull(bitSet0);
      assertEquals(7, intArray1.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertNull(object0);
      assertEquals(8, objectArray0.length);
      
      objectArray0[0] = null;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      ArrayUtils.shift(doubleArray0, 2);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = 8;
      ArrayUtils.swap(intArray0, 8, 2, (int) (byte) (-25));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte byte0 = (byte)102;
      Byte byte1 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = null;
      byteArray0[1] = byte1;
      int int1 = (-467);
      Byte byte2 = ArrayUtils.get(byteArray0, (-467), (Byte) byte0);
      assertEquals((byte)102, (byte)byte2);
      assertNotNull(byte2);
      assertEquals(2, byteArray0.length);
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, byte2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 109L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 623;
      intArray0[1] = 623;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {623, 623}, intArray0);
      assertArrayEquals(new int[] {623, 623}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (-1930.956F));
      assertNull(floatArray0);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, (-426));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -426, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(byteArray0);
      assertNotNull(map0);
      assertEquals(0, byteArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-2143264622));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2143264622, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.insert((-2234), (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-4915);
      short short0 = (short)7967;
      shortArray0[1] = (short)7967;
      short short1 = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-983);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)52;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)13);
      assertArrayEquals(new short[] {(short) (-4915), (short)7967, (short)0, (short)0, (short) (-983), (short)0, (short)52}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4915), (short)7967, (short)0, (short)0, (short) (-983), (short)0, (short)52}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short)0);
      assertArrayEquals(new short[] {(short) (-4915), (short)7967, (short)0, (short)0, (short) (-983), (short)0, (short)52}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4915), (short)7967, (short)0, (short)0, (short) (-983), (short)0, (short)52}, shortArray1);
      assertNotNull(bitSet0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{2, 3, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Byte[]) null, (-1672));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1672, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 99, (-331), 1541);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      intArray0[1] = 0;
      Character character0 = new Character('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      Double double0 = new Double(1541);
      assertEquals(1541.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.shift((Object[]) null, 1541);
  }

  @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1265, 2368, 2368);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte byte0 = new Byte((byte) (-44));
      assertEquals((byte) (-44), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.shift((Object[]) byteArray0, (int) (byte) (-44));
      assertEquals(0, byteArray0.length);
      
      Byte byte1 = ArrayUtils.get(byteArray0, (-433));
      assertNull(byte1);
      assertEquals(0, byteArray0.length);
      
      Byte byte2 = Byte.valueOf((byte) (-44));
      assertEquals((byte) (-44), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte2);
      assertTrue(boolean0);
      assertTrue(byte0.equals((Object)byte2));
      assertTrue(byte2.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      char[] charArray0 = new char[7];
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      ArrayUtils.shift((Object[]) integerArray0, 0, 0, 0);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElements((AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null, (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) '\u0000';
      doubleArray0[4] = (double) '\u0000';
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 0.0;
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[1] = double0;
      doubleArray1[2] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)1;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[2] = (byte)41;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-83));
      assertArrayEquals(new byte[] {(byte)14, (byte)0, (byte)41}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, 1734.0, (-1704.2065658));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Short short0 = new Short((byte)14);
      assertEquals((short)14, (short)short0);
      assertNotNull(short0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'M';
      charArray0[2] = '\\';
      charArray0[3] = 'r';
      charArray0[4] = '\\';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-2833), 'b');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2833, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2792.41064096994));
      assertArrayEquals(new double[] {(-2792.41064096994)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      char char0 = '?';
      Character character0 = Character.valueOf('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('?', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = (-3589L);
      longArray0[7] = 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 1L, 0L, 0L, 0L, (-3589L), 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(8, longArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1666);
      shortArray0[1] = (short)1233;
      shortArray0[2] = (short)4071;
      shortArray0[3] = (short) (-216);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)2;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short) (-1666), (short)1233, (short)4071, (short) (-216), (short)0, (short)2, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1666), (short)1233, (short)4071, (short) (-216), (short)0, (short)2}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 332.162644957);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Character[] characterArray0 = new Character[9];
      char char0 = 'x';
      Character character0 = Character.valueOf('x');
      assertEquals('x', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals('x', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('Q');
      assertEquals('Q', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = new Character('Q');
      assertEquals('Q', (char)character3);
      assertNotNull(character3);
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('A');
      assertEquals('A', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('S');
      assertEquals('S', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      
      characterArray0[5] = character5;
      Character character6 = new Character('g');
      assertEquals('g', (char)character6);
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)char0));
      
      characterArray0[6] = character6;
      Character character7 = new Character('A');
      assertEquals('A', (char)character7);
      assertNotNull(character7);
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character3));
      assertTrue(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      
      characterArray0[7] = character7;
      Character character8 = Character.valueOf('M');
      assertEquals('M', (char)character8);
      assertNotNull(character8);
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)char0));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character3));
      
      characterArray0[8] = character8;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(9, characterArray0.length);
      assertEquals(9, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 3190, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3190, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)1, (byte)1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = 'z';
      charArray0[2] = '.';
      charArray0[3] = 'i';
      charArray0[4] = '~';
      charArray0[5] = 'A';
      charArray0[6] = 'z';
      charArray0[7] = ':';
      charArray0[8] = '`';
      ArrayUtils.swap(charArray0, 1, (-1726), 0);
      assertArrayEquals(new char[] {'V', 'z', '.', 'i', '~', 'A', 'z', ':', '`'}, charArray0);
      assertEquals(9, charArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)28;
      byteArray0[8] = (byte) (-62);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)11, (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)61;
      Byte byte1 = new Byte((byte)61);
      assertEquals((byte)61, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (-1192);
      shortArray0[2] = (short)2;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)91);
      assertArrayEquals(new short[] {(short)61, (short) (-1192), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)61, (short) (-1192), (short)2}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)2;
      longArray0[1] = (long) (short)61;
      longArray0[2] = (long) (short) (-1192);
      longArray0[3] = (long) (short) (-1192);
      longArray0[4] = 2611L;
      longArray0[5] = (long) (short)2;
      longArray0[6] = (long) (short)2;
      longArray0[7] = (long) (short) (-1192);
      ArrayUtils.shift(longArray0, 8192, 1541, (int) (short)91);
      assertArrayEquals(new long[] {2L, 61L, (-1192L), (-1192L), 2611L, 2L, 2L, (-1192L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      ArrayUtils.swap((byte[]) null, (-1885), (int) (short)91);
  }

  @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-344);
      shortArray0[1] = (short)2564;
      shortArray0[2] = (short) (-1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ArrayUtils.swap(byteArray0, 204, 204);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (-2648L);
      Byte[] byteArray2 = new Byte[0];
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      
      ArrayUtils.swap(floatArray0, (-3315), (int) (byte)0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1800));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      ArrayUtils.swap(byteArray0, 101, 101, (int) (byte)114);
      assertArrayEquals(new byte[] {(byte)114}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-2334.1174F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)64);
      assertEquals((byte)64, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-111);
      ArrayUtils.swap((char[]) null, 256, 0);
      ArrayUtils.swap(byteArray0, (int) (byte)55, 8);
      assertArrayEquals(new byte[] {(byte)0, (byte)55, (byte) (-111)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(4378L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)55, (byte) (-111)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)211);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      Float float0 = new Float((float) (short)55);
      assertEquals(55.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(323.09554);
      assertEquals(323.09555F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) (short)55);
      assertEquals(55.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float((-2740.2852202726));
      assertEquals((-2740.2852F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Float float4 = new Float(1625.6375F);
      assertEquals(1625.6375F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (short)55);
      assertNull(floatArray0);
      
      ArrayUtils.swap((char[]) null, 0, (int) (short)55);
      byte byte0 = (byte)1;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      ArrayUtils.swap(byteArray0, (int) (short)55, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)1}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Byte[] byteArray2 = new Byte[3];
      byteArray2[0] = (Byte) (byte)1;
      byteArray2[1] = (Byte) (byte)1;
      byteArray2[2] = (Byte) (byte)0;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertNotNull(byteArray3);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray3.length);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      
      ArrayUtils.swap((float[]) null, (int) byte0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.insert((-2234), (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-4915);
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)0;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)106;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((int) (byte)106, shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 769, (int) (byte)106);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.contains(longArray0, 92L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, 92L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 540;
      intArray0[1] = (-6608);
      intArray0[2] = (-2049);
      intArray0[3] = (-6608);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {540, (-6608), (-2049), (-6608)}, intArray0);
      assertArrayEquals(new int[] {540, (-6608), (-2049), (-6608)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      intArray0[0] = 1838;
      floatArray0[1] = (float) (-6608);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 540);
      assertArrayEquals(new float[] {0.0F, (-6608.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-6608.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray1 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-6608);
      doubleArray0[1] = (double) 1838;
      doubleArray0[2] = (double) (-6608);
      doubleArray0[3] = (double) (-3722);
      doubleArray0[4] = (double) (-6608);
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = (double) (-2791);
      doubleArray0[7] = (double) (-6608);
      doubleArray0[8] = (double) 1838;
      ArrayUtils.swap(doubleArray0, 6, (-6608));
      assertArrayEquals(new double[] {(-2791.0), 1838.0, (-6608.0), (-3722.0), (-6608.0), 6.0, (-6608.0), (-6608.0), 1838.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      char[] charArray0 = new char[7];
      ArrayUtils.shift(charArray0, (int) (short) (-1106), 60, (int) (short) (-1106));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      char[] charArray0 = new char[7];
      ArrayUtils.shift(charArray0, (int) (short)2, 60, (int) (short)2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      char[] charArray0 = new char[7];
      ArrayUtils.shift(charArray0, (int) (short) (-1119), 60, (int) (short) (-1119));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1810L);
      longArray0[3] = (long) (short)2;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-106L));
      assertArrayEquals(new long[] {0L, 0L, (-1810L), 2L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-106L), 0L, 0L, (-1810L), 2L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = 'H';
      ArrayUtils.shift(charArray0, (-1381), 1838, 2588);
      assertArrayEquals(new char[] {'\"', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)85;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)85);
      assertArrayEquals(new short[] {(short)85}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(1, shortArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (byte) (-14));
      assertArrayEquals(new double[] {(-14.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'I');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1.0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), (-1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '3';
      int int0 = ArrayUtils.indexOf(charArray0, 'E', (int) '3');
      assertArrayEquals(new char[] {'4', '3'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.reverse((long[]) null);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '3';
      int int0 = ArrayUtils.indexOf(charArray0, 'E', 0);
      assertArrayEquals(new char[] {'4', '3'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.reverse((long[]) null);
      Byte byte0 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (double) '4';
      doubleArray0[2] = (double) 'E';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-23.0), 2147012708);
      assertArrayEquals(new double[] {69.0, 52.0, 69.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'm', (int) (byte) (-111));
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      char[] charArray0 = new char[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'm', (-628));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      char[] charArray0 = new char[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'm', (int) 'm');
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 59;
      objectArray0[2] = (Object) 59;
      objectArray0[3] = (Object) 0.0F;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], 59);
      assertNotNull(bitSet0);
      assertEquals(4, objectArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'J');
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '&');
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 25L;
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      longArray0[3] = (-851L);
      longArray0[4] = (long) (byte) (-105);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (byte) (-105);
      longArray0[7] = 0L;
      longArray0[8] = 0L;
      ArrayUtils.shift(longArray0, (-372), 0, 97);
      assertArrayEquals(new long[] {25L, (-1L), 0L, (-851L), (-105L), 0L, (-105L), 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      Byte byte0 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-2));
      assertEquals((byte) (-2), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-50));
      assertEquals((byte) (-50), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = byte2;
      byteArray1[1] = (Byte) (byte) (-105);
      byteArray1[2] = byte2;
      int[] intArray0 = new int[0];
      Byte[] byteArray2 = ArrayUtils.removeAll(byteArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'O';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'O');
      assertArrayEquals(new char[] {'h', 'O'}, charArray0);
      assertArrayEquals(new char[] {'h'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = new Byte[0];
      boolean boolean1 = ArrayUtils.isArrayIndexValid(byteArray0, (-865));
      assertFalse(boolean1);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {1, (-1)}, intArray0);
      assertArrayEquals(new int[] {1, (-1), 4152}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, false, true, false}, booleanArray0));
      assertEquals((-1), int1);
      assertEquals(9, booleanArray0.length);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-68), (byte)72}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte) (-105);
      byteArray1[1] = (Byte) (byte) (-105);
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray1, (-2723));
      assertFalse(boolean0);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-619));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      int[] intArray0 = new int[5];
      ArrayUtils.shift(intArray0, 10);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.shift((int[]) null, 10, 10, 10);
  }

  @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-2884);
      shortArray0[2] = (short) (-2884);
      shortArray0[3] = (short)1;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-2884));
      assertArrayEquals(new short[] {(short)0, (short) (-2884), (short) (-2884), (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.shift(shortArray0, (-1195), 5, (int) (short)1);
      assertArrayEquals(new short[] {(short)1, (short)0, (short) (-2884), (short) (-2884)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1039.5617118566;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (-1195);
      doubleArray0[3] = (double) (short) (-2884);
      doubleArray0[4] = (double) (-1195);
      ArrayUtils.shift(doubleArray0, (int) (short) (-2884), 2, (-1195));
      assertArrayEquals(new double[] {1.0, 1039.5617118566, (-1195.0), (-2884.0), (-1195.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-2884);
      longArray0[1] = (long) (-1195);
      longArray0[2] = (long) (short) (-2884);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 5);
      assertArrayEquals(new long[] {5L, (-2884L), (-1195L), (-2884L)}, longArray1);
      assertArrayEquals(new long[] {(-2884L), (-1195L), (-2884L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1039.5617118566, (-1195.0), (-2884.0), (-1195.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1039.5617118566, (-1195.0), (-2884.0), (-1195.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayUtils.shift(doubleArray0, 46);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 77);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-31);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-31), (byte) (-31)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[4] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.swap(booleanArray0, (-957), (-957), 417);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(doubleArray0, (-1780), 3889, (-2674));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 922);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 17, (int) (byte)15, (-3197));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 77);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-31);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-31), (byte) (-31)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 2441.0, 77);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(10, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(10, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, (-1542), (-1542), 689);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (int) (short) (-1), 0, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-25);
      ArrayUtils.shuffle(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-25)}, byteArray2);
      assertEquals(1, byteArray2.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-25), (-947), 1072);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 262.9;
      doubleArray0[2] = 4906.08;
      doubleArray0[3] = 262.9;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4906.08;
      doubleArray1[1] = (-1425.744981756);
      doubleArray1[2] = 140.994898161;
      doubleArray1[1] = 4906.08;
      doubleArray1[6] = 4906.08;
      doubleArray1[7] = 4906.08;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 262.9, 4906.08, 262.9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4906.08, 4906.08, 140.994898161, 0.0, 0.0, 0.0, 4906.08, 4906.08}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {262.9, 262.9}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      Byte byte0 = new Byte((byte)37);
      assertEquals((byte)37, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)62);
      assertEquals((byte)62, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)37);
      assertEquals((byte)37, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 2469L);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-425.60342));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-425.60342)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-425.60342)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-425.60342)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 974.7F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {974.7F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 974.7F;
      doubleArray0[1] = (double) 974.7F;
      doubleArray0[2] = (double) 974.7F;
      doubleArray0[3] = (double) 974.7F;
      doubleArray0[4] = (double) 974.7F;
      doubleArray0[5] = (double) 974.7F;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {974.7000122070312, 974.7000122070312, 974.7000122070312, 974.7000122070312, 974.7000122070312, 974.7000122070312}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      ArrayUtils.reverse((byte[]) null, (-2140622896), (-2663));
  }

  @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-910.4652088271758);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1650.860329791577;
      doubleArray0[4] = 1.5;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-65.772410883431);
      doubleArray1[2] = 1650.860329791577;
      doubleArray1[3] = 1650.860329791577;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.5, (-910.4652088271758), 0.0, 1650.860329791577, 1.5, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-65.772410883431), 1650.860329791577, 1650.860329791577}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.5, (-910.4652088271758), 1.5, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-51);
      ArrayUtils.reverse(byteArray0, (-4750), 52);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)0, (byte)0, (byte)6}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 338, 338, 112);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.reverse((int[]) null, 112, 112);
  }

  @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)53);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      Byte[] byteArray1 = new Byte[2];
      Byte byte0 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[0] = byte0;
      Byte byte1 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray1[1] = byte1;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)35);
      assertArrayEquals(new byte[] {(byte)52, (byte)35}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2899.13643855917, 488);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)52);
      assertNull(byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      byte[] byteArray1 = ArrayUtils.add((byte[]) null, (byte)94);
      assertArrayEquals(new byte[] {(byte)94}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (byte)94;
      floatArray0[2] = (float) (byte)52;
      floatArray0[4] = (float) (byte)52;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = 2435.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte) (-18));
      assertArrayEquals(new float[] {(-1.0F), 94.0F, 52.0F, 0.0F, 52.0F, (-1.0F), 2435.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[5];
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 3912);
  }

  @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 1637, 1637);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)11);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[3] = byte3;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 2588, (-957), (-3806));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(doubleArray0, 2633, 1878, (-3806));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      float[] floatArray1 = new float[0];
      ArrayUtils.shift(floatArray1, (-957), 2571, (-957));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      float[] floatArray0 = new float[9];
      ArrayUtils.shift(floatArray0, (-3298), 6, 6);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-4385), 2, 2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = 'y';
      Character character0 = Character.valueOf('y');
      assertEquals('y', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, 1, 1, 32);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      float[] floatArray0 = new float[9];
      ArrayUtils.shift(floatArray0, (-3290), 24, 24);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 48;
      doubleArray0[1] = (-1.0);
      ArrayUtils.indexOf(doubleArray0, (double) 48);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.addAll(floatArray0, floatArray0);
      Character.valueOf('Q');
      Character.valueOf('u');
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'V');
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'h');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'h'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      ArrayUtils.subarray(byteArray0, 0, 0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1643.3F;
      floatArray0[1] = (float) 1055;
      floatArray0[2] = (float) 0;
      ArrayUtils.shift(floatArray0, 0);
      Character character0 = new Character('i');
      Character character1 = new Character('O');
      Double double0 = new Double(100.0);
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.shift(floatArray0, (-1945), (-1945), 1);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 4184;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 4184, 0, 0, 4184, 0}, intArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-82.1F);
      floatArray0[1] = 1643.3F;
      floatArray0[2] = (float) 0;
      ArrayUtils.shift(floatArray0, 1055);
      assertArrayEquals(new float[] {1643.3F, 0.0F, (-82.1F)}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('i');
      characterArray0[0] = character0;
      Character character1 = new Character('R');
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('r');
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('c');
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character1);
      assertArrayEquals(new char[] {'i', 'R', 'r', 'c'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 2727;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2727;
      floatArray0[3] = (float) 2727;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 2727.0F, 0.0F, 2727.0F, 0.0F, 2727.0F, 0.0F, 2727.0F}, floatArray1, 0.01F);
      
      char char0 = 'u';
      Character character0 = Character.valueOf('u');
      Character character1 = Character.valueOf('u');
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character0;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      characterArray0[4] = character1;
      characterArray0[5] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertArrayEquals(new char[] {'u', 'u', 'u', 'u', 'u', 'u'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.toObject(floatArray0);
      ArrayUtils.swap(floatArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'h');
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[3];
      intArray1[1] = 97;
      int[] intArray2 = ArrayUtils.addAll(intArray1, (int[]) null);
      assertNotNull(intArray2);
      assertEquals(3, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 2727, 204, 204);
      Byte byte0 = new Byte((byte) (-103));
      byte byte1 = (byte)5;
      Byte byte2 = new Byte((byte)5);
      Byte byte3 = new Byte((byte)5);
      Byte byte4 = new Byte((byte) (-103));
      Byte byte5 = new Byte((byte)5);
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = byte5;
      byteArray1[1] = byte0;
      byteArray1[2] = byte2;
      byteArray1[3] = byte0;
      Byte byte6 = new Byte(byte1);
      ArrayUtils.get(byteArray1, 23, byte6);
      Object object0 = new Object();
      ArrayUtils.hashCode(object0);
      byte[] byteArray2 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(3, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-2));
      ArrayUtils.hashCode((Object) byte0);
  }

  @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 204, 204, 204);
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      byte byte2 = (byte)59;
      Byte byte3 = new Byte((byte)59);
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)59);
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte2);
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte2);
      Byte byte7 = ArrayUtils.get(byteArray0, 0, byte6);
      ArrayUtils.hashCode((Object) byte7);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte)10;
      byteArray1[2] = byte0;
      byteArray1[3] = byte0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)59;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-129.0);
      doubleArray0[1] = (double) 9;
      ArrayUtils.indexesOf(doubleArray0, 2474.804, (-3293));
      int[] intArray0 = new int[7];
      intArray0[0] = (-1726);
      intArray0[1] = 2147012708;
      intArray0[2] = (-3293);
      intArray0[3] = 2147012708;
      intArray0[4] = 7;
      intArray0[5] = (-3293);
      intArray0[6] = 9;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147012708, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 352.0;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 1323.3919639443;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = (-1117.0);
      doubleArray0[5] = 0.1;
      doubleArray0[6] = (-3366.951720198654);
      doubleArray0[7] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, Double.NaN);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[3] = 2649L;
      Byte byte0 = new Byte((byte)29);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)29;
      doubleArray0[1] = (double) 2649L;
      doubleArray0[2] = (-3366.951720198654);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-3366.951720198654);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, Double.NaN);
      assertArrayEquals(new double[] {29.0, 2649.0, (-3366.951720198654), (-3366.951720198654)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.1);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2833.63958861527);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(16, floatArray1.length);
      
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) (-2833.63958861527);
      Double double0 = new Double((-1.0F));
      doubleArray1[5] = double0;
      doubleArray1[6] = (Double) 0.0;
      doubleArray1[7] = (Double) 0.0;
      doubleArray1[8] = (Double) 0.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertEquals(9, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)3764);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.insert(0, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)64);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-2884));
      ArrayUtils.shift(shortArray1, (-2357), (int) (short)1, (-2357));
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      ArrayUtils.insert((-2234), (Byte[]) null, (Byte[]) null);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-4915);
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-983);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)52;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)13);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-4915), (short)3, (short)0, (short)0, (short) (-983), (short)0, (short)52}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = 'C';
      charArray0[2] = '!';
      charArray0[3] = 'H';
      charArray0[4] = 'K';
      charArray0[5] = 'h';
      charArray0[6] = '@';
      charArray0[7] = 'y';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)101;
      Byte byte1 = new Byte((byte)101);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 8, (int) byte0);
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-2393L));
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)52;
      Byte byte1 = new Byte((byte)52);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)52);
      byteArray0[1] = byte2;
      char[] charArray0 = new char[3];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) 52;
      ArrayUtils.swap(doubleArray0, 101, (-1511));
      Class<Byte[]> class0 = Byte[].class;
      ArrayUtils.nullToEmpty(byteArray0, class0);
      ArrayUtils.indexesOf(charArray0, 'k');
      ArrayUtils.reverse((Object[]) byteArray0, (-1511), 4495);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.toObject(byteArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)33;
      doubleArray0[1] = (double) (byte)33;
      doubleArray0[2] = (double) (byte)33;
      ArrayUtils.swap(doubleArray0, (int) (byte)33, (int) (byte)33, 58);
      assertArrayEquals(new double[] {33.0, 33.0, 33.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray1.length);
      
      char[] charArray0 = new char[1];
      ArrayUtils.lastIndexOf(charArray0, 'B', 87);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'B';
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertArrayEquals(new float[] {66.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '|');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'|'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.addFirst(byteArray0, (byte)62);
      short[] shortArray0 = new short[0];
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-729);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)98;
      shortArray0[3] = (short) (-3409);
      shortArray0[4] = (short) (-2048);
      shortArray0[5] = (short)1449;
      shortArray0[6] = (short)953;
      shortArray0[7] = (short)925;
      shortArray0[8] = (short) (-163);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.toObject(intArray0);
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)115;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (float) (byte)115;
      floatArray0[4] = (float) (byte)115;
      floatArray0[5] = (float) (byte)115;
      floatArray0[6] = Float.NaN;
      floatArray0[7] = (float) (byte)115;
      floatArray0[8] = (float) (byte)115;
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-12));
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElements((AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null, (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
      
      Float[] floatArray1 = new Float[4];
      floatArray1[0] = (Float) 115.0F;
      floatArray1[1] = (Float) 115.0F;
      floatArray1[2] = (Float) Float.NaN;
      floatArray1[3] = (Float) 115.0F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(4, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F), (-1));
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[2] = (-544.0763F);
      floatArray0[2] = (-2460.215F);
      floatArray0[4] = (-1677.766F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(5, bitSet0.cardinality());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 7797;
      ArrayUtils.indexesOf((double[]) null, (double) 0.0F, 7);
      Byte byte0 = new Byte((byte)6);
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0);
      ArrayUtils.removeAll((Object) null, bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-544.0763F);
      floatArray0[2] = (-2460.215F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1677.766F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 3396.374F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals("{0, 3, 5}", bitSet0.toString());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 7797;
      intArray0[1] = (-1111);
      intArray0[2] = 1683;
      intArray0[3] = 595;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-2772);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 4184;
      intArray0[2] = 0;
      ArrayUtils.addAll(intArray0, intArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-82.1F);
      floatArray0[1] = 1643.3F;
      floatArray0[2] = (float) 0;
      ArrayUtils.shift(floatArray0, 1055);
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('i');
      characterArray0[0] = character0;
      Character character1 = new Character('R');
      Double double0 = new Double((-1.0));
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      ArrayUtils.shift((Object[]) doubleArray0, 0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 1195.997196);
      assertFalse(boolean0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1195.997196);
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2105.128);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-304.273386060069);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) (-1.0);
      doubleArray1[3] = (Double) (-1.0);
      doubleArray1[4] = (Double) 0.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertEquals(5, doubleArray2.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 1986, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1986, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new int[] {0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      ArrayUtils.indexOf((double[]) null, 2899.13643855917, 488);
      ArrayUtils.removeElement((byte[]) null, (byte)52);
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean(true);
      booleanArray0[0] = boolean0;
      ArrayUtils.toPrimitive(booleanArray0, false);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)52;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 488;
      intArray0[4] = 5;
      intArray0[5] = (-1);
      intArray0[6] = 488;
      intArray0[7] = (-1);
      intArray0[8] = 34;
      ArrayUtils.reverse(intArray0, 1, (-1));
      ArrayUtils.shift((double[]) null, (-1));
      short[] shortArray0 = new short[0];
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '-';
      floatArray0[1] = (float) '-';
      floatArray0[2] = (float) '-';
      floatArray0[3] = (float) '-';
      floatArray0[4] = (float) 55;
      floatArray0[5] = (float) 55;
      floatArray0[6] = (float) 55;
      floatArray0[7] = (float) '-';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1144.0F);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '-';
      longArray0[1] = (long) '-';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {45L, 45L, 45L, 45L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, (-7));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -7, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      ArrayUtils.toObject((char[]) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'm';
      ArrayUtils.lastIndexOf(intArray0, Integer.MAX_VALUE, 104);
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = ':';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = ')';
      charArray0[7] = ')';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-112));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -112, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-87.95649);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      ArrayUtils.toObject(doubleArray0);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.indexesOf(booleanArray0, true);
      char[] charArray0 = new char[1];
      char char0 = 'P';
      charArray0[0] = 'P';
      ArrayUtils.toObject(charArray0);
      int int0 = 795;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray1, 795);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 795, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-572);
      shortArray0[1] = (short)14;
      shortArray0[2] = (short)1641;
      ArrayUtils.lastIndexOf(shortArray0, (short)1641);
      Short short0 = new Short((short) (-572));
      assertEquals((short) (-572), (short)short0);
  }

  @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) byte0, (int) (short) (-539));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1859;
      shortArray0[1] = (short) (-1648);
      shortArray0[2] = (short)1525;
      shortArray0[3] = (short) (-3023);
      shortArray0[4] = (short)3798;
      shortArray0[5] = (short) (-163);
      shortArray0[6] = (short)4384;
      shortArray0[7] = (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2002, (-2502));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)4384;
      floatArray0[1] = (float) (short)1525;
      floatArray0[2] = (float) (short)4384;
      floatArray0[3] = (float) (short) (-1);
      floatArray0[4] = (float) (short) (-1648);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {4384.0F, 1525.0F, 4384.0F, (-1.0F), (-1648.0F), 4384.0F, 1525.0F, 4384.0F, (-1.0F), (-1648.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      int[] intArray0 = new int[10];
      Object object0 = new Object();
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2323);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 11;
      intArray0[4] = (-2832);
      intArray0[5] = 0;
      intArray0[6] = 0;
      ArrayUtils.swap(intArray0, (-2832), (-3788));
      assertArrayEquals(new int[] {0, 0, 11, 0, (-2832), 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)72;
      ArrayUtils.indexesOf(byteArray0, (byte) (-31), (int) (byte)72);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 55.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[] longArray0 = new long[8];
      longArray0[0] = (-1810L);
      longArray0[1] = (-106L);
      longArray0[2] = (long) (short)2;
      longArray0[3] = (-1L);
      longArray0[4] = (-1810L);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)121;
      longArray0[3] = (long) (byte)121;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)121);
      assertArrayEquals(new byte[] {(byte)18, (byte)18, (byte)0}, byteArray1);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = (Long) 2L;
      longArray1[1] = (Long) (-106L);
      longArray1[2] = (Long) (-1810L);
      longArray1[3] = (Long) (-106L);
      longArray1[4] = (Long) (-1810L);
      longArray1[5] = (Long) (-106L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-1630L));
      assertArrayEquals(new long[] {2L, (-106L), (-1810L), (-106L), (-1810L), (-106L)}, longArray2);
  }

  @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Byte[]) null, 55);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-25), (int) (byte) (-25));
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-123));
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-11));
      byteArray0[0] = byte0;
      Byte byte1 = ArrayUtils.get(byteArray0, 0);
      assertNotNull(byte1);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) null);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      ArrayUtils.get((Byte[]) null, (-1876));
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = 2;
      ArrayUtils.get(objectArray0, 2);
      objectArray0[0] = null;
      byte byte0 = (byte) (-42);
      Byte byte1 = new Byte((byte) (-42));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-42);
      byte byte2 = (byte)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, (int) (byte) (-42));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1087.5406F));
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 2467);
      assertEquals(1, intArray1.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.subarray(abstractMap_SimpleImmutableEntryArray0, 1429, 2467);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)61);
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)42);
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)0);
      byteArray0[2] = byte2;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2819, 1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.toObject(intArray0);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[3];
      intArray0[0] = 192;
      intArray0[1] = 736;
      intArray0[2] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 736, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 650.9448;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1306.22789474428);
      doubleArray0[5] = 1104.1;
      doubleArray0[6] = (-21.6081);
      doubleArray0[7] = 336.2567526193;
      doubleArray0[8] = 0.0;
      ArrayUtils.reverse(doubleArray0, (-3577), (-1));
      assertArrayEquals(new double[] {0.0, 0.0, 650.9448, 0.0, (-1306.22789474428), 1104.1, (-21.6081), 336.2567526193, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)1;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      int[] intArray0 = new int[0];
      ArrayUtils.swap((double[]) null, (int) (short)1, 1120, 117);
      ArrayUtils.toObject((short[]) null);
      ArrayUtils.clone(intArray0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1120;
      longArray0[2] = (long) 117;
      long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L, 1120L, 117L, 1120L, 117L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (int) (short) (-1106), (int) (short) (-1106), 117);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      long[] longArray0 = new long[3];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(54, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2105.128);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-304.273386060069);
      char[] charArray0 = new char[8];
      charArray0[2] = 'O';
      charArray0[3] = '7';
      charArray0[4] = 'O';
      charArray0[5] = 'O';
      charArray0[6] = 'O';
      charArray0[7] = 't';
      ArrayUtils.shift(charArray0, (-2663), 2, 10);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'O', '7', 'O', 'O', 'O', 't'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      char[] charArray0 = new char[7];
      ArrayUtils.shift(charArray0, (int) (short)2, (int) (short)2, (int) (short)2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(100, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short) (-6));
      assertArrayEquals(new long[] {(-6L), 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 60, 60, 60);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1897L);
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 732L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      ArrayUtils.addFirst(longArray0, (-1810L));
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = ')';
      charArray0[2] = '^';
      charArray0[3] = 'H';
      charArray0[4] = '\"';
      ArrayUtils.shift(charArray0, 0, 0, 2588);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1997.0), 1);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {1, (-1), 4152}, intArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      ArrayUtils.swap(booleanArray0, 0, 1, 2404);
      boolean[] booleanArray1 = new boolean[8];
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      ArrayUtils.swap(booleanArray0, 1, 1072, 1796);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      Character character0 = Character.valueOf('X');
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'X'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)56;
      ArrayUtils.contains(byteArray0, (byte)56);
      ArrayUtils.toObject((double[]) null);
      ArrayUtils.clone((double[]) null);
      ArrayUtils.indexesOf((boolean[]) null, true);
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'D';
      charArray0[5] = 'P';
      charArray0[6] = 'P';
      charArray0[7] = 'P';
      charArray0[8] = 'P';
      ArrayUtils.toObject(charArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Character character0 = new Character('o');
      Character character1 = new Character('o');
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-957);
      ArrayUtils.reverse(floatArray0, 84, 84);
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 978.3243866828;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-3525.3875487192063);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(3, doubleArray1.length);
      
      Character[] characterArray0 = new Character[8];
      Character character0 = Character.valueOf('5');
      characterArray0[0] = character0;
      char char0 = 'N';
      Character character1 = new Character('N');
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character1);
      characterArray0[2] = character2;
      char char1 = 'Y';
      Character character3 = Character.valueOf('Y');
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(char1);
      characterArray0[4] = character4;
      Character character5 = Character.valueOf(char0);
      characterArray0[5] = character5;
      Character character6 = new Character('>');
      characterArray0[6] = character6;
      Character character7 = new Character(char0);
      characterArray0[7] = character7;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'5', 'N', 'N', 'Y', 'Y', 'N', '>', 'N'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.add(intArray0, 4152);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.lastIndexOf(booleanArray0, false, 72);
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      ArrayUtils.insert(101, booleanArray0, booleanArray1);
      long[] longArray0 = ArrayUtils.insert((-1409), (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.add(intArray0, 4152);
      assertArrayEquals(new int[] {0, 0, 4152}, intArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) ';';
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.lastIndexOf(booleanArray0, true, 59);
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1859;
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1859;
      intArray0[1] = (int) (short) (-1648);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 97;
      intArray0[4] = (int) (short)1859;
      intArray0[5] = (int) (short)1859;
      ArrayUtils.swap(intArray0, 97, Integer.MAX_VALUE, 1859);
      ArrayUtils.reverse((byte[]) null);
      Long long0 = new Long((-1648));
      Long[] longArray0 = new Long[3];
      Long long1 = new Long((short) (-1648));
      longArray0[0] = long1;
      longArray0[1] = long0;
      longArray0[2] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {(-1648L), (-1648L), (-1648L)}, longArray1);
      assertNotNull(longArray1);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((byte) (-89));
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-89.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.reverse(shortArray0);
      long[] longArray0 = new long[4];
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) 119;
      ArrayUtils.shift(longArray0, (-372));
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-372));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      ArrayUtils.subarray(intArray0, (-21), (-1677));
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 126.0F);
      ArrayUtils.reverse(floatArray1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 126.0F;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) (-21);
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 126.0F;
      doubleArray0[8] = (double) 1;
      ArrayUtils.lastIndexOf(doubleArray0, 972.3879809863744, 1);
      ArrayUtils.insert(1, (short[]) null, (short[]) null);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-1402.6));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      ArrayUtils.insert((-2234), (Byte[]) null, (Byte[]) null);
      ArrayUtils.clone((boolean[]) null);
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-2234));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-68), (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2234);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (-551.0);
      doubleArray0[4] = 2256.8786361568;
      doubleArray0[5] = (double) (byte) (-68);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-25);
      intArray0[1] = 97;
      intArray0[2] = (int) (byte) (-25);
      ArrayUtils.swap(intArray0, (-25), (-25), 97);
      assertArrayEquals(new int[] {(-25), 97, (-25), 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte) (-25);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte) (-25), (byte) (-25), (byte) (-25), (byte) (-25), (byte)0}, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (double) 0);
      assertEquals(6, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2006;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1192));
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[14];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(13, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = 475L;
      longArray0[4] = (-762L);
      longArray0[5] = 0L;
      longArray0[6] = 103L;
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertArrayEquals(new long[] {(-1L), (-1L), 475L, (-762L), 0L, 103L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)13;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-118));
      byteArray0[0] = byte0;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-118);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -118, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayUtils.shift(longArray0, (-372));
      ArrayUtils.shift(longArray0, 0, 0, 119);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      ArrayUtils.contains((short[]) null, (short)55);
      Float float0 = new Float(323.09554);
      Float float1 = new Float((double) (short)55);
      Float float2 = new Float((-2740.2852202726));
      Float float3 = new Float((float) (short)55);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      ArrayUtils.swap((char[]) null, 0, (int) (short)55);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      ArrayUtils.swap(byteArray0, (int) (short)55, (int) (byte)1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      long[] longArray0 = new long[0];
      ArrayUtils.shuffle(longArray0);
      ArrayUtils.add(byteArray1, 4, (byte)15);
      ArrayUtils.shift(longArray0, 838, 3029, (-6163));
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.toObject((boolean[]) null);
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      ArrayUtils.shift(longArray0, 0, 0, 0);
      Byte byte0 = new Byte((byte) (-1));
      Byte byte1 = new Byte((byte)59);
      Byte byte2 = new Byte((byte)57);
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (byte)57);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      long[] longArray0 = new long[5];
      ArrayUtils.shift(longArray0, (-389));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2357);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2357, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)15;
      intArray0[1] = (int) (byte)15;
      intArray0[2] = (-3788);
      intArray0[3] = 769;
      intArray0[4] = 0;
      intArray0[5] = (int) (byte)15;
      ArrayUtils.swap(intArray0, 0, (-3788));
      assertArrayEquals(new int[] {15, 15, (-3788), 769, 0, 15}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-773));
      assertNotNull(intArray0);
      
      ArrayUtils.swap(intArray0, (-2145351091), (-2145351091), (-2145351091));
      assertArrayEquals(new int[] {(-773)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayUtils.toPrimitive(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 11;
      intArray0[3] = 0;
      intArray0[4] = (-2832);
      intArray0[5] = 0;
      intArray0[6] = 0;
      ArrayUtils.swap(intArray0, (-2832), (-3788));
      assertArrayEquals(new int[] {0, 0, 11, 0, (-2832), 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      int[] intArray0 = new int[21];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 3550);
      assertEquals(21, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1786));
      assertArrayEquals(new int[] {(-1786)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1817));
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '?');
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2358);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      ArrayUtils.toObject((char[]) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 141;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 141, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      int[] intArray0 = ArrayUtils.add((int[]) null, 17);
      assertArrayEquals(new int[] {17}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1304);
      intArray0[1] = 0;
      intArray0[2] = 10;
      ArrayUtils.add(intArray0, (-964));
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1304);
      longArray0[1] = (-808L);
      longArray0[2] = (long) (-1304);
      longArray0[3] = (long) (-1304);
      longArray0[4] = (long) (-1304);
      longArray0[5] = (long) (-1304);
      longArray0[6] = (long) (-1304);
      longArray0[7] = (long) 0;
      longArray0[8] = (long) (-964);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-25);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      ArrayUtils.add(longArray1, (long) (byte) (-25));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      int[] intArray0 = new int[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertArrayEquals(new byte[] {(byte)127}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      ArrayUtils.isEmpty((int[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-21), (-1677));
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      ArrayUtils.reverse(floatArray1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 126.0F;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 1.0;
      intArray0[1] = (-21);
      doubleArray0[6] = (double) (-21);
      doubleArray0[7] = (double) 126.0F;
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(18, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertEquals(2, booleanArray2.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'K';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals("{}", bitSet0.toString());
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 75L, 5);
      assertEquals(0, int0);
      
      Byte byte0 = new Byte((byte)34);
      ArrayUtils.isNotEmpty((Byte[]) null);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)34;
      intArray0[1] = (int) 'K';
      intArray0[2] = 0;
      intArray0[3] = 0;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {75, 0, 0, 34}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = (-3589L);
      longArray0[7] = 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1666);
      shortArray0[1] = (short)1233;
      shortArray0[2] = (short)4071;
      int int0 = ArrayUtils.indexOf((char[]) null, '.', (int) (short)4071);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) 1L);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      long[] longArray0 = new long[1];
      longArray0[0] = (-1777L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1777L));
      assertEquals("{0}", bitSet0.toString());
      
      Byte byte0 = new Byte((byte) (-41));
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-41);
      intArray0[2] = (int) (byte) (-41);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, (-41), (-41)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) characterArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      byte byte2 = (byte)32;
      Byte byte3 = new Byte((byte)32);
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)0);
      byteArray0[3] = byte5;
      Byte byte6 = Byte.valueOf((byte)12);
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)0);
      byteArray0[5] = byte7;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      ArrayUtils.shuffle(intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)12;
      doubleArray0[1] = (double) (byte)12;
      doubleArray0[2] = (double) byte2;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) (byte)12;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      doubleArray0[7] = (double) byte2;
      doubleArray0[8] = (double) byte0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-321.0));
      assertEquals(10, doubleArray1.length);
      assertArrayEquals(new double[] {(-321.0), 12.0, 12.0, 32.0, 2.147483647E9, 0.0, 12.0, 2.147483647E9, 32.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1524L);
      longArray0[2] = (-1L);
      longArray0[3] = (-375L);
      longArray0[4] = (-593L);
      longArray0[5] = 0L;
      ArrayUtils.reverse(longArray0, 1, 1434);
      assertArrayEquals(new long[] {0L, 0L, (-593L), (-375L), (-1L), (-1524L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = (-359L);
      longArray0[3] = 2550L;
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      longArray0[6] = 143L;
      longArray0[7] = (-1969L);
      longArray0[8] = 0L;
      ArrayUtils.reverse(longArray0, 0, (-1328));
      assertArrayEquals(new long[] {1L, 1L, (-359L), 2550L, 0L, (-1L), 143L, (-1969L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.contains(doubleArray0, 1730.206490882);
      ArrayUtils.swap(doubleArray0, (-1628), (-1628), (-5245));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 335.79844644;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      ArrayUtils.shift(doubleArray0, 2588);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      ArrayUtils.shuffle(byteArray0);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 1072, 2588, (-957));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) 55;
      floatArray0[2] = (float) 55;
      floatArray0[3] = (float) 55;
      floatArray0[4] = (float) 55;
      floatArray0[5] = (float) 55;
      floatArray0[6] = (float) 55;
      floatArray0[7] = (float) 55;
      ArrayUtils.clone(floatArray0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.clone(booleanArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 55.0F;
      ArrayUtils.swap(doubleArray0, 1763, 0, 0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (-2873));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(666);
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 666, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.toObject(booleanArray0);
      long[] longArray0 = new long[3];
      longArray0[0] = (-851L);
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      ArrayUtils.shift(longArray0, 0, 0, 0);
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)59);
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-50));
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-60);
      Byte byte3 = new Byte((byte) (-60));
      byteArray0[2] = byte3;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-60);
      intArray0[1] = (int) byte2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -60, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) 3430.8162F);
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 3430.8162F);
      assertArrayEquals(new float[] {3430.8162F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      int[] intArray0 = new int[15];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1385));
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (-1610L));
      assertArrayEquals(new float[] {(-1610.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      intArray0[0] = 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 97;
      ArrayUtils.shuffle(intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      intArray0[1] = 0;
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)6;
      Byte byte1 = new Byte((byte)6);
      byteArray0[0] = byte1;
      byte byte2 = (byte)114;
      Byte byte3 = new Byte((byte)114);
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)114);
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte2);
      byteArray0[3] = byte5;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) byte0);
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.get(byteArray1, 82);
      ArrayUtils.removeElement(byteArray0, (Object) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = 'b';
      ArrayUtils.swap(charArray0, (int) byte2, 98);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2719);
      shortArray0[1] = (short)317;
      shortArray0[2] = (short)10;
      shortArray0[3] = (short)143;
      shortArray0[4] = (short)1430;
      shortArray0[5] = (short) (-202);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-1);
      shortArray0[8] = (short)3;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1430);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 77);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      ArrayUtils.shuffle(byteArray0);
      ArrayUtils.addFirst((long[]) null, (long) (byte)0);
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-411), 2304, 2588);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte) (-31);
      shortArray0[4] = (short) (byte)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)425, (-496));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      byteArray0[2] = byte3;
      byte byte4 = (byte)49;
      Byte byte5 = new Byte((byte)49);
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte0);
      byteArray0[4] = byte6;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte0;
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(4, byteArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byte0;
      ArrayUtils.addAll(longArray0, longArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-12);
      byteArray2[1] = byte0;
      byteArray2[2] = byte4;
      byteArray2[3] = byte0;
      byte[] byteArray3 = ArrayUtils.removeElement(byteArray2, byte0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte)49, (byte)0}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 3430.8162F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      ArrayUtils.contains(shortArray0, (short) (-2336));
      Float float0 = new Float((float) (short)2);
      Float float1 = new Float((-1.0));
      Float float2 = new Float((-1274.3699F));
      ArrayUtils.swap((char[]) null, (-2099), (-2099));
      int[] intArray0 = new int[1];
      intArray0[0] = (-2099);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2099, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-910.4652088271758);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1650.860329791577;
      doubleArray0[4] = 1.5;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1055;
      ArrayUtils.shift(floatArray0, Integer.MAX_VALUE);
      Character character0 = new Character('i');
      Character character1 = new Character('a');
      Double double0 = new Double(0.0);
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) double0;
      objectArray0[1] = (Object) 1055.0F;
      objectArray0[2] = (Object) 1.5;
      objectArray0[3] = (Object) 1.5;
      objectArray0[4] = (Object) character1;
      Float[] floatArray1 = new Float[10];
      Float float0 = new Float((-813.8989302475));
      floatArray1[0] = float0;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 1055.0F);
      assertArrayEquals(new float[] {(-813.8989F), 1055.0F, 1055.0F, 1055.0F, 1055.0F, 1055.0F, 1055.0F, 1055.0F, 1055.0F, 1055.0F}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)683);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)24);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      ArrayUtils.contains(shortArray0, (short) (-2336));
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((float) (short)2);
      floatArray0[0] = float0;
      Float float1 = new Float(323.09554);
      floatArray0[1] = float1;
      Float float2 = new Float((-1.0));
      floatArray0[2] = float2;
      Float float3 = new Float((double) floatArray0[1]);
      floatArray0[3] = float3;
      Float float4 = new Float((-1274.3699F));
      floatArray0[4] = float4;
      ArrayUtils.toPrimitive(floatArray0, (float) (short)2);
      ArrayUtils.swap((char[]) null, 0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-851L);
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      ArrayUtils.shift(longArray0, 0, 0, 0);
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)59);
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-50));
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-60);
      Byte byte3 = new Byte((byte) (-60));
      byteArray0[2] = byte3;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-60);
      intArray0[1] = (int) byte2;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-60));
      assertEquals(5, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      int[] intArray0 = new int[4];
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      intArray0[0] = 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 97;
      ArrayUtils.shuffle(intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0.0F;
      intArray0[1] = 0;
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)6;
      Byte byte1 = new Byte((byte)6);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)114);
      ArrayUtils.insert(0, (short[]) null, (short[]) null);
      int[] intArray1 = new int[6];
      intArray1[0] = (int) byte0;
      intArray1[1] = (int) (byte)114;
      intArray1[2] = 61;
      intArray1[3] = 2603;
      intArray1[4] = (int) (byte)114;
      intArray1[5] = 0;
      ArrayUtils.swap(intArray1, 0, 1408);
      assertArrayEquals(new int[] {6, 114, 61, 2603, 114, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'c';
      ArrayUtils.nullToEmpty(floatArray0);
      short[] shortArray0 = new short[6];
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      ArrayUtils.swap(charArray0, (-1726), 1144, 0);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)1308, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1308, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.indexesOf(byteArray0, (byte) (-75), 1904);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(1904, shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)0);
      byte[] byteArray1 = new byte[0];
      ArrayUtils.nullToEmpty(byteArray1);
      ArrayUtils.swap((double[]) null, (-1103), (int) (byte)0, (int) (byte)15);
      double[] doubleArray0 = ArrayUtils.add((double[]) null, Double.NaN);
      ArrayUtils.contains(doubleArray0, 67.142, (double) 2);
      Byte byte1 = new Byte((byte)15);
      ArrayUtils.clone(byteArray0);
      Double double0 = new Double((-4113.579));
      Double double1 = new Double((byte)0);
      Double double2 = new Double(1174.754);
      Double[] doubleArray1 = new Double[0];
      ArrayUtils.toPrimitive(doubleArray1);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) null, (Object) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 7;
      ArrayUtils.indexesOf(doubleArray0, (-1.0), 9);
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      ArrayUtils.lastIndexOf(charArray0, 'F', (-1953));
      Character character0 = Character.valueOf('F');
      assertEquals('F', (char)character0);
  }

  @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      ArrayUtils.insert((-2234), (Byte[]) null, (Byte[]) null);
      short[] shortArray0 = new short[7];
      ArrayUtils.clone((boolean[]) null);
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '!';
      charArray0[2] = '0';
      ArrayUtils.reverse(charArray0);
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '!');
      assertArrayEquals(new char[] {'!', '0', '!', '0'}, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)52);
      byteArray0[0] = byte0;
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Character.valueOf('u');
      Character character0 = Character.valueOf('[');
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'U');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'[', '['}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2257);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2257}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-310);
      shortArray0[1] = (short)1578;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)1578;
      floatArray0[1] = (float) (short) (-310);
      floatArray0[2] = (-2090.0F);
      floatArray0[3] = (float) (short)1578;
      floatArray0[4] = (-501.8622F);
      floatArray0[5] = (float) (short)1578;
      floatArray0[6] = (float) (short)1578;
      floatArray0[7] = (float) (short) (-310);
      floatArray0[8] = (float) (short)1578;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      Float float0 = new Float((float) (short)55);
      ArrayUtils.reverse((char[]) null, (int) (short)55, (int) (short)55);
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) ' ';
      floatArray0[1] = (float) 'Z';
      floatArray0[2] = (float) '{';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {32.0F, 90.0F, 123.0F, 32.0F, 90.0F, 123.0F}, floatArray1, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, 'k', 55);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      ArrayUtils.lastIndexOf(charArray0, 'B', 87);
      Character character0 = Character.valueOf('B');
      assertEquals('B', (char)character0);
  }

  @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      float[] floatArray0 = new float[0];
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)52;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)52, 488);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray1.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.insert((int) (byte)15, shortArray0, shortArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = ' ';
      charArray0[2] = '{';
      charArray0[3] = 'Z';
      ArrayUtils.reverse(charArray0, (int) (byte)0, (int) (byte)15);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(2, int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'Z';
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = 1593.098F;
      floatArray0[3] = (float) ' ';
      floatArray0[4] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {90.0F, 0.0F, 1593.098F, 32.0F, 0.0F, 90.0F, 0.0F, 1593.098F, 32.0F, 0.0F}, floatArray1, 0.01F);
      
      ArrayUtils.lastIndexOf(charArray0, 'k', (-1495));
      assertArrayEquals(new char[] {'Z', '{', ' ', '%'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)30882);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)30882}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-916.05726));
      assertArrayEquals(new double[] {(-916.05726)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)18688;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-1512);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)106);
      assertArrayEquals(new short[] {(short)0, (short)1, (short)18688, (short)0, (short)0, (short)0, (short) (-1), (short) (-1512), (short)106}, shortArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = 'n';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2339.9;
      ArrayUtils.lastIndexOf(doubleArray0, (-767.1913), 928, 2339.9);
      Byte byte0 = new Byte((byte)13);
      Byte byte1 = new Byte((byte)98);
      Byte byte2 = new Byte((byte)98);
      Byte byte3 = new Byte((byte)1);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1658()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      ArrayUtils.isEmpty(doubleArray0);
      ArrayUtils.lastIndexOf(doubleArray0, 0.7, (int) (byte)0, 0.0);
      Byte byte0 = new Byte((byte)0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[2] = (double) (byte)0;
      ArrayUtils.contains(doubleArray1, 0.0, 0.7);
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1659()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) '\u0000';
      doubleArray0[4] = (double) '\u0000';
      ArrayUtils.reverse(charArray0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 122.0, 0.0);
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 333.97F, 1072);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1660()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = Short.valueOf((short)7);
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)7}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1661()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-113);
      int[] intArray0 = new int[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)37, (int) (byte)23);
      assertArrayEquals(new byte[] {(byte)23, (byte)37, (byte) (-113)}, byteArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2474.804;
      doubleArray0[1] = (double) (byte) (-113);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (byte) (-113);
      doubleArray0[5] = (double) (byte)23;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0, 23.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1662()  throws Throwable  {
      Object object0 = new Object();
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (-58L));
      assertNull(longArray0);
      
      ArrayUtils.clone((long[]) null);
      ArrayUtils.toPrimitive((Double[]) null, (double) (-58L));
      Short short0 = new Short((short) (-893));
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-893);
      shortArray0[1] = (short) (-893);
      shortArray0[2] = (short) (-893);
      shortArray0[3] = (short) (-893);
      shortArray0[4] = (short) (-893);
      shortArray0[5] = (short)18688;
      shortArray0[6] = (short) (-893);
      shortArray0[7] = (short) (-893);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1663()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 3673, 69, (-947));
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(1685);
      integerArray0[0] = integer0;
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 2071600833, (-41));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1664()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[3] = 0L;
      Byte byte0 = new Byte((byte)29);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-56), (-56));
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1665()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 3990, 3990);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(7, integerArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      ArrayUtils.nullToEmpty(classArray0);
      ArrayUtils.insert((-1562), (long[]) null, (long[]) null);
      ArrayUtils.clone((long[]) null);
      ArrayUtils.toPrimitive((Double[]) null, (double) (-1562));
      Short short0 = new Short((short)1);
      ArrayUtils.toPrimitive((Short[]) null);
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1666()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (int) (byte)0, 0.0);
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = new Byte((byte)0);
      Byte byte2 = new Byte((byte)0);
      assertTrue(byte2.equals((Object)byte1));
  }

  @Test(timeout = 4000)
  public void test1667()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1668()  throws Throwable  {
      Byte byte0 = new Byte((byte)24);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)24;
      ArrayUtils.indexOf(doubleArray0, 1436.9);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte)24, (-1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1669()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(48);
      int[] intArray0 = new int[1];
      ArrayUtils.contains(intArray0, (-808));
      ArrayUtils.swap((Object[]) integerArray0, (-25), 48);
      ArrayUtils.shift((Object[]) integerArray0, (-25), 750, (-25));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      BitSet bitSet0 = new BitSet();
      ArrayUtils.removeElement(charArray0, 'j');
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-25);
      doubleArray0[2] = (double) 750;
      doubleArray0[3] = (double) '?';
      doubleArray0[4] = (double) 750;
      doubleArray0[5] = (double) 1;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 750.0);
      assertEquals(5, bitSet1.length());
      
      ArrayUtils.toPrimitive((Object) null);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, (int) (byte) (-110));
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1670()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1671()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1672()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-966.2231);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 211.34;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-2075.3921);
      doubleArray0[6] = 332.162644957;
      doubleArray0[7] = (-2522.5682288240605);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2933), (-930));
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      Short[] shortArray1 = new Short[5];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      shortArray1[0] = short1;
      Short short2 = new Short((short)0);
      shortArray1[1] = short2;
      Short short3 = new Short(short0);
      shortArray1[2] = short3;
      Short short4 = new Short((short)0);
      shortArray1[3] = short4;
      Short short5 = new Short((short)0);
      shortArray1[4] = short5;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(5, shortArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-966.2231), 2000, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1673()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '~';
      charArray0[2] = 'z';
      ArrayUtils.swap(charArray0, 1, (-1726), 1);
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1674()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-544.0763F);
      floatArray0[2] = (-2460.215F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      long[] longArray0 = new long[1];
      longArray0[0] = 732L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 732L}, longArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '6';
      charArray0[2] = ')';
      charArray0[3] = '\"';
      charArray0[4] = '^';
      charArray0[5] = '\"';
      ArrayUtils.shift(charArray0, 0, 2588, 2588);
      assertArrayEquals(new char[] {'^', '\"', '\"', '6', ')', '\"'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1675()  throws Throwable  {
      Byte byte0 = new Byte((byte)13);
      Byte byte1 = new Byte((byte)14);
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.swap((char[]) null, (int) (byte)14, (-168), (-168));
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1676()  throws Throwable  {
      char[] charArray0 = new char[28];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1677()  throws Throwable  {
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1678()  throws Throwable  {
      char[] charArray0 = new char[4];
      ArrayUtils.shuffle(charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1679()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-42));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-42);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)3, (int) (byte) (-42));
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-2509.0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2509.0), 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) (byte) (-42);
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) bitSet0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3], (int) (byte) (-42));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test1680()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2407L);
      longArray0[2] = (-2407L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-2407L));
      assertArrayEquals(new long[] {(-2407L), 0L, (-2407L)}, longArray0);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1681()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = new int[8];
      intArray0[0] = 46;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 1734;
      intArray0[5] = 1734;
      intArray0[6] = 1734;
      intArray0[7] = 2;
      ArrayUtils.swap(intArray0, 2, 1734);
      Byte byte0 = new Byte((byte)7);
      Byte byte1 = new Byte((byte)95);
      Byte.valueOf((byte)95);
      Byte.valueOf((byte)7);
      ArrayUtils.removeAllOccurrences((Byte[]) null, byte1);
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.nextDouble();
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1682()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1683()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.removeAll(intArray0, intArray0);
      ArrayUtils.swap(intArray0, 5, 5, (-540));
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1684()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 0, (-198));
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      Object object1 = ArrayUtils.toPrimitive(object0);
      objectArray0[0] = object1;
      ArrayUtils.get(objectArray0, (-198));
      objectArray0[1] = null;
      byte byte0 = (byte) (-101);
      Byte byte1 = new Byte((byte) (-101));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1685()  throws Throwable  {
      ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)49);
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      Byte byte6 = new Byte((byte) (-88));
      Byte byte7 = new Byte((byte)52);
      Byte.valueOf((byte) (-89));
      Byte.valueOf(byte0);
      Byte byte8 = new Byte((byte)0);
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte8);
      assertEquals(2, byteArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(49L);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)49;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1686()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) null);
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1687()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-544.0763F);
      floatArray0[2] = (-2460.215F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1677.766F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 3396.374F;
      ArrayUtils.indexesOf(floatArray0, 0.0F);
      int[] intArray0 = new int[7];
      intArray0[0] = 7797;
      intArray0[1] = (-1111);
      intArray0[2] = 1683;
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.nextDouble();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) (-544.0763F);
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) (byte)0;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1688()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-531);
      intArray0[1] = (-2791);
      intArray0[2] = (-2049);
      intArray0[3] = (-6608);
      intArray0[4] = 1144;
      intArray0[5] = 1838;
      intArray0[6] = 6;
      intArray0[7] = 623;
      ArrayUtils.clone(intArray0);
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-6608);
      floatArray0[1] = (float) (-2049);
      floatArray0[2] = (float) 1144;
      floatArray0[3] = (float) 1144;
      ArrayUtils.removeAllOccurences(floatArray0, (float) (-2049));
      ArrayUtils.clone(booleanArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) (-531);
      doubleArray0[2] = (double) 1144;
      doubleArray0[3] = (double) (-2049);
      doubleArray0[4] = (double) 1144.0F;
      doubleArray0[5] = (double) 1144.0F;
      doubleArray0[6] = (double) (-531);
      ArrayUtils.swap(doubleArray0, 1838, (-3722));
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1689()  throws Throwable  {
      Object object0 = new Object();
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object0);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1690()  throws Throwable  {
      int[] intArray0 = new int[15];
      ArrayUtils.shuffle(intArray0);
      assertEquals(15, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1691()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1692()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 204;
      intArray0[1] = 204;
      ArrayUtils.swap(intArray0, 204, 204);
      assertArrayEquals(new int[] {204, 204}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1693()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 97, (-524), 1873);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte)111);
      Byte byte1 = Byte.valueOf((byte)116);
      Byte.valueOf((byte)111);
      ArrayUtils.removeAllOccurrences((Byte[]) null, byte1);
      MockRandom mockRandom0 = new MockRandom();
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) byte0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1694()  throws Throwable  {
      ArrayUtils.contains((double[]) null, (-1881.878));
      int[] intArray0 = new int[2];
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      Object object0 = new Object();
      ArrayUtils.shuffle(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1695()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 5, 5, 2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1696()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1697()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 99, (-331), 1541);
      int[] intArray0 = new int[9];
      intArray0[0] = (-331);
      intArray0[1] = 0;
      intArray0[2] = 1541;
      intArray0[3] = 99;
      intArray0[4] = 99;
      intArray0[5] = 99;
      intArray0[6] = 1734;
      intArray0[7] = 99;
      intArray0[8] = 1541;
      ArrayUtils.swap(intArray0, 1541, 2);
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)7;
      Byte byte1 = new Byte((byte)7);
      byteArray0[0] = byte1;
      byte byte2 = (byte)1;
      Byte byte3 = new Byte((byte)1);
      byteArray0[1] = byte3;
      Byte byte4 = Byte.valueOf((byte)7);
      byteArray0[2] = byte4;
      Byte byte5 = Byte.valueOf(byte0);
      byteArray0[3] = byte5;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte5);
      assertNotNull(byteArray1);
      
      MockRandom mockRandom0 = new MockRandom(978L);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = byte2;
      byteArray2[1] = (byte)1;
      byteArray2[2] = byte0;
      byteArray2[3] = byte0;
      byteArray2[4] = byte0;
      byteArray2[5] = (byte)0;
      mockRandom0.nextBytes(byteArray2);
      mockRandom0.nextDouble();
      ArrayUtils.shuffle((Object[]) byteArray1, (Random) mockRandom0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1698()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-3258.29F));
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1699()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1700()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (byte) (-1));
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1701()  throws Throwable  {
      float[] floatArray0 = new float[5];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1702()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1703()  throws Throwable  {
      float[] floatArray0 = new float[20];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 5319.9126F);
      assertTrue(bitSet0.isEmpty());
  }
}
