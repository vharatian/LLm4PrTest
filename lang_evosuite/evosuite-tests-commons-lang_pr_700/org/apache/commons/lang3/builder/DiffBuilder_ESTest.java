/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 06:39:20 GMT 2025
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import org.apache.commons.lang3.builder.DiffBuilder;
import org.apache.commons.lang3.builder.DiffResult;
import org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle;
import org.apache.commons.lang3.builder.RecursiveToStringStyle;
import org.apache.commons.lang3.builder.StandardToStringStyle;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DiffBuilder_ESTest extends DiffBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      Integer integer0 = new Integer((-4288));
      Integer integer1 = new Integer(851);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.junitpioneer.vintage.TimeoutExtension", (long) 851, (long) (-4288));
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(2243);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (int) (short) (-1), 345);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1194));
      Integer integer1 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (float) (-1194), 0.0F);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      Integer integer0 = new Integer((-994877440));
      Integer integer1 = new Integer(1);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("wsB>P^cx1Bnx", (double) 1, (double) (-994877440));
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-2636));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("\u03A1", 'B', '\'');
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(2243);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (byte)0, (byte)41);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer0 = new Integer((byte)46);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (boolean[]) null, (boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-2060));
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (short[]) null, (short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      Integer integer0 = new Integer((-1));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (Object[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      Integer integer0 = new Integer((-756));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, longArray0, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(2431);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-943));
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, floatArray0, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-3192));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer0 = new Integer(2203);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, charArray0, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(67);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-1407));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((byte)126);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (short) (byte)126, (short) (byte)126);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer((byte)117);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null);
      // Undeclared exception!
      try { 
        diffBuilder0.append("NFR,NQ3FcgQ|a", (DiffResult<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // diffResult
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer((byte)106);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (Object) integer0, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(440);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (long) 440, 768L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-2147483647));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (-2147483647), (-2147483647));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer0 = new Integer(14);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (-1324.93F), (-1324.93F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer0 = new Integer(88);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (double) 4, 1949.019);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      Integer integer0 = new Integer((-2173));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, '2', '2');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer((byte)93);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (byte)93, (byte)93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<Integer>((Integer) null, (Integer) null, multilineRecursiveToStringStyle0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // lhs
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<Integer>((Integer) null, (Integer) null, multilineRecursiveToStringStyle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // lhs
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer0 = new Integer(40);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", diffResult0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer0 = new Integer(40);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, true);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", diffResult0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      Integer integer0 = new Integer(104);
      Integer integer1 = new Integer(48);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("H(|D}i1!P@ChxUR\"O", (Object[]) null, (Object[]) null);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Integer integer0 = new Integer(440);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("\u00E6", (Object[]) null, (Object[]) null);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((byte)46);
      Integer integer1 = new Integer(54);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, (ToStringStyle) null);
      Integer integer2 = new Integer((byte)46);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("N-Q'RU=[GdB@Fo1oY", (Object) integer0, (Object) integer2);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer0 = new Integer((-486));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      Object object0 = new Object();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (Object) null, object0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer((byte)46);
      Integer integer1 = new Integer(33);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, (ToStringStyle) null);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (Object) integer1, (Object) integer1);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(34);
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("[Kk2w~]!&petJtv9.}", (Object) integer0, (Object) integer0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(2517);
      Integer integer1 = new Integer(1131);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, (ToStringStyle) null);
      short[] shortArray0 = new short[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$11", shortArray0, shortArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer(34);
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("(kp/_KXKLUD9o", (short[]) null, (short[]) null);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer(2145710333);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (short)0, (short)0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer(2027);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (short)0, (short)0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer((-2899));
      Integer integer1 = new Integer(2);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      long[] longArray0 = new long[6];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", longArray0, longArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer(120);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      long[] longArray0 = new long[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", longArray0, longArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer(2275);
      Integer integer1 = new Integer(41);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("E#>3Y@^", (-1697L), (-1697L));
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      int[] intArray0 = new int[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("CKhc3y\"U^jc#.x6)Bn", intArray0, intArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = new Integer(2027);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      int[] intArray0 = new int[3];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", intArray0, intArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer(1113);
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("\".d$H?V", 1113, 1113);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Integer integer0 = new Integer(0);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("Q6hO=(M>", 0, 0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer0 = new Integer(291);
      Integer integer1 = new Integer((-592));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, standardToStringStyle0);
      float[] floatArray0 = new float[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("psh$kAinAJP", floatArray0, floatArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer(2027);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      float[] floatArray0 = new float[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", floatArray0, floatArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer((-2899));
      Integer integer1 = new Integer(2);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (float) 2, (float) 2);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer0 = new Integer((-1));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("Backup", (float) (-1), (float) (-1));
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(19);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, standardToStringStyle0);
      double[] doubleArray0 = new double[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", doubleArray0, doubleArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer(2275);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<DiffResult<Integer>> diffBuilder1 = new DiffBuilder<DiffResult<Integer>>(diffResult0, diffResult0, toStringStyle0);
      double[] doubleArray0 = new double[1];
      DiffBuilder<DiffResult<Integer>> diffBuilder2 = diffBuilder1.append("E#>3Y@^", doubleArray0, doubleArray0);
      assertSame(diffBuilder1, diffBuilder2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("i 364hia5~dCAOl|-", (double) (-1), (double) (-1));
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = new Integer(2027);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (double) 0, (-1.0));
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer((-2176));
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0, false);
      char[] charArray0 = new char[8];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.junitpioneer.vintage.TimeoutExtension", charArray0, charArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      char[] charArray0 = new char[4];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", charArray0, charArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      Integer integer0 = new Integer(1225);
      Integer integer1 = new Integer(104);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", 'G', 'G');
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", 'R', 'R');
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer(2887);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (byte[]) null, (byte[]) null);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      Integer integer0 = new Integer(1110);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      byte[] byteArray0 = new byte[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", byteArray0, byteArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer((byte)117);
      Integer integer1 = new Integer(52);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, (ToStringStyle) null);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (byte)117, (byte)117);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-715));
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0, true);
      boolean[] booleanArray0 = new boolean[7];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("~htRXk6", booleanArray0, booleanArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      Integer integer0 = new Integer(63);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (boolean[]) null, (boolean[]) null);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Integer integer0 = new Integer(1113);
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("\".d$H?V", false, false);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer0 = new Integer((-822088325));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder", true, true);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Integer integer0 = new Integer(2027);
      Integer integer1 = new Integer(2027);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, standardToStringStyle0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer0 = new Integer((byte)30);
      Integer integer1 = new Integer((-3053));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, multilineRecursiveToStringStyle0);
      int[] intArray0 = new int[5];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("Bk", (int[]) null, intArray0);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("&thorn;", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Integer integer0 = new Integer(40);
      Integer integer1 = new Integer(3547);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, (ToStringStyle) null);
      diffBuilder0.append("7Dd]n=ARYr", (double) 40, 871.5179);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("jQT@H:$hn", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(1065353183);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, (ToStringStyle) null);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("P7btH", 1065353183, (-1));
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("P7btH", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Integer integer0 = new Integer((byte)17);
      Integer integer1 = new Integer((-1342));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, (ToStringStyle) null);
      char[] charArray0 = new char[1];
      char[] charArray1 = new char[0];
      diffBuilder0.append("}ELd{mfK*r", charArray1, charArray0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-16));
      Integer integer1 = new Integer((-609));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, (ToStringStyle) null);
      float[] floatArray0 = new float[9];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("lhs", floatArray0, (float[]) null);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("lhs", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(98);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (float) 98, (float) 0);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-107));
      Integer integer1 = new Integer(53);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, (ToStringStyle) null);
      double[] doubleArray0 = new double[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", doubleArray0, (double[]) null);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Integer integer0 = new Integer((byte)73);
      Integer integer1 = new Integer(52);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, (ToStringStyle) null);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      short[] shortArray0 = new short[2];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (short[]) null, shortArray0);
      // Undeclared exception!
      try { 
        diffBuilder1.append("zJw-nHiWSKin/|qP", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Integer integer0 = new Integer((byte)78);
      Integer integer1 = new Integer(48);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, (ToStringStyle) null);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("$c@nup$T~w.d@", (short) (byte)78, (short)1087);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("$c@nup$T~w.d@", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<DiffResult<Integer>> diffBuilder1 = new DiffBuilder<DiffResult<Integer>>(diffResult0, diffResult0, toStringStyle0, false);
      DiffBuilder<DiffResult<Integer>> diffBuilder2 = diffBuilder1.append("]", (short)472, (short) (-4868));
      assertSame(diffBuilder2, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-30));
      Integer integer1 = new Integer(121);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, (ToStringStyle) null);
      long[] longArray0 = new long[3];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("Z", longArray0, (long[]) null);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("Z", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(1065353183);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, (ToStringStyle) null);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("P7btH", (long) (-1), (long) 1065353183);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("P7btH", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-23));
      Integer integer1 = new Integer((-1413));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, (ToStringStyle) null);
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = new Object[3];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append(":rtY!)@9bFNY", objectArray0, objectArray1);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("32_ig", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Integer integer0 = new Integer(40);
      Integer integer1 = new Integer(3547);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, (ToStringStyle) null);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("'q=~\"/0Q;As~Esqx0DD", (Object) integer0, (Object) integer1);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("'q=~\"/0Q;As~Esqx0DD", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-55));
      Integer integer1 = new Integer(68);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, (ToStringStyle) null);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("e8h6-TVX", (byte) (-29), (byte) (-55));
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("e8h6-TVX", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Integer integer0 = new Integer((byte)46);
      Integer integer1 = new Integer(33);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, (ToStringStyle) null);
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = new boolean[2];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("3", booleanArray0, booleanArray1);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("3", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Integer integer0 = new Integer((byte)69);
      Integer integer1 = new Integer((-1342));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, (ToStringStyle) null);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", 'T', 'k');
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Integer integer0 = new Integer((byte)117);
      Integer integer1 = new Integer(52);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, (ToStringStyle) null);
      byte[] byteArray0 = new byte[12];
      byte[] byteArray1 = new byte[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("zJw-nHiWSKin/|qPR", byteArray0, byteArray1);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("zJw-nHiWSKin/|qPR", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-4));
      Integer integer1 = new Integer((-63));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, (ToStringStyle) null);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.junitpioneer.jupiter.params.ShortRange", false, true);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Integer integer0 = new Integer(2275);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<DiffResult<Integer>> diffBuilder1 = new DiffBuilder<DiffResult<Integer>>(diffResult0, diffResult0, toStringStyle0);
      DiffBuilder<DiffResult<Integer>> diffBuilder2 = diffBuilder1.append("", (byte)9, (byte)9);
      assertSame(diffBuilder2, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Integer integer0 = new Integer(2275);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("E#>3Y@^", (-1697L), (-1697L));
      assertSame(diffBuilder0, diffBuilder1);
  }
}
