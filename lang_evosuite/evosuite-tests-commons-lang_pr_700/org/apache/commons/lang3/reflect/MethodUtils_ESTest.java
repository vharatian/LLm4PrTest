/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 06:58:58 GMT 2025
 */

package org.apache.commons.lang3.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Set;
import org.apache.commons.lang3.ClassUtils;
import org.apache.commons.lang3.reflect.MethodUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MethodUtils_ESTest extends MethodUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, false);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 0);
      Class<Method> class0 = Method.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, false, "getDeclaringClass", (Object[]) classArray0, (Class<?>[]) classArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Class class0 = (Class)MethodUtils.invokeMethod(object0, true, "getClass", (Object[]) null, (Class<?>[]) null);
      assertEquals(1, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 0);
      Class<Method> class0 = Method.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, true, "getDeclaringClass", (Object[]) classArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 0);
      Class<Annotation> class0 = Annotation.class;
      Object[] objectArray0 = new Object[0];
      Object object0 = MethodUtils.invokeMethod((Object) class0, "getDeclaringClass", objectArray0, (Class<?>[]) classArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, true);
      Class class2 = (Class)MethodUtils.invokeMethod((Object) "getClass", "getClass", (Object[]) methodArray0, (Class<?>[]) null);
      assertFalse(class2.isEnum());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Class<Annotation> class1 = Annotation.class;
      Object object0 = MethodUtils.invokeMethod((Object) class1, "getDeclaredAnnotation", (Object[]) classArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, true, "getClass");
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, true);
      Object object1 = MethodUtils.invokeMethod(object0, "getClass", (Object[]) methodArray0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, "getDeclaringClass");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = MethodUtils.invokeMethod((Object) "toString", "toString");
      assertEquals("toString", object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 0);
      Class<Annotation> class0 = Annotation.class;
      Object object0 = MethodUtils.invokeExactMethod((Object) class0, "getDeclaringClass", (Object[]) classArray0, (Class<?>[]) classArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = MethodUtils.invokeExactMethod((Object) "StdIoExtension is active but neither System.out or System.in are getting redirected.", "getClass", (Object[]) null);
      Class class0 = (Class)MethodUtils.invokeExactMethod(object0, "getClass", (Object[]) null, (Class<?>[]) null);
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Object object0 = MethodUtils.invokeExactMethod((Object) class0, "getAnnotation", (Object[]) classArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = MethodUtils.invokeExactMethod(object0, "toString");
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Method method0 = MethodUtils.getMatchingMethod(class0, "setMethodAccessor", classArray0);
      assertEquals("setMethodAccessor", method0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "invoke", classArray0);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
      assertEquals(129, method1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Method method0 = MethodUtils.getMatchingMethod(class0, "getDeclaredAnnotation", classArray0);
      method0.setAccessible(true);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
      assertTrue(method1.isAccessible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      Method method0 = MethodUtils.getAccessibleMethod(class0, "No such method: ", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, (String) null, (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "isInstance", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: isInstance() on class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, false, (String) null, (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      Class<Method> class1 = Method.class;
      Class<Annotation> class2 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class1, class2);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, false, "getDeclaredAnnotation", (Object[]) methodArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object[] objectArray0 = new Object[1];
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 5);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, true, "", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // methodName
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "invoke", classArray0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) method0, false, "invoke", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getDeclaredAnnotation", classArray0);
      try { 
        MethodUtils.invokeMethod((Object) method0, false, "getDeclaredAnnotation", (Object[]) classArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, false, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      try { 
        MethodUtils.invokeMethod((Object) "verifyParameters", true, "verifyParameters", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such method: verifyParameters() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, true, "", objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // methodName
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "clone", true, "clone");
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "getAnnotation", true, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // methodName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // methodName
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "format", false, "format");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, (String) null, (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "getAnnotatjon", "getAnnotatjon", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: getAnnotatjon() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Annotation> class0 = Annotation.class;
      Class<Annotation>[] classArray1 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, "hashCode", (Object[]) classArray0, (Class<?>[]) classArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, "h{#31hC", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "format", "format", (Object[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) "hashCode", "hashCode", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      try { 
        MethodUtils.invokeExactMethod((Object) class0, "getDeclaredAnnotationsByType", objectArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "StdIo_System_Out", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 0);
      try { 
        MethodUtils.invokeExactMethod((Object) "getAnnotatjon", "getAnnotatjon", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: getAnnotatjon() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Object> class0 = Object.class;
      try { 
        MethodUtils.invokeExactMethod((Object) class0, "notify");
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      try { 
        MethodUtils.invokeExactMethod((Object) "double", "double");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: double() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getMatchingMethod(class0, "verifyParameters", classArray0);
      Class<?>[] classArray1 = method0.getParameterTypes();
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(classArray1, classArray1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(classArray0, classArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      // Undeclared exception!
      try { 
        MethodUtils.getOverrideHierarchy((Method) null, classUtils_Interfaces0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsWithAnnotation(classArray0[0], class0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // cls
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsWithAnnotation(classArray0[0], class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // cls
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsListWithAnnotation(class0, (Class<? extends Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // annotationCls
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingMethod(class0, (String) null, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // methodName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingMethod(class0, "", classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // methodName
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingAccessibleMethod(classArray0[0], "invoke", classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getAnnotation((Method) null, class0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // method
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      // Undeclared exception!
      try { 
        MethodUtils.getAccessibleMethod(classArray0[1], "().on object: ", classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1, false, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1, true, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getAnnotation", classArray0);
      assertNotNull(method0);
      
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      Set<Method> set0 = MethodUtils.getOverrideHierarchy(method0, classUtils_Interfaces0);
      assertEquals(4, set0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method method0 = MethodUtils.getMatchingMethod(class0, "iag.3 M", (Class<?>[]) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 2);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "notifyAll", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, "invoke", (Object[]) null, classArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "toString", objectArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, "(", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: (() on class: java.lang.reflect.Method
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Class<Method> class0 = Method.class;
      try { 
        MethodUtils.invokeExactMethod((Object) class0, "notify", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, true);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      try { 
        MethodUtils.invokeMethod((Object) class1, true, "toCharArray", (Object[]) methodArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such method: toCharArray() on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      try { 
        MethodUtils.invokeMethod((Object) class0, true, "getDeclaredAnnotation", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "annotationType", classArray0);
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class0, false, false);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingMethod(class0, "getGenericInfo", classArray0);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class1, false, false);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Method method0 = MethodUtils.getMatchingMethod(class0, "getDeclaredAnnotation", classArray0);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class1, true, false);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "getAnnotatedExceptionTypes", (Class<?>[]) null);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class1, true, true);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Method method0 = MethodUtils.getMatchingMethod(class0, "invoke", classArray0);
      assertTrue(method0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Object object0 = MethodUtils.invokeMethod((Object) "hashCode", true, "hashCode");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      Object object1 = MethodUtils.invokeMethod(object0, true, "hashCode", objectArray0);
      assertEquals(147696667, object1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingMethod(class0, "getAnnotation", classArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Found multiple candidates for method getAnnotation(null) on class java.lang.reflect.Method : [public java.lang.annotation.Annotation java.lang.reflect.Method.getAnnotation(java.lang.Class),public java.lang.annotation.Annotation java.lang.reflect.Executable.getAnnotation(java.lang.Class),public java.lang.annotation.Annotation java.lang.reflect.AccessibleObject.getAnnotation(java.lang.Class)]
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[4] = (Object) class0;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, "invoke", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      try { 
        MethodUtils.invokeMethod((Object) class0, "getDeclaredConstructor", objectArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "invoke", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getDeclaredAnnotation", classArray0);
      try { 
        MethodUtils.invokeMethod((Object) method0, "getDeclaredAnnotation", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      try { 
        MethodUtils.invokeMethod((Object) "format", "format", objectArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "format", "format");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Method method0 = MethodUtils.getAccessibleMethod((Method) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      try { 
        MethodUtils.invokeMethod((Object) class0, "getDeclaredConstructor");
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Method method0 = MethodUtils.getMatchingMethod(class0, "getDeclaredAnnotation", classArray0);
      Class<?>[] classArray1 = method0.getParameterTypes();
      Object[] objectArray0 = MethodUtils.getVarArgs(classArray1, classArray1);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class0 = Object.class;
      classArray0[1] = class0;
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(classArray0, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Object[] objectArray0 = MethodUtils.getVarArgs(classArray0, classArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Class<Object> class0 = Object.class;
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "getAnnotation", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: getAnnotation() on class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, "getAnnotation", (Object[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      try { 
        MethodUtils.invokeExactMethod((Object) "No such method: ", "No such method: ", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: No such method: () on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "NrCassr", true, "NrCassr");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such method: NrCassr() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object[] objectArray0 = new Object[0];
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "methodName", objectArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: methodName() on class: java.lang.reflect.Method
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, "invoke", (Object[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, false, "getEnclosingMethod");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Method method0 = MethodUtils.getMatchingMethod(class0, "getDeclaredAnnotation", classArray0);
      Object object0 = MethodUtils.invokeExactMethod((Object) method0, "getDefaultValue");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      try { 
        MethodUtils.invokeMethod((Object) "&", "&", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: &() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "charAt", "charAt");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: charAt() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Object object0 = MethodUtils.invokeExactMethod((Object) "StdIoExtension is active but neither System.out or System.in are getting redirected.", "getClass", (Object[]) null);
      Class class0 = (Class)MethodUtils.invokeMethod(object0, true, "getClass", (Object[]) null);
      assertFalse(class0.isEnum());
  }
}
