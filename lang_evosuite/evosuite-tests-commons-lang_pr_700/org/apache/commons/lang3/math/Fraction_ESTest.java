/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 06:54:06 GMT 2025
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.divideBy(fraction0);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
      assertEquals(1, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-390), 85, 3729);
      Fraction fraction1 = Fraction.getFraction((-390), (-390));
      Fraction fraction2 = fraction0.FOUR_FIFTHS.add(fraction1);
      int int0 = fraction2.compareTo(fraction1);
      assertEquals(1, int0);
      assertEquals((-1454395), fraction0.getNumerator());
      assertEquals(702, fraction2.getNumerator());
      assertEquals(390, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      fraction0.hashCode();
      fraction0.hashCode();
      assertEquals(3, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-414), 48, 3729);
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals((-1543854), fraction0.getNumerator());
      assertFalse(boolean0);
      assertEquals((byte)98, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.getFraction(2.147483647E9);
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction0.pow((-11));
      fraction3.subtract(fraction2);
      assertEquals((-2.147483646E9), fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction3.getProperWhole());
      assertEquals(Integer.MAX_VALUE, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.getFraction(2.147483647E9);
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction2.subtract(fraction0);
      fraction3.subtract(fraction0);
      assertEquals((-2147483646), fraction2.getProperWhole());
      assertEquals(2.147483647E9, fraction1.doubleValue(), 0.01);
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 37);
      Fraction fraction1 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-390), (-390));
      Fraction fraction1 = fraction0.reduce();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(" >]NuA 2P(~u!6#6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" >]NuA 2P(~u!6#6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(".S!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1), Integer.MAX_VALUE, 1);
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.subtract(fraction0);
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertSame(fraction2, fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-164), (-164));
      Fraction fraction1 = fraction0.reduce();
      assertEquals(1, fraction0.getNumerator());
      assertSame(fraction1, fraction0);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-390), 85, 3729);
      Fraction fraction1 = fraction0.pow(1);
      assertEquals((-390.0227943148297), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.pow(25);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-390), 85, 3729);
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.pow(1);
      assertEquals((-390.0228F), fraction0.floatValue(), 0.01F);
      assertEquals(390.0227943148297, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(370, (-1504));
      Fraction fraction1 = fraction0.invert();
      Fraction fraction2 = fraction1.negate();
      assertEquals(1504, fraction0.getDenominator());
      assertEquals(370, fraction2.getDenominator());
      assertEquals(4.0648646F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.negate();
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.reduce();
      assertEquals((-1.0), fraction2.doubleValue(), 0.01);
      assertSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(370, (-1504));
      Fraction fraction1 = fraction0.invert();
      Fraction fraction2 = fraction1.multiplyBy(fraction1);
      assertEquals((-1504), fraction1.getNumerator());
      assertEquals(34225, fraction2.getDenominator());
      assertEquals(16.523126369612857, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.add(fraction0);
      Fraction fraction2 = Fraction.getReducedFraction(1200, (-1085));
      Fraction fraction3 = fraction1.multiplyBy(fraction2);
      assertEquals((-240), fraction2.getNumerator());
      assertEquals(3, fraction1.getDenominator());
      assertEquals((-320), fraction3.getNumerator());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(370, (-1504));
      long long0 = fraction0.longValue();
      assertEquals(0L, long0);
      assertEquals((-0.24601063829787234), fraction0.doubleValue(), 0.01);
      assertEquals(1504, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.getFraction(0.0);
      Fraction fraction2 = fraction1.subtract(fraction0);
      long long0 = fraction2.longValue();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1.0);
      int int0 = fraction0.intValue();
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(370, (-1504));
      Fraction fraction1 = fraction0.invert();
      int int0 = fraction1.intValue();
      assertEquals((-4), int0);
      assertEquals(1504, fraction0.getDenominator());
      assertEquals((-1504), fraction1.getNumerator());
      assertEquals((-4.064864864864865), fraction1.doubleValue(), 0.01);
      assertEquals((-0.24601063F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(370, (-1504));
      int int0 = fraction0.getProperWhole();
      assertEquals((-0.24601063F), fraction0.floatValue(), 0.01F);
      assertEquals(1504, fraction0.getDenominator());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-414), 32, 3729);
      int int0 = fraction0.getProperWhole();
      assertEquals((-414), int0);
      assertEquals((-414.00858138911235), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      int int0 = fraction0.getProperNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0.0);
      int int0 = fraction0.getNumerator();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(370, (-1504));
      int int0 = fraction0.getNumerator();
      assertEquals((-0.24601063829787234), fraction0.doubleValue(), 0.01);
      assertEquals((-370), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("592839 1/2");
      assertEquals(1185679, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("1/3");
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("-1");
      assertEquals((-1), fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(35, 35, 35);
      String string0 = fraction0.toProperString();
      assertEquals("36", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1392), 593);
      assertEquals((-2.3473861720067455), fraction0.doubleValue(), 0.01);
      assertEquals(593, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 1);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      float float0 = fraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      float float0 = fraction0.floatValue();
      assertEquals(0.6666667F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.doubleValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-753), 1529);
      double double0 = fraction0.doubleValue();
      assertEquals((-753), fraction0.getNumerator());
      assertEquals((-0.4924787442773054), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-414), 32, 3729);
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertEquals((-414.00858138911235), fraction0.doubleValue(), 0.01);
      assertEquals(0, fraction2.getProperNumerator());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      Fraction fraction1 = Fraction.getFraction(Integer.MAX_VALUE, 270);
      Fraction fraction2 = fraction0.divideBy(fraction1);
      assertEquals(Integer.MAX_VALUE, fraction1.getNumerator());
      assertEquals(1.2572854763163652E-7, fraction2.doubleValue(), 0.01);
      assertEquals(7953643.0F, fraction1.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.getReducedFraction(766, (-531));
      Fraction fraction2 = fraction1.divideBy(fraction0);
      assertEquals(1593, fraction2.getDenominator());
      assertEquals((-3064), fraction2.getNumerator());
      assertEquals((-1.4425612052730696), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.getFraction(2.147483647E9);
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction2.subtract(fraction0);
      Fraction fraction4 = fraction3.add(fraction0);
      assertEquals(2.14748365E9F, fraction1.floatValue(), 0.01F);
      assertEquals((-2147483646), fraction4.getNumerator());
      assertEquals((short)2, fraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.getFraction((double) 2147483646);
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(2.147483647E9, fraction2.doubleValue(), 0.01);
      assertEquals(2147483646, fraction1.getProperWhole());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(766, (-531));
      Fraction fraction1 = fraction0.abs();
      assertEquals(1.4425612052730696, fraction1.doubleValue(), 0.01);
      assertEquals((-1.4425612052730696), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fraction
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        fraction0.multiplyBy((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fraction
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-365.618223));
      // Undeclared exception!
      try { 
        fraction0.multiplyBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // str
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        fraction0.divideBy((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fraction
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.TWO_QUARTERS.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fraction
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 3);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      Fraction fraction1 = Fraction.getReducedFraction((-1499), (-1499));
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(370, 7);
      // Undeclared exception!
      try { 
        fraction0.pow((-1504));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.pow(2);
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 370);
      Fraction fraction1 = fraction0.abs();
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      int int0 = fraction0.getProperNumerator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      int int0 = fraction0.getNumerator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(1.0);
      int int0 = fraction0.getProperWhole();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      int int0 = fraction0.getDenominator();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-1069));
      String string0 = fraction0.toProperString();
      assertEquals(1, fraction0.getDenominator());
      assertEquals("-1069", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      String string0 = fraction0.toProperString();
      assertEquals("1/2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1.0));
      String string0 = fraction0.toProperString();
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(string0);
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      String string0 = fraction0.toProperString();
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      fraction0.toProperString();
      String string0 = fraction0.toProperString();
      assertEquals("1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) 1731);
      Fraction.getFraction((double) 1731);
      fraction0.TWO_THIRDS.toString();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1731.0, fraction0.doubleValue(), 0.01);
      assertEquals(1731, fraction0.getNumerator());
      assertEquals(1731.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-2147483633));
      String string0 = fraction0.toString();
      assertEquals("-2147483633/1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) 1731);
      Fraction fraction1 = Fraction.getFraction((double) 1731);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1731, fraction1.getNumerator());
      assertEquals(1731.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      int int0 = fraction0.ONE.compareTo(fraction0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((double) (-1069));
      fraction0.hashCode();
      fraction0.hashCode();
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1069), fraction0.getNumerator());
      assertEquals((-1069.0), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ZERO;
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(1, fraction0.getNumerator());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(370, (-1504));
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertEquals((-0.24601063829787234), fraction0.doubleValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(1504, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.divideBy(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.1474836355970044E9);
      // Undeclared exception!
      try { 
        fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: numerator too large after multiply
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.add(fraction1);
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.getFraction(0, Integer.MAX_VALUE, 32);
      Fraction fraction2 = fraction1.negate();
      Fraction fraction3 = fraction0.divideBy(fraction0);
      // Undeclared exception!
      try { 
        fraction3.subtract(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147483631), 1513);
      Fraction fraction1 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(2.147483647E9);
      // Undeclared exception!
      try { 
        fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.invert();
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(2.5F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, Integer.MAX_VALUE, 5);
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = Fraction.getFraction((-1.0));
      // Undeclared exception!
      try { 
        fraction2.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-2009.58019901));
      Fraction fraction1 = fraction0.invert();
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.pow(0);
      assertEquals(1L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.abs();
      assertEquals(0.5, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.getFraction(2.147483647E9);
      Fraction fraction2 = fraction0.subtract(fraction1);
      Fraction fraction3 = fraction2.abs();
      assertEquals(2.14748365E9F, fraction1.floatValue(), 0.01F);
      assertEquals(2.147483646E9, fraction3.doubleValue(), 0.01);
      assertEquals((byte)2, fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 3);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: too large to negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction1.subtract(fraction0);
      // Undeclared exception!
      try { 
        fraction2.pow((-4742));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 3);
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate numerator
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.reduce();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(2, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 0, 2953);
      Fraction fraction1 = fraction0.reduce();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2953, fraction0.getDenominator());
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.reduce();
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("0");
      Fraction fraction1 = fraction0.reduce();
      assertSame(fraction1, fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("4 w|LLc");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The fraction could not be parsed as the format X Y/Z
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction("Unable to invert zero.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(2.147483648E9);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1175));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-1275), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.pow(Integer.MIN_VALUE);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(2147483638, 2147483638, 2147483638);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, 2155, 2155);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction((-1963), (-1963), 3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction("-1974 316/2385");
      assertEquals((-1974.1324F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(233, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
         verifyException("org.apache.commons.lang3.math.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      double double0 = fraction0.doubleValue();
      assertEquals(0.6666666666666666, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      long long0 = fraction0.longValue();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(370, (-1504));
      float float0 = fraction0.floatValue();
      assertEquals((-0.24601063F), float0, 0.01F);
      assertEquals((-370), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction((-1974.132494748));
      String string0 = fraction0.toProperString();
      assertEquals("-1974 316/2385", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      boolean boolean0 = fraction0.equals(fraction1);
      assertEquals(5, fraction0.getDenominator());
      assertFalse(boolean0);
      assertEquals(0.04, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      int int0 = fraction0.intValue();
      assertEquals(0, int0);
  }
}
