/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 06:47:06 GMT 2025
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.concurrent.AbstractCircuitBreaker;
import org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class EventCountCircuitBreaker_ESTest extends EventCountCircuitBreaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-11), (-11), timeUnit0);
      AbstractCircuitBreaker.State abstractCircuitBreaker_State0 = AbstractCircuitBreaker.State.OPEN;
      eventCountCircuitBreaker0.changeState(abstractCircuitBreaker_State0);
      boolean boolean0 = eventCountCircuitBreaker0.checkState();
      assertFalse(eventCountCircuitBreaker0.isClosed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0L, timeUnit0, 1610);
      eventCountCircuitBreaker0.incrementAndCheckState();
      Integer integer0 = new Integer((-683));
      boolean boolean0 = eventCountCircuitBreaker0.incrementAndCheckState(integer0);
      assertFalse(eventCountCircuitBreaker0.isClosed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0);
      System.setCurrentTimeMillis(0);
      eventCountCircuitBreaker0.now();
      assertEquals(0, eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(0, eventCountCircuitBreaker0.getClosingThreshold());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(1, 1, timeUnit0);
      eventCountCircuitBreaker0.now();
      assertEquals(1, eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(1, eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals(1L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals(1L, eventCountCircuitBreaker0.getClosingInterval());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-191), 0L, timeUnit0, 1009);
      System.setCurrentTimeMillis((-155000000000L));
      eventCountCircuitBreaker0.now();
      assertEquals((-191), eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(1009, eventCountCircuitBreaker0.getClosingThreshold());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(1, 3028L, timeUnit0);
      Integer integer0 = new Integer(1);
      boolean boolean0 = eventCountCircuitBreaker0.incrementAndCheckState(integer0);
      assertEquals(261619200000000000L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals(1, eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(1, eventCountCircuitBreaker0.getClosingThreshold());
      assertTrue(boolean0);
      assertEquals(261619200000000000L, eventCountCircuitBreaker0.getClosingInterval());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(81, 81, timeUnit0, 2376, 81, timeUnit0);
      Integer integer0 = new Integer(2376);
      boolean boolean0 = eventCountCircuitBreaker0.incrementAndCheckState(integer0);
      assertTrue(eventCountCircuitBreaker0.isOpen());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0);
      int int0 = eventCountCircuitBreaker0.getOpeningThreshold();
      assertEquals(0, eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-2222), 0L, timeUnit0, (-2222), 2666L, timeUnit0);
      int int0 = eventCountCircuitBreaker0.getOpeningThreshold();
      assertEquals(9597600000000000L, eventCountCircuitBreaker0.getClosingInterval());
      assertEquals((-2222), int0);
      assertEquals(0L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals((-2222), eventCountCircuitBreaker0.getClosingThreshold());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(1, 0L, timeUnit0, 1);
      eventCountCircuitBreaker0.getOpeningInterval();
      assertEquals(1, eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals(1, eventCountCircuitBreaker0.getOpeningThreshold());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, (-155L), timeUnit0, (-3310));
      long long0 = eventCountCircuitBreaker0.getOpeningInterval();
      assertEquals((-3310), eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals(0, eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals((-155000000000L), eventCountCircuitBreaker0.getClosingInterval());
      assertEquals((-155000000000L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0);
      int int0 = eventCountCircuitBreaker0.getClosingThreshold();
      assertEquals(0, int0);
      assertEquals(0, eventCountCircuitBreaker0.getOpeningThreshold());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-99), 4702L, timeUnit0, (-99), 4702L, timeUnit0);
      int int0 = eventCountCircuitBreaker0.getClosingThreshold();
      assertEquals(406252800000000000L, eventCountCircuitBreaker0.getClosingInterval());
      assertEquals(406252800000000000L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals((-99), int0);
      assertEquals((-99), eventCountCircuitBreaker0.getOpeningThreshold());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0);
      eventCountCircuitBreaker0.getClosingInterval();
      assertEquals(0, eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(0, eventCountCircuitBreaker0.getClosingThreshold());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-65), (-65), timeUnit0);
      long long0 = eventCountCircuitBreaker0.getClosingInterval();
      assertEquals((-65), eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals((-65000000000L), eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals((-65000000000L), long0);
      assertEquals((-65), eventCountCircuitBreaker0.getClosingThreshold());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = null;
      try {
        eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-1), (-1), timeUnit0, (-1), (-1), (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.EventCountCircuitBreaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EventCountCircuitBreaker eventCountCircuitBreaker0 = null;
      try {
        eventCountCircuitBreaker0 = new EventCountCircuitBreaker(116, 116, (TimeUnit) null, 116);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.EventCountCircuitBreaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EventCountCircuitBreaker eventCountCircuitBreaker0 = null;
      try {
        eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-1006), (-1006), (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.EventCountCircuitBreaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(2090, 2090, timeUnit0);
      boolean boolean0 = eventCountCircuitBreaker0.checkState();
      assertTrue(boolean0);
      assertEquals(7524000000000000L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals(2090, eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(2090, eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals(7524000000000000L, eventCountCircuitBreaker0.getClosingInterval());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-2126), (-2126), timeUnit0);
      // Undeclared exception!
      try { 
        eventCountCircuitBreaker0.incrementAndCheckState((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.concurrent.EventCountCircuitBreaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(81, 81, timeUnit0, 2376, 81, timeUnit0);
      int int0 = eventCountCircuitBreaker0.getOpeningThreshold();
      assertEquals(81000000000L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals(81000000000L, eventCountCircuitBreaker0.getClosingInterval());
      assertEquals(2376, eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals(81, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-99), 4702L, timeUnit0, (-99), 4702L, timeUnit0);
      long long0 = eventCountCircuitBreaker0.getOpeningInterval();
      assertEquals(406252800000000000L, long0);
      assertEquals((-99), eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(406252800000000000L, eventCountCircuitBreaker0.getClosingInterval());
      assertEquals((-99), eventCountCircuitBreaker0.getClosingThreshold());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker((-99), 4702L, timeUnit0, (-99), 4702L, timeUnit0);
      long long0 = eventCountCircuitBreaker0.getClosingInterval();
      assertEquals((-99), eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals((-99), eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(406252800000000000L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals(406252800000000000L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(0, 0, timeUnit0, 0);
      AbstractCircuitBreaker.State abstractCircuitBreaker_State0 = AbstractCircuitBreaker.State.OPEN;
      eventCountCircuitBreaker0.changeState(abstractCircuitBreaker_State0);
      boolean boolean0 = eventCountCircuitBreaker0.incrementAndCheckState();
      assertTrue(eventCountCircuitBreaker0.isOpen());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(1, 1, timeUnit0, 1);
      AbstractCircuitBreaker.State abstractCircuitBreaker_State0 = AbstractCircuitBreaker.State.OPEN;
      eventCountCircuitBreaker0.changeState(abstractCircuitBreaker_State0);
      boolean boolean0 = eventCountCircuitBreaker0.checkState();
      assertFalse(eventCountCircuitBreaker0.isOpen());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(1977, 1977, timeUnit0);
      boolean boolean0 = eventCountCircuitBreaker0.incrementAndCheckState();
      assertEquals(7117200000000000L, eventCountCircuitBreaker0.getClosingInterval());
      assertEquals(7117200000000000L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals(1977, eventCountCircuitBreaker0.getClosingThreshold());
      assertTrue(boolean0);
      assertEquals(1977, eventCountCircuitBreaker0.getOpeningThreshold());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(126, 126, timeUnit0);
      int int0 = eventCountCircuitBreaker0.getClosingThreshold();
      assertEquals(126, int0);
      assertEquals(126, eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(126000000L, eventCountCircuitBreaker0.getClosingInterval());
      assertEquals(126000000L, eventCountCircuitBreaker0.getOpeningInterval());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(8, 8, timeUnit0);
      eventCountCircuitBreaker0.close();
      assertEquals(8, eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals(28800000000000L, eventCountCircuitBreaker0.getOpeningInterval());
      assertEquals(28800000000000L, eventCountCircuitBreaker0.getClosingInterval());
      assertEquals(8, eventCountCircuitBreaker0.getOpeningThreshold());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      EventCountCircuitBreaker eventCountCircuitBreaker0 = new EventCountCircuitBreaker(1, 1, timeUnit0, 1);
      eventCountCircuitBreaker0.open();
      assertEquals(1, eventCountCircuitBreaker0.getClosingThreshold());
      assertEquals(1, eventCountCircuitBreaker0.getOpeningThreshold());
      assertEquals(1000000L, eventCountCircuitBreaker0.getClosingInterval());
      assertEquals(1000000L, eventCountCircuitBreaker0.getOpeningInterval());
  }
}
