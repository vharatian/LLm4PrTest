/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 06:44:55 GMT 2025
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
import org.apache.commons.lang3.concurrent.MultiBackgroundInitializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class BackgroundInitializer_ESTest extends BackgroundInitializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      Callable<ForkJoinTask<Object>> callable0 = (Callable<ForkJoinTask<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<ForkJoinTask<Object>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<ForkJoinTask<Object>>(callable0);
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.getTaskCount();
      multiBackgroundInitializer0.getTaskCount();
      callableBackgroundInitializer0.isStarted();
      Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      multiBackgroundInitializer0.initialize();
      Callable<Delayed> callable2 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-673), 1, (-712L), timeUnit0, (BlockingQueue<Runnable>) null, threadPoolExecutor_CallerRunsPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1, 1, 1, timeUnit0, linkedBlockingDeque0, threadPoolExecutor_AbortPolicy0);
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable0, threadPoolExecutor0);
      ExecutorService executorService0 = callableBackgroundInitializer0.getActiveExecutor();
      assertNull(executorService0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(callable0).call();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.start();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      callableBackgroundInitializer0.get();
      callableBackgroundInitializer0.getTaskCount();
      multiBackgroundInitializer0.start();
      multiBackgroundInitializer0.getFuture();
      multiBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.getFuture();
      Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      callableBackgroundInitializer0.getFuture();
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1, 1888, 1L, timeUnit0, linkedBlockingDeque0);
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Integer>(callable1, threadPoolExecutor0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0);
      linkedBlockingDeque0.offer((Runnable) mockThread1);
      threadPoolExecutor0.execute(mockThread1);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer1.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable0).call();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0, (ExecutorService) null);
      callableBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.getExternalExecutor();
      Callable<ForkJoinTask<Integer>> callable1 = (Callable<ForkJoinTask<Integer>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      CallableBackgroundInitializer<ForkJoinTask<Integer>> callableBackgroundInitializer1 = new CallableBackgroundInitializer<ForkJoinTask<Integer>>(callable1);
      callableBackgroundInitializer1.start();
      callableBackgroundInitializer1.start();
      callableBackgroundInitializer1.get();
      callableBackgroundInitializer1.start();
      callableBackgroundInitializer1.get();
      multiBackgroundInitializer0.initialize();
      multiBackgroundInitializer0.initialize();
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.setExternalExecutor((ExecutorService) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set ExecutorService after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      // Undeclared exception!
      try { 
        multiBackgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Callable<ForkJoinTask<Integer>> callable0 = (Callable<ForkJoinTask<Integer>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<ForkJoinTask<Integer>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<ForkJoinTask<Integer>>(callable0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1);
      ForkJoinPool.getCommonPoolParallelism();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(forkJoinPool0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "UFz5J*)|zs,7[A-");
      callableBackgroundInitializer0.initialize();
      mockThread0.run();
      forkJoinPool0.submit((Runnable) mockThread0, (Object) "UFz5J*)|zs,7[A-");
      Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      forkJoinPool0.getFactory();
      forkJoinPool0.submit(callable1);
      multiBackgroundInitializer0.getTaskCount();
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.getFuture();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      boolean boolean0 = callableBackgroundInitializer0.start();
      assertTrue(boolean0);
      
      callableBackgroundInitializer0.start();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      callableBackgroundInitializer0.get();
      callableBackgroundInitializer0.getTaskCount();
      multiBackgroundInitializer0.start();
      multiBackgroundInitializer0.getFuture();
      multiBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.getFuture();
      Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      callableBackgroundInitializer0.getFuture();
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1, 1888, 1L, timeUnit0, linkedBlockingDeque0);
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Integer>(callable1, threadPoolExecutor0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0);
      linkedBlockingDeque0.offer((Runnable) mockThread1);
      threadPoolExecutor0.execute(mockThread1);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer1.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(6, threadFactory0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      scheduledThreadPoolExecutor0.getKeepAliveTime(timeUnit0);
      callableBackgroundInitializer0.setExternalExecutor(scheduledThreadPoolExecutor0);
      ExecutorService executorService0 = callableBackgroundInitializer0.getExternalExecutor();
      callableBackgroundInitializer0.setExternalExecutor(executorService0);
      int int0 = callableBackgroundInitializer0.getTaskCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(multiBackgroundInitializer0, multiBackgroundInitializer0).when(callable0).call();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0, (ExecutorService) null);
      callableBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.getExternalExecutor();
      Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      multiBackgroundInitializer0.initialize();
      multiBackgroundInitializer0.initialize();
      // Undeclared exception!
      try { 
        callableBackgroundInitializer0.setExternalExecutor((ExecutorService) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set ExecutorService after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0);
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      ExecutorService executorService0 = null;
      CallableBackgroundInitializer<Object> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Object>(callable1, (ExecutorService) null);
      callableBackgroundInitializer1.start();
      // Undeclared exception!
      try { 
        callableBackgroundInitializer1.setExternalExecutor((ExecutorService) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set ExecutorService after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      Callable<ForkJoinTask<Object>> callable0 = (Callable<ForkJoinTask<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<ForkJoinTask<Object>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<ForkJoinTask<Object>>(callable0);
      callableBackgroundInitializer0.getTaskCount();
      callableBackgroundInitializer0.isStarted();
      Callable<Object> callable1 = null;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-673), (-673), (-673), timeUnit0, linkedBlockingQueue0, threadPoolExecutor_CallerRunsPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0, threadPoolExecutor_AbortPolicy0);
      multiBackgroundInitializer0.setExternalExecutor(scheduledThreadPoolExecutor0);
      multiBackgroundInitializer0.start();
      multiBackgroundInitializer0.getTaskCount();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = null;
      try {
        callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>((Callable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // callable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      multiBackgroundInitializer0.initialize();
      MultiBackgroundInitializer multiBackgroundInitializer1 = new MultiBackgroundInitializer(forkJoinPool0);
      // Undeclared exception!
      try { 
        multiBackgroundInitializer0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable0).call();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);
      callableBackgroundInitializer0.initialize();
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      ForkJoinPool forkJoinPool1 = ForkJoinTask.getPool();
      callableBackgroundInitializer0.setExternalExecutor(forkJoinPool1);
      callableBackgroundInitializer0.setExternalExecutor(forkJoinPool0);
      callableBackgroundInitializer0.getTaskCount();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(forkJoinPool0);
      multiBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.start();
      multiBackgroundInitializer0.start();
      // Undeclared exception!
      try { 
        multiBackgroundInitializer0.addInitializer("", callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // addInitializer() must not be called after start()!
         //
         verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(forkJoinPool0);
      assertFalse(multiBackgroundInitializer0.isStarted());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ForkJoinTask.getPool();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      Callable<ForkJoinTask<Integer>> callable0 = (Callable<ForkJoinTask<Integer>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(callable0).call();
      CallableBackgroundInitializer<ForkJoinTask<Integer>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<ForkJoinTask<Integer>>(callable0);
      callableBackgroundInitializer0.initialize();
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.get();
      MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize();
      assertTrue(multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(235, threadPoolExecutor_AbortPolicy0);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(5, 5, 5, timeUnit0, blockingQueue0, threadPoolExecutor_AbortPolicy0);
      threadPoolExecutor0.getTaskCount();
      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0, threadPoolExecutor0);
      scheduledThreadPoolExecutor0.getCompletedTaskCount();
      callableBackgroundInitializer0.start();
      callableBackgroundInitializer0.getFuture();
      scheduledThreadPoolExecutor0.getCorePoolSize();
      ExecutorService executorService0 = callableBackgroundInitializer0.getActiveExecutor();
      Callable<ForkJoinTask<Object>> callable1 = (Callable<ForkJoinTask<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      threadPoolExecutor0.toString();
      CallableBackgroundInitializer<ForkJoinTask<Object>> callableBackgroundInitializer1 = new CallableBackgroundInitializer<ForkJoinTask<Object>>(callable1, executorService0);
      // Undeclared exception!
      try { 
        callableBackgroundInitializer1.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer();
      // Undeclared exception!
      try { 
        multiBackgroundInitializer0.get();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }
}
