/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:55:33 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.LongBuffer;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      int[] intArray0 = new int[16];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(16, intArray0.length);
      assertEquals(0, int0);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(16, intArray0.length);
      assertEquals(15, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[1];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      String string0 = ArrayUtils.toString((Object) null, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)45;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      int[] intArray0 = new int[4];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 2, 2, 2);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 160, 2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)118;
      shortArray0[1] = (short)1560;
      shortArray0[2] = (short)102;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)118, (short)1560, (short)102}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.insert(0, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      short[] shortArray0 = new short[4];
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray1, (Object) integerArray0[0], (-46));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Integer[] integerArray2 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray2.length);
      assertSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = '7';
      charArray0[2] = '\\';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'^', '7', '\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2222);
      shortArray0[1] = (short) (-2602);
      shortArray0[2] = (short)518;
      shortArray0[3] = (short) (-522);
      shortArray0[4] = (short)53;
      shortArray0[5] = (short) (-1828);
      shortArray0[6] = (short)1744;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-2222), (short) (-2602), (short)518, (short) (-522), (short)53, (short) (-1828), (short)1744}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      Long[] longArray0 = new Long[6];
      ArrayUtils.shift((Object[]) longArray0, 1, 1, (-4144));
      assertEquals(6, longArray0.length);
      
      Integer integer0 = new Integer((-4144));
      assertNotNull(integer0);
      assertEquals((-4144), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)2, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)0, (short)2}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[2] = (-1);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1), 0);
      assertArrayEquals(new int[] {(-1), 0, (-1)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, Integer.MAX_VALUE);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(booleanArray1, (-1), 2, (-1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1), Integer.MAX_VALUE);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 2.14748365E9F, 2.14748365E9F, 0.0F, 2.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(7, floatArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = 's';
      charArray0[2] = ':';
      charArray0[3] = '`';
      char[] charArray1 = ArrayUtils.insert(4, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'*', 's', ':', '`'}, charArray0);
      assertArrayEquals(new char[] {'*', 's', ':', '`', '*', 's', ':', '`'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-121));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)69, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)69, (byte)1, (byte) (-121)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) ':';
      floatArray0[1] = (float) (byte)1;
      floatArray0[2] = (float) '`';
      floatArray0[3] = (float) 's';
      floatArray0[4] = (float) '`';
      floatArray0[5] = (float) 's';
      floatArray0[6] = (float) '`';
      floatArray0[7] = (float) (byte)1;
      floatArray0[8] = (float) (byte) (-121);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 4);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {58.0F, 1.0F, 96.0F, 115.0F, 96.0F, 115.0F, 96.0F, 1.0F, (-121.0F), 4.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {58.0F, 1.0F, 96.0F, 115.0F, 96.0F, 115.0F, 96.0F, 1.0F, (-121.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(10, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, true}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 3504.3F;
      int int0 = ArrayUtils.indexOf(floatArray0, 3504.3F, (-1409));
      assertArrayEquals(new float[] {3504.3F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)44;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-2146431668), (byte)126);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146431668, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)55);
      assertArrayEquals(new byte[] {(byte)55}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-70);
      byteArray2[1] = (byte) (-108);
      byteArray2[2] = (byte)55;
      byteArray2[3] = (byte)55;
      byteArray2[4] = (byte)55;
      byte[] byteArray3 = ArrayUtils.insert(1, byteArray1, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)55}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-108), (byte)55, (byte)55, (byte)55}, byteArray2);
      assertArrayEquals(new byte[] {(byte)55, (byte) (-70), (byte) (-108), (byte)55, (byte)55, (byte)55}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertEquals(6, byteArray3.length);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-2367));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2367, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-2306), (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) (-1);
      longArray0[2] = 663L;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 5;
      long[] longArray1 = ArrayUtils.insert(5, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {5L, (-1L), 663L, (-1L), 5L}, longArray0);
      assertArrayEquals(new long[] {5L, (-1L), 663L, (-1L), 5L, 5L, (-1L), 663L, (-1L), 5L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      int int0 = (-460);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = null;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = null;
      objectArray0[3] = null;
      objectArray0[4] = null;
      objectArray0[5] = null;
      objectArray0[6] = null;
      objectArray0[7] = null;
      objectArray0[8] = null;
      int int1 = (-146);
      int int2 = 36;
      ArrayUtils.shift(objectArray0, (-146), 36, (-460));
      assertEquals(9, objectArray0.length);
      
      Integer integer0 = new Integer((-146));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertNotNull(integer0);
      assertEquals((-146), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Object[] objectArray1 = new Object[1];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-4264));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-4264);
      intArray0[1] = (-4264);
      int int0 = ArrayUtils.indexOf(intArray0, (-4264), (-4264));
      assertArrayEquals(new int[] {(-4264), (-4264)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) 0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.setValue((Number) (-4264));
      assertEquals((-4264), mutableInt0.intValue());
      assertEquals((-4264L), mutableInt0.longValue());
      assertEquals("-4264", mutableInt0.toString());
      assertEquals((-4264.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)88, mutableInt0.byteValue());
      assertEquals((short) (-4264), mutableInt0.shortValue());
      assertEquals((-4264.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-4264), (int)mutableInt0.getValue());
      assertEquals((-4264), (int)mutableInt0.toInteger());
      
      Integer integer0 = mutableInt0.getValue();
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-4264), mutableInt0.intValue());
      assertEquals((-4264L), mutableInt0.longValue());
      assertEquals("-4264", mutableInt0.toString());
      assertEquals((-4264.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)88, mutableInt0.byteValue());
      assertEquals((short) (-4264), mutableInt0.shortValue());
      assertEquals((-4264.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-4264), (int)mutableInt0.getValue());
      assertEquals((-4264), (int)mutableInt0.toInteger());
      assertNotNull(integer0);
      assertEquals((-4264), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertEquals((-4264), mutableInt0.intValue());
      assertEquals((-4264L), mutableInt0.longValue());
      assertEquals("-4264", mutableInt0.toString());
      assertEquals((-4264.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)88, mutableInt0.byteValue());
      assertEquals((short) (-4264), mutableInt0.shortValue());
      assertEquals((-4264.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-4264), (int)mutableInt0.getValue());
      assertEquals((-4264), (int)mutableInt0.toInteger());
      assertNotNull(object0);
      assertEquals((-4264), object0);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1507));
      assertArrayEquals(new int[] {(-4264), (-4264)}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-994));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-994)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-7844);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)1593;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)1;
      shortArray0[7] = (short) (-102);
      shortArray0[8] = (short)2;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short) (-7844), (short)0, (short)2, (short) (-1), (short)1593, (short) (-1), (short)1, (short) (-102), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-7844), (short)0, (short)2, (short) (-1), (short)1593, (short) (-1), (short)1, (short) (-102), (short)2}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 733L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      long[] longArray1 = ArrayUtils.add(longArray0, (-48L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {733L, 1L, 1L}, longArray0);
      assertArrayEquals(new long[] {733L, 1L, 1L, (-48L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      Integer[] integerArray0 = new Integer[4];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.getValue();
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer integer4 = Integer.getInteger("Wy{pL{q1#JpmI0<f7", integer3);
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      integerArray0[3] = integer4;
      mutableInt0.setValue(int0);
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer4));
      assertTrue(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      
      Integer[] integerArray1 = ArrayUtils.remove(integerArray0, int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      Integer[] integerArray2 = ArrayUtils.insert(int0, integerArray0, integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(3, integerArray1.length);
      assertEquals(7, integerArray2.length);
      assertEquals(4, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 733L;
      floatArray0[1] = (float) 733L;
      floatArray0[2] = 215.48085F;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (-80.0F);
      floatArray0[6] = (float) 1L;
      floatArray0[7] = (float) 1L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {733.0F, 215.48085F, 0.0F, 0.0F, (-80.0F), 1.0F, 1.0F, 733.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(1627);
      assertNotNull(integer0);
      assertEquals(1627, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Integer integer1 = new Integer(45);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(45, (int)integer1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = 'T';
      charArray0[2] = 'o';
      charArray0[3] = '/';
      charArray0[4] = '9';
      charArray0[5] = 'o';
      charArray0[6] = '_';
      charArray0[7] = 'u';
      charArray0[8] = 'A';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'r', 'T', 'o', '/', '9', 'o', '_', 'u', 'A'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'r', 'T', 'o', '/', '9', 'o', '_', 'u', 'A'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(9, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      char[] charArray0 = new char[11];
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray2);
      assertEquals(11, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(11, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('i');
      assertNotNull(character0);
      assertEquals('i', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'i'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (char)character0;
      intArray0[1] = 1;
      intArray0[2] = (int) 'i';
      intArray0[3] = (int) 'i';
      intArray0[4] = (int) 'i';
      intArray0[5] = (int) 'i';
      intArray0[6] = (int) (char)character0;
      intArray0[7] = 1474;
      intArray0[8] = (int) 'i';
      boolean boolean0 = ArrayUtils.contains(intArray0, 1);
      assertArrayEquals(new int[] {105, 1, 105, 105, 105, 105, 105, 1474, 105}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.swap((Object[]) characterArray0, 1, 1393, 105);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      Integer integer0 = new Integer(2534);
      assertNotNull(integer0);
      assertEquals(2534, (int)integer0);
      
      Integer integer1 = new Integer(4);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      Character character0 = Character.valueOf('_');
      assertNotNull(character0);
      assertEquals('_', (char)character0);
      
      Character character1 = new Character('_');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('_', (char)character1);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[0] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      Integer[] integerArray1 = ArrayUtils.insert(4, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(6, integerArray0.length);
      assertEquals(12, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1893.730238));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      int int0 = 4;
      Integer integer0 = new Integer(2534);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2534, (int)integer0);
      
      Integer integer1 = new Integer(4);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      Character character0 = Character.valueOf('_');
      assertNotNull(character0);
      assertEquals('_', (char)character0);
      
      Character character1 = new Character('_');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('_', (char)character1);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      Integer[] integerArray1 = ArrayUtils.insert(4, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(6, integerArray0.length);
      assertEquals(12, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = (int) '_';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 95, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 127, 127, (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 127, (double) (-1));
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 127);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {127L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.swap(longArray1, 1, (-1), 1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {127L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      ArrayUtils.shift(floatArray0, (-1));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1), (-1));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      ArrayUtils.swap(doubleArray0, (-1), 40, (-4570));
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[0];
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      Integer integer0 = new Integer((-4013));
      assertNotNull(integer0);
      assertEquals((-4013), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) integer0);
      assertNull(integerArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Integer integer1 = new Integer((-4013));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-4013), (int)integer1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      int int0 = ArrayUtils.indexOf(charArray0, 'S', (-865));
      assertArrayEquals(new char[] {'S', 'S'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.swap(charArray1, 0, 0, (-4013));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ArrayUtils.shift(byteArray0, (int) (byte)56);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1245);
      assertNotNull(integer0);
      assertEquals(1245, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = new int[0];
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      int[] intArray0 = new int[8];
      Integer integer0 = new Integer((-4013));
      assertNotNull(integer0);
      assertEquals((-4013), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) integer0);
      assertNull(integerArray0);
      
      ArrayUtils.shift(intArray0, (-10), (-1), (-10));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      Integer integer1 = new Integer((-4013));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-4013), (int)integer1);
      
      Integer[] integerArray1 = new Integer[7];
      integerArray1[0] = integer0;
      integerArray1[1] = integer1;
      Integer integer2 = new Integer((int) integerArray1[0]);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(7, integerArray1.length);
      assertEquals((-4013), (int)integer2);
      
      integerArray1[2] = integer2;
      integerArray1[3] = integer1;
      integerArray1[4] = integer1;
      Integer integer3 = new Integer((-10));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-10), (int)integer3);
      
      integerArray1[5] = integer3;
      integerArray1[6] = integer1;
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray1, (Integer[]) null);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray2.length);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer2;
      objectArray0[1] = (Object) integerArray1[3];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.insert(1504, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Integer[] integerArray2 = new Integer[3];
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      Integer integer0 = new Integer(1504);
      assertNotNull(integer0);
      assertEquals(1504, (int)integer0);
      
      integerArray2[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) integerArray2[0]);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertEquals(1504L, mutableInt0.longValue());
      assertEquals(1504.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1504", mutableInt0.toString());
      assertEquals((byte) (-32), mutableInt0.byteValue());
      assertEquals(1504, (int)mutableInt0.getValue());
      assertEquals(1504.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1504, (int)mutableInt0.toInteger());
      assertEquals(1504, mutableInt0.intValue());
      assertEquals((short)1504, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      assertEquals(3, integerArray2.length);
      
      Integer integer1 = mutableInt0.toInteger();
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1504L, mutableInt0.longValue());
      assertEquals(1504.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1504", mutableInt0.toString());
      assertEquals((byte) (-32), mutableInt0.byteValue());
      assertEquals(1504, (int)mutableInt0.getValue());
      assertEquals(1504.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1504, (int)mutableInt0.toInteger());
      assertEquals(1504, mutableInt0.intValue());
      assertEquals((short)1504, mutableInt0.shortValue());
      assertNotNull(integer1);
      assertEquals(3, integerArray2.length);
      assertEquals(1504, (int)integer1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      
      integerArray2[1] = integer1;
      Integer integer2 = new Integer((int) integerArray2[0]);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(3, integerArray2.length);
      assertEquals(1504, (int)integer2);
      
      integerArray2[2] = integer2;
      Integer[] integerArray3 = ArrayUtils.removeElements(integerArray2, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertNotNull(integerArray3);
      assertEquals(0, integerArray0.length);
      assertEquals(3, integerArray2.length);
      assertEquals(3, integerArray3.length);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-10.0F);
      floatArray0[1] = (-443.0F);
      floatArray0[2] = 767.2175F;
      floatArray0[3] = 3.0F;
      floatArray0[4] = (-4620.705F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-10.0F), (-443.0F), 767.2175F, 3.0F, (-4620.705F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 3243);
      assertArrayEquals(new int[] {3243}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3139.0063994417);
      doubleArray0[1] = (double) (-4620.705F);
      doubleArray0[2] = (double) 3.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) (-4620.705F);
      doubleArray0[5] = (double) 0.0F;
      ArrayUtils.shift(doubleArray0, 3243, 710, (-1036));
      assertArrayEquals(new double[] {(-3139.0063994417), (-4620.705078125), 3.0, 1.0, (-4620.705078125), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 3.0F;
      objectArray0[1] = (Object) (-3139.0063994417);
      objectArray0[2] = (Object) 3.0;
      objectArray0[3] = (Object) (-4620.705078125);
      Object object0 = ArrayUtils.get(objectArray0, (-2146698212));
      assertNull(object0);
      assertEquals(8, objectArray0.length);
      
      objectArray0[4] = null;
      objectArray0[5] = (Object) 1.0;
      objectArray0[6] = (Object) 1.0;
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1036));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1036), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(108);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(108, (int)integer2);
      
      Integer integer3 = ArrayUtils.get(integerArray0, (-2146698212), integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(2, integerArray0.length);
      assertEquals(108, (int)integer3);
      
      Object object1 = ArrayUtils.get(objectArray0, 710, (Object) integer3);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(object1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer1));
      assertNotNull(object1);
      assertEquals(8, objectArray0.length);
      assertEquals(2, integerArray0.length);
      assertEquals(108, object1);
      
      objectArray0[7] = object1;
      ArrayUtils.swap(objectArray0, 2010, 108, 39);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer(5482);
      assertNotNull(integer0);
      assertEquals(5482, (int)integer0);
      
      Integer integer1 = new Integer(5482);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(5482, (int)integer1);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0, 106);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = new int[2];
      intArray0[0] = 3975;
      intArray0[1] = (-1);
      int int0 = ArrayUtils.indexOf(intArray0, 3975);
      assertArrayEquals(new int[] {3975, (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)20);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3729.8567);
      doubleArray0[1] = (double) (short)20;
      doubleArray0[2] = (double) (short)20;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3729.8567), 1254.521);
      assertArrayEquals(new double[] {(-3729.8567), 20.0, 20.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = Integer.getInteger("sE-pYR+WF>:AnNa-y", 0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) integer0;
      intArray0[1] = 5204;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) (short)20;
      intArray0[5] = (int) (short)20;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5204, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[4] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      long[] longArray0 = new long[17];
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[6] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-62), 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-810);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)5;
      ArrayUtils.shift(byteArray0, (int) (byte)1, 1291, (-44));
      assertArrayEquals(new byte[] {(byte)90, (byte)94, (byte)49, (byte)6, (byte)5, (byte)56, (byte)27, (byte)1, (byte) (-81)}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = Float.NaN;
      MockRandom mockRandom0 = new MockRandom((-108L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {Float.NaN}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(1698L, (-1.0), 3524.0);
      assertNotNull(doubleStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-81));
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) Float.NaN;
      objectArray0[1] = (Object) mockRandom0;
      ArrayUtils.swap(objectArray0, (int) (byte) (-81), 2, (-1983));
      assertEquals(2, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.shift((char[]) null, (-1641), 1803, (-1983));
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-81);
      shortArray0[1] = (short) (byte) (-81);
      shortArray0[2] = (short) (byte) (-81);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (byte) (-81);
      shortArray0[5] = (short) (byte) (-81);
      shortArray0[6] = (short) (byte) (-81);
      shortArray0[7] = (short) (byte) (-81);
      ArrayUtils.shift(shortArray0, (int) (short)1, (-964), (-1990));
      assertArrayEquals(new short[] {(short) (-81), (short) (-81), (short) (-81), (short)1, (short) (-81), (short) (-81), (short) (-81), (short) (-81)}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.indexOf(intArray1, (-170));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals((-1), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-95);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)12, (-870));
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-81), (byte)70, (byte)0, (byte)57, (byte) (-95)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, int1);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)12;
      byteArray1[2] = (Byte) (byte)70;
      byteArray1[3] = (Byte) (byte) (-95);
      byteArray1[4] = (Byte) (byte) (-81);
      byteArray1[5] = (Byte) (byte)0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)12, (byte)70, (byte) (-95), (byte) (-81), (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertArrayEquals(new int[] {}, intArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, intArray2.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = 256;
      Integer integer0 = new Integer(256);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(256, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-661.75653F));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.add(floatArray1, 0, (-661.75653F));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-661.75653F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (-661.75653F));
      assertArrayEquals(new double[] {(-661.7565307617188)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)69);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)69}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray2);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-661.75653F)}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(boolean0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-661.7565307617188)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray0, object0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = '.';
      charArray0[2] = '3';
      charArray0[3] = 'P';
      charArray0[4] = '0';
      ArrayUtils.shift(charArray0, 1, 5, 8);
      assertArrayEquals(new char[] {'_', '.', '3', 'P', '0'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(6);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(6, (int)integer1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-2319);
      doubleArray0[2] = (double) (short) (-2319);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 3, (-2319.0));
      assertArrayEquals(new double[] {(-2319.0), 0.0, (-2319.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2319);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      int int0 = ArrayUtils.indexOf(floatArray0, 776.5124F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      Integer integer0 = ArrayUtils.get((Integer[]) null, (int)  (-2319));
      assertNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Integer integer0 = new Integer((-2145129848));
      assertNotNull(integer0);
      assertEquals((-2145129848), (int)integer0);
      
      Integer integer1 = Integer.getInteger(":QjM`Vgvr}B", integer0);
      assertNotNull(integer1);
      assertEquals((-2145129848), (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.insert(0, (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2145129848);
      intArray0[1] = (-2145129848);
      intArray0[2] = 0;
      intArray0[3] = (-2145129848);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-2145129848), (-2145129848), 0, (-2145129848)}, intArray0);
      assertArrayEquals(new int[] {(-2145129848), (-2145129848), 0, (-2145129848)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      boolean[] booleanArray1 = new boolean[7];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = (boolean) boolean0;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = (boolean) boolean0;
      booleanArray1[6] = (boolean) boolean0;
      boolean[] booleanArray2 = ArrayUtils.remove(booleanArray1, 0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray2.length);
      assertEquals(7, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 4);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)3;
      intArray0[1] = (int) (byte)3;
      intArray0[2] = (int) (byte)3;
      intArray0[3] = (int) (byte)3;
      intArray0[4] = 4;
      intArray0[5] = 5179;
      ArrayUtils.shift(intArray0, (-3468));
      assertArrayEquals(new int[] {3, 3, 3, 3, 4, 5179}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = ArrayUtils.insert(6, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3, 3, 3, 3, 4, 5179}, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = '%';
      charArray0[2] = ' ';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) ' ';
      intArray0[1] = (int) ' ';
      intArray0[2] = (int) '%';
      intArray0[3] = (int) 'v';
      intArray0[5] = (int) ' ';
      ArrayUtils.shift(intArray0, (-1), 0, (-1176));
      assertArrayEquals(new int[] {32, 32, 37, 118, 0, 32, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      Integer integer0 = new Integer(102);
      assertNotNull(integer0);
      assertEquals(102, (int)integer0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 37;
      objectArray0[1] = (Object) 32;
      objectArray0[2] = (Object) integer0;
      Object object0 = ArrayUtils.get(objectArray0, Integer.MAX_VALUE);
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[3] = null;
      objectArray0[4] = (Object) '%';
      objectArray0[5] = (Object) 32;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertEquals(6, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      ArrayUtils.swap(floatArray0, (int) (byte)0, 2, (int) (byte)0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (byte)0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-4846);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-4846);
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) (byte)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-4846.0), 0.0, 0.0, 0.0, (-4846.0), 2.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtils.shift(objectArray0, 0, (int) (byte)1, (int) (byte)1);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      Long long0 = new Long(2214);
      assertNotNull(long0);
      assertEquals(2214L, (long)long0);
      
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) long0;
      objectArray0[1] = (Object) long0;
      Object object0 = ArrayUtils.get(objectArray0, 7);
      assertNull(object0);
      assertEquals(13, objectArray0.length);
      
      Long long1 = new Long((-655L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-655L), (long)long1);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(objectArray0, (-460), 2, (int) (byte)12);
      assertEquals(13, objectArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      ArrayUtils.shift(intArray0, 0, (int) (byte)12, (int) (byte)12);
      assertArrayEquals(new int[] {7, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(13, objectArray0.length);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(3972.0);
      assertNotNull(double0);
      assertEquals(3972.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(7);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(7.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-655L));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-655.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(5, doubleArray0.length);
      assertEquals(3972.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1193.0));
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals((-1193.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {3972.0, 7.0, (-655.0), 3972.0, (-1193.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils.hashCode((Object) integer0);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      Long[] longArray0 = new Long[7];
      Long long0 = new Long((short) (-2319));
      assertNotNull(long0);
      assertEquals((-2319L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(7, longArray0.length);
      assertEquals((-2319L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[0]);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(7, longArray0.length);
      assertEquals((-2319L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-259L));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals((-259L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-1L));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals((-1L), (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((long) longArray0[3]);
      assertFalse(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long2));
      assertNotNull(long5);
      assertEquals(7, longArray0.length);
      assertEquals((-259L), (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long(2173L);
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertNotNull(long6);
      assertEquals(2173L, (long)long6);
      
      longArray0[6] = long6;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {(-2319L), (-2319L), (-2319L), (-259L), (-1L), (-259L), 2173L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) longArray0, (Object) null, (int) (short) (-2319));
      assertEquals(7, longArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-2319', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1717.08175801);
      doubleArray0[1] = 1848.745032;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 3865.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-191.81833));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1717.08175801), 1848.745032, (-1.0), 3865.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-191.81833), (-1717.08175801), 1848.745032, (-1.0), 3865.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-2473), 606, (-1297));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1717.08175801), 1848.745032, (-1.0), 3865.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-191.81833), (-1717.08175801), 1848.745032, (-1.0), 3865.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(606);
      assertNotNull(integer0);
      assertEquals(606, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2473));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-2473), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-294));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-294), (int)integer3);
      
      integerArray0[3] = integer3;
      // Undeclared exception!
      try { 
        Integer.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(3291);
      assertNotNull(integer0);
      assertEquals(3291, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, 76);
      assertNull(integer1);
      assertEquals(1, integerArray0.length);
      
      Integer integer2 = new Integer((-1876));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1876), (int)integer2);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals((-1876), object0);
      
      Integer integer3 = ArrayUtils.get(integerArray0, (-1876));
      assertNull(integer3);
      assertEquals(1, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = (double) (-1876);
      doubleArray0[2] = (double) (-1876);
      doubleArray0[3] = (double) 3291;
      Integer integer4 = new Integer((-1));
      assertFalse(integer4.equals((Object)object0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals((-1), (int)integer4);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, ';');
      assertArrayEquals(new char[] {';'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      int int0 = 0;
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[0] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '}');
      assertNull(charArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      Integer[] integerArray1 = new Integer[5];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[1] = integer1;
      integerArray1[2] = integer0;
      integerArray1[3] = integer1;
      integerArray1[4] = integer0;
      Integer[] integerArray2 = ArrayUtils.add(integerArray1, int0, integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(5, integerArray1.length);
      assertEquals(6, integerArray2.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'o');
      assertArrayEquals(new char[] {'^', 'B'}, charArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 35.2922;
      doubleArray0[1] = (double) '^';
      doubleArray0[2] = (double) '^';
      doubleArray0[3] = (double) '^';
      doubleArray0[4] = (double) 'o';
      doubleArray0[5] = (double) 'B';
      doubleArray0[6] = 2652.6396877906936;
      doubleArray0[7] = (double) '^';
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 4819.321);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {35.2922, 94.0, 94.0, 94.0, 111.0, 66.0, 2652.6396877906936, 94.0, 4819.321}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {35.2922, 94.0, 94.0, 94.0, 111.0, 66.0, 2652.6396877906936, 94.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences((double[]) null, (-271.0));
      assertNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(221);
      assertNotNull(integer0);
      assertEquals(221, (int)integer0);
      
      Integer integer1 = new Integer(221);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(221, (int)integer1);
      
      Integer integer2 = new Integer(221);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(221, (int)integer2);
      
      Integer integer3 = Integer.getInteger("DefaultLocale", 442);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(442, (int)integer3);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)99;
      ArrayUtils.shift(byteArray0, (-427), 2, (-4818));
      assertArrayEquals(new byte[] {(byte) (-121), (byte) (-6), (byte) (-3), (byte) (-66), (byte)99}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((byte) (-121));
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-6));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-121), (byte) (-6), (byte) (-3), (byte) (-66), (byte)99}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-121), (byte) (-6), (byte) (-3), (byte) (-66), (byte)99}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-121);
      longArray0[1] = (long) 2;
      longArray0[2] = 337L;
      ArrayUtils.shift(longArray0, 40, (int) (byte) (-66), (int) (byte) (-6));
      assertArrayEquals(new long[] {(-121L), 2L, 337L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = '%';
      charArray0[2] = ' ';
      ArrayUtils.shift(charArray0, 5007);
      assertArrayEquals(new char[] {'v', '%', ' '}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'v', '%', ' '}, charArray0);
      assertArrayEquals(new char[] {'v', '%', ' '}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, 1724L);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 46);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      Long long0 = new Long(2214);
      assertNotNull(long0);
      assertEquals(2214L, (long)long0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) long0;
      objectArray0[1] = (Object) long0;
      Object object0 = ArrayUtils.get(objectArray0, 7);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      Long long1 = new Long((-271L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-271L), (long)long1);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(objectArray0, (-460), 2, (int) (byte)12);
      assertEquals(2, objectArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      intArray0[1] = (int) (byte)12;
      intArray0[2] = 2214;
      ArrayUtils.swap(intArray0, (int) (byte)77, (int) (byte)12, (-2147405512));
      assertArrayEquals(new int[] {7, 12, 2214}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) 2214;
      longArray2[1] = (long) (-460);
      longArray2[2] = (long) (-2147405512);
      longArray2[3] = (long) (byte)77;
      longArray2[4] = (long) 7;
      longArray2[5] = (long) 12;
      longArray2[6] = (long) 7;
      longArray2[7] = (-271L);
      longArray2[8] = (long) (-2147405512);
      long[] longArray3 = ArrayUtils.removeElements(longArray2, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {2214L, (-460L), (-2147405512L), 77L, 7L, 12L, 7L, (-271L), (-2147405512L)}, longArray3);
      assertArrayEquals(new long[] {2214L, (-460L), (-2147405512L), 77L, 7L, 12L, 7L, (-271L), (-2147405512L)}, longArray2);
      assertNotNull(longArray3);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray3.length);
      assertEquals(9, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, object0, (-46));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, characterArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 14;
      intArray0[1] = 1;
      intArray0[2] = (-46);
      intArray0[3] = (-46);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2146331913));
      assertArrayEquals(new int[] {14, 1, (-46), (-46)}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (-46);
      longArray0[2] = (long) (-46);
      longArray0[3] = (long) (-46);
      longArray0[4] = (long) (-46);
      longArray0[5] = 84L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L, (-46L), (-46L), (-46L), (-46L), 84L}, longArray1);
      assertArrayEquals(new long[] {1L, (-46L), (-46L), (-46L), (-46L), 84L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (-3625), 2333);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-3625);
      intArray0[1] = 2333;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-3625), 2333}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2333;
      doubleArray0[1] = (double) 2333;
      doubleArray0[2] = (double) 2333;
      doubleArray0[3] = (double) 2333;
      doubleArray0[4] = (double) (-3625);
      doubleArray0[5] = (double) 2333;
      ArrayUtils.swap(doubleArray0, (-1), (-1), 2333);
      assertArrayEquals(new double[] {2333.0, 2333.0, 2333.0, 2333.0, (-3625.0), 2333.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 4783);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 4783;
      ArrayUtils.shift(longArray0, (-515), 4783, 0);
      assertArrayEquals(new long[] {4783L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      Integer integer0 = new Integer((byte)101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      Integer integer0 = new Integer((-576));
      assertNotNull(integer0);
      assertEquals((-576), (int)integer0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (-576));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-576.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-576);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-576);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-576);
      doubleArray0[5] = (double) (-1);
      int[] intArray0 = new int[0];
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-576.0), (-1.0), (-576.0), (-1.0), (-576.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {(-576.0), (-1.0), (-576.0), (-1.0), (-576.0), (-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-576.0);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (-1.0);
      objectArray0[3] = (Object) (-576.0);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-576.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 7, 7, (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('{');
      assertNotNull(character0);
      assertEquals('{', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('{', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('Y');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('Y', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('&');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('&', (char)character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'Z');
      assertArrayEquals(new char[] {'{', '{', 'Y', '&'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (char)character2;
      intArray0[1] = (-3303);
      intArray0[2] = (int) '&';
      intArray0[3] = (int) '{';
      intArray0[4] = (int) '{';
      intArray0[5] = (int) (char)character0;
      int int1 = ArrayUtils.indexOf(intArray0, (-1));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {89, (-3303), 38, 123, 123, 123}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-412));
      assertNotNull(integer0);
      assertEquals((-412), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-412));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-412), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1568));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1568), (int)integer2);
      
      integerArray0[2] = integer2;
      int int0 = 76;
      Integer integer3 = Integer.valueOf(76);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(76, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(76, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(76);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(76, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = ArrayUtils.get(integerArray0, 1114111);
      assertNull(integer6);
      assertEquals(6, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      boolean boolean0 = ArrayUtils.isSameType(integer3, object2);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer4));
      assertTrue(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (-2.6592176F);
      floatArray0[0] = 71.40367F;
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'Y';
      charArray0[2] = '\"';
      charArray0[3] = 'Y';
      charArray0[4] = 'G';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Q', 'Y', '\"', 'Y', 'G'}, charArray0);
      assertArrayEquals(new char[] {'Q', 'Y', '\"', 'Y', 'G', 'Q', 'Y', '\"', 'Y', 'G'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'G';
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), 1771);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {71}, intArray0);
      assertArrayEquals(new int[] {71}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {71.40367F, 0.0F, (-2.6592176F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      bitSet0.set(59, true);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{59}", bitSet0.toString());
      assertEquals(60, bitSet0.length());
      
      bitSet0.set(71);
      assertFalse(bitSet0.isEmpty());
      assertEquals(72, bitSet0.length());
      assertEquals("{59, 71}", bitSet0.toString());
      assertEquals(128, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      
      Integer integer0 = new Integer(403);
      assertNotNull(integer0);
      assertEquals(403, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1524;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-76), 1524);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1524}, intArray0);
      assertArrayEquals(new int[] {1524}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      ArrayUtils.swap(longArray0, (-331), (int) (byte)0, 120);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (byte)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '%';
      charArray0[2] = '_';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'/', '%', '_'}, charArray0);
      assertArrayEquals(new char[] {'/', '%', '_'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.insert(0, charArray0, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'/', '%', '_'}, charArray0);
      assertArrayEquals(new char[] {'/', '%', '_', '/', '%', '_'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      Integer integer0 = new Integer((-2588));
      assertNotNull(integer0);
      assertEquals((-2588), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "[");
      assertNotNull(string0);
      assertEquals("-2588", string0);
      
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((float) (-2588));
      assertNotNull(float0);
      assertEquals((-2588.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(138.89376783405604);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(138.89377F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[1]);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(8, floatArray0.length);
      assertEquals(138.89377F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-1582.4F));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals((-1582.4F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-73.701));
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals((-73.701F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float(245.8641F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotNull(float5);
      assertEquals(245.8641F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float(4036.5754F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotNull(float6);
      assertEquals(4036.5754F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((double) floatArray0[3]);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotNull(float7);
      assertEquals(8, floatArray0.length);
      assertEquals((-1582.4F), (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertArrayEquals(new float[] {(-2588.0F), 138.89377F, 138.89377F, (-1582.4F), (-73.701F), 245.8641F, 4036.5754F, (-1582.4F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-2588.0F), 138.89377F, 138.89377F, (-1582.4F), (-73.701F), 245.8641F, 4036.5754F, (-1582.4F)}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-2588);
      longArray0[1] = (long) (-2588);
      longArray0[2] = (long) (-2588);
      longArray0[3] = 1177L;
      longArray0[4] = (long) (-2588);
      longArray0[5] = (long) (-2588);
      longArray0[6] = (long) (-2588);
      longArray0[7] = (long) (-2588);
      longArray0[8] = (-167L);
      ArrayUtils.shift(longArray0, (-2588), 783, (-3769));
      assertArrayEquals(new long[] {(-2588L), (-167L), (-2588L), (-2588L), (-2588L), 1177L, (-2588L), (-2588L), (-2588L)}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 36, 9, 9);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 36;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[3];
      booleanArray1[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[2] = boolean2;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)110;
      ArrayUtils.shift(byteArray0, 101, (-2116), 36);
      assertArrayEquals(new byte[] {(byte)5, (byte)18, (byte)59, (byte)0, (byte) (-74), (byte)2, (byte)110}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((-1541));
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)110;
      longArray0[2] = (long) (byte)110;
      longArray0[3] = (long) (byte) (-74);
      longArray0[4] = (long) (byte)2;
      long[] longArray1 = ArrayUtils.remove(longArray0, (int) (byte)0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 110L, 110L, (-74L), 2L}, longArray0);
      assertArrayEquals(new long[] {110L, 110L, (-74L), 2L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1388);
      intArray0[1] = (-1388);
      intArray0[2] = (-1388);
      intArray0[3] = (-1388);
      intArray0[4] = (-1388);
      intArray0[5] = (-1388);
      intArray0[6] = (-1388);
      intArray0[7] = (-1388);
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1388);
      intArray1[1] = (-1388);
      intArray1[2] = (-1388);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1388), (-1388), (-1388), (-1388), (-1388), (-1388), (-1388), (-1388)}, intArray0);
      assertArrayEquals(new int[] {(-1388), (-1388), (-1388)}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      Integer integer0 = new Integer((-576));
      assertNotNull(integer0);
      assertEquals((-576), (int)integer0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-77));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) Integer.MAX_VALUE);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.14748365E9F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-576);
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) (-576);
      doubleArray0[3] = (double) (byte) (-77);
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) Integer.MAX_VALUE, 1157.60347277);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-576.0), 2.147483647E9, (-576.0), (-77.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, int1);
      
      int[] intArray0 = ArrayUtils.insert(1961, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = 'D';
      charArray0[2] = 'd';
      charArray0[3] = '8';
      charArray0[4] = ' ';
      charArray0[5] = '[';
      charArray0[6] = '>';
      charArray0[7] = 'a';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'D', 1263);
      assertArrayEquals(new char[] {'y', 'D', 'd', '8', ' ', '[', '>', 'a'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(1, int0);
      
      Integer integer0 = Integer.getInteger("RRA,vcgri} K>T^!;B6", 16);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      String string0 = "z&\\uq?#vE'`SL/\\I/l";
      String string1 = ArrayUtils.toString((Object) integer0, string0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("16", string1);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = Integer.getInteger(">", integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      int int1 = 64;
      Integer integer2 = Integer.getInteger("', has a length less than 2", 64);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(64, (int)integer2);
      
      integerArray0[2] = integer2;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer1;
      integerArray0[7] = integer1;
      integerArray0[8] = integer1;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(9, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(objectArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, objectArray0.length);
      assertEquals(3, byteArray1.length);
      assertSame(byteArray1, objectArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) integerArray0[7];
      intArray0[1] = (int) integerArray0[8];
      intArray0[2] = (int) integerArray0[4];
      intArray0[3] = (-1545);
      intArray0[4] = int1;
      intArray0[5] = 141;
      intArray0[6] = (int) integerArray0[4];
      intArray0[7] = (int) integerArray0[6];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 64, 234);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1545), 64, 141, (-1), (-1)}, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(8, intArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1545), 64, 141, (-1), (-1)}, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNull(object0);
      assertEquals(8, intArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) byteArray1, (Object) null, 1878);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals((-1), int2);
      assertSame(byteArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-661.75653F));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int int0 = 0;
      float[] floatArray2 = ArrayUtils.add(floatArray1, 0, (-661.75653F));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-661.75653F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (-661.75653F));
      assertArrayEquals(new double[] {(-661.7565307617188)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)69);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)69}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (int) (short)69;
      intArray0[3] = (int) (short)69;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 69, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short) (-1);
      ArrayUtils.swap(intArray0, (-1), (-1), 809);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      long[] longArray0 = new long[17];
      longArray0[8] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[6] = (long) 0;
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.insert(0, booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(17, longArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(17, longArray0.length);
      assertEquals(17, longArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1600.7081F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (-1569.6818F);
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 0L, 0);
      assertArrayEquals(new float[] {(-1600.7081F), 0.0F, 0.0F, 0.0F, 0.0F, (-1569.6818F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      char[] charArray0 = new char[16];
      ArrayUtils.shift(charArray0, (int) '\u0000');
      assertEquals(16, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(16, charArray0.length);
      assertEquals(32, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[3] = 0L;
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 4);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = '.';
      charArray0[2] = '/';
      charArray0[3] = 'J';
      charArray0[4] = 'p';
      charArray0[5] = '_';
      charArray0[6] = '\"';
      charArray0[7] = '@';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'%', '.', '/', 'J', 'p', '_', '\"', '@'}, charArray0);
      assertArrayEquals(new char[] {'%', '.', '/', 'J', 'p', '_', '\"', '@'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.insert(4, charArray1, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'%', '.', '/', 'J', 'p', '_', '\"', '@'}, charArray0);
      assertArrayEquals(new char[] {'%', '.', '/', 'J', 'p', '_', '\"', '@'}, charArray1);
      assertNotNull(charArray2);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(16, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte)3;
      ArrayUtils.shift(byteArray0, (-1293));
      assertArrayEquals(new byte[] {(byte)3, (byte) (-76), (byte)3, (byte)3, (byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1966L));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 0.0F, 2.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[0];
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 0, 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)39;
      byteArray0[8] = (byte) (-104);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)29);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)29, (byte)110, (byte) (-82), (byte)21, (byte)57, (byte)111, (byte)39, (byte) (-104)}, byteArray0);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 1494);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1136, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1136, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1, 1);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2038;
      shortArray0[1] = (short)696;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)534;
      shortArray0[4] = (short)1748;
      int[] intArray0 = new int[2];
      intArray0[0] = (-2255);
      intArray0[1] = (int) (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 71;
      longArray0[1] = (long) 71;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (long) 71;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 71L);
      assertArrayEquals(new long[] {71L, 71L, 0L, 0L, 71L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{0, 1, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(5, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1856L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 40L;
      longArray1[1] = 1856L;
      longArray1[2] = 1856L;
      longArray1[3] = 0L;
      longArray1[4] = 40L;
      longArray1[5] = 1856L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {40L, 1856L, 1856L, 0L, 40L, 1856L}, longArray1);
      assertEquals(6, longArray1.length);
      assertFalse(boolean0);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 71;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 71);
      assertArrayEquals(new int[] {71}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-17), 1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-17);
      longArray0[1] = (long) (byte) (-17);
      longArray0[2] = (long) (byte) (-17);
      longArray0[3] = 1198L;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) (byte) (-17);
      longArray0[6] = (long) (byte) (-17);
      ArrayUtils.shift(longArray0, 13, 0, 3030);
      assertArrayEquals(new long[] {(-17L), (-17L), (-17L), 1198L, 1L, (-17L), (-17L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 2510, (-694L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2510, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1896L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[5];
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'h', 'h'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[2];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray1, (-1073741824), 2118, (-1587));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'h', 'h'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer[] integerArray1 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'h';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 2118);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2118, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      ArrayUtils.reverse((int[]) null);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[0] = object1;
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      objectArray0[1] = null;
      Integer integer0 = new Integer((-2146045087));
      assertNotNull(integer0);
      assertEquals((-2146045087), (int)integer0);
      
      Object object3 = ArrayUtils.get(objectArray0, (-2146045087), (Object) integer0);
      assertNotNull(object3);
      assertEquals(7, objectArray0.length);
      assertEquals((-2146045087), object3);
      
      objectArray0[2] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[3] = object4;
      Object object5 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object5);
      assertEquals((-2146045087), object5);
      
      objectArray0[4] = object5;
      Object object6 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object6);
      
      Object object7 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object7);
      
      objectArray0[5] = null;
      Object object8 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object8);
      
      objectArray0[6] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, object4, (-93));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertEquals(7, objectArray0.length);
      assertEquals(3, int0);
      assertNotSame(object4, object1);
      assertNotSame(object4, object0);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      int int0 = 127;
      ArrayUtils.swap((boolean[]) null, (-72), 127, 127);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(127);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(127, (int)integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((-432));
      assertEquals((byte)80, mutableInt0.byteValue());
      assertEquals((-432), (int)mutableInt0.getValue());
      assertEquals("-432", mutableInt0.toString());
      assertEquals((-432), (int)mutableInt0.toInteger());
      assertEquals((-432L), mutableInt0.longValue());
      assertEquals((-432.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-432.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-432), mutableInt0.shortValue());
      assertEquals((-432), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((byte)80, mutableInt0.byteValue());
      assertEquals((-432), (int)mutableInt0.getValue());
      assertEquals("-432", mutableInt0.toString());
      assertEquals((-432), (int)mutableInt0.toInteger());
      assertEquals((-432L), mutableInt0.longValue());
      assertEquals((-432.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-432.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-432), mutableInt0.shortValue());
      assertEquals((-432), mutableInt0.intValue());
      assertNotNull(integer1);
      assertEquals((-432), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(127, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1733);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(1733, (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-432), 1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1042.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2423.985;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1042.0, 1.0, 2423.985}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1042.0, 1.0, 2423.985}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      int int0 = (-2837);
      int int1 = 4192;
      ArrayUtils.shift(doubleArray0, (-2837), 4192, (-2837));
      assertArrayEquals(new double[] {1042.0, 1.0, 2423.985, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertSame(doubleArray0, doubleArray1);
      
      int int2 = (-659);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (-659));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -659, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = 1856L;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.shift(longArray0, (-515), 91, Integer.MAX_VALUE);
      assertArrayEquals(new long[] {0L, 1856L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)7, (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.insert(12906, (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
      
      Integer[] integerArray1 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray1);
      
      Integer[] integerArray2 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray2);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[1] = (-1010L);
      char[] charArray0 = new char[4];
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 's';
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {115, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = 1856L;
      Integer integer0 = new Integer(4783);
      assertNotNull(integer0);
      assertEquals(4783, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(4783, object0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short) (-594);
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)1299;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)3;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)32, (short) (-594), (short)8, (short)1299, (short)2, (short)3}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = 'R';
      charArray0[2] = '*';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'/', 'R', '*'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[3];
      MutableInt mutableInt0 = new MutableInt((-1047));
      assertEquals((byte) (-23), mutableInt0.byteValue());
      assertEquals("-1047", mutableInt0.toString());
      assertEquals((-1047), (int)mutableInt0.toInteger());
      assertEquals((-1047), (int)mutableInt0.getValue());
      assertEquals((-1047.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1047), mutableInt0.shortValue());
      assertEquals((-1047.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1047), mutableInt0.intValue());
      assertEquals((-1047L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1047);
      intArray0[1] = (-1047);
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1047);
      intArray0[4] = (-1047);
      intArray0[5] = (-1047);
      intArray0[6] = (-1047);
      intArray0[7] = (-1047);
      intArray0[8] = (-1047);
      int int1 = ArrayUtils.indexOf(objectArray0, objectArray0[0], (-1047));
      assertTrue(int1 == int0);
      assertEquals(3, objectArray0.length);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)6;
      shortArray0[3] = (short)3;
      shortArray0[4] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)3, 14, (int) (short)3);
      assertArrayEquals(new short[] {(short)3, (short)2, (short)6, (short)0, (short)3}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)25100;
      shortArray0[1] = (short)1173;
      shortArray0[2] = (short)25100;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)25100;
      shortArray0[5] = (short)688;
      shortArray0[6] = (short)25100;
      shortArray0[7] = (short)25100;
      shortArray0[8] = (short) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)25100, (short)1173, (short)25100, (short) (-1), (short)25100, (short)688, (short)25100, (short)25100, (short) (-1)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)688);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)25100, (short)1173, (short)25100, (short) (-1), (short)25100, (short)688, (short)25100, (short)25100, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)25100, (short)1173, (short)25100, (short) (-1), (short)25100, (short)688, (short)25100, (short)25100, (short) (-1)}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short)25100;
      doubleArray0[2] = (double) (short)25100;
      doubleArray0[3] = (double) (short)1173;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)25100);
      assertArrayEquals(new double[] {(-1.0), 25100.0, 25100.0, 1173.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)29;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-115));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-115), (byte)101, (byte)44, (byte)29}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)44, (byte)29}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 50);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false, false, true, true}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(9, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray0, 0, 150.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {150.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 50;
      doubleArray3[2] = 1.5;
      double[] doubleArray4 = ArrayUtils.addAll(doubleArray2, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 50.0, 1.5}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {150.0, 0.0, 50.0, 1.5}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {150.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray4);
      assertEquals(3, doubleArray3.length);
      assertEquals(4, doubleArray4.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, (-1));
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = null;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertFalse(int1 == int0);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int1);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-1));
      assertNull(byteArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = '[';
      charArray0[2] = 'P';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = 'P';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'P', '[', 'P', '[', '[', 'P'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.swap((byte[]) null, 0, (-1));
      Integer integer0 = new Integer((byte) (-1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '$');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'$'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '$';
      floatArray0[1] = (float) '$';
      ArrayUtils.shift(floatArray0, 2, 2, 2);
      assertArrayEquals(new float[] {36.0F, 36.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (-1.0F);
      floatArray0[1] = 71.40367F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0.0F;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-24);
      byteArray0[8] = (byte)78;
      ArrayUtils.shift(byteArray0, (int) (byte) (-24), (int) (byte) (-15), 3018);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)92, (byte)6, (byte) (-16), (byte) (-15), (byte)2, (byte)32, (byte) (-24), (byte)78}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((byte) (-16));
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-15);
      intArray0[1] = (int) (byte) (-16);
      intArray0[2] = (int) (byte) (-123);
      intArray0[3] = 6;
      intArray0[4] = (int) (byte) (-123);
      intArray0[5] = (int) (byte) (-24);
      intArray0[6] = (int) (byte)6;
      intArray0[7] = (int) (byte) (-24);
      intArray0[8] = (int) (byte) (-123);
      int[] intArray1 = ArrayUtils.remove(intArray0, 6);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-15), (-16), (-123), 6, (-123), (-24), 6, (-24), (-123)}, intArray0);
      assertArrayEquals(new int[] {(-15), (-16), (-123), 6, (-123), (-24), (-24), (-123)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      char[] charArray0 = new char[0];
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (byte)40);
      assertNull(floatArray0);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'H';
      longArray0[1] = (long) '';
      longArray0[2] = (long) (byte)40;
      longArray0[3] = (-3851L);
      longArray0[4] = (long) '';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1718L), 3);
      assertArrayEquals(new long[] {72L, 127L, 40L, (-3851L), 127L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(5, longArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)40;
      intArray0[1] = (int) (byte)40;
      intArray0[2] = 3;
      intArray0[3] = (int) '';
      intArray0[4] = (int) 'H';
      intArray0[5] = (int) '';
      intArray0[6] = (int) '';
      intArray0[7] = 3;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-1155), 2633);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1155, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Float float0 = new Float((-402.0));
      assertNotNull(float0);
      assertEquals((-402.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[9];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      floatArray0[7] = float0;
      floatArray0[8] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)1331);
      assertNotNull(short0);
      assertEquals((short)1331, (short)short0);
      
      ArrayUtils.shift((byte[]) null, 6, (-1), 1228);
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, (-198), 245);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(9, floatArray2.length);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      
      Integer integer0 = new Integer((-100));
      assertNotNull(integer0);
      assertEquals((-100), (int)integer0);
      
      Integer integer1 = new Integer((-3450));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-3450), (int)integer1);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(integerArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean1);
      
      int int0 = new Integer((-1));
      assertEquals((-1), int0);
      
      boolean boolean2 = ArrayUtils.contains((long[]) null, (-1L));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Float float0 = new Float((-402.0));
      assertNotNull(float0);
      assertEquals((-402.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[9];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      floatArray0[7] = float0;
      floatArray0[8] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)1331);
      assertNotNull(short0);
      assertEquals((short)1331, (short)short0);
      
      ArrayUtils.shift((byte[]) null, 6, (-1), 1228);
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, (-198), 245);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F), (-402.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(9, floatArray2.length);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer((-3450));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-3450), (int)integer1);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(integerArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean1);
      
      Integer integer2 = new Integer((-1));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      boolean boolean2 = ArrayUtils.contains((long[]) null, (-1L));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      Integer integer2 = new Integer(1511);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1511, (int)integer2);
      
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 0, 114);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)76}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '9', 3);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (byte)76);
      assertNull(floatArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, ')');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = 1856L;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (-1), (-72), 8);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-64);
      shortArray0[1] = (short) (byte) (-64);
      shortArray0[2] = (short) (byte) (-64);
      shortArray0[3] = (short) (byte) (-64);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-64), (short) (-64), (short) (-64), (short) (-64)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 100, 40, 8);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 1856L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) int0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-3625);
      integerArray0[1] = (Integer) int0;
      intArray0[2] = 4;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3625);
      longArray0[1] = (long) 4;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) (-3625);
      longArray0[4] = (long) 4;
      longArray0[5] = 0L;
      int int1 = ArrayUtils.indexOf(longArray0, 0L, (-3625));
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {(-3625L), 4L, 4L, (-3625L), 4L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(5, int1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3625L);
      doubleArray0[1] = (double) (-3625L);
      doubleArray0[2] = (double) 0L;
      ArrayUtils.shift(doubleArray0, 1972, (-3625), 2879);
      assertArrayEquals(new double[] {(-3625.0), (-3625.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer1, 5);
      assertFalse(int0 == int1);
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(5, integerArray0.length);
      assertEquals(1, int2);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2238.0));
      assertArrayEquals(new double[] {(-3625.0), (-3625.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) 0L;
      floatArray2[1] = (float) 0L;
      floatArray2[2] = (float) 1;
      floatArray2[3] = (float) (-3625);
      int int3 = ArrayUtils.indexOf(floatArray2, (-3625.0F), Integer.MAX_VALUE);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, (-3625.0F)}, floatArray2, 0.01F);
      assertEquals(4, floatArray2.length);
      assertEquals((-1), int3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1559L));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Integer integer0 = new Integer(76);
      assertNotNull(integer0);
      assertEquals(76, (int)integer0);
      
      Integer integer1 = Integer.getInteger("', has a length less than 2", integer0);
      assertNotNull(integer1);
      assertEquals(76, (int)integer1);
      
      Integer integer2 = new Integer(76);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(76, (int)integer2);
      
      Integer integer3 = new Integer((-128));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-128), (int)integer3);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-2586));
      assertNull(intArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = 'L';
      charArray0[2] = '@';
      charArray0[3] = 'S';
      charArray0[4] = 'z';
      charArray0[5] = 's';
      charArray0[6] = 'J';
      charArray0[7] = '1';
      charArray0[8] = '[';
      ArrayUtils.shift(charArray0, 0, Integer.MAX_VALUE, 6);
      assertArrayEquals(new char[] {'S', 'z', 's', 'J', '1', '[', '%', 'L', '@'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      Integer integer1 = new Integer(4);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      Integer integer2 = new Integer(4);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(4, (int)integer2);
      
      Integer integer3 = Integer.getInteger(">", integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(4, (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-8), 501);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.insert((-1050), (byte[]) null, (byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1136;
      longArray0[1] = (-1L);
      longArray0[2] = (long) 0;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-2);
      shortArray0[1] = (short)1136;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short) (byte) (-2);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-64), 4);
      assertArrayEquals(new short[] {(short) (-2), (short)1136, (short)1136, (short) (-2)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      org.evosuite.runtime.Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)90;
      byteArray0[0] = (byte)90;
      byte byte1 = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)6;
      byte byte2 = (byte) (-35);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)87;
      byte byte3 = (byte)75;
      byteArray0[7] = (byte)75;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 523);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 523, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'('}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1333.396;
      doubleArray0[2] = (-111.601169806698);
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (-111.601169806698);
      doubleArray0[5] = 1333.396;
      doubleArray0[6] = (-111.601169806698);
      doubleArray0[7] = (-111.601169806698);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {1.0, 1333.396, (-111.601169806698), 1.0, (-111.601169806698), 1333.396, (-111.601169806698), (-111.601169806698)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray1, 1324, (-120), (int) (byte)1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'('}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.shift(doubleArray0, 1324, 2355, 2336);
      assertArrayEquals(new double[] {1.0, 1333.396, (-111.601169806698), 1.0, (-111.601169806698), 1333.396, (-111.601169806698), (-111.601169806698)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2355;
      ArrayUtils.shift(floatArray0, 1324, 645, 1399);
      assertArrayEquals(new float[] {2355.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1333.396, (-111.601169806698), 1.0, (-111.601169806698), 1333.396, (-111.601169806698), (-111.601169806698)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-111.601169806698);
      objectArray0[1] = (Object) 1.0;
      objectArray0[2] = (Object) (-111.601169806698);
      objectArray0[3] = (Object) 1333.396;
      Object object0 = ArrayUtils.get(objectArray0, (-120));
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[4] = null;
      objectArray0[5] = (Object) (-111.601169806698);
      int int1 = ArrayUtils.indexOf(objectArray0, objectArray0[3]);
      assertFalse(int1 == int0);
      assertEquals(6, objectArray0.length);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1697.4692F;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 5, 5);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Float float0 = new Float(1697.4692F);
      assertNotNull(float0);
      assertEquals(1697.4692F, (float)float0, 0.01F);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-13);
      ArrayUtils.swap(byteArray0, 2, (int) (byte) (-1), (int) (byte) (-13));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-2), (byte) (-1), (byte)1, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-13)}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 71);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, 71, 71);
      assertNull(integerArray0);
      
      Byte[] byteArray0 = new Byte[8];
      try { 
        Byte.decode("?j*Tnd45gnDa6j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"?j*Tnd45gnDa6j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, 1, (-614));
      assertNull(integerArray0);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      Integer[] integerArray1 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(221);
      assertNotNull(integer0);
      assertEquals(221, (int)integer0);
      
      Integer integer1 = new Integer(221);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(221, (int)integer1);
      
      Integer integer2 = new Integer(221);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(221, (int)integer2);
      
      Integer integer3 = Integer.getInteger("DefaultLocale", 442);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(442, (int)integer3);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)63, 1);
      assertArrayEquals(new byte[] {(byte)126}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)63, 1421);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)126}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, (-1263));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      Integer integer0 = new Integer((byte)1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(114);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(114, (int)integer1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)1;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      
      ArrayUtils.shift((boolean[]) null, 2509, 114, 2509);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, (int) (byte)1);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.insert((-2868), integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) int0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-3625);
      integerArray0[1] = (Integer) int0;
      intArray0[2] = 4;
      Integer integer2 = new Integer((-3625));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-3625), (int)integer2);
      
      Integer integer3 = new Integer(int0);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(4, (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertTrue(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[16];
      longArray0[0] = (long) (-18);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.insert(int0, abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 2304.99F, 1);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (float) (-1), (-4220));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-62);
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)121, (byte) (-62)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)121, (byte)121, (byte) (-62), (byte) (-62)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      ArrayUtils.reverse((float[]) null);
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      ArrayUtils.reverse((float[]) null, (-958), 1);
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((-2.0F));
      assertNotNull(float0);
      assertEquals((-2.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1130.1590338666865);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1130.159F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1329.01729481761);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(1329.0173F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-1114.0F));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals((-1114.0F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-2825.084F));
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      assertEquals((-2825.084F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float(2304.99F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      assertEquals(2304.99F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((-1009.85625472));
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotNull(float6);
      assertEquals((-1009.85626F), (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((double) floatArray0[4]);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotNull(float7);
      assertEquals(9, floatArray0.length);
      assertEquals((-2825.084F), (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      try { 
        Float.valueOf("{}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1130.1590338666865;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2319);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-2319), (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short) (-2319);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-2319), 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-2319), 0);
      assertArrayEquals(new double[] {1130.1590338666865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = '.';
      charArray0[3] = 'e';
      charArray0[4] = '.';
      charArray0[5] = '.';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'e', 'e', '.', 'e', '.', '.'}, charArray0);
      assertArrayEquals(new char[] {'e', 'e', '.', 'e', '.', '.'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.shift((float[]) null, (int) (byte) (-80), (-3192), (int) (byte)32);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-227);
      shortArray0[1] = (short) (byte)32;
      shortArray0[2] = (short)666;
      shortArray0[3] = (short) (byte)32;
      shortArray0[5] = (short) (byte) (-27);
      shortArray0[6] = (short) (byte) (-27);
      shortArray0[7] = (short) (byte)53;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 104, 48);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-227), (short)32, (short)666, (short)32, (short)0, (short) (-27), (short) (-27), (short)53}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-27);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-27));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)32, (byte) (-27), (byte) (-27)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-27)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) shortArray1, (Object) null);
      assertEquals(0, shortArray1.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift((float[]) null, 76, 76, 216);
      short[] shortArray2 = ArrayUtils.removeElement(shortArray0, (short)220);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ArrayUtils.shift((Object[]) null, (int) (byte)0);
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      Byte byte1 = new Byte((byte)88);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)88, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)88);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[1] = (int) (byte)0;
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-552), (-779));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.swap((boolean[]) null, (-72), 127, 127);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 127, (-432));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, intArray0.length);
      
      ArrayUtils.shift(intArray0, (-428));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      Integer integer0 = new Integer(122);
      assertNotNull(integer0);
      assertEquals(122, (int)integer0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, intArray0.length);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (-1450L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-60.094);
      doubleArray0[1] = (double) (-1450L);
      doubleArray0[3] = 2535.0;
      doubleArray0[4] = (double) (-1450L);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-2528.63036605);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, (-1), 2114.1621);
      assertArrayEquals(new double[] {(-60.094), (-1450.0), 0.0, 2535.0, (-1450.0), 1.0, (-2528.63036605)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = 2535.0;
      doubleArray1[3] = (double) (-1450L);
      doubleArray1[2] = 1.5;
      boolean boolean0 = ArrayUtils.contains(doubleArray1, (double) 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-1.0), 1.5, (-1450.0), 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertTrue(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)126);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean2);
      
      ArrayUtils.shift(doubleArray0, 3610);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 2535.0, (-1450.0), 1.0, (-2528.63036605), (-60.094), (-1450.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, false);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[1] = '.';
      charArray0[2] = '\u0000';
      charArray0[3] = 'e';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '.', '\u0000', 'e'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '.', '\u0000', 'e'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)53;
      ArrayUtils.shift(floatArray0, (int) (byte)32, (int) (byte) (-27), 384);
      assertArrayEquals(new float[] {53.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 53.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)33;
      shortArray0[1] = (short) (byte)33;
      shortArray0[2] = (short) (byte)53;
      shortArray0[3] = (short) (byte) (-27);
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)33, (short)33, (short)53, (short) (-27)}, shortArray0);
      assertArrayEquals(new short[] {(short)33, (short)53, (short) (-27)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      String string0 = ArrayUtils.toString((Object) null, "m5T/w0&");
      assertNotNull(string0);
      assertEquals("m5T/w0&", string0);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)310, (-18));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)310;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (short)310;
      doubleArray0[3] = (-4072.80967219492);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1532.3419449651497), 15, 0.0);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {310.0, (-1.0), 310.0, (-4072.80967219492)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int1);
      
      Integer integer0 = new Integer(1);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0, (-18));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-125));
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-125);
      doubleArray0[2] = (double) (byte) (-125);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2528.63036605), (-1), (-60.094));
      assertArrayEquals(new double[] {(-125.0), 0.0, (-125.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-60.094));
      assertArrayEquals(new double[] {(-125.0), 0.0, (-125.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-125));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean2);
      
      ArrayUtils.shift(byteArray0, (-1), 1073741824, Integer.MIN_VALUE);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((-1));
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1073741824;
      longArray0[1] = (long) 4535;
      longArray0[2] = 1663L;
      longArray0[3] = (long) 4535;
      longArray0[4] = (long) (byte) (-125);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) Integer.MIN_VALUE;
      longArray0[7] = (long) 1073741824;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {1073741824L, 4535L, 1663L, 4535L, (-125L), (-1L), (-2147483648L), 1073741824L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1877L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[2] = (double) '4';
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (-111.601169806698);
      doubleArray0[6] = (double) '4';
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = 1333.396;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 52.0, 0.0, 0.0, (-111.601169806698), 52.0, 0.0, 1333.396}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, int0);
      
      ArrayUtils.shift(charArray1, (-120), 645, (-2717));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) (-2717);
      ArrayUtils.shift(doubleArray1, 645, 7, 2232);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2717.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 645;
      floatArray0[1] = (-1466.2831F);
      floatArray0[2] = (float) (-2717);
      floatArray0[3] = (float) 0L;
      ArrayUtils.shift(floatArray0, (-1263), 7, (-1263));
      assertArrayEquals(new float[] {0.0F, 645.0F, (-1466.2831F), (-2717.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-2717.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      booleanArray0[4] = true;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      ArrayUtils.shift(longArray0, (-515), 0, 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)7;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-515), 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)101, (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)7;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)7, 0);
      assertArrayEquals(new short[] {(short)7}, shortArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = '?';
      charArray0[3] = 'z';
      charArray0[4] = '%';
      charArray0[5] = '\"';
      charArray0[6] = 'q';
      charArray0[7] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '#');
      assertArrayEquals(new char[] {'m', 'm', '?', 'z', '%', '\"', 'q', '-'}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(8, charArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '%';
      intArray0[1] = (int) '#';
      intArray0[2] = (int) 'm';
      intArray0[3] = (int) '%';
      ArrayUtils.shift(intArray0, 1, 2, 46);
      assertArrayEquals(new int[] {37, 35, 109, 37}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-64);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)981, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-64.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) (byte) (-64);
      ArrayUtils.shift(longArray0, (-1), (-28), (-2146387992));
      assertArrayEquals(new long[] {5L, (-64L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      Integer integer0 = new Integer(50);
      assertNotNull(integer0);
      assertEquals(50, (int)integer0);
      
      ArrayUtils.shift(doubleArray1, (-1092), 0, (-1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-64.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 36, (-72), (-72));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-72);
      intArray0[1] = 36;
      intArray0[2] = (-72);
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) (-72);
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-72);
      objectArray0[1] = (Object) 36;
      objectArray0[2] = (Object) (-72.0F);
      objectArray0[3] = (Object) 36;
      ArrayUtils.shift(objectArray0, (-72), (-748), 36);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (short) (-1491), 2746L);
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(53L, 0.0, 1.0);
      assertNotNull(doubleStream0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1491);
      doubleArray0[1] = (-1.0);
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1491);
      shortArray0[1] = (short) (-1491);
      shortArray0[2] = (short) (-1491);
      shortArray0[3] = (short) (-1491);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1, (-458));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1491), (short) (-1491), (short) (-1491), (short) (-1491), (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 't';
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) longStream0;
      objectArray0[3] = (Object) 't';
      objectArray0[4] = (Object) 't';
      objectArray0[5] = (Object) (short) (-1491);
      objectArray0[6] = (Object) (short) (-1491);
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(7, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)35;
      ArrayUtils.swap(byteArray0, (int) (byte)6, (-938), (-523));
      assertArrayEquals(new byte[] {(byte)55, (byte) (-68), (byte) (-25), (byte)6, (byte) (-101), (byte)35}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'n';
      intArray0[2] = (int) 'n';
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = (int) '3';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, Integer.MAX_VALUE);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(intArray0, 51, 0, 51);
      assertArrayEquals(new int[] {110, 0, 110, 0, 2, 51, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      Integer integer0 = new Integer((-1967));
      assertNotNull(integer0);
      assertEquals((-1967), (int)integer0);
      
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Integer integer2 = new Integer(558);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(558, (int)integer2);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-1967);
      intArray1[3] = 558;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-912.8252791521733);
      doubleArray0[1] = (-524.25);
      doubleArray0[2] = 6081.26;
      doubleArray0[3] = 1904.553;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1206.780666306556, (-1020), 1904.553);
      assertArrayEquals(new double[] {(-912.8252791521733), (-524.25), 6081.26, 1904.553}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'u';
      charArray0[2] = '6';
      charArray0[3] = '9';
      charArray0[4] = 'H';
      charArray0[5] = 'S';
      charArray0[6] = '2';
      charArray0[7] = 'Q';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'M', 'u', '6', '9', 'H', 'S', '2', 'Q'}, charArray0);
      assertArrayEquals(new char[] {'M', 'u', '6', '9', 'H', 'S', '2', 'Q'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      Short[] shortArray0 = new Short[9];
      Short short0 = new Short((short)674);
      assertNotNull(short0);
      assertEquals((short)674, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals(9, shortArray0.length);
      assertEquals((short)674, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals(9, shortArray0.length);
      assertEquals((short)674, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1655));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short) (-1655), (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)4541);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals((short)4541, (short)short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) (-1084));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertNotNull(short5);
      assertEquals((short) (-1084), (short)short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)4541);
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short2));
      assertTrue(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short0));
      assertNotNull(short6);
      assertEquals((short)4541, (short)short6);
      
      shortArray0[6] = short6;
      Short short7 = new Short((short)4541);
      assertTrue(short7.equals((Object)short6));
      assertTrue(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short2));
      assertNotNull(short7);
      assertEquals((short)4541, (short)short7);
      
      shortArray0[7] = short7;
      try { 
        Short.valueOf("b%?dl/@1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"b%?dl/@1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      int int0 = 11;
      Integer integer0 = new Integer(11);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      Integer integer0 = new Integer(29);
      assertNotNull(integer0);
      assertEquals(29, (int)integer0);
      
      Integer integer1 = Integer.getInteger("eA*B+tEiP,07g", integer0);
      assertNotNull(integer1);
      assertEquals(29, (int)integer1);
      
      Integer integer2 = new Integer(29);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(29, (int)integer2);
      
      Integer integer3 = new Integer((-3077));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-3077), (int)integer3);
      
      ArrayUtils.shift((double[]) null, (-2112333164), (-2112333164), 3524);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer2;
      integerArray0[1] = integer3;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift((boolean[]) null, 0, (-3077), (-247));
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-449);
      shortArray0[1] = (short)321;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)321);
      assertArrayEquals(new short[] {(short) (-449), (short)321}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, int0);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)321);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-449), (short)321}, shortArray0);
      assertArrayEquals(new short[] {(short) (-449)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (short) (-449);
      floatArray0[2] = (float) (short)321;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) (short) (-449);
      floatArray0[7] = (float) (short) (-449);
      floatArray0[8] = (float) (short)321;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (short)321, (-732));
      assertArrayEquals(new float[] {1.0F, (-449.0F), 321.0F, 1.0F, 1.0F, 1.0F, (-449.0F), (-449.0F), 321.0F}, floatArray0, 0.01F);
      assertEquals("{2, 8}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(9, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(9, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '<');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertArrayEquals(new char[] {'<', '8'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)321;
      intArray0[1] = 1;
      intArray0[2] = (int) (short)321;
      intArray0[3] = (int) '8';
      intArray0[4] = (int) '8';
      boolean boolean0 = ArrayUtils.contains(intArray0, 56);
      assertArrayEquals(new int[] {321, 1, 321, 56, 56}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'b';
      floatArray0[1] = (float) (-617);
      floatArray0[2] = (float) 'b';
      floatArray0[2] = (float) 'b';
      ArrayUtils.shift(floatArray0, (-1), (-1), 3733);
      assertArrayEquals(new float[] {98.0F, (-617.0F), 98.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      Float[] floatArray1 = new Float[1];
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      ArrayUtils.shift(charArray0, (-617), 3733, (-617));
      assertArrayEquals(new char[] {'b', 'b', 'b', 'b', 'b', 'b'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Integer integer0 = new Integer((-617));
      assertNotNull(integer0);
      assertEquals((-617), (int)integer0);
      
      int int0 = (-722);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3.0F;
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-2388), (-1));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short) (-2388);
      doubleArray0[3] = (double) 3.0F;
      doubleArray0[4] = 117.0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 889.3416, 2089443549, 4332.0);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-2388.0), 3.0, 117.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, int1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 3.0F;
      objectArray0[1] = (Object) 0.0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int2 = ArrayUtils.lastIndexOf(objectArray0, object0, (int) (short) (-2388));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray0, (Object) null);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray2);
      
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 'w';
      doubleArray1[2] = (double) 2146624310;
      doubleArray1[3] = (double) 'w';
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 3137, (-1087));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 119.0, 2.14662431E9, 119.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(221);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(221, (int)integer0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[0] = (Object) integer0;
      objectArray0[0] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(221);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(221, (int)integer2);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)56);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = 'A';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'*', 'A'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.swap((byte[]) null, (int) (byte) (-2), 12);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (int) '*';
      intArray0[2] = 0;
      intArray0[3] = (int) '*';
      intArray0[4] = (int) (byte)56;
      intArray0[5] = (int) '*';
      intArray0[6] = (int) 'A';
      ArrayUtils.swap(intArray0, (-62), 8, 0);
      assertArrayEquals(new int[] {0, 42, 0, 42, 56, 42, 65}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.swap((boolean[]) null, 262, 127, 127);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift(intArray0, (-479));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)884;
      shortArray0[1] = (short)517;
      shortArray0[2] = (short)6;
      shortArray0[3] = (short)82;
      shortArray0[4] = (short)935;
      shortArray0[5] = (short)917;
      shortArray0[6] = (short) (-608);
      shortArray0[7] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short)935, (int) (short)82, (int) (short)935);
      assertArrayEquals(new short[] {(short)884, (short)517, (short)6, (short)82, (short)935, (short)917, (short) (-608), (short) (-1), (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(6081.26);
      assertNotNull(double0);
      assertEquals(6081.26, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(7, doubleArray0.length);
      assertEquals(6081.26, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      Double double2 = new Double(1899.9651);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(1899.9651, (double)double2, 0.01);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) doubleArray0[1];
      doubleArray1[1] = 2265.72115;
      doubleArray1[2] = (double) doubleArray0[1];
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2265.72115;
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 6081.26, 237, 3529.9497);
      assertArrayEquals(new double[] {6081.26, 2265.72115, 6081.26, 0.0, 2265.72115}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(2, int0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) null, 860);
      assertFalse(int1 == int0);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, int1);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      Integer integer0 = new Integer((-134));
      assertNotNull(integer0);
      assertEquals((-134), (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-134);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-134.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-134.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, 11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)32;
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (int) (short)32);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)82;
      shortArray1[1] = (short)1799;
      shortArray1[2] = (short) (-1);
      shortArray1[3] = (short) (-608);
      shortArray1[4] = (short)82;
      shortArray1[5] = (short) (-1357);
      shortArray1[6] = (short) (-608);
      ArrayUtils.shift(shortArray1, (-479), (int) (short)935, (int) (byte)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-608), (short)82, (short)1799, (short) (-1), (short) (-608), (short)82, (short) (-1357)}, shortArray1);
      assertEquals(7, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)36);
      assertArrayEquals(new byte[] {(byte)36}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)36;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte)36);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {36L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-286), (byte)36);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -286, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (-1.0F);
      floatArray0[1] = 71.40367F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0.0F;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-115);
      ArrayUtils.swap(byteArray0, (int) (byte) (-115), (-554), (-1996));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)107, (byte) (-115), (byte) (-115), (byte) (-115)}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      Integer integer0 = new Integer(860);
      assertNotNull(integer0);
      assertEquals(860, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(860);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(860, (int)integer2);
      
      Integer integer3 = Integer.getInteger("n^uGffcG(", 1);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(1, (int)integer3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '1';
      ArrayUtils.shift(charArray0, 1020, 553, 553);
      assertArrayEquals(new char[] {'1', '1'}, charArray0);
      assertEquals(2, charArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '1';
      floatArray0[1] = (float) '1';
      boolean boolean3 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean3 == boolean0);
      assertArrayEquals(new float[] {49.0F, 49.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 0L;
      Double[] doubleArray1 = new Double[1];
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      ArrayUtils.shift(charArray0, 97, 97, 97);
      assertArrayEquals(new char[] {'j'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(integerArray0, 1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, integerArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) doubleArray1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, doubleArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2441);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2441, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.indexOf(longArray0, (long) 0, (-2126834765));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.reverse((float[]) null);
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.reverse((short[]) null, (-1), (-2126834765));
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 3371, object0);
      assertNotNull(object1);
      assertEquals(1, objectArray0.length);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[0] = object1;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(1, objectArray0.length);
      
      Integer integer0 = new Integer(798);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(798, (int)integer0);
      
      Integer integer1 = new Integer((-377));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-377), (int)integer1);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      integerArray0[7] = integer0;
      integerArray0[8] = integer1;
      Integer integer2 = new Integer((int) integerArray0[4]);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(9, integerArray0.length);
      assertEquals((-377), (int)integer2);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 0, integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(10, integerArray1.length);
      assertEquals(9, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)16;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)12, (byte)16}, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)16}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (-1.0F);
      floatArray0[1] = 71.40367F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 52, Integer.MAX_VALUE);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift(floatArray0, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {0.0F, 0.0F, 71.40367F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1479));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "xI";
      stringArray0[1] = "2f7>Ls{BL=t+bj<";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "D{@4KeYIp<";
      stringArray0[5] = "The Array must not be null";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray1.length);
      assertEquals(6, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      Integer integer0 = new Integer(29);
      assertNotNull(integer0);
      assertEquals(29, (int)integer0);
      
      Integer integer1 = Integer.getInteger("eA*B+tEiP,07g", integer0);
      assertNotNull(integer1);
      assertEquals(29, (int)integer1);
      
      Integer integer2 = new Integer(29);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(29, (int)integer2);
      
      Integer integer3 = new Integer((-3077));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-3077), (int)integer3);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 143.761F;
      floatArray0[1] = (float) (-3077);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 143.761F, (-781));
      assertArrayEquals(new float[] {143.761F, (-3077.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray0 = new char[0];
      int int0 = (-1);
      ArrayUtils.swap(charArray0, (-1), (-1818), (-1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)87;
      byteArray1[2] = (byte) (-118);
      byteArray1[3] = (byte) (-3);
      byte byte0 = (byte)123;
      byteArray1[4] = (byte)123;
      byteArray1[5] = (byte) (-88);
      byteArray1[6] = (byte) (-116);
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (-2956), (int) (byte) (-88));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {(byte)102, (byte)87, (byte) (-118), (byte) (-3), (byte)123, (byte) (-88), (byte) (-116)}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((byte) (-116));
      assertNotNull(double0);
      assertEquals((-116.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-116.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int int1 = 1;
      ArrayUtils.swap(doubleArray1, 1, (int) (byte) (-116), (int) (byte)87);
      assertArrayEquals(new double[] {(-116.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-88);
      intArray0[1] = (int) (byte)123;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 123, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int[] intArray0 = new int[12];
      intArray0[0] = 0;
      intArray0[1] = (-3625);
      intArray0[2] = 50;
      intArray0[3] = 0;
      intArray0[4] = 97;
      intArray0[5] = 97;
      ArrayUtils.shift(booleanArray0, 0, 50, 4028);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 97;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {97.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      
      Double double0 = new Double(18.535415385);
      assertNotNull(double0);
      assertEquals(18.535415385, (double)double0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 18.535415385);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {97.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {97.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)728;
      shortArray0[1] = (short)461;
      shortArray0[2] = (short)803;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)28122;
      shortArray0[5] = (short)1;
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)728, (short)461, (short)803, (short)1, (short)28122, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)728, (short)461, (short)803, (short)28122, (short)1}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(6, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2445);
      shortArray0[1] = (short) (-2445);
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-2445), (short) (-2445), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2445), (short) (-2445)}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = (long) (-1);
      longArray0[3] = (long) 'Q';
      longArray0[4] = (long) 'Q';
      longArray0[5] = (long) 'Q';
      ArrayUtils.swap(longArray0, (-982), (-1), (-982));
      assertArrayEquals(new long[] {1L, (-1L), 0L, 81L, 81L, 81L}, longArray0);
      assertEquals(6, longArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 81L;
      doubleArray0[1] = (double) 'Q';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 81L, 0, (double) 0);
      assertArrayEquals(new double[] {81.0, 81.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '*';
      doubleArray0[1] = (double) 418;
      doubleArray0[2] = (double) 111;
      doubleArray0[3] = (double) 418;
      doubleArray0[4] = (double) 'k';
      doubleArray0[5] = (double) 418;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) '*';
      doubleArray1[1] = (double) 418;
      doubleArray1[2] = (double) 418;
      doubleArray1[3] = 123.0;
      doubleArray1[4] = (double) 111;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {42.0, 418.0, 111.0, 418.0, 107.0, 418.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {42.0, 418.0, 418.0, 123.0, 111.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {107.0, 418.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 81L;
      longArray0[1] = (long) 111;
      longArray0[2] = (long) 418;
      longArray0[3] = (long) 'k';
      longArray0[4] = (long) 'k';
      longArray0[5] = (long) 'k';
      longArray0[6] = (long) 111;
      longArray0[7] = (long) 418;
      int int0 = ArrayUtils.indexOf(longArray0, (long) 111);
      assertArrayEquals(new long[] {81L, 111L, 418L, 107L, 107L, 107L, 111L, 418L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 71;
      intArray0[2] = 71;
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) 71;
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '-', 71);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)1177;
      shortArray0[5] = (short)1177;
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray0, (Object) null);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      boolean[] booleanArray1 = ArrayUtils.addFirst((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[4];
      longArray0[2] = (long) (short)1177;
      longArray0[3] = (long) (short)1177;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)1177, 7);
      assertArrayEquals(new long[] {0L, 0L, 1177L, 1177L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(4, (int)integer2);
      
      Integer integer3 = new Integer(int0);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(4, (int)integer3);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1114);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1114), 0, 2265.72115);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-1114.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int1);
      
      Integer integer4 = new Integer(int0);
      assertFalse(int0 == int1);
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int1));
      assertNotNull(integer4);
      assertEquals(4, (int)integer4);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1994);
      shortArray0[1] = (short)935;
      shortArray0[2] = (short)935;
      ArrayUtils.shift(shortArray0, (-2693), 0, 1169);
      assertArrayEquals(new short[] {(short) (-1994), (short)935, (short)935}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      ArrayUtils.swap((Object[]) integerArray0, (-2089443548), (-1903), int0);
      assertFalse(int0 == int1);
      assertEquals(5, integerArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) int0);
      assertFalse(int0 == int1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 36;
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (-1534));
      assertArrayEquals(new long[] {36L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[13];
      floatArray0[1] = (float) (-1534);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(13, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1609L;
      Integer integer0 = new Integer((-6509));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-6509), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, 2);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = 'M';
      charArray0[2] = '2';
      charArray0[3] = '/';
      charArray0[4] = 't';
      charArray0[5] = 'J';
      ArrayUtils.shift(charArray0, (-6509), 0, (-1949));
      assertArrayEquals(new char[] {'-', 'M', '2', '/', 't', 'J'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Integer integer1 = new Integer((-2118066062));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-2118066062), (int)integer1);
      
      boolean boolean1 = ArrayUtils.isArrayIndexValid((Integer[]) null, 2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty(floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(13, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertTrue(boolean3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      Character character0 = Character.valueOf('/');
      assertNotNull(character0);
      assertEquals('/', (char)character0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-8573);
      shortArray0[2] = (short) (-10);
      shortArray0[4] = (short)1159;
      shortArray0[5] = (short)36;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-10), 0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1), (short) (-8573), (short) (-10), (short)0, (short)1159, (short)36}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) (short) (-10);
      objectArray0[2] = (Object) (short) (-8573);
      objectArray0[3] = (Object) (short)36;
      objectArray0[4] = (Object) (short)1159;
      Object object0 = ArrayUtils.get(objectArray0, (int)  (-10));
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[5] = null;
      objectArray0[6] = (Object) character0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(7, objectArray1.length);
      assertEquals(7, objectArray0.length);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.contains((float[]) null, (float) 3616);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(127);
      assertNotNull(integer0);
      assertEquals(127, (int)integer0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 127;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 944.689379);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 127.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {944.689379, 0.0, 0.0, 127.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 127;
      intArray0[2] = 3616;
      intArray0[3] = 3616;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (-2419);
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte)0, (-3220));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-3220), 0, 127, 3616, 3616, 0, 0, (-2419)}, intArray1);
      assertArrayEquals(new int[] {0, 127, 3616, 3616, 0, 0, (-2419)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(7, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray2.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      ArrayUtils.shift((Object[]) null, (-221), (-221), (-221));
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.reverse(booleanArray0, (-1721), (-2101));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2159, (-340));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '$';
      charArray0[2] = 'h';
      charArray0[3] = '1';
      charArray0[4] = 'Q';
      charArray0[5] = '*';
      charArray0[6] = 'S';
      charArray0[7] = 'c';
      char[] charArray1 = ArrayUtils.insert(2159, (char[]) null, charArray0);
      assertArrayEquals(new char[] {'<', '$', 'h', '1', 'Q', '*', 'S', 'c'}, charArray0);
      assertNull(charArray1);
      assertEquals(8, charArray0.length);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.shift((Object[]) null, 1222, (-340), (-276));
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 1725L;
      longArray0[4] = (long) 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1725L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1725L;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0L;
      ArrayUtils.swap(doubleArray0, (-1765), 0, 122);
      assertArrayEquals(new double[] {1725.0, 0.0, 1725.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      objectArray0[7] = (Object) true;
      objectArray0[8] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 7);
      assertNotNull(object0);
      assertEquals(9, objectArray0.length);
      assertEquals(true, object0);
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long(0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)77;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)77, (byte)77, (byte)77}, byteArray0);
      assertArrayEquals(new byte[] {(byte)77, (byte)77, (byte)77, (byte)77, (byte)77, (byte)77}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.shift(objectArray0, (-460), (int) (byte)77, 2);
      assertEquals(9, objectArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = 'T';
      charArray0[2] = '0';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'T';
      intArray0[1] = (-460);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)40;
      int int0 = ArrayUtils.indexOf(longArray0, 2019L, 41);
      assertArrayEquals(new long[] {40L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-1);
      intArray0[2] = 41;
      intArray0[3] = 547;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 153);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-1), 41, 547, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-1), 41, 547, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertArrayEquals(new long[] {40L}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(6);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) integer0, (-6008));
      assertFalse(integer0.equals((Object)int0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (int) (byte)40, 127.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 40, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      float[] floatArray0 = new float[13];
      Character[] characterArray0 = new Character[2];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '%');
      assertArrayEquals(new char[] {'%', '%'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-10), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -10, Length: 13
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)53;
      byteArray0[0] = (byte)53;
      byte byte1 = (byte)53;
      byteArray0[2] = (byte)53;
      byte byte2 = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byte byte3 = (byte) (-27);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-80);
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = '.';
      charArray0[2] = 'H';
      charArray0[3] = 'e';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'H', '.', 'H', 'e'}, charArray1);
      assertArrayEquals(new char[] {'H', '.', 'H', 'e'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-59), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -59, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      ArrayUtils.shift((char[]) null, 5007);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-1), (-1));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[1] = (-1450L);
      longArray0[3] = (-1450L);
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-1450L));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1450.0F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)1331);
      assertNotNull(short0);
      assertEquals((short)1331, (short)short0);
      
      ArrayUtils.shift((byte[]) null, 251, (int) (short)1331, (-3450));
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-3450), 251);
      assertNull(intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'*'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0, "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 517L);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(81L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1856L;
      objectArray0[1] = (Object) mockRandom1;
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) (-103L);
      objectArray0[4] = (Object) (-103L);
      objectArray0[5] = (Object) 1856L;
      objectArray0[6] = (Object) 1856L;
      objectArray0[7] = (Object) 1856L;
      objectArray0[8] = (Object) bitSet0;
      BitSet bitSet1 = (BitSet)ArrayUtils.get(objectArray0, 2);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertNotNull(bitSet1);
      assertEquals(9, objectArray0.length);
      assertSame(bitSet1, bitSet0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-103L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-103L), (long)long1);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 573L);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray2, longArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(8, longArray2, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      Double double0 = new Double((-125.0));
      assertNotNull(double0);
      assertEquals((-125.0), (double)double0, 0.01);
      
      Double double1 = new Double((-125.0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-125.0), (double)double1, 0.01);
      
      Double double2 = new Double(3.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(3.0, (double)double2, 0.01);
      
      Double double3 = new Double((-60.094));
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals((-60.094), (double)double3, 0.01);
      
      Double double4 = new Double(0L);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      
      Double double5 = new Double((-125.0));
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      assertEquals((-125.0), (double)double5, 0.01);
      
      Double double6 = new Double(32.0);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotNull(double6);
      assertEquals(32.0, (double)double6, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 3.0);
      assertNull(doubleArray0);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 3.0, 59);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-1570.35007776));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)95;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)95, (byte)40, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-1017L);
      longArray0[0] = (long) (byte)95;
      longArray0[3] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      longArray0[5] = 0L;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1017L);
      doubleArray0[1] = (double) (byte)40;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 95L;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1017L);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 95L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) (-1017L);
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = 42;
      intArray0[1] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.insert((int) (byte)0, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {42, 0}, intArray0);
      assertArrayEquals(new int[] {42, 0, 42, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (-1.0F);
      floatArray0[1] = 71.40367F;
      floatArray0[2] = 0.0F;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)65;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)68);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.swap(byteArray1, 901, 86);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 3028);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)68;
      intArray0[1] = (int) (byte)65;
      intArray0[2] = (int) (byte)65;
      intArray0[3] = 3028;
      intArray0[4] = (int) (byte)65;
      intArray0[5] = 3028;
      intArray0[6] = (int) (byte)65;
      intArray0[7] = (int) (byte)65;
      intArray0[8] = (int) (byte)65;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {68, 65, 65, 3028, 65, 3028, 65, 65, 65}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '[');
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '\'';
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {39.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '[';
      charArray1[1] = '\'';
      charArray1[2] = '[';
      charArray1[3] = '\'';
      charArray1[4] = '\'';
      charArray1[5] = '\'';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray1, '-', (-538));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new char[] {'[', '\'', '[', '\'', '\'', '\''}, charArray1);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(bitSet1, bitSet0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(doubleArray0, 108.0, (-538), 1454.0);
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertArrayEquals(new double[] {39.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet2.size());
      assertEquals(1, bitSet2.cardinality());
      assertFalse(bitSet2.isEmpty());
      assertEquals("{0}", bitSet2.toString());
      assertEquals(1, bitSet2.length());
      assertNotNull(bitSet2);
      assertEquals(1, doubleArray0.length);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, 0, (byte) (-53));
      assertArrayEquals(new byte[] {(byte) (-53)}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '-';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1356);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {45}, intArray0);
      assertArrayEquals(new int[] {1356, 45}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(4, (int)integer2);
      
      Integer integer3 = new Integer(int0);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(4, (int)integer3);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1114);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1114), 0, 2265.72115);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-1114.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int1);
      
      Integer integer4 = new Integer(int0);
      assertFalse(int0 == int1);
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int1));
      assertTrue(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(4, (int)integer4);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer2, (-449));
      assertFalse(int0 == int1);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer4));
      assertTrue(integer2.equals((Object)integer3));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(5, integerArray0.length);
      assertEquals((-1), int2);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-1114.0);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) int0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) int0;
      objectArray0[5] = (Object) (-1114.0);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      Short short0 = new Short((short)123);
      assertNotNull(short0);
      assertEquals((short)123, (short)short0);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)123;
      shortArray0[3] = (short) (-559);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)123, (short) (-559)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (short)123;
      longArray0[2] = (long) (short)123;
      longArray0[3] = (long) (short)123;
      longArray0[4] = 578L;
      longArray0[5] = (long) (short) (-559);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 123L, 123L, 123L, 578L, (-559L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, int0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 123L, 123L, 123L, 578L, (-559L)}, longArray0);
      assertArrayEquals(new long[] {0L, 123L, 123L, 123L, 578L, (-559L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0, 2442, 2442);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, 83);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'b';
      floatArray0[1] = (float) (-617);
      floatArray0[2] = (float) 'b';
      floatArray0[3] = (float) 'b';
      ArrayUtils.shift(floatArray0, (-1), (-1), 3733);
      assertArrayEquals(new float[] {98.0F, (-617.0F), 98.0F, 98.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(56L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shift(booleanArray1, (-617), 459, 13);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)4;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)5, 0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)8, (byte)14, (byte) (-88), (byte)43, (byte)4}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      int int1 = ArrayUtils.indexOf(objectArray0, objectArray0[1]);
      assertFalse(int1 == int0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1697.4692F;
      ArrayUtils.swap(floatArray0, 5, 5, 5);
      assertArrayEquals(new float[] {1697.4692F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 5, 5);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 5006L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 5;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 5;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 50);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      Integer integer0 = new Integer((-576));
      assertNotNull(integer0);
      assertEquals((-576), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Integer integer2 = new Integer(5106);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(5106, (int)integer2);
      
      Integer integer3 = new Integer(5106);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(5106, (int)integer3);
      
      Integer integer4 = Integer.getInteger(", Length: 0", integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(5106, (int)integer4);
      
      Integer integer5 = new Integer((-1762));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals((-1762), (int)integer5);
      
      Integer integer6 = new Integer(5106);
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(5106, (int)integer6);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer2;
      integerArray0[2] = integer4;
      integerArray0[3] = integer5;
      integerArray0[4] = integer1;
      integerArray0[5] = integer5;
      Integer integer7 = new Integer((int) integerArray0[0]);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertNotNull(integer7);
      assertEquals(7, integerArray0.length);
      assertEquals((-576), (int)integer7);
      
      integerArray0[6] = integer7;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[5]);
      assertArrayEquals(new int[] {(-576), 5106, 5106, (-1762), Integer.MAX_VALUE, (-1762), (-576)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1072;
      shortArray0[2] = (short) (-1911);
      shortArray0[3] = (short)242;
      shortArray0[4] = (short)321;
      shortArray0[5] = (short)468;
      shortArray0[6] = (short)18688;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 123, 1488);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)1072, (short) (-1911), (short)242, (short)321, (short)468, (short)18688}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-62);
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-62)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-62), (byte) (-62)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      ArrayUtils.reverse((float[]) null);
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 442, 930);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, 2988);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotNull(bitSet1);
      assertEquals(1, shortArray0.length);
      assertNotSame(bitSet1, bitSet0);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      ArrayUtils.swap((Object[]) doubleArray0, (-26), 1620);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[1] = object1;
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      ArrayUtils.shift((short[]) null, 3);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)69;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {69L}, longArray0);
      assertArrayEquals(new long[] {69L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {69L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      long[] longArray3 = ArrayUtils.addAll((long[]) null, longArray2);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertArrayEquals(new long[] {69L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertNotNull(longArray3);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'G';
      charArray0[2] = 'j';
      charArray0[3] = '\'';
      charArray0[4] = '{';
      charArray0[5] = 'R';
      charArray0[6] = 'q';
      charArray0[7] = '7';
      charArray0[8] = 'p';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '7', 3146);
      assertArrayEquals(new char[] {'g', 'G', 'j', '\'', '{', 'R', 'q', '7', 'p'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(19, doubleArray0.length);
      assertEquals(20, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-3);
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1963.0F);
      floatArray0[1] = (float) (byte) (-27);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-1963.0F), (-27.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)104;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 422.66648006, (int) (byte) (-3), (-2676.520565403167));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(19, doubleArray0.length);
      assertEquals((-1), int0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2139);
      ArrayUtils.shift(shortArray0, (int) (short) (-2139), (int) (short) (-2139), 65536);
      assertArrayEquals(new short[] {(short) (-2139)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      ArrayUtils.swap(booleanArray0, 36, (-72), (-72));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-72);
      intArray0[1] = 36;
      intArray0[2] = (-72);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 36, (-72)}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-72);
      char[] charArray0 = new char[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 36, (-72));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-72.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer integer0 = new Integer(122);
      assertNotNull(integer0);
      assertEquals(122, (int)integer0);
      
      Integer integer1 = new Integer((-948));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-948), (int)integer1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertArrayEquals(new int[] {0, 36, (-72)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 36);
      assertArrayEquals(new int[] {0, 36, (-72)}, intArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) (-1L);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)12;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)115, (-1307));
      assertArrayEquals(new byte[] {(byte)44, (byte)44, (byte)44, (byte)44, (byte)1, (byte)44, (byte)12}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)44, (byte)44, (byte)44, (byte)44, (byte)44, (byte)12}, byteArray1);
      assertArrayEquals(new byte[] {(byte)44, (byte)44, (byte)44, (byte)44, (byte)1, (byte)44, (byte)12}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray2 = new float[0];
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      float[] floatArray3 = ArrayUtils.subarray(floatArray2, 0, 90);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((byte)12);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(12, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(90);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(90, (int)integer1);
      
      integerArray0[1] = integer1;
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      Character character0 = Character.valueOf('V');
      assertNotNull(character0);
      assertEquals('V', (char)character0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short)2;
      shortArray1[1] = (short)2;
      shortArray1[2] = (short)2;
      shortArray1[3] = (short)2;
      shortArray1[4] = (short)2;
      shortArray1[5] = (short)2;
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short)2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(6, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      Integer integer0 = new Integer((-2109));
      assertNotNull(integer0);
      assertEquals((-2109), (int)integer0);
      
      Integer integer1 = new Integer(50);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(50, (int)integer1);
      
      Integer integer2 = new Integer((short)2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)2;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 50;
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) (-2109);
      longArray0[5] = (-1743L);
      longArray0[6] = (long) (short)2;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {2L, 2147483647L, 50L, 2147483647L, (-2109L), (-1743L), 2L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.clone((Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = 0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int1);
      assertFalse(int1 == int0);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-405));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-405), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(50);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(50, (int)integer5);
      
      Integer integer6 = ArrayUtils.get(integerArray0, 1172, integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(5, integerArray0.length);
      assertEquals(50, (int)integer6);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer6);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      int int2 = ArrayUtils.hashCode((Object) integerArray0[3]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(5, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) 50;
      doubleArray0[2] = (double) (-405);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4.0, 50.0, (-405.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 50.0, (-405.0), 4.0, 50.0, (-405.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isEquals(integer0, integer3);
      assertFalse(integer0.equals((Object)integer4));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer6));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer6));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences((float[]) null, 195.14377F);
      assertNull(floatArray1);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) int1;
      doubleArray2[1] = (double) int1;
      doubleArray2[2] = (double) int1;
      boolean boolean2 = ArrayUtils.contains(doubleArray2, (-249.2352));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray2.length);
      assertFalse(boolean2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)0, 30);
      assertEquals((-1), int0);
      
      Integer integer0 = Integer.getInteger("elth{4X=iXx", 1963);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1963, (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-817));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 4783);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)114;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-34));
      assertEquals(16, byteArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray1, (int) (byte)114, (-1048));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray0, (-1184.0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1184.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1397.22451572236, (-515), (double) (byte)114);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int[] intArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INT_ARRAY, 1072);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {1072}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 0;
      longArray0[3] = (long) 0;
      ArrayUtils.shift(longArray0, 0, 2, 0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shift(longArray0, (-527), 91, (-527));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1063.97799263121;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1063.97799263121);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(14, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) (byte)1;
      longArray0[2] = (long) (byte)1;
      longArray0[3] = (long) (byte)1;
      longArray0[4] = (long) (byte)1;
      longArray0[5] = (-3329L);
      longArray0[6] = (long) (byte)1;
      ArrayUtils.shift(longArray0, (int) (byte)1, (int) (byte)1, (-1826));
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, (-3329L), 1L}, longArray0);
      assertEquals(7, longArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)1, (int) (byte)7);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1063.97799263121, 1063.97799263121}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(14, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(12, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      Double[] doubleArray1 = new Double[1];
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      ArrayUtils.shift(charArray0, 97, 97, 97);
      assertArrayEquals(new char[] {'j'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(integerArray0, 1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, integerArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) doubleArray1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, doubleArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2441);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2441, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (-4360.337);
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-4360.337));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(14, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(byteArray0, (int) (byte)114, 776);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (-4360.337));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(14, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(14, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.insert((int) (byte)1, arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shuffle(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-814), 631, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2716.0F);
      floatArray0[1] = (float) (-4132);
      floatArray0[2] = (float) 0;
      Integer integer0 = new Integer((-814));
      assertNotNull(integer0);
      assertEquals((-814), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, (-1387));
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1387), 631, (-1655));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-4132.0F);
      doubleArray0[3] = (double) (-1387);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-4132.0), (-1387.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1);
      
      ArrayUtils.shift(byteArray0, 0, 1084, (-1655));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new float[] {(-2716.0F), (-4132.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      short[] shortArray0 = new short[2];
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 1197);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)7;
      ArrayUtils.swap(byteArray0, (-777), (int) (byte)2, 1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte) (-16), (byte)7}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 2146889435);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'H', 2146889435);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, (-297));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-297)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2738;
      shortArray0[1] = (short)1;
      ArrayUtils.swap(shortArray0, (-297), (-2987), 1516);
      assertArrayEquals(new short[] {(short)2738, (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short)1, (double) (short)1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray1 = new short[9];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1;
      shortArray1[1] = (short)2738;
      shortArray1[2] = (short)1;
      shortArray1[3] = (short)1;
      shortArray1[4] = (short)1;
      shortArray1[5] = (short)2738;
      shortArray1[6] = (short)2738;
      shortArray1[7] = (short)1;
      shortArray1[8] = (short)2738;
      ArrayUtils.reverse(shortArray1, 841, 2598);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)2738, (short)1, (short)1, (short)1, (short)2738, (short)2738, (short)1, (short)2738}, shortArray1);
      assertEquals(9, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = (float) (short)1;
      floatArray0[3] = (float) (short)1;
      floatArray0[4] = (float) (short)1;
      floatArray0[5] = (float) (short)1;
      floatArray0[6] = (float) (short)2738;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 2738.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-412), (-412), (-412));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)0, (int) (short)0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)1;
      ArrayUtils.swap(byteArray0, 1, (int) (byte)7, (int) (byte)7);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-126), (byte) (-1), (byte)7, (byte)7, (byte)7, (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray1 = new Byte[5];
      byteArray1[0] = (Byte) (byte)7;
      byteArray1[1] = (Byte) (byte) (-1);
      byteArray1[2] = (Byte) (byte) (-126);
      byteArray1[3] = (Byte) (byte)1;
      byteArray1[4] = (Byte) (byte)1;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)7, (byte) (-1), (byte) (-126), (byte)1, (byte)1}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte) (-126);
      floatArray0[2] = (float) (byte) (-126);
      int int1 = ArrayUtils.indexOf(floatArray0, 102.0F, (int) (byte) (-126));
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {(-1.0F), (-126.0F), (-126.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 36;
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 36);
      assertArrayEquals(new long[] {36L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      booleanArray0[8] = true;
      ArrayUtils.swap(booleanArray0, (-1920), (-1), 102);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, true, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '[');
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1607;
      shortArray0[1] = (short)1670;
      shortArray0[2] = (short) (-79);
      shortArray0[3] = (short)2;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)1, Integer.MIN_VALUE);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new short[] {(short)1607, (short)1670, (short) (-79), (short)2}, shortArray0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertEquals(4, shortArray0.length);
      assertNotSame(bitSet1, bitSet0);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      Character character0 = new Character('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Short short0 = new Short((short)16);
      assertNotNull(short0);
      assertEquals((short)16, (short)short0);
      
      Short short1 = new Short((short)0);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      Short short2 = new Short((short)504);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)504, (short)short2);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.shift((boolean[]) null, (-6067), (-2261), 706);
      ArrayUtils.reverse((boolean[]) null, 3039, 1871);
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertNotNull(stringArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'W';
      charArray0[2] = 'P';
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'W';
      longArray0[1] = (long) 37;
      longArray0[2] = (long) 'W';
      longArray0[3] = (long) 'P';
      longArray0[4] = (long) 'P';
      longArray0[5] = (long) 'W';
      longArray0[6] = (long) 'P';
      longArray0[7] = 517L;
      ArrayUtils.swap(longArray0, (-2272), (-2272), 5);
      assertArrayEquals(new long[] {87L, 37L, 87L, 80L, 80L, 87L, 80L, 517L}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-2272), 139, 45);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 5);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = ',';
      charArray0[2] = 'G';
      charArray0[3] = '3';
      charArray0[4] = 's';
      char[] charArray1 = ArrayUtils.add(charArray0, 'V');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'.', ',', 'G', '3', 's'}, charArray0);
      assertArrayEquals(new char[] {'.', ',', 'G', '3', 's', 'V'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(321);
      assertNotNull(integer0);
      assertEquals(321, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'V';
      intArray0[1] = (int) 's';
      intArray0[2] = 321;
      intArray0[3] = (int) 'V';
      intArray0[4] = (int) 'G';
      intArray0[5] = 1208;
      intArray0[6] = (int) 'V';
      intArray0[7] = (int) '3';
      intArray0[8] = (int) '3';
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 1208, 71);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1208, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'c';
      ArrayUtils.swap(charArray0, (-4220), (-3842), (-4220));
      assertArrayEquals(new char[] {'Y', 'c'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-120));
      assertNull(byteArray0);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) (byte) (-120));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-120.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-26));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)725);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotNull(bitSet1);
      assertEquals(0, shortArray0.length);
      assertNotSame(bitSet1, bitSet0);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (-26), 440, (-1913));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Short[] shortArray1 = new Short[4];
      Short short0 = new Short((short)725);
      assertNotNull(short0);
      assertEquals((short)725, (short)short0);
      
      shortArray1[0] = short0;
      Short short1 = new Short((short) shortArray1[0]);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals(4, shortArray1.length);
      assertEquals((short)725, (short)short1);
      
      shortArray1[1] = short1;
      Short short2 = new Short((short)3546);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)3546, (short)short2);
      
      shortArray1[2] = short2;
      Short short3 = new Short((short)3546);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short)3546, (short)short3);
      
      shortArray1[3] = short3;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(4, shortArray2.length);
      assertEquals(4, shortArray1.length);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      int[] intArray0 = new int[16];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(16, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.swap(intArray1, (-2074), (-2074), (-2074));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(16, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = 'E';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '*';
      charArray0[5] = 'w';
      charArray0[6] = 'V';
      charArray0[7] = '-';
      ArrayUtils.swap(charArray0, 1963, 89, 89);
      assertArrayEquals(new char[] {'_', 'E', '2', '2', '*', 'w', 'V', '-'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)51);
      assertNotNull(short0);
      assertEquals((short)51, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)51);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)51, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-3624));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-3624), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1151));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short) (-1151), (short)short3);
      
      shortArray0[3] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertArrayEquals(new short[] {(short)51, (short)51, (short) (-3624), (short) (-1151)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'w';
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {119.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {119.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = (long) (-1);
      longArray0[3] = (long) 'Q';
      longArray0[4] = (long) 'Q';
      longArray0[5] = (long) 'Q';
      ArrayUtils.swap(longArray0, (-982), (-1), (-982));
      assertArrayEquals(new long[] {1L, (-1L), 0L, 81L, 81L, 81L}, longArray0);
      assertEquals(6, longArray0.length);
      
      Integer integer0 = new Integer(1698);
      assertNotNull(integer0);
      assertEquals(1698, (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1698);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1698, (int)integer1);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('V');
      assertNotNull(character0);
      assertEquals('V', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'V'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1698;
      doubleArray0[1] = (double) 81L;
      doubleArray0[2] = (double) 81L;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 81L;
      doubleArray0[5] = (double) (int)integerArray0[0];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1067), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1067, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)43;
      shortArray0[1] = (short) (-87);
      ArrayUtils.shift(shortArray0, (int) (short)43);
      assertArrayEquals(new short[] {(short) (-87), (short)43}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-87);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-87), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -87, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)0, 30);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-1), (-4072.80967219492));
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      int int2 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], (int) (short)0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int2);
      
      ArrayUtils.shift((short[]) null, 30, 0, (int) (short)0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = 886L;
      longArray0[2] = (long) (short)0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 886L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 57, 1697, 329);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 0L;
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = ArrayUtils.insert((int) (byte)0, doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(8, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2146491539;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[4] = (float) 2146491539;
      floatArray0[5] = (float) 0L;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 0.0F;
      doubleArray4[1] = (double) 2.14649152E9F;
      doubleArray4[2] = (double) (byte)0;
      doubleArray4[3] = (double) (byte)0;
      doubleArray4[4] = (double) 0.0F;
      doubleArray4[6] = (double) 0.0F;
      doubleArray4[7] = (double) 0.0F;
      doubleArray4[8] = (double) 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray4, 0.6041960575291083, (int) (byte)0);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 2.14649152E9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray4.length);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      ArrayUtils.swap(shortArray0, (int) (short)0, (int) (short)0, (-300));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      ArrayUtils.reverse(longArray0, (-1), (-1757));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Integer integer1 = new Integer(8);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(8, (int)integer1);
      
      Integer integer2 = new Integer(8);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(8, (int)integer2);
      
      Short short0 = new Short((short)56);
      assertNotNull(short0);
      assertEquals((short)56, (short)short0);
      
      Short short1 = new Short((short)56);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)56, (short)short1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1591), (-5144));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 714);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 806;
      floatArray0[2] = (float) (-5144);
      floatArray0[3] = (float) (byte)3;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 11, (int) (byte)62);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 806.0F, (-5144.0F), 3.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (short) (-1491), 2746L);
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(53L, 0.0, 1.0);
      assertNotNull(doubleStream0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1491);
      doubleArray0[1] = (-1.0);
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      Character character1 = Character.valueOf('t');
      assertNotNull(character1);
      assertEquals('t', (char)character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'t'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1457L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'n';
      intArray0[2] = (int) 'n';
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = (int) '3';
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 1856L;
      Object object0 = ArrayUtils.get(objectArray0, 110);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      Long long0 = new Long((-271L));
      assertNotNull(long0);
      assertEquals((-271L), (long)long0);
      
      Long long1 = new Long((-61L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-61L), (long)long1);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) 0L;
      longArray1[1] = long1;
      longArray1[3] = (Long) (-103L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 110);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-61L), 110L, (-103L)}, longArray2);
      assertNotNull(longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray2, longArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {110, 0, 110, 0, 2, 51, 0, 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      long[] longArray3 = ArrayUtils.insert(2, longArray2, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-61L), 110L, (-103L)}, longArray2);
      assertArrayEquals(new long[] {0L, (-61L), 0L, (-61L), 110L, (-103L), 110L, (-103L)}, longArray3);
      assertNotNull(longArray3);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertEquals(8, longArray3.length);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      
      Integer integer0 = Integer.getInteger("", (Integer) 110);
      assertNotNull(integer0);
      assertEquals(110, (int)integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) longArray1, (Object) integer0);
      assertEquals(4, longArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      Integer integer0 = new Integer(861);
      assertNotNull(integer0);
      assertEquals(861, (int)integer0);
      
      Integer integer1 = new Integer(861);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(861, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-63);
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (int) (byte) (-63), 3576);
      assertNull(shortArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-63);
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) integer1;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1559L));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1559L);
      doubleArray0[1] = (double) (-1559L);
      doubleArray0[2] = (double) (-1559L);
      doubleArray0[3] = (double) (-1559L);
      doubleArray0[4] = (double) (-1559L);
      doubleArray0[5] = (double) (-1559L);
      doubleArray0[5] = (double) (-1559L);
      doubleArray0[7] = (double) (-1559L);
      boolean boolean0 = ArrayUtils.isEquals((-1559.0), (-1559.0));
      assertTrue(boolean0);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1559L);
      floatArray0[1] = (float) (-1559L);
      floatArray0[2] = (-2552.3F);
      floatArray0[3] = (float) (-1559L);
      floatArray0[4] = (float) (-1559L);
      floatArray0[5] = (float) (-1559L);
      floatArray0[6] = (float) (-1559L);
      floatArray0[7] = (float) (-1559L);
      floatArray0[8] = (float) (-1559L);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1912), (-1912));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1559.0F), (-1559.0F), (-2552.3F), (-1559.0F), (-1559.0F), (-1559.0F), (-1559.0F), (-1559.0F), (-1559.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean(true);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean(true);
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      assertTrue(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = new Boolean((boolean) boolean1);
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean1.equals((Object)boolean4));
      assertFalse(boolean1.equals((Object)boolean6));
      assertFalse(boolean1.equals((Object)boolean5));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray0[6] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean6);
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean7));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[1] = (-1450L);
      longArray0[3] = 1L;
      Float float0 = new Float((double) 1L);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)1331);
      assertNotNull(short0);
      assertEquals((short)1331, (short)short0);
      
      ArrayUtils.shift((byte[]) null, 251, (int) (short)1331, (-3450));
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, (-100), 1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      
      Integer integer0 = new Integer(756);
      assertNotNull(integer0);
      assertEquals(756, (int)integer0);
      
      Integer integer1 = new Integer(251);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(251, (int)integer1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      boolean boolean1 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray2, (float) (short)1331, (int) integerArray0[0]);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertEquals(1, integerArray0.length);
      assertEquals((-1), int0);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = (-1450L);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      Integer integer0 = new Integer((short)1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer((-1384));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1384), (int)integer1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      ArrayUtils.shift(shortArray0, 5, 5, (int) (short)1);
      assertArrayEquals(new short[] {(short)1, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-125));
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      int int1 = (-1);
      Integer integer1 = new Integer((-1));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, 65, (Integer) int1);
      assertFalse(int1 == int0);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(3, integerArray0.length);
      assertEquals((-1), (int)integer2);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer2);
      assertFalse(int1 == int0);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte) (-125);
      longArray0[3] = (long) int1;
      long[] longArray1 = ArrayUtils.subarray(longArray0, int0, 2332);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int0 == int1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {4L, (-1L), (-125L), (-1L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int0 == int1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {4L, (-1L), (-125L), (-1L)}, longArray0);
      assertNotNull(longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-35), 1, (-35));
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(1562);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1562, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer(1196);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(1196, (int)integer3);
      
      Integer integer4 = Integer.getInteger(":^", (Integer) null);
      assertNull(integer4);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer5 = ArrayUtils.get(integerArray0, 0, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(0, integerArray0.length);
      assertEquals(0, (int)integer5);
      
      Integer integer6 = new Integer(1562);
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      assertEquals(1562, (int)integer6);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1196, 110);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-1L), 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.swap((int[]) null, 1039, (-2312));
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      ArrayUtils.reverse((char[]) null, 1782, 1782);
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) 1782);
      assertArrayEquals(new double[] {1782.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) longArray0, (Object) null, (-1735));
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 1782;
      intArray0[2] = 1782;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1782, 2146590623);
      assertArrayEquals(new int[] {(-1), 1782, 1782}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(3, intArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)5399;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-360);
      shortArray0[3] = (short) (-820);
      shortArray0[4] = (short) (-125);
      shortArray0[5] = (short) (-2);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-3990));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)5399, (short)0, (short) (-360), (short) (-820), (short) (-125), (short) (-2)}, shortArray1);
      assertArrayEquals(new short[] {(short)5399, (short)0, (short) (-360), (short) (-820), (short) (-125), (short) (-2)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-814), 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)16;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)16;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, Integer.MIN_VALUE);
      assertArrayEquals(new short[] {(short)16, (short)0, (short)16, (short)16, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1083L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertTrue(boolean0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1890));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1890), 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[1] = object1;
      Byte byte0 = new Byte((byte)69);
      assertNotNull(byte0);
      assertEquals((byte)69, (byte)byte0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short) (-18456));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertNotNull(stringArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, stringArray0.length);
      
      Object[] objectArray1 = new Object[6];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = object0;
      objectArray1[1] = object1;
      objectArray1[2] = (Object) byte0;
      objectArray1[3] = object0;
      objectArray1[4] = object0;
      objectArray1[5] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray1, object0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 3, 4, 5}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(6, objectArray1.length);
      assertSame(object0, object1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)0, 16);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 0.0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 30, 1620, 1.0);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      int int2 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 27);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, objectArray0.length);
      assertEquals(1, int2);
      
      boolean[] booleanArray3 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertNotNull(booleanArray3);
      assertEquals(0, booleanArray3.length);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[1] = object1;
      byte byte0 = (byte)69;
      Byte[] byteArray0 = new Byte[1];
      Byte byte1 = new Byte((byte)69);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)69, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)69}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertArrayEquals(new byte[] {(byte)69}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertTrue(boolean0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short) (-18456));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      float[] floatArray0 = new float[1];
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertNotNull(stringArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, stringArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted(byteArray1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)69}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertTrue(boolean2);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)69;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) (short) (-18456);
      longArray0[3] = (long) (short) (-18456);
      longArray0[4] = (long) (byte)69;
      longArray0[5] = (long) (short) (-18456);
      longArray0[6] = (long) byte0;
      longArray0[7] = (long) (byte)69;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {69L, 69L, (-18456L), (-18456L), 69L, (-18456L), 69L, 69L}, longArray0);
      assertArrayEquals(new long[] {69L, 69L, (-18456L), (-18456L), 69L, (-18456L), 69L, 69L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (-18456));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals((-1), int0);
      assertNotSame(shortArray1, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer integer0 = new Integer((-2299));
      assertNotNull(integer0);
      assertEquals((-2299), (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-443), abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -443, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 127, 37, (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)113;
      ArrayUtils.shift(booleanArray0, 1, 2, 347);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Integer integer0 = new Integer((-2515));
      assertNotNull(integer0);
      assertEquals((-2515), (int)integer0);
      
      Integer integer1 = new Integer(97);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(97, (int)integer1);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      Integer integer2 = new Integer((short)113);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(113, (int)integer2);
      
      Integer integer3 = new Integer(347);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(347, (int)integer3);
      
      Integer integer4 = new Integer((short)113);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(113, (int)integer4);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer3, integer4);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 8);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[7] = abstractMap_SimpleImmutableEntry2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1431), abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1431, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      Integer integer0 = new Integer(411);
      assertNotNull(integer0);
      assertEquals(411, (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(411, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 411, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'n';
      intArray0[2] = (int) 'n';
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = (int) '3';
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 1856L;
      Object object0 = ArrayUtils.get(objectArray0, 110);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      Long long0 = new Long((-271L));
      assertNotNull(long0);
      assertEquals((-271L), (long)long0);
      
      Long long1 = new Long((-61L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-61L), (long)long1);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) 0L;
      longArray1[1] = long1;
      longArray1[3] = (Long) (-103L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 110);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-61L), 110L, (-103L)}, longArray2);
      assertNotNull(longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray2, longArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {110, 0, 110, 0, 2, 51, 0, 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 110);
      assertEquals(3, objectArray0.length);
      assertEquals(0, int0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 9);
      Integer integer0 = new Integer((-2655));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2655), (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-2655), (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, (Integer) 0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Integer integer2 = new Integer(110);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(110, (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer2);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry3);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      Integer integer3 = new Integer((-2655));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-2655), (int)integer3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer3, integer1);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer3, integer2);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      abstractMap_SimpleImmutableEntryArray0[7] = abstractMap_SimpleImmutableEntry7;
      Integer integer4 = new Integer(110);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(110, (int)integer4);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry8 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer4, (Integer) 110);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry8);
      
      abstractMap_SimpleImmutableEntryArray0[8] = abstractMap_SimpleImmutableEntry8;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(428, abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 428, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = 1252.23;
      doubleArray0[6] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1252.23);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1252.23, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(byteArray0, 1588, 776);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray0, (double) (-1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1252.23, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1252.23, 0.0, (-1.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_INT_ARRAY, (int) (byte)0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)91, arrayUtils0.EMPTY_BYTE_ARRAY, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1252.23, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1559L));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1559L);
      doubleArray0[1] = (double) (-1559L);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1404);
      shortArray0[1] = (short) (-72);
      shortArray0[2] = (short) (-2214);
      shortArray0[3] = (short)106;
      shortArray0[4] = (short)55;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-2486);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-1404), (short) (-72), (short) (-2214), (short)106, (short)55, (short)1, (short) (-2486)}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-2214);
      intArray0[1] = (int) (short) (-2486);
      intArray0[2] = (int) (short)55;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {55, (-2486), (-2214)}, intArray0);
      assertEquals(3, intArray0.length);
      
      Integer integer0 = new Integer((-2196));
      assertNotNull(integer0);
      assertEquals((-2196), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurrences((Integer[]) null, integer0);
      assertNull(integerArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = 0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int1);
      assertFalse(int1 == int0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      assertFalse(int1 == int0);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int1));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer integer4 = new Integer(1196);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(1196, (int)integer4);
      
      Integer integer5 = Integer.getInteger(":^", (Integer) int0);
      assertFalse(int0 == int1);
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(4, (int)integer5);
      
      Integer integer6 = ArrayUtils.get(integerArray0, (-1), integer5);
      assertFalse(int0 == int1);
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int1));
      assertNotNull(integer6);
      assertEquals(5, integerArray0.length);
      assertEquals(4, (int)integer6);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) int1);
      assertFalse(int1 == int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1074), (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 50;
      intArray0[1] = int0;
      intArray0[2] = (-2140052908);
      ArrayUtils.swap(intArray0, int1, (-2140052908));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {50, 4, (-2140052908), 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.remove(integerArray0, 1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(5, integerArray0.length);
      assertEquals(4, integerArray2.length);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 71.40367F;
      floatArray0[2] = 0.0F;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short)32;
      shortArray0[3] = (short) (-1073);
      floatArray0[0] = (float) (short) (-1073);
      shortArray0[5] = (short) (-1073);
      shortArray0[6] = (short)32;
      shortArray0[7] = (short)32;
      shortArray0[8] = (short) (-1073);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)32, (-2147483646));
      assertArrayEquals(new short[] {(short)32, (short)32, (short)0, (short) (-1073), (short)0, (short) (-1073), (short)32, (short)32, (short) (-1073)}, shortArray0);
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(9, shortArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((short) (-1073));
      ArrayUtils.swap(floatArray0, (int) (short)0, (int) (short) (-1073), (int) (short)32);
      assertArrayEquals(new float[] {(-1073.0F), 71.40367F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('Z', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character1);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('Z', (char)character2);
      
      characterArray0[2] = character2;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 71.40367F);
      assertArrayEquals(new float[] {(-1073.0F), 71.40367F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)32;
      longArray0[1] = (long) 'Z';
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) (short)32, (-2143886522));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new long[] {32L, 90L}, longArray0);
      assertEquals(64, bitSet1.size());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertEquals(2, longArray0.length);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-933);
      shortArray0[1] = (short)83;
      Character character0 = Character.valueOf('6');
      assertNotNull(character0);
      assertEquals('6', (char)character0);
      
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)83, (short)0, (short)0, (short)0, (short)0, (short) (-933)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)83, (short)0, (short)0, (short)0, (short)0, (short) (-933)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)83;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short) (-933);
      doubleArray0[3] = (double) '6';
      doubleArray0[4] = 4525.36955835;
      doubleArray0[5] = (-4832.326);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0, 54.0);
      assertArrayEquals(new double[] {83.0, 0.0, (-933.0), 54.0, 4525.36955835, (-4832.326)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '6';
      longArray0[1] = (long) (short) (-933);
      longArray0[2] = (long) (short)83;
      longArray0[3] = (long) (short)83;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2231, (int) (short)0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {54L, (-933L), 83L, 83L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 4525.36955835);
      assertArrayEquals(new double[] {83.0, 0.0, (-933.0), 54.0, 4525.36955835, (-4832.326)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)83;
      intArray0[1] = (int) (short)83;
      intArray0[2] = 1171;
      intArray0[3] = 51;
      intArray0[4] = (int) (short) (-933);
      intArray0[5] = (int) (short) (-933);
      int int1 = ArrayUtils.indexOf(intArray0, (-933), (-123));
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {83, 83, 1171, 51, (-933), (-933)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[3] = (-103L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 0L, (-103L)}, longArray0);
      assertEquals("{0, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 0L, (-103L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'n';
      intArray0[2] = (int) 'n';
      intArray0[3] = 0;
      intArray0[4] = 2;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0L;
      Object object0 = ArrayUtils.get(objectArray0, 110);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      Long long0 = new Long((-271L));
      assertNotNull(long0);
      assertEquals((-271L), (long)long0);
      
      Long long1 = new Long((-61L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-61L), (long)long1);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) (-103L);
      longArray1[1] = long1;
      longArray1[3] = (Long) (-103L);
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray2, longArray0);
      
      long[] longArray3 = ArrayUtils.insert(2, longArray2, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertNotNull(longArray3);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.shift((Object[]) longArray1, 1, 0, 3366);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      long[] longArray0 = new long[4];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Integer integer0 = new Integer(8192);
      assertNotNull(integer0);
      assertEquals(8192, (int)integer0);
      
      bitSet0.flip(8192);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(8193, bitSet0.length());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(8256, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 8192}", bitSet0.toString());
      assertEquals(4, longArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(8192, object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockRandom0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) integer0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'b';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'b', 'N'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.shift(objectArray0, 1);
      assertEquals(8, objectArray0.length);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean1 = ArrayUtils.contains(charArray1, 'b');
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertFalse(boolean1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-31);
      ArrayUtils.swap(floatArray0, (-4846), (int) (byte) (-31), 5);
      assertArrayEquals(new float[] {(-31.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte byte0 = (byte)52;
      Byte byte1 = new Byte((byte)52);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)52, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)52, (byte)52}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)52, (byte)52}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertTrue(boolean0);
      
      Short short0 = new Short(byte0);
      assertNotNull(short0);
      assertEquals((short)52, (short)short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short) byte0);
      assertNull(shortArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-31.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-31.0F);
      doubleArray0[1] = (double) (-31.0F);
      doubleArray0[2] = (double) byte0;
      doubleArray0[3] = (double) (-31.0F);
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) byte0;
      doubleArray0[6] = (double) (-31.0F);
      doubleArray0[7] = (double) (byte) (-31);
      doubleArray0[8] = (double) (-4846);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-31.0));
      assertArrayEquals(new double[] {(-31.0), (-31.0), 52.0, (-31.0), 52.0, 52.0, (-31.0), (-31.0), (-4846.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      ArrayUtils.swap(longArray0, 3548, 3548, 3548);
      assertArrayEquals(new long[] {53L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 53L;
      doubleArray0[1] = 342.438261;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 347;
      doubleArray0[4] = (double) (short)113;
      doubleArray0[5] = (double) 3548;
      doubleArray0[6] = (double) (short)2;
      ArrayUtils.shift(doubleArray0, 84);
      assertArrayEquals(new double[] {53.0, 342.438261, 1.0, 347.0, 113.0, 3548.0, 2.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(12, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 53L, 1);
      assertArrayEquals(new double[] {53.0, 342.438261, 1.0, 347.0, 113.0, 3548.0, 2.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (-1184));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1184, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      long[] longArray0 = new long[4];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Integer integer0 = new Integer(8192);
      assertNotNull(integer0);
      assertEquals(8192, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(8192, object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockRandom0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) integer0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'b';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'b', 'N'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.shift(objectArray0, 1);
      assertEquals(8, objectArray0.length);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, '#');
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotNull(charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.swap((double[]) null, (-3008), 36, (-3529));
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 1214);
      assertNull(intArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 76, 32, (-1.0));
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      
      int int1 = (-826);
      ArrayUtils.swap((char[]) null, (-2176), (-826), 250);
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      Integer integer0 = Integer.getInteger("&;T;DZ4=5TN8");
      assertNull(integer0);
      
      Integer integer1 = new Integer(1214);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(1214, (int)integer1);
      
      try { 
        Integer.decode("', has a length less than 2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"', has a length less than 2\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-933);
      shortArray0[1] = (short)83;
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      ArrayUtils.shift(shortArray0, (-2135888163));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-933), (short)83, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) 0;
      longArray0[3] = 1L;
      longArray0[4] = (long) (short)0;
      longArray0[5] = 1L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 470L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 1L, 0L, 1L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1L, 0L, 1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 1L, 0L, 1L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1L, 0L, 1L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = false;
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 0, 0);
      assertNull(floatArray0);
      
      int int0 = 127;
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, 127, (float) 127);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)18, (int) (byte)18);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)53;
      shortArray0[1] = (short) (byte)18;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)53, (short)18}, shortArray0);
      assertArrayEquals(new short[] {(short)53, (short)18}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 2983L);
      assertArrayEquals(new long[] {2983L}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2983L;
      doubleArray0[1] = (double) (short)53;
      doubleArray0[2] = (double) (short)18;
      doubleArray0[3] = (double) (short)53;
      doubleArray0[4] = (double) (byte)18;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (byte)18;
      doubleArray0[7] = (double) (byte)18;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {2983.0, 53.0, 18.0, 53.0, 18.0, (-1.0), 18.0, 18.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      ArrayUtils.shift((long[]) null, (int) (byte)18, (int) (short)53, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 1876, 397, 397);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("eA*B+tEiP,07g", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer((-3077));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-3077), (int)integer2);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert((-3077), charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 52;
      intArray0[2] = (-3077);
      intArray0[3] = (-3077);
      intArray0[4] = 0;
      intArray0[6] = 52;
      intArray0[7] = (-3077);
      intArray0[8] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2124141434, 2124141434);
      assertArrayEquals(new int[] {0, 52, (-3077), (-3077), 0, 0, 52, (-3077), 0}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(9, intArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-796), 631, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2716.0F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      intArray0[0] = (-3625);
      floatArray0[5] = (float) (-3625);
      ArrayUtils.reverse(booleanArray0, 1679, 0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(2, booleanArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-3625);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (-3625);
      longArray0[3] = (long) (-3625);
      longArray0[4] = (long) (-3625);
      longArray0[5] = (long) (-796);
      longArray0[6] = (long) (-3625);
      longArray0[7] = (long) (byte)0;
      longArray0[8] = (long) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-3625L), 0L, (-3625L), (-3625L), (-3625L), (-796L), (-3625L), 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      
      Float[] floatArray1 = new Float[6];
      floatArray1[0] = (Float) (-3625.0F);
      floatArray1[1] = (Float) (-2716.0F);
      floatArray1[3] = (Float) (-2716.0F);
      floatArray1[4] = (Float) 0.0F;
      floatArray1[5] = (Float) 0.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'z', 'z', 'z'}, charArray0);
      assertArrayEquals(new char[] {'z', 'z', 'z'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.shift(byteArray0, (-36), (int) 'z', (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'z';
      doubleArray0[1] = (double) 'z';
      doubleArray0[2] = (double) 'z';
      doubleArray0[3] = (double) 'z';
      doubleArray0[4] = (double) (-36);
      doubleArray0[5] = (double) 'z';
      doubleArray0[6] = (double) 'z';
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {122.0, 122.0, 122.0, 122.0, (-36.0), 122.0, 122.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(16, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-2445);
      short[] shortArray1 = new short[9];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-2445);
      doubleArray0[1] = (-36.0);
      doubleArray0[2] = (double) (short) (-2445);
      ArrayUtils.shift(doubleArray0, (-2146));
      assertArrayEquals(new double[] {(-2445.0), 0.0, (-2445.0), (-36.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1843.93338), 979.96196502);
      assertArrayEquals(new double[] {(-2445.0), 0.0, (-2445.0), (-36.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer2));
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Integer integer3 = mutableInt0.toInteger();
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer integer4 = new Integer(512);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(512, (int)integer4);
      
      Integer integer5 = new Integer((-814));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals((-814), (int)integer5);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer6 = new Integer(512);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals(512, (int)integer6);
      
      integerArray0[0] = integer6;
      integerArray0[1] = integer0;
      integerArray0[2] = integer5;
      integerArray0[3] = integer4;
      integerArray0[4] = integer2;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[7] = integer3;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(16, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      mutableInt0.setValue(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer5));
      assertFalse(integer1.equals((Object)integer6));
      assertFalse(integer1.equals((Object)integer4));
      assertTrue(integer1.equals((Object)integer2));
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (-1135.058088785754);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2, 0.0);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {2.0, 2.0, (-1135.058088785754), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      char char0 = '4';
      Character character0 = Character.valueOf('4');
      assertNotNull(character0);
      assertEquals('4', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('4');
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('4', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) char0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {52.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-39));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)119, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-39)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Integer[] integerArray0 = new Integer[3];
      MutableInt mutableInt0 = new MutableInt(52.0F);
      assertEquals(52, mutableInt0.intValue());
      assertEquals("52", mutableInt0.toString());
      assertEquals(52L, mutableInt0.longValue());
      assertEquals(52.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)52, mutableInt0.shortValue());
      assertEquals(52.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)52, mutableInt0.byteValue());
      assertEquals(52, (int)mutableInt0.getValue());
      assertEquals(52, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(52, mutableInt0.intValue());
      assertEquals("52", mutableInt0.toString());
      assertEquals(52L, mutableInt0.longValue());
      assertEquals(52.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)52, mutableInt0.shortValue());
      assertEquals(52.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)52, mutableInt0.byteValue());
      assertEquals(52, (int)mutableInt0.getValue());
      assertEquals(52, (int)mutableInt0.toInteger());
      assertNotNull(integer0);
      assertEquals(52, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(512);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(512, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 2;
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = new Integer[0];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer[] integerArray2 = ArrayUtils.addAll(integerArray0, integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(0, integerArray1.length);
      assertEquals(3, integerArray2.length);
      assertEquals(3, integerArray0.length);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (int)integer0;
      doubleArray0[1] = (double) 52.0F;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) (int)integerArray0[1];
      doubleArray0[4] = (double) (byte) (-39);
      doubleArray0[5] = (double) (byte) (-39);
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) char0;
      doubleArray0[8] = (double) (byte) (-39);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-39.0));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {52.0, 52.0, 2.0, 512.0, (-39.0), (-39.0), 2.0, 52.0, (-39.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 2146491539;
      doubleArray0[2] = (double) 2146491539;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) 2146491539;
      doubleArray0[6] = (-1.0);
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 2.146491539E9, 2.146491539E9, 0.0, 0.0, 2.146491539E9, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2.146491539E9, (int) (byte)0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 2.146491539E9, 2.146491539E9, 0.0, 0.0, 2.146491539E9, (-1.0)}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals("{1, 2, 5}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      ArrayUtils.swap(shortArray0, 1, (int) (short)0, Integer.MAX_VALUE);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-1757);
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (-423L);
      longArray0[5] = (long) 1;
      longArray0[6] = (long) (-1);
      ArrayUtils.reverse(longArray0, 2519, 2519);
      assertArrayEquals(new long[] {0L, 0L, (-1757L), 2147483647L, (-423L), 1L, (-1L)}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 434.16;
      doubleArray0[1] = 434.16;
      doubleArray0[2] = 434.16;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 434.16;
      doubleArray0[5] = 434.16;
      doubleArray0[6] = 2652.0688882388;
      doubleArray0[7] = 434.16;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 434.16);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {434.16, 434.16, 434.16, 1.5, 434.16, 434.16, 2652.0688882388, 434.16}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {434.16, 434.16, 434.16, 1.5, 434.16, 434.16, 2652.0688882388, 434.16, 434.16}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer integer0 = Integer.valueOf(1885);
      assertNotNull(integer0);
      assertEquals(1885, (int)integer0);
      
      Integer integer1 = new Integer(157);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(157, (int)integer1);
      
      Integer integer2 = new Integer(35);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(35, (int)integer2);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, 157);
      assertFalse(boolean0);
      
      ArrayUtils.shift((char[]) null, 598, (-1494), 3390);
      Integer integer3 = new Integer(157);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(157, (int)integer3);
      
      boolean boolean1 = ArrayUtils.isArrayIndexValid((Integer[]) null, 113);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift((char[]) null, 2, 1636, 2);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      ArrayUtils.shift((char[]) null, (-981), (-981), (-981));
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '>';
      charArray0[2] = '!';
      charArray0[3] = '.';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'4', '>', '!', '.'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift(charArray0, 3403);
      assertArrayEquals(new char[] {'>', '!', '.', '4'}, charArray0);
      assertEquals(4, charArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '!';
      floatArray0[1] = (float) '>';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 33.0F);
      assertArrayEquals(new float[] {33.0F, 62.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 3403, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {33.0F, 62.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 33.0F;
      objectArray0[1] = (Object) '4';
      objectArray0[2] = (Object) '.';
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(3, objectArray0.length);
      
      int int1 = ArrayUtils.indexOf(charArray0, '4', 3403);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'>', '!', '.', '4'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int1);
      
      Long[] longArray0 = new Long[4];
      long long0 = 0L;
      Long long1 = Long.getLong((String) null, 0L);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long(0L);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(3403);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(3403L, (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(long0);
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals(0L, (long)long4);
      
      longArray0[3] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2121L);
      assertArrayEquals(new long[] {0L, 0L, 3403L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = '@';
      charArray0[3] = '@';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '@', '@'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) null, (int) '@');
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'f';
      doubleArray0[1] = (double) 'f';
      doubleArray0[2] = (double) (-2422);
      doubleArray0[3] = (double) '@';
      doubleArray0[4] = (double) '@';
      doubleArray0[5] = (double) '@';
      doubleArray0[6] = (double) '@';
      doubleArray0[7] = (double) '@';
      doubleArray0[8] = (double) '@';
      ArrayUtils.swap(doubleArray0, 1, 0, 0);
      assertArrayEquals(new double[] {102.0, 102.0, (-2422.0), 64.0, 64.0, 64.0, 64.0, 64.0, 64.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      longArray0[4] = 1609L;
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 36);
      assertArrayEquals(new long[] {(-1L), 0L, 2450L, 0L, 1609L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2338.26, (double) 2450L);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 71;
      intArray0[1] = 71;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 71;
      longArray0[1] = (long) 71;
      longArray0[2] = (long) (-1534);
      longArray0[3] = (long) 71;
      longArray0[4] = 0L;
      longArray0[5] = (long) 71;
      longArray0[6] = (long) 71;
      int int0 = ArrayUtils.indexOf(longArray0, 1796L, 71);
      assertArrayEquals(new long[] {71L, 71L, (-1534L), 71L, 0L, 71L, 71L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 71L;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1534L);
      floatArray0[3] = (float) 71L;
      floatArray0[4] = (float) 71;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 978.0F;
      floatArray1[1] = (-1998.0569F);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {978.0F, (-1998.0569F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {71.0F, (-1.0F), (-1534.0F), 71.0F, 71.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {71.0F, (-1.0F), (-1534.0F), 71.0F, 71.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(2, floatArray1.length);
      assertEquals(5, floatArray2.length);
      assertEquals(5, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 71L;
      ArrayUtils.shift(doubleArray0, (-2862), (-1534), 1378);
      assertArrayEquals(new double[] {71.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 16;
      floatArray0[1] = (float) 16;
      floatArray0[2] = (float) 10;
      floatArray0[3] = (float) 40;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 40;
      floatArray1[1] = (float) 16;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {16.0F, 16.0F, 10.0F, 40.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {40.0F, 16.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {16.0F, 10.0F, 0.0F}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(6, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, '\u008B');
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '\u008B';
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {139.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {139.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 946.982F;
      floatArray0[2] = 277.08023F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {946.982F, 0.0F, 277.08023F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 277.08023F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-44);
      Byte byte1 = new Byte((byte) (-44));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-44), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-28));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-28), (byte)byte2);
      
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte) (-44), (byte)byte3);
      
      Byte byte4 = new Byte((byte) (-28));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      assertEquals((byte) (-28), (byte)byte4);
      
      Byte byte5 = new Byte((byte) (-77));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      assertEquals((byte) (-77), (byte)byte5);
      
      Byte byte6 = new Byte((byte) (-18));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      assertEquals((byte) (-18), (byte)byte6);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-77));
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-77), (byte) (-77), (byte) (-77), (byte) (-77)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 277.08023F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-18), (-284));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 277.0802307128906, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2217;
      shortArray0[1] = (short) (byte) (-18);
      shortArray0[2] = (short) (byte) (-44);
      shortArray0[3] = (short) (-521);
      ArrayUtils.swap(shortArray0, 2, 0, (int) (byte) (-28));
      assertArrayEquals(new short[] {(short)2217, (short) (-18), (short) (-44), (short) (-521)}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-31);
      ArrayUtils.swap(floatArray0, (-4846), (int) (byte) (-31), 5);
      assertArrayEquals(new float[] {(-31.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-4846);
      doubleArray0[1] = (double) (byte) (-31);
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = 1.0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte) (-31), 5, 5);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.swap(floatArray0, 1, 1);
      assertArrayEquals(new float[] {(-31.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) null);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)108;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)108, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)108, (short)108, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object[] objectArray0 = new Object[9];
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(Integer.MAX_VALUE, object0);
      
      objectArray0[0] = object0;
      Integer integer1 = new Integer(108);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertNotNull(integer1);
      assertEquals(108, (int)integer1);
      
      Integer integer2 = new Integer(133);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object0));
      assertNotNull(integer2);
      assertEquals(133, (int)integer2);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurences((Integer[]) null, integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object0));
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 71.40367F;
      floatArray0[2] = 0.0F;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short)32;
      shortArray0[3] = (short) (-1073);
      shortArray0[4] = (short) (-1073);
      shortArray0[5] = (short) (-1073);
      shortArray0[6] = (short)32;
      shortArray0[7] = (short)32;
      shortArray0[8] = (short) (-1073);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)32, (-2147483646));
      assertArrayEquals(new short[] {(short)32, (short)32, (short)0, (short) (-1073), (short) (-1073), (short) (-1073), (short)32, (short)32, (short) (-1073)}, shortArray0);
      assertEquals("{0, 1, 6, 7}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(9, shortArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((short) (-1073));
      ArrayUtils.swap(floatArray0, (int) (short) (-1073), (int) (short) (-1073), (int) (short)32);
      assertArrayEquals(new float[] {0.0F, 71.40367F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('Z', (char)character1);
      
      ArrayUtils.swap(shortArray0, (-1028), (int) (short)32, (int) (short)32);
      assertArrayEquals(new short[] {(short)32, (short)32, (short)0, (short) (-1073), (short) (-1073), (short) (-1073), (short)32, (short)32, (short) (-1073)}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1073);
      longArray0[1] = (long) (short) (-1073);
      longArray0[2] = (long) (short) (-1073);
      ArrayUtils.reverse(longArray0, (-31), 18688);
      assertArrayEquals(new long[] {(-1073L), (-1073L), (-1073L)}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1826L);
      longArray0[2] = 1725L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      Integer integer1 = new Integer((-1510));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1510), (int)integer1);
      
      Integer integer2 = new Integer(68);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(68, (int)integer2);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 2450L;
      longArray1[1] = 10L;
      longArray1[2] = (-1826L);
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2450L, 10L, (-1826L)}, longArray1);
      assertNotNull(longArray2);
      assertEquals(3, longArray2.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)120;
      Byte byte1 = new Byte((byte)120);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)120, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)120, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)72);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)72, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-56));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      assertEquals((byte) (-56), (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-13));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      assertEquals((byte) (-13), (byte)byte5);
      
      byteArray0[4] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte)120, (byte)72, (byte) (-56), (byte) (-13)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = 0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int1);
      assertFalse(int1 == int0);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      assertFalse(int1 == int0);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer integer4 = new Integer(1196);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(1196, (int)integer4);
      
      Integer integer5 = Integer.getInteger(":^", (Integer) int0);
      assertFalse(int0 == int1);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(4, (int)integer5);
      
      Integer integer6 = ArrayUtils.get(integerArray0, (-1), integer5);
      assertFalse(int0 == int1);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int1));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(5, integerArray0.length);
      assertEquals(4, (int)integer6);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) int1);
      assertFalse(int1 == int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, int0, (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int0 == int1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = '\"';
      charArray0[2] = '?';
      charArray0[3] = '8';
      ArrayUtils.swap(charArray0, 4, 2087, 50);
      assertArrayEquals(new char[] {'x', '\"', '?', '8'}, charArray0);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '4', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      Integer integer0 = new Integer((-576));
      assertNotNull(integer0);
      assertEquals((-576), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'v');
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.contains((double[]) null, 147.9929962158203, (double) 71.40367F);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) Integer.MAX_VALUE, (-576), 147.9929962158203);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) bitSet0;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(108);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(108, (int)integer2);
      
      integerArray0[2] = integer2;
      integerArray0[3] = integer0;
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer((-201));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals((-201), (int)integer4);
      
      integerArray0[5] = integer4;
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      integerArray0[6] = integer5;
      integerArray0[7] = integer0;
      Integer integer6 = ArrayUtils.get(integerArray0, 0, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(8, integerArray0.length);
      assertEquals(Integer.MAX_VALUE, (int)integer6);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) integer6);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer6));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertEquals(8, integerArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Float float0 = new Float((double) (short)32);
      assertNotNull(float0);
      assertEquals(32.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-198));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-198.0F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float1;
      floatArray0[4] = float1;
      floatArray0[5] = float0;
      floatArray0[6] = float1;
      floatArray0[7] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1583.89F);
      assertArrayEquals(new float[] {(-198.0F), 32.0F, 32.0F, (-198.0F), (-198.0F), 32.0F, (-198.0F), (-198.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (-402.0);
      doubleArray0[2] = (double) 1583.89F;
      doubleArray0[3] = (double) (float)floatArray0[1];
      doubleArray0[4] = (double) (float)floatArray0[2];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {1.0, (-402.0), 1583.8900146484375, 32.0, 32.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '<';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      int int0 = ArrayUtils.indexOf(charArray0, '9');
      assertArrayEquals(new char[] {'9', '9', '<', '9', '9', '9'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '9';
      longArray0[1] = (-1978L);
      longArray0[2] = (long) '9';
      longArray0[3] = (long) '9';
      ArrayUtils.shift(longArray0, (int) (byte)1, 0, (int) (short)32);
      assertArrayEquals(new long[] {57L, (-1978L), 57L, 57L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 1494);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1136, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1136, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[2] = 53L;
      longArray0[1] = 348L;
      longArray0[2] = (-1450L);
      longArray0[3] = 1L;
      short[] shortArray0 = new short[5];
      Short short0 = new Short((short)116);
      assertNotNull(short0);
      assertEquals((short)116, (short)short0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeElement((short[]) null, (short)2);
      assertNull(shortArray2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1L;
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Integer integer2 = new Integer((-123));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-123), (int)integer2);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[1] = 53L;
      short[] shortArray3 = ArrayUtils.subarray((short[]) null, (int) (short)2, (-123));
      assertNull(shortArray3);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), (-2146494934));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.swap((int[]) null, 254, (-1), (-870));
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short)13;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2146034114, 2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)13, (short)13}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[2] = (byte) (-80);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-80);
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = '.';
      charArray0[2] = 'H';
      charArray0[3] = 'e';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'H', '.', 'H', 'e'}, charArray0);
      assertArrayEquals(new char[] {'H', '.', 'H', 'e'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)53;
      ArrayUtils.shift(floatArray0, (int) (byte)32, 1969, 384);
      assertArrayEquals(new float[] {53.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2729;
      shortArray0[1] = (short) (byte)33;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-27), 1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2729, (short)33}, shortArray0);
      assertArrayEquals(new short[] {(short)2729}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-80);
      objectArray0[1] = (Object) 'H';
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.insert((-2739), (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      Float float0 = new Float((double) (short)32);
      assertNotNull(float0);
      assertEquals(32.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (short)32);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(32.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float1;
      floatArray0[5] = float0;
      floatArray0[6] = float1;
      floatArray0[7] = float1;
      float[] floatArray1 = ArrayUtils.insert((int) (short)32, (float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (int) (short)32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 117L;
      longArray0[2] = (-4283L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 117L, (-4283L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1877L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer integer0 = new Integer(2118);
      assertNotNull(integer0);
      assertEquals(2118, (int)integer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[3] = 'h';
      charArray0[4] = 'X';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'X', 'X', '\u0000', 'h', 'X'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 'h';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1234.0429332969);
      assertArrayEquals(new double[] {0.0, 104.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray1, (-1073741824), 2118, (-1587));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'X', 'X', '\u0000', 'h', 'X'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 104.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 104.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[2] = (byte) (-80);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)33;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, 7, 4537, (-2533));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.reverse(booleanArray0, 701, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals("{1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-796), 631, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2716.0F);
      floatArray0[1] = (float) (-4155);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-3625);
      floatArray0[5] = (float) 0;
      ArrayUtils.reverse(booleanArray0, 1679, (-4155));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(2, booleanArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-3625);
      longArray0[5] = (long) (-796);
      longArray0[6] = (long) (-3625);
      longArray0[7] = (long) (byte)0;
      longArray0[8] = (long) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-3625L), (-796L), (-3625L), 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      
      Float[] floatArray1 = new Float[6];
      floatArray1[0] = (Float) 0.0F;
      floatArray1[1] = (Float) (-2716.0F);
      floatArray1[2] = (Float) 0.0F;
      floatArray1[3] = (Float) (-2716.0F);
      floatArray1[4] = (Float) 0.0F;
      floatArray1[5] = (Float) (-3625.0F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-2716.0F), 0.0F, (-2716.0F), 0.0F, (-3625.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(6, floatArray2.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-8L);
      longArray0[3] = 1L;
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-8L);
      longArray1[1] = (-8L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-1L), (-8L), 1L}, longArray0);
      assertArrayEquals(new long[] {(-8L), (-8L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      Integer integer0 = new Integer((-576));
      assertNotNull(integer0);
      assertEquals((-576), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      float[] floatArray0 = new float[5];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) Integer.MAX_VALUE);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = new long[10];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {2147483647L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 2147483647L;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) integer1;
      objectArray0[3] = (Object) integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      ArrayUtils.swap(objectArray0, (-576), 1972, 3002);
      assertEquals(5, objectArray0.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'C');
      assertNull(charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'C';
      intArray0[1] = 1972;
      intArray0[2] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[2], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(221);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(221, (int)integer0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[0] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      Integer integer1 = new Integer(221);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(221, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, true, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 73.0F;
      floatArray0[2] = (float) (-1114);
      int int2 = ArrayUtils.indexOf(floatArray0, 1.0F, (-1949));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new float[] {73.0F, 0.0F, (-1114.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int2);
      
      boolean[] booleanArray0 = ArrayUtils.insert(1072, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = (-1114);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)123);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)123;
      intArray0[1] = (int) (byte)123;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 123, 123);
      assertArrayEquals(new int[] {123, 123, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)123);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)123, 123);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.insert((-2146996951), booleanArray0, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 123;
      longArray0[1] = 612L;
      longArray0[2] = (long) 'x';
      longArray0[3] = (long) 123;
      longArray0[4] = (long) '%';
      longArray0[5] = (long) 123;
      longArray0[6] = 1076L;
      longArray0[7] = (long) (-1);
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {123L, 612L, 120L, 123L, 37L, 123L, 1076L, (-1L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = 'W';
      charArray0[2] = '/';
      charArray0[3] = 'B';
      charArray0[4] = 'L';
      charArray0[5] = '#';
      charArray0[6] = 'P';
      charArray0[7] = 'd';
      ArrayUtils.shift(charArray0, 1197);
      assertArrayEquals(new char[] {'B', 'L', '#', 'P', 'd', '2', 'W', '/'}, charArray0);
      assertEquals(8, charArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (-1), (-1), (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1429);
      shortArray0[1] = (short)1378;
      shortArray0[2] = (short) (-323);
      shortArray0[3] = (short)101;
      shortArray0[4] = (short) (-1229);
      shortArray0[5] = (short)101;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1429), (short)1378, (short) (-323), (short)101, (short) (-1229), (short)101}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[3] = (-103L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 0L, (-103L)}, longArray0);
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 0L, (-103L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'n';
      intArray0[2] = (int) 'n';
      intArray0[3] = 0;
      intArray0[4] = 2;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0L;
      Object object0 = ArrayUtils.get(objectArray0, 110);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      ArrayUtils.swap((byte[]) null, 860, 101, 110);
      Integer integer0 = new Integer(53);
      assertNotNull(integer0);
      assertEquals(53, (int)integer0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 661);
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) integer0, (-3431));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 219.993F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray0, (Object) integer0);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 219.993F;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 219.993F;
      doubleArray0[7] = (double) (-1);
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 219.993F, 1.0);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {219.9929962158203, (-1.0), (-1.0), 1.0, 1.0, 1.0, 219.9929962158203, (-1.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[2] = 40;
      intArray0[3] = (-2501);
      intArray0[4] = (-2716);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray0);
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-2716);
      Integer integer0 = new Integer((-2716));
      assertNotNull(integer0);
      assertEquals((-2716), (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) 40;
      integerArray0[3] = (Integer) 10;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-831));
      assertEquals(4, integerArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      ArrayUtils.shift(charArray0, (int) integerArray0[1], (-831), 3255);
      assertArrayEquals(new char[] {'1', '1', '1'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      char[] charArray0 = new char[11];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(11, charArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift(charArray0, (-1), 0, 0);
      assertEquals(11, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)62}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = '.';
      charArray0[2] = '\\';
      charArray0[3] = 'H';
      charArray0[4] = 'z';
      charArray0[0] = 'H';
      charArray0[6] = 'U';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'H', '.', '\\', 'H', 'z', '\u0000', 'U'}, charArray0);
      assertArrayEquals(new char[] {'H', '.', '\\', 'H', 'z', '\u0000', 'U'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'z';
      ArrayUtils.shift(floatArray0, 1264, (-3756), (-648));
      assertArrayEquals(new float[] {122.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)62}, byteArray1);
      assertArrayEquals(new byte[] {(byte)62}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = Integer.valueOf(1264);
      assertNotNull(integer0);
      assertEquals(1264, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(598);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(598, (int)integer1);
      
      integerArray0[1] = integer1;
      Object object0 = ArrayUtils.toPrimitive((Object) integerArray0[1]);
      assertFalse(object0.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer1));
      assertNotNull(object0);
      assertEquals(3, integerArray0.length);
      assertEquals(598, object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'z', 'z', 'z'}, charArray0);
      assertArrayEquals(new char[] {'z', 'z', 'z'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      ArrayUtils.shift(floatArray0, (-123), (int) (byte)0, (-1));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-605.651452), (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert((-1), doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-21));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte) (-21), (byte) (-21));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -21, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1826L);
      longArray0[2] = 1725L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      org.evosuite.runtime.Random.setNextRandom(0);
      ArrayUtils.swap((float[]) null, 1468, 3002, 251);
      Character character0 = new Character('F');
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      Character character1 = new Character('F');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('F', (char)character1);
      
      Character character2 = new Character('F');
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('F', (char)character2);
      
      boolean boolean1 = ArrayUtils.contains((float[]) null, (float) (-1826L));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 1129.27);
      assertArrayEquals(new double[] {1129.27}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4635.53767042;
      doubleArray1[1] = (double) (-1826L);
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = 4635.53767042;
      doubleArray1[4] = 1129.27;
      doubleArray1[5] = (double) 0;
      double[] doubleArray2 = ArrayUtils.insert(0, doubleArray1, (double[]) null);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4635.53767042, (-1826.0), 0.0, 4635.53767042, 1129.27, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {4635.53767042, (-1826.0), 0.0, 4635.53767042, 1129.27, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)38;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)46, (byte)16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, (-95), 127, (-95));
      int[] intArray0 = new int[8];
      intArray0[0] = 127;
      intArray0[1] = 262;
      intArray0[2] = 127;
      intArray0[3] = (-95);
      intArray0[4] = 127;
      intArray0[5] = 127;
      intArray0[6] = 262;
      intArray0[7] = (-95);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {127, 262, 127, (-95), 127, 127, 262, (-95)}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift(intArray0, (-698));
      assertArrayEquals(new int[] {127, (-95), 127, 127, 262, (-95), 127, 262}, intArray0);
      assertEquals(8, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      ArrayUtils.shift(shortArray0, (-1230), 67, (-593));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.shift(intArray0, (-2789), 127, 57);
      assertArrayEquals(new int[] {262, 127, (-95), 127, 127, 262, (-95), 127}, intArray0);
      assertEquals(8, intArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((String) null);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("XH)PIPR.$B");
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("P|YBz");
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf("P|YBz");
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.FALSE;
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean0));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray0[7] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      long[] longArray0 = new long[9];
      char[] charArray0 = new char[4];
      charArray0[1] = 's';
      ArrayUtils.swap(charArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new char[] {'\u0000', 's', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) true;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.insert((-2143574368), longArray0, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 36, (-72), (-72));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2669);
      intArray0[1] = 36;
      intArray0[2] = 36;
      intArray0[3] = 36;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = ';';
      charArray0[2] = 'Z';
      Boolean[] booleanArray1 = new Boolean[6];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray1[0] = boolean0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {36, 36, 36, (-2669)}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) true;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      Integer integer0 = new Integer(102);
      assertNotNull(integer0);
      assertEquals(102, (int)integer0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-2586));
      assertNull(intArray0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Short short0 = new Short((short)56);
      assertNotNull(short0);
      assertEquals((short)56, (short)short0);
      
      Short short1 = new Short((short)56);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)56, (short)short1);
      
      Short short2 = new Short((short) (-2775));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-2775), (short)short2);
      
      short short3 = (short)2662;
      Short short4 = new Short((short)2662);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals((short)2662, (short)short4);
      
      Short short5 = new Short((short)2);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertNotNull(short5);
      assertEquals((short)2, (short)short5);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-18));
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int int0 = (-2621);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-2775);
      floatArray0[1] = (-2179.4856F);
      floatArray0[2] = (float) (short)56;
      float[] floatArray1 = ArrayUtils.insert((-2621), floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-2775.0F), (-2179.4856F), 56.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2775.0F), (-2179.4856F), 56.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (int) (short) (-18));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -18, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2122219134;
      longArray0[1] = (long) (-98);
      longArray0[2] = (long) (-98);
      longArray0[3] = (long) 0;
      longArray0[4] = (-575L);
      longArray0[5] = (long) 2122219134;
      int int0 = ArrayUtils.indexOf(longArray0, 2162L, 2);
      assertArrayEquals(new long[] {2122219134L, (-98L), (-98L), 0L, (-575L), 2122219134L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift((double[]) null, (-848), 2, 0);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 1378, 0);
      assertArrayEquals(new long[] {2122219134L, (-98L), (-98L), 0L, (-575L), 2122219134L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(6, longArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new long[] {2122219134L, (-98L), (-98L), 0L, (-575L), 2122219134L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNull(object0);
      assertEquals(6, longArray0.length);
      
      Integer integer0 = new Integer(1563);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1563, (int)integer0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse(longArray0, (-2463), 2);
      assertArrayEquals(new long[] {(-98L), 2122219134L, (-98L), 0L, (-575L), 2122219134L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 0L;
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = ArrayUtils.insert((int) (byte)0, doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(9, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2146491539;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[4] = (float) 2146491539;
      floatArray0[5] = (float) 0L;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 0.0F;
      doubleArray4[1] = (double) 2.14649152E9F;
      doubleArray4[2] = (double) (byte)0;
      doubleArray4[3] = (double) (byte)0;
      doubleArray4[4] = (double) 0.0F;
      doubleArray4[6] = (double) 0.0F;
      doubleArray4[7] = (double) 0.0F;
      doubleArray4[8] = (double) 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray4, 0.6041960575291083, (int) (byte)0);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {0.0, 2.14649152E9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray4.length);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      ArrayUtils.swap(shortArray0, (int) (short)0, (int) (short)0, (-300));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      ArrayUtils.reverse(longArray0, (-1), (-1757));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) 2146491539, (int) (byte) (-1));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.insert((int) (byte) (-1), (double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = 2340.2112F;
      floatArray0[2] = (float) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 88, 991.037F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 88, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      Integer integer0 = new Integer(221);
      assertNotNull(integer0);
      assertEquals(221, (int)integer0);
      
      Integer integer1 = new Integer(71);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(71, (int)integer1);
      
      Integer integer2 = new Integer(13);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(13, (int)integer2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      ArrayUtils.shift(charArray0, (-1058), 2, 2);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.swap(shortArray0, 9, (-1169), 1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 434.16);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 434.16}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer integer0 = Integer.valueOf(1885);
      assertNotNull(integer0);
      assertEquals(1885, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      Integer integer2 = new Integer((short) (-1491));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1491), (int)integer2);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, 3271);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-547), 598, 1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-547);
      floatArray0[1] = (float) (-547);
      floatArray0[2] = (float) 9;
      floatArray0[3] = (float) (-1169);
      floatArray0[4] = (float) 9;
      floatArray0[5] = (float) (short) (-1491);
      floatArray0[6] = (float) (-1169);
      floatArray0[7] = (-1.0F);
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-547.0F), 9.0F, (-1169.0F), 9.0F, (-1491.0F), (-1169.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-547.0F), (-547.0F), 9.0F, (-1169.0F), 9.0F, (-1491.0F), (-1169.0F), (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)55;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)50);
      assertArrayEquals(new byte[] {(byte)47, (byte)1, (byte) (-82), (byte)55}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 0L;
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = ArrayUtils.insert((int) (byte)0, doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(9, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2146491539;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[4] = (float) 2146491539;
      floatArray0[5] = (float) 0L;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 0.0F;
      doubleArray4[1] = (double) 2.14649152E9F;
      doubleArray4[2] = (double) (byte)0;
      doubleArray4[3] = (double) (byte)0;
      doubleArray4[4] = (double) 0.0F;
      doubleArray4[6] = (double) 0.0F;
      doubleArray4[7] = (double) 0.0F;
      doubleArray4[8] = (double) 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray4, 0.1, (int) (byte)0);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {0.0, 2.14649152E9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray4.length);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[6] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = 1279.5706416;
      doubleArray0[7] = (double) 1;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1279.5706416, 1.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (-1685));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1685, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      int int0 = (-1);
      int int1 = 127;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 127, 37, (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)113;
      int int2 = 1;
      int int3 = 347;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 347;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 127;
      ArrayUtils.shift(doubleArray0, (-1184));
      assertArrayEquals(new double[] {127.0, 347.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = false;
      booleanArray1[6] = true;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(14, booleanArray2.length);
      assertEquals(7, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int4 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)0, 1);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertArrayEquals(new double[] {127.0, 347.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int4);
      
      int int5 = 110;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 110);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 110, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      Integer integer0 = new Integer(3008);
      assertNotNull(integer0);
      assertEquals(3008, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(3008, object0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 3008;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-17));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(11, byteArray0.length);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-412), (-412), (-412));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)0, (int) (short)0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-4072.80967219492), (-322), (double) (-322));
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) (-1.0);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (-1.0);
      objectArray0[4] = (Object) (-1.0);
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray1 = new Character[0];
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray1, '0');
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, characterArray1.length);
      assertEquals(0, charArray1.length);
      assertNotSame(characterArray1, characterArray0);
      assertSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      ArrayUtils.shift(shortArray0, (-1065), 1178, (-528));
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ArrayUtils.shift(shortArray0, 9);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.swap((boolean[]) null, 262, 127, 127);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      BitSet bitSet0 = new BitSet();
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift(intArray0, (-428));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)884;
      shortArray0[1] = (short)517;
      shortArray0[2] = (short)6;
      shortArray0[3] = (short)79;
      shortArray0[4] = (short)967;
      shortArray0[5] = (short)917;
      shortArray0[6] = (short) (-608);
      shortArray0[7] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short) (-608), (int) (short)79, (int) (short) (-608));
      assertArrayEquals(new short[] {(short)884, (short)517, (short)6, (short)79, (short)967, (short)917, (short) (-608), (short) (-1)}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'c';
      charArray0[2] = 'R';
      charArray0[3] = '^';
      charArray0[4] = '0';
      charArray0[5] = 'q';
      charArray0[6] = 'B';
      ArrayUtils.shift(charArray0, 2, 2, 1783);
      assertArrayEquals(new char[] {'U', 'c', 'R', '^', '0', 'q', 'B'}, charArray0);
      assertEquals(7, charArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '^';
      floatArray0[1] = (float) 2;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 1);
      assertArrayEquals(new float[] {94.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      char[] charArray0 = new char[11];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(11, charArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift(charArray0, (-1), 24, 0);
      assertEquals(11, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      char[] charArray0 = new char[16];
      ArrayUtils.shift(charArray0, Integer.MAX_VALUE);
      assertEquals(16, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)62}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = '.';
      charArray0[2] = '\\';
      charArray0[3] = 'H';
      charArray0[4] = 'z';
      charArray0[0] = 'H';
      charArray0[6] = 'U';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'H', '.', '\\', 'H', 'z', '\u0000', 'U'}, charArray0);
      assertArrayEquals(new char[] {'H', '.', '\\', 'H', 'z', '\u0000', 'U'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'z';
      ArrayUtils.shift(floatArray0, 1264, (-3756), (-648));
      assertArrayEquals(new float[] {122.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)62}, byteArray1);
      assertArrayEquals(new byte[] {(byte)62}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = Integer.valueOf(1264);
      assertNotNull(integer0);
      assertEquals(1264, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(598);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(598, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2145744794);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2145744794, (int)integer2);
      
      integerArray0[2] = integer2;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 2145744794);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean0);
      
      char[] charArray2 = new char[9];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'H';
      charArray2[1] = '.';
      charArray2[2] = 'H';
      charArray2[3] = 'z';
      charArray2[4] = '1';
      charArray2[5] = '\\';
      charArray2[6] = 'H';
      charArray2[7] = 'U';
      charArray2[8] = 'U';
      ArrayUtils.shift(charArray2, (-3756), 5, (int) (byte)62);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'z', '1', 'H', '.', 'H', '\\', 'H', 'U', 'U'}, charArray2);
      assertEquals(9, charArray2.length);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1826L);
      longArray0[2] = 1725L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[6] = (long) 0;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, (-1826L), 1725L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0L;
      ArrayUtils.swap(objectArray0, 0, 0, 0);
      assertEquals(1, objectArray0.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'h');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1063.97799263121;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1063.97799263121);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(14, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[5];
      doubleArray0[4] = (double) (byte)1;
      byteArray0[2] = (byte)1;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)1;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = Integer.getInteger((String) null);
      assertNull(integer0);
      
      integerArray0[0] = null;
      Integer integer1 = new Integer((byte)1);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      int int0 = ArrayUtils.indexOf(booleanArray1, true, (int) (byte)1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals((-1), int0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("]42Tmr:fi7)C*f");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("+8m2[ho0");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(false);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("]42Tmr:fi7)C*f");
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("gkXJ");
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf(false);
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = Boolean.TRUE;
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean7));
      assertNotNull(boolean8);
      assertTrue(boolean8);
      
      booleanArray0[8] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertFalse(boolean0.equals((Object)boolean8));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      boolean[] booleanArray2 = new boolean[5];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = (boolean) boolean0;
      booleanArray2[1] = false;
      booleanArray2[2] = (boolean) boolean8;
      booleanArray2[3] = (boolean) boolean0;
      booleanArray2[4] = (boolean) boolean0;
      boolean boolean9 = ArrayUtils.isSorted(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray2));
      assertEquals(5, booleanArray2.length);
      assertFalse(boolean9);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      int[] intArray0 = new int[9];
      intArray0[0] = (-3625);
      intArray0[1] = 4158;
      intArray0[2] = (-2121);
      intArray0[3] = (-3625);
      intArray0[4] = (-3625);
      intArray0[5] = 6;
      intArray0[6] = (-3625);
      intArray0[7] = (-779);
      intArray0[8] = (-2146996951);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {4158, (-2121), (-3625), (-3625), 6, (-3625), (-779), (-2146996951), (-3625)}, intArray0);
      assertEquals(9, intArray0.length);
      
      ArrayUtils.shift(booleanArray0, (-2146996951), 262, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.reverse(booleanArray0, 66, (-814));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-110));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(characterArray0);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      boolean[] booleanArray0 = null;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = new boolean[5];
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = false;
      booleanArray2[4] = true;
      boolean[] booleanArray3 = ArrayUtils.removeElement(booleanArray2, true);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray3));
      assertNotNull(booleanArray3);
      assertEquals(5, booleanArray2.length);
      assertEquals(4, booleanArray3.length);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-15), 48);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, 34.0, 1488, (-3361.5863));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      int int2 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], (-1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, objectArray0.length);
      assertEquals((-1), int2);
      
      ArrayUtils.shift((double[]) null, (-1));
      try { 
        Short.valueOf("Arguments cannot both be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Arguments cannot both be null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)104);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      long long0 = 0L;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)108;
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)108;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (byte)108;
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 108.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {108.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      int int0 = 2146491539;
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (byte)108, 2146491539);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)108, doubleArray2, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 108, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[2] = 'm';
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer('m');
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(109, (int)integer1);
      
      Integer integer2 = Integer.getInteger("", integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(109, (int)integer2);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer3 = new Integer(1662);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(1662, (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte)70;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), (-1504));
      assertArrayEquals(new byte[] {(byte)46, (byte)64, (byte) (-39), (byte)48, (byte) (-1), (byte) (-101), (byte)8, (byte)66, (byte)70}, byteArray0);
      assertEquals(5, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(9, byteArray0.length);
      
      String string0 = ArrayUtils.toString((Object) integer2);
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer3));
      assertNotNull(string0);
      assertEquals("109", string0);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, 0.0, 102);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(3077);
      assertNotNull(integer0);
      assertEquals(3077, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3002));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-3002), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(102);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(102, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-3660));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-3660), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2509));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-2509), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2166);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(2166, (int)integer5);
      
      integerArray0[5] = integer5;
      MutableInt mutableInt0 = new MutableInt((Number) integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals("2166", mutableInt0.toString());
      assertEquals(2166L, mutableInt0.longValue());
      assertEquals(2166, mutableInt0.intValue());
      assertEquals(2166.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)2166, mutableInt0.shortValue());
      assertEquals(2166.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2166, (int)mutableInt0.toInteger());
      assertEquals((byte)118, mutableInt0.byteValue());
      assertEquals(2166, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      Integer integer6 = mutableInt0.getValue();
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertEquals("2166", mutableInt0.toString());
      assertEquals(2166L, mutableInt0.longValue());
      assertEquals(2166, mutableInt0.intValue());
      assertEquals(2166.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)2166, mutableInt0.shortValue());
      assertEquals(2166.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2166, (int)mutableInt0.toInteger());
      assertEquals((byte)118, mutableInt0.byteValue());
      assertEquals(2166, (int)mutableInt0.getValue());
      assertNotNull(integer6);
      assertEquals(2166, (int)integer6);
      
      integerArray0[6] = integer6;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1));
      assertArrayEquals(new int[] {3077, (-3002), 102, (-3660), (-2509), 2166, 2166}, intArray0);
      assertNotNull(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      Double double0 = new Double(88.0);
      assertNotNull(double0);
      assertEquals(88.0, (double)double0, 0.01);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) double0;
      Object object0 = ArrayUtils.get(objectArray0, (-55));
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) double0;
      objectArray0[3] = (Object) double0;
      objectArray0[4] = (Object) double0;
      ArrayUtils.shift(objectArray0, (-272));
      assertEquals(5, objectArray0.length);
      
      Integer integer0 = new Integer(22);
      assertNotNull(integer0);
      assertEquals(22, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)46, (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(4, byteArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = '&';
      charArray0[2] = 'J';
      charArray0[3] = '|';
      charArray0[4] = 'P';
      charArray0[5] = '*';
      charArray0[6] = '6';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'c', '&', 'J', '|', 'P', '*', '6'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-14), (int) (byte)101);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-933), (-1), 117);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Float float0 = new Float((float) 117);
      assertNotNull(float0);
      assertEquals(117.0F, (float)float0, 0.01F);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (-2471), 64, (int) (byte) (-13));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-125));
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-125);
      doubleArray0[1] = (double) (byte) (-125);
      doubleArray0[2] = (double) (byte) (-125);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2528.63036605), (-1), 0.1);
      assertArrayEquals(new double[] {(-125.0), (-125.0), (-125.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.1);
      assertArrayEquals(new double[] {(-125.0), (-125.0), (-125.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-125));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-125.0);
      ArrayUtils.swap(objectArray0, (int) (byte) (-125), (-1));
      assertEquals(1, objectArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (byte) (-125);
      floatArray0[6] = 760.2F;
      floatArray0[8] = (float) (byte) (-125);
      ArrayUtils.shift(doubleArray0, (-1));
      assertArrayEquals(new double[] {(-125.0), (-125.0), (-125.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean3);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      Integer integer0 = new Integer(2214);
      assertNotNull(integer0);
      assertEquals(2214, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((char[]) null, 2214, 2214);
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(2214);
      assertNotNull(long0);
      assertEquals(2214L, (long)long0);
      
      longArray0[0] = long0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (long)longArray0[0];
      floatArray0[1] = (float) 2214;
      floatArray0[2] = (float) 2214;
      ArrayUtils.reverse(floatArray0, 1, 2);
      assertArrayEquals(new float[] {2214.0F, 2214.0F, 2214.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'a', 102);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[9];
      Integer integer0 = new Integer(1291);
      assertNotNull(integer0);
      assertEquals(1291, (int)integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2, integerArray0.length);
      assertEquals(1291, (int)integer2);
      
      Integer integer3 = ArrayUtils.get(integerArray0, (int) integerArray0[1], integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(2, integerArray0.length);
      assertEquals(1291, (int)integer3);
      
      Integer[] integerArray1 = new Integer[4];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[2] = integer3;
      integerArray1[3] = integer1;
      Integer[] integerArray2 = ArrayUtils.removeElement(integerArray1, (Object) integer0);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(3, integerArray2.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1291, 1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1291;
      ArrayUtils.shift(intArray0, 144, 51, 1672);
      assertArrayEquals(new int[] {1291}, intArray0);
      assertEquals(1, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2334), 3381).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray2, comparator0);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(3, integerArray2.length);
      assertEquals(4, integerArray1.length);
      assertTrue(boolean0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 656);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1291}, intArray0);
      assertArrayEquals(new int[] {1291}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, (long) integerArray0[1]);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) integerArray0[1];
      intArray2[1] = 1;
      intArray2[2] = 51;
      intArray2[3] = 3381;
      intArray2[4] = (int) integerArray1[3];
      intArray2[5] = (int) (byte)0;
      intArray2[6] = (int) integerArray0[0];
      intArray2[7] = (int) (byte)0;
      intArray2[8] = (int) integerArray1[3];
      int[] intArray3 = ArrayUtils.removeElements(intArray0, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {1291}, intArray0);
      assertArrayEquals(new int[] {}, intArray3);
      assertArrayEquals(new int[] {1291, 1, 51, 3381, 0, 0, 1291, 0, 0}, intArray2);
      assertNotNull(intArray3);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray3.length);
      assertEquals(9, intArray2.length);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1063.97799263121;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1063.97799263121);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(14, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(14, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 9, (short)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1559L));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1559L);
      doubleArray0[1] = (double) (-1559L);
      doubleArray0[2] = (double) (-1559L);
      doubleArray0[3] = (double) (-1559L);
      doubleArray0[4] = (double) (-1559L);
      doubleArray0[5] = (double) (-1559L);
      doubleArray0[6] = (double) (-1559L);
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '&');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'h', 'h', 'h', 'h'}, charArray1);
      assertArrayEquals(new char[] {'h', 'h', 'h', 'h'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.1);
      assertArrayEquals(new double[] {(-1559.0), (-1559.0), (-1559.0), (-1559.0), (-1559.0), (-1559.0), (-1559.0), 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null, (-1976));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = 1063.97799263121;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1063.97799263121);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(14, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)1;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (-1057L);
      longArray0[2] = (long) (byte)1;
      longArray0[3] = (long) (byte)1;
      longArray0[4] = (long) (byte)1;
      longArray0[5] = (long) (byte)1;
      longArray0[6] = (long) (byte)1;
      longArray0[7] = (long) (byte)1;
      longArray0[8] = (long) (short)1;
      int int0 = ArrayUtils.indexOf(longArray0, 2370L, 73);
      assertArrayEquals(new long[] {1L, (-1057L), 1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 73;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {73.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)1, (int) (byte)1);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {73.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte)0;
      int[] intArray0 = new int[1];
      intArray0[0] = (-3378);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {(-3378)}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-3378)}, intArray0);
      assertArrayEquals(new int[] {(-3378)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1063.97799263121;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 1063.97799263121;
      Long long0 = new Long((-2883L));
      assertNotNull(long0);
      assertEquals((-2883L), (long)long0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      ArrayUtils.swap(byteArray0, 2145821508, 32, (-3921));
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 1.0;
      objectArray0[1] = (Object) 1063.97799263121;
      objectArray0[2] = (Object) 1063.97799263121;
      objectArray0[3] = (Object) 1063.97799263121;
      objectArray0[4] = (Object) 1.0;
      objectArray0[5] = (Object) 1063.97799263121;
      objectArray0[6] = (Object) 1063.97799263121;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], (-626));
      assertEquals(7, objectArray0.length);
      assertEquals(0, int0);
      
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 1063.97799263121;
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray1[1] = double0;
      doubleArray1[2] = (Double) 1.0;
      doubleArray1[3] = (Double) 1063.97799263121;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = 1856L;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-731.675687765);
      doubleArray0[2] = (double) 1856L;
      doubleArray0[3] = (double) 1856L;
      doubleArray0[4] = (double) 1856L;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (byte) (-64);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 32, 4783);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-731.675687765), 1856.0, 1856.0, 1856.0, 0.0, (-64.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift(longArray0, (-2376), 37, 5);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1856L}, longArray0);
      assertEquals(4, longArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)17;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)17, (int) (byte)7);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-64), (byte) (-64), (byte)101, (byte)77, (byte) (-64), (byte) (-64), (byte)7, (byte)17}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-731.675687765), 1856.0, 1856.0, 1856.0, 0.0, (-64.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray0, (byte)91);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)101, (byte) (-64), (byte) (-64), (byte)101, (byte)77, (byte) (-64), (byte) (-64), (byte)7, (byte)17, (byte)91}, byteArray2);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-64), (byte) (-64), (byte)101, (byte)77, (byte) (-64), (byte) (-64), (byte)7, (byte)17}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(10, byteArray2.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1184);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1184), (int) (short) (-1184));
      assertArrayEquals(new short[] {(short) (-1184)}, shortArray0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-198);
      floatArray0[1] = (float) (-198);
      floatArray0[2] = (float) (-198);
      floatArray0[3] = (float) 1877L;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-198.0F), (-198.0F), (-198.0F), 1877.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-198.0F), (-198.0F), (-198.0F), 1877.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1184)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1184)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '%');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'c', 'c'}, charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-198);
      doubleArray0[1] = (double) (-198.0F);
      doubleArray0[2] = (double) 1877L;
      doubleArray0[3] = (double) (-198.0F);
      doubleArray0[4] = (double) 1877L;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-198.0), (-198.0), 1877.0, (-198.0), 1877.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = ArrayUtils.insert(16, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-25.9200778775);
      ArrayUtils.swap(doubleArray0, (-2422), (-2422), (-2422));
      assertArrayEquals(new double[] {(-25.9200778775)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-73);
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = '&';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'R', '&'}, charArray0);
      assertArrayEquals(new char[] {'R', '&'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'R';
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) 'R';
      floatArray0[5] = (float) '&';
      floatArray0[6] = (float) 'R';
      floatArray0[7] = (float) (byte)0;
      ArrayUtils.shift(floatArray0, 365, (int) (byte)0, (-575));
      assertArrayEquals(new float[] {82.0F, 0.0F, 0.0F, 0.0F, 82.0F, 38.0F, 82.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer((byte) (-73));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-73), (int)integer1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)108;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)108, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)108, (short)108, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertNotNull(booleanArray3);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray3.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      
      Object[] objectArray0 = new Object[9];
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(Integer.MAX_VALUE, object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "3ny";
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) (short)108;
      objectArray0[4] = (Object) (short)108;
      objectArray0[5] = (Object) (short)108;
      objectArray0[6] = (Object) "3ny";
      objectArray0[7] = (Object) true;
      objectArray0[8] = (Object) true;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "3ny");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, objectArray0.length);
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      ArrayUtils.swap(objectArray1, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'h');
      assertNull(charArray0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, 3108.0F, (-3800));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      Integer integer0 = new Integer((-576));
      assertNotNull(integer0);
      assertEquals((-576), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) Integer.MAX_VALUE);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, 'v');
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (float) Integer.MAX_VALUE, 1966);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int2);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-77));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1966;
      doubleArray0[1] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1966, (-2528.53036605));
      assertArrayEquals(new double[] {1966.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[15];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) false;
      ArrayUtils.swap(objectArray0, (-2376), 1861, (-2376));
      assertEquals(1, objectArray0.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'h');
      assertNull(charArray0);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (-2376));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[9];
      Integer integer0 = new Integer(1291);
      assertNotNull(integer0);
      assertEquals(1291, (int)integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(6, integerArray0.length);
      assertEquals(1291, (int)integer2);
      
      Integer integer3 = ArrayUtils.get(integerArray0, (int) integerArray0[1], integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(6, integerArray0.length);
      assertEquals(1291, (int)integer3);
      
      Integer[] integerArray1 = new Integer[4];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[2] = integer3;
      integerArray1[3] = integer1;
      Integer[] integerArray2 = ArrayUtils.removeElement(integerArray1, (Object) integer0);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(3, integerArray2.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1291, 1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1291;
      ArrayUtils.shift(intArray0, 144, 51, 1672);
      assertArrayEquals(new int[] {1291}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) 41;
      longArray0[3] = (-1L);
      longArray0[4] = (long) (byte)0;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 'Y');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 533);
      assertArrayEquals(new int[] {533}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Boolean[] booleanArray2 = new Boolean[7];
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray2[0] = boolean0;
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray2[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("bGsRd&2rD");
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray2[2] = boolean2;
      Boolean boolean3 = new Boolean("bGsRd&2rD");
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray2[3] = boolean3;
      Boolean boolean4 = new Boolean("bGsRd&2rD");
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray2[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf(true);
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray2[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray2[6] = boolean6;
      Boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertNotNull(booleanArray3);
      assertEquals(7, booleanArray3.length);
      assertEquals(7, booleanArray2.length);
      assertSame(booleanArray3, booleanArray2);
      assertSame(booleanArray2, booleanArray3);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 0L, 0L}, longArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'n';
      intArray0[2] = (int) 'n';
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = (int) '3';
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0L;
      Object object0 = ArrayUtils.get(objectArray0, 110);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      Long long0 = new Long((-271L));
      assertNotNull(long0);
      assertEquals((-271L), (long)long0);
      
      Long long1 = new Long((-61L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-61L), (long)long1);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) 0L;
      longArray1[1] = long1;
      longArray1[3] = (Long) (-103L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 110);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-61L), 110L, (-103L)}, longArray2);
      assertNotNull(longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray2, longArray0);
      
      long[] longArray3 = ArrayUtils.insert(2, longArray2, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-61L), 110L, (-103L)}, longArray2);
      assertArrayEquals(new long[] {0L, (-61L), 0L, (-61L), 110L, (-103L), 110L, (-103L)}, longArray3);
      assertNotNull(longArray3);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertEquals(8, longArray3.length);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 3366, 2422);
      assertNull(byteArray0);
      
      ArrayUtils.shift((Object[]) longArray1, 1, 0, 3366);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 867L;
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 867L;
      longArray1[1] = 867L;
      longArray1[2] = 867L;
      longArray1[3] = 867L;
      longArray1[4] = 0L;
      longArray1[5] = 867L;
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {867L}, longArray0);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(10, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      byte[] byteArray0 = new byte[8];
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)120;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.indexOf(longArray2, 2450L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {867L}, longArray0);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(10, longArray2.length);
      assertEquals((-1), int0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      ArrayUtils.reverse(longArray0, (int) (short)120, 7);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertArrayEquals(new long[] {867L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)123);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)123;
      intArray0[1] = (int) (byte)123;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 123, 123);
      assertArrayEquals(new int[] {123, 123}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)123);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)123, 123);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '%';
      charArray0[2] = ')';
      charArray0[3] = 'l';
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte) (-57);
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte)123;
      byteArray1[5] = (byte)110;
      byteArray1[6] = (byte) (-44);
      boolean boolean1 = ArrayUtils.isSorted(byteArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)123, (byte) (-57), (byte)123, (byte)123, (byte)123, (byte)110, (byte) (-44)}, byteArray1);
      assertEquals(7, byteArray1.length);
      assertFalse(boolean1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean2);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      longArray0[4] = 1609L;
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 36);
      assertArrayEquals(new long[] {(-1L), (-1L), 2450L, 0L, 1609L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      ArrayUtils.swap(floatArray1, 36, 36);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.reverse((int[]) null, (-2110), (-2143214295));
      Integer integer0 = Integer.valueOf(1245);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1245, (int)integer0);
      
      Integer integer1 = Integer.getInteger(">Y,Dl])-'7V)", integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(1245, (int)integer1);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)82);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-114));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 4);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)126, (int) (byte)3);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(707);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(707, (int)integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-1384), (int) 3);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) (byte)0;
      floatArray0[7] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer integer0 = Integer.getInteger("", 0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer((-15));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-15), (int)integer2);
      
      Integer integer3 = new Integer(4924);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(4924, (int)integer3);
      
      Integer integer4 = new Integer(0);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      Integer integer5 = new Integer(1);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(1, (int)integer5);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer2);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer2.equals((Object)integer5));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer4));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      Short short0 = new Short((short)872);
      assertNotNull(short0);
      assertEquals((short)872, (short)short0);
      
      Short short1 = new Short((short) (-1184));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1184), (short)short1);
      
      Short[] shortArray0 = new Short[7];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      short short2 = (short)8;
      Short short3 = new Short((short)8);
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short)8, (short)short3);
      
      shortArray0[2] = short3;
      shortArray0[3] = short1;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      Short short4 = new Short(short2);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals((short)8, (short)short4);
      
      shortArray0[6] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)872, (short)872, (short)8, (short) (-1184), (short)872, (short)872, (short)8}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short) shortArray0[3]);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)872, (short)872, (short)8, (short) (-1184), (short)872, (short)872, (short)8}, shortArray1);
      assertArrayEquals(new short[] {(short)872, (short)872, (short)8, (short)872, (short)872, (short)8}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)shortArray0[5];
      floatArray0[1] = (float) (short)shortArray0[1];
      floatArray0[2] = (float) short2;
      floatArray0[3] = (float) (short) (-443);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {872.0F, 872.0F, 8.0F, (-443.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {872.0F, 872.0F, 8.0F, (-443.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      
      ArrayUtils.reverse(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)8, (short)872, (short)872, (short) (-1184), (short)8, (short)872, (short)872}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotSame(shortArray1, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'?'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '?';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) '?';
      objectArray0[3] = (Object) '?';
      ArrayUtils.shift(objectArray0, (-2953), (-1784), (-1));
      assertEquals(4, objectArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2953);
      floatArray0[1] = (float) (-1784);
      floatArray0[2] = (float) (-2953);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) '?';
      ArrayUtils.swap(floatArray0, (-1784), (-2953), (-1));
      assertArrayEquals(new float[] {(-2953.0F), (-1784.0F), (-2953.0F), (-1.0F), 63.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '?', (-1));
      assertArrayEquals(new char[] {'?'}, charArray0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)48;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-36));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)49, (byte)100, (byte)27, (byte)2, (byte) (-62), (byte) (-41), (byte)126, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-36), (byte)49, (byte)100, (byte)27, (byte)2, (byte) (-62), (byte) (-41), (byte)126, (byte)48}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)32, (byte) (-93), (byte) (-27), (byte)33, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = '.';
      charArray0[2] = 'z';
      charArray0[3] = 'e';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'H', '.', 'z', 'e'}, charArray0);
      assertArrayEquals(new char[] {'H', '.', 'z', 'e'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)53;
      floatArray0[1] = (float) 'H';
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)48);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)32, (byte) (-93), (byte) (-27), (byte)33, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)32, (byte) (-93), (byte) (-27), (byte)33, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'H';
      objectArray0[1] = (Object) (byte) (-27);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], (int) (byte) (-27));
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(2, objectArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray2);
      assertNotNull(charArray2);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = 0L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(221);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(221, (int)integer0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[0] = (Object) integer0;
      objectArray0[0] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Long long1 = new Long(208L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(208L, (long)long1);
      
      Long long2 = new Long((-4262L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-4262L), (long)long2);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = long2;
      longArray1[1] = long1;
      longArray1[2] = long2;
      longArray1[3] = long1;
      Long long3 = new Long(0);
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      longArray1[4] = long3;
      longArray1[5] = long1;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-4262L), 208L, (-4262L), 208L, 0L, 208L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(6, longArray2.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray2, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray3 = ArrayUtils.insert(0, longArray2, longArray0);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {(-4262L), 208L, (-4262L), 208L, 0L, 208L}, longArray2);
      assertArrayEquals(new long[] {0L, (-4262L), 208L, (-4262L), 208L, 0L, 208L}, longArray3);
      assertNotNull(longArray3);
      assertEquals(1, longArray0.length);
      assertEquals(6, longArray2.length);
      assertEquals(7, longArray3.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray1, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertTrue(boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 221;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) long0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (long)longArray1[1];
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {221.0F, 0.0F, 0.0F, 0.0F, 0.0F, 208.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) 's';
      doubleArray0[2] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 115.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {115.0, 1063.97799263121}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 3, (-4220), (-3842));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.reverse((byte[]) null, 994, (int) (byte)1);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-4220);
      floatArray0[1] = (float) 's';
      floatArray0[2] = (float) (byte)1;
      floatArray0[3] = (float) 3;
      floatArray0[4] = 118.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-4220.0F), 115.0F, 1.0F, 3.0F, 118.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-4220.0F), 115.0F, 1.0F, 3.0F, 118.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Long[] longArray0 = new Long[8];
      Long long0 = new Long((byte)1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(3575L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(3575L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(0L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[0]);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(8, longArray0.length);
      assertEquals(1L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-2615L));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      assertEquals((-2615L), (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((long) longArray0[4]);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertNotNull(long5);
      assertEquals(8, longArray0.length);
      assertEquals((-2615L), (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long(0L);
      assertTrue(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long3));
      assertNotNull(long6);
      assertEquals(0L, (long)long6);
      
      longArray0[6] = long6;
      Long long7 = Long.getLong("Array element ", (long) longArray0[1]);
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long0));
      assertTrue(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long5));
      assertNotNull(long7);
      assertEquals(8, longArray0.length);
      assertEquals(3575L, (long)long7);
      
      longArray0[7] = long7;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {1L, 3575L, 0L, 1L, (-2615L), (-2615L), 0L, 3575L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)39, (-1324));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[1] = (-1450L);
      longArray0[3] = 1L;
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) 1L);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)1331);
      assertNotNull(short0);
      assertEquals((short)1331, (short)short0);
      
      ArrayUtils.shift((byte[]) null, 251, (int) (short)1331, (-3450));
      org.evosuite.runtime.Random.setNextRandom(1);
      ArrayUtils.swap(floatArray1, 1, (-529), 1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (float) 251);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {251.0F}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-933);
      shortArray0[2] = (short)16;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-933), (short)0, (short)16, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(16, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray0));
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.swap(shortArray0, 9, (-1169), 1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 434.16);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 434.16}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 9;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-1169);
      floatArray0[3] = (float) (short) (-1491);
      floatArray0[4] = (float) (-4515);
      floatArray0[5] = (float) 9;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {9.0F, 1.0F, (-1169.0F), (-1491.0F), (-4515.0F), 9.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {9.0F, 1.0F, (-1169.0F), (-1491.0F), (-4515.0F), 9.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(221);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(221, (int)integer0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[0] = (Object) integer0;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = ArrayUtils.insert(1, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      boolean boolean4 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean4);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 8);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      Integer integer0 = new Integer(860);
      assertNotNull(integer0);
      assertEquals(860, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      int[] intArray0 = new int[8];
      intArray0[0] = 3173;
      intArray0[1] = 1;
      int int0 = (-215);
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'q', (-91));
      assertArrayEquals(new char[] {'q', 'q'}, charArray0);
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(2, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      Object[] objectArray0 = new Object[9];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)1;
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      assertArrayEquals(new byte[] {(byte)126, (byte)2, (byte)1}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 3, 4, 5, 6, 9, 16}", bitSet0.toString());
      assertEquals(17, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(3, byteArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new byte[] {(byte)126, (byte)2, (byte)1}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 3, 4, 5, 6, 9, 16}", bitSet0.toString());
      assertEquals(17, bitSet0.length());
      assertNull(object0);
      assertEquals(3, byteArray0.length);
      
      Object object1 = ArrayUtils.get(objectArray0, 1114111, (Object) null);
      assertNull(object1);
      assertEquals(9, objectArray0.length);
      
      objectArray0[0] = null;
      Object object2 = ArrayUtils.get(objectArray0, 2743, (Object) null);
      assertNull(object2);
      assertEquals(9, objectArray0.length);
      
      objectArray0[1] = null;
      Integer integer0 = Integer.getInteger("st)-7&\"m:R&");
      assertNull(integer0);
      
      Object object3 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new byte[] {(byte)126, (byte)2, (byte)1}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 3, 4, 5, 6, 9, 16}", bitSet0.toString());
      assertEquals(17, bitSet0.length());
      assertNull(object3);
      assertEquals(3, byteArray0.length);
      
      objectArray0[2] = null;
      Object object4 = null;
      Object object5 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new byte[] {(byte)126, (byte)2, (byte)1}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 3, 4, 5, 6, 9, 16}", bitSet0.toString());
      assertEquals(17, bitSet0.length());
      assertNull(object5);
      assertEquals(3, byteArray0.length);
      
      objectArray0[3] = null;
      Object object6 = ArrayUtils.get(objectArray0, 69);
      assertNull(object6);
      assertEquals(9, objectArray0.length);
      
      objectArray0[4] = null;
      Object object7 = new Object();
      assertNotNull(object7);
      
      objectArray0[5] = object7;
      Object object8 = ArrayUtils.get(objectArray0, 0);
      assertNull(object8);
      assertEquals(9, objectArray0.length);
      
      objectArray0[6] = null;
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object7));
      assertNotNull(object9);
      
      Object object10 = ArrayUtils.toPrimitive(object9);
      assertFalse(object9.equals((Object)object7));
      assertFalse(object10.equals((Object)object7));
      assertNotNull(object10);
      assertNotSame(object9, object7);
      assertSame(object9, object10);
      assertNotSame(object10, object7);
      assertSame(object10, object9);
      
      Object object11 = ArrayUtils.toPrimitive(object10);
      assertFalse(object9.equals((Object)object7));
      assertFalse(object10.equals((Object)object7));
      assertFalse(object11.equals((Object)object7));
      assertNotNull(object11);
      assertSame(object9, object11);
      assertNotSame(object9, object7);
      assertSame(object9, object10);
      assertSame(object10, object11);
      assertNotSame(object10, object7);
      assertSame(object10, object9);
      assertSame(object11, object9);
      assertNotSame(object11, object7);
      assertSame(object11, object10);
      
      objectArray0[7] = object11;
      Integer integer1 = Integer.getInteger("st)-7&\"m:R&", 65536);
      assertNotNull(integer1);
      assertEquals(65536, (int)integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 127;
      intArray0[2] = 1225;
      intArray0[3] = 5;
      intArray0[4] = (-3111);
      int int0 = ArrayUtils.indexOf(intArray0, 98);
      assertArrayEquals(new int[] {0, 127, 1225, 5, (-3111)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[6];
      Byte byte0 = new Byte((byte)111);
      assertNotNull(byte0);
      assertEquals((byte)111, (byte)byte0);
      
      Byte byte1 = new Byte((byte)111);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)111, (byte)byte1);
      
      Byte byte2 = new Byte((byte)2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)2, (byte)byte2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), (-552));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 127, (-1073741823));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 127, 1225, 5, (-3111)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(1, int1);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 0, (-1), 1.0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(6, bitSet1.cardinality());
      assertEquals(6, bitSet1.length());
      assertNotNull(bitSet1);
      assertEquals(6, doubleArray0.length);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3625);
      floatArray0[1] = (float) 127;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-3625);
      floatArray0[4] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (int) (byte)0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-3625.0F), 127.0F, 0.0F, (-3625.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-3625.0F), 127.0F, 0.0F, (-3625.0F), 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)79);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)79}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray2 = ArrayUtils.insert((int) (byte)0, floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-3625.0F), 127.0F, 0.0F, (-3625.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-3625.0F), 127.0F, 0.0F, (-3625.0F), 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertEquals(11, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)79;
      shortArray0[1] = (short) (byte)79;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)725);
      assertArrayEquals(new short[] {(short)79, (short)79, (short)0, (short)0}, shortArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (-954L), 68);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 68;
      floatArray0[1] = (float) (-954L);
      floatArray0[2] = (float) 2450L;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {68.0F, (-954.0F), 2450.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      short short1 = (short)1021;
      Short short2 = new Short((short)56);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)56, (short)short2);
      
      Short short3 = new Short((short)4);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short)4, (short)short3);
      
      Short short4 = new Short((short) (-33));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      assertEquals((short) (-33), (short)short4);
      
      Short short5 = new Short((short) (-2775));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertNotNull(short5);
      assertEquals((short) (-2775), (short)short5);
      
      Short[] shortArray0 = new Short[1];
      Short short6 = new Short((short) (-33));
      assertTrue(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertNotNull(short6);
      assertEquals((short) (-33), (short)short6);
      
      shortArray0[0] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-697));
      assertArrayEquals(new short[] {(short) (-33)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)1021, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1021, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 60;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(60, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 60, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      longArray0[4] = 1609L;
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 36);
      assertArrayEquals(new long[] {(-1L), (-1L), 2450L, 0L, 1609L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      ArrayUtils.swap(floatArray1, 36, 36);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.reverse((int[]) null, (-2110), (-2143214295));
      Integer integer0 = Integer.valueOf(1245);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1245, (int)integer0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)1136;
      floatArray0[1] = (float) (short)1136;
      floatArray0[2] = (float) (short)1136;
      floatArray0[3] = (float) (short)1136;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {1136.0F, 1136.0F, 1136.0F, 1136.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      Integer integer0 = Integer.valueOf((int) (short)1136);
      assertNotNull(integer0);
      assertEquals(1136, (int)integer0);
      
      Integer integer1 = new Integer(574);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(574, (int)integer1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      Integer integer2 = new Integer(120);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(120, (int)integer2);
      
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer integer3 = ArrayUtils.get(integerArray0, 2002);
      assertNull(integer3);
      assertEquals(4, integerArray0.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'C');
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-412), (-412), (-412));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)0, (int) (short)0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-4072.80967219492), (-322), (double) (-322));
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) (-1.0);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (-1.0);
      objectArray0[4] = (Object) (-1.0);
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray1, integerArray0);
      
      Character[] characterArray1 = new Character[0];
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray1, '0');
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, characterArray1.length);
      assertEquals(0, charArray1.length);
      assertNotSame(characterArray1, characterArray0);
      assertSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-2351));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll((int[]) null, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift((double[]) null, 1931);
      boolean boolean0 = ArrayUtils.isSorted(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertTrue(boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) 41;
      longArray0[3] = (-1L);
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) (byte)0;
      int int1 = ArrayUtils.indexOf(longArray0, (long) (byte)0, (-1));
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {(-1L), 0L, 41L, (-1L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(1, int1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 0L;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (float) 41L, (int) (byte)0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(221);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(221, (int)integer1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1114);
      doubleArray0[4] = (-4072.80967219492);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0, (-4944.0));
      assertArrayEquals(new double[] {(-1114.0), 0.0, 0.0, 0.0, (-4072.80967219492)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      
      Integer integer2 = new Integer((-1114));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-1114), (int)integer2);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer2, (-3844));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals(7, objectArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertSame(booleanArray2, booleanArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(boolean0);
      assertSame(booleanArray1, booleanArray2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1808.4016194156;
      doubleArray0[1] = 12.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 12.0, (-3861), (-2088.824894));
      assertArrayEquals(new double[] {1808.4016194156, 12.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      Integer integer0 = new Integer(115);
      assertNotNull(integer0);
      assertEquals(115, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 115, 115, 1.5);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((byte[]) null);
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[1] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (-1);
      int[] intArray1 = ArrayUtils.insert((int) (byte)0, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), (-1), 0, 0, (-1), 0, (-1)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1826L);
      longArray0[2] = 1725L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, (-1826L), 1725L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0L;
      ArrayUtils.swap(objectArray0, (-524), (-524), 0);
      assertEquals(1, objectArray0.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'h');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)6;
      doubleArray0[1] = (double) 'Q';
      doubleArray0[2] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)6);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.0, 81.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {81.0, 1063.97799263121}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      doubleArray0[0] = (double) (byte)6;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)6, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, (double) (byte)6);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {6.0, 81.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {81.0, 1063.97799263121}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {81.0, 1063.97799263121}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      ArrayUtils.shift(doubleArray1, 2777, (-201), 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.0, 81.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {81.0, 1063.97799263121}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = new BitSet((byte)6);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'Q';
      longArray0[1] = (long) (-201);
      longArray0[2] = (long) (byte)0;
      ArrayUtils.shift(longArray0, (int) (byte)6);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 81L, (-201L), 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      boolean[] booleanArray2 = new boolean[1];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray3));
      assertNotNull(booleanArray3);
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray3.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray3, booleanArray1);
      assertSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1877L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      BitSet bitSet0 = new BitSet();
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, 11);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotNull(bitSet1);
      assertEquals(0, booleanArray0.length);
      assertNotSame(bitSet1, bitSet0);
      
      Integer integer0 = Integer.valueOf(2777);
      assertNotNull(integer0);
      assertEquals(2777, (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, (String) null);
      assertNotNull(string0);
      assertEquals("2777", string0);
      
      Integer integer1 = new Integer((-673));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-673), (int)integer1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = 'D';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'5', 'D'}, charArray0);
      assertArrayEquals(new char[] {'5', 'D'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)2;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-94), (byte)52, (byte)98, (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) (byte)16;
      objectArray0[2] = (Object) (byte) (-94);
      objectArray0[3] = (Object) (byte)16;
      objectArray0[4] = (Object) bitSet1;
      objectArray0[5] = (Object) null;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertNotNull(object0);
      assertEquals(6, objectArray0.length);
      assertEquals(0L, object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 4535);
      assertEquals(6, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      byte byte0 = (byte)117;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.swap(byteArray0, (-2238), (int) (byte)47, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Integer integer0 = new Integer((byte)12);
      assertNotNull(integer0);
      assertEquals(12, (int)integer0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      Integer integer1 = new Integer((-6810));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-6810), (int)integer1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (-2238);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)117);
      assertArrayEquals(new long[] {0L, (-2238L)}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 127, 37, (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)113;
      ArrayUtils.shift(booleanArray0, 1, 2, 347);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2716.0F);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 347;
      ArrayUtils.swap(floatArray0, (int) (short)0, 1);
      assertArrayEquals(new float[] {(-1.0F), (-2716.0F), 347.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-37);
      ArrayUtils.swap(byteArray0, 1587, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)2, (byte)111, (byte) (-15), (byte) (-7), (byte)0, (byte) (-37)}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)58;
      ArrayUtils.swap(byteArray0, (int) (byte)121, (int) (byte) (-1), (int) (byte)121);
      assertArrayEquals(new byte[] {(byte)0, (byte)121, (byte) (-124), (byte) (-1), (byte)58}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      Integer integer0 = new Integer((-576));
      assertNotNull(integer0);
      assertEquals((-576), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-77));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray1, (byte) (-86));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap(byteArray2, (-961), Integer.MAX_VALUE);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, integer0);
      assertFalse(boolean0);
      
      ArrayUtils.shift(byteArray0, (-6282), (-6282), (-545));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      ArrayUtils.swap((char[]) null, 1, (-1));
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-761));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -761, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)68);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 100.0, 100.0);
      assertFalse(boolean0);
      
      ArrayUtils.shift((byte[]) null, 1721, 1721, 1721);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (int) 'Q';
      ArrayUtils.shift(intArray0, 81);
      assertArrayEquals(new int[] {81, 1}, intArray0);
      assertEquals(2, intArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      ArrayUtils.swap(intArray0, (-1), 1);
      assertArrayEquals(new int[] {1, 81}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(boolean0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) (byte)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-2408.1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2408.1F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (short)1136;
      int int0 = ArrayUtils.indexOf(longArray0, (-103L), (-1976));
      assertArrayEquals(new long[] {0L, 1136L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-2102);
      doubleArray0[2] = (double) 1136L;
      doubleArray0[3] = (double) (short)1136;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 36;
      ArrayUtils.shift(doubleArray0, 32, 0, 2);
      assertArrayEquals(new double[] {0.0, (-2102.0), 1136.0, 1136.0, 0.0, 36.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 56.22F, 1771);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'q';
      charArray0[2] = 'U';
      charArray0[3] = 'L';
      charArray0[4] = '*';
      charArray0[5] = '<';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'U', 'q', 'U', 'L', '*', '<'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Float float0 = new Float((double) (short)32);
      assertNotNull(float0);
      assertEquals(32.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-198));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-198.0F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float1;
      floatArray0[4] = float1;
      floatArray0[5] = float0;
      floatArray0[6] = float1;
      floatArray0[7] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1583.89F);
      assertArrayEquals(new float[] {(-198.0F), 32.0F, 32.0F, (-198.0F), (-198.0F), 32.0F, (-198.0F), (-198.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (-402.0);
      doubleArray0[2] = (double) 1583.89F;
      doubleArray0[3] = (double) (float)floatArray0[1];
      doubleArray0[4] = (double) (float)floatArray0[2];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {1.0, (-402.0), 1583.8900146484375, 32.0, 32.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-2162);
      shortArray0[3] = (short) (-2162);
      shortArray0[4] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1137, 1868);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-2162), (short) (-2162), (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-2695L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockRandom1;
      objectArray0[1] = (Object) '3';
      Object object0 = ArrayUtils.get(objectArray0, 1390);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
      
      char[] charArray0 = new char[9];
      objectArray0[1] = (Object) 'P';
      charArray0[1] = '3';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = 'P';
      charArray0[6] = 'P';
      charArray0[7] = 'P';
      long long0 = mockRandom1.nextLong();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0L, long0);
      assertNotSame(mockRandom1, mockRandom0);
      
      charArray0[8] = '1';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'1', 'P', 'P', 'P', '7', '7', '7', '3', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Object[] objectArray1 = new Object[1];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 0;
      ArrayUtils.shift(objectArray1, 0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'1', 'P', 'P', 'P', '7', '7', '7', '3', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.swap(objectArray0, 1390, 13, 247);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(2, objectArray0.length);
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      Double double0 = new Double(1411.36);
      assertNotNull(double0);
      assertEquals(1411.36, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) 0);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      ArrayUtils.shift((int[]) null, (-1576), 1, 11);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3108;
      floatArray0[1] = (float) 3108;
      floatArray0[2] = (float) (-3842);
      floatArray0[3] = (float) (-1576);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2809.1328F));
      assertArrayEquals(new float[] {3108.0F, 3108.0F, (-3842.0F), (-1576.0F)}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 1649.5340108632543);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, 'i');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1863.977888197674));
      assertNotNull(double0);
      assertEquals((-1863.977888197674), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1863.977888197674), (double)double1, 0.01);
      
      int int0 = 221;
      Integer integer0 = new Integer(221);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(221, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = Integer.getInteger(", Length: ", 0);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences((int[]) null, (-1114));
      assertNull(intArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '+';
      charArray0[2] = '=';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      boolean[] booleanArray2 = ArrayUtils.insert((-1), booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1352.7297;
      doubleArray0[1] = 4163.0;
      doubleArray0[2] = (double) (-1);
      ArrayUtils.shift(doubleArray0, (-1));
      assertArrayEquals(new double[] {4163.0, (-1.0), 1352.7297}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean[] booleanArray3 = ArrayUtils.addAll(booleanArray0, booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray3));
      assertNotNull(booleanArray3);
      assertEquals(0, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertEquals(4, booleanArray3.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1352.7297, (-1));
      assertArrayEquals(new double[] {4163.0, (-1.0), 1352.7297}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      ArrayUtils.swap(charArray0, (-1), Integer.MAX_VALUE, (-1));
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'c';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 948;
      doubleArray0[1] = (double) 'c';
      doubleArray0[2] = (double) 'c';
      doubleArray0[3] = 652.3938548800651;
      doubleArray0[4] = (-818.2439356821794);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3.0, 948);
      assertArrayEquals(new double[] {948.0, 99.0, 99.0, 652.3938548800651, (-818.2439356821794)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 948;
      intArray0[2] = 948;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = (-1);
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), 948, 948, Integer.MAX_VALUE, (-1), Integer.MAX_VALUE, (-1), (-1), Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {(-1), 948, 948, Integer.MAX_VALUE, (-1), Integer.MAX_VALUE, (-1), (-1), Integer.MAX_VALUE}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)123);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)123;
      intArray0[1] = (int) (byte)123;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 123, 123);
      assertArrayEquals(new int[] {123, 123}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)123);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      
      Float float0 = new Float((-31.0F));
      assertNotNull(float0);
      assertEquals((-31.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((-1834.258));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1834.258F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      floatArray0[3] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-31.0F), (-1834.258F), (-1834.258F), (-1834.258F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      
      Short short0 = new Short((byte)123);
      assertNotNull(short0);
      assertEquals((short)123, (short)short0);
      
      Short[] shortArray0 = new Short[9];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      short[] shortArray1 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray1);
      
      boolean boolean3 = ArrayUtils.contains((double[]) null, (double) floatArray0[3]);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean3);
      
      ArrayUtils.reverse(floatArray1, 1, 321);
      assertArrayEquals(new float[] {(-31.0F), (-1834.258F), (-1834.258F), (-1834.258F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, 3.0);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = '=';
      charArray0[2] = '-';
      charArray0[3] = 'd';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'Q');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'~', '=', '-', 'd'}, charArray1);
      assertArrayEquals(new char[] {'~', '=', '-', 'd'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) 'b';
      intArray0[3] = (int) '7';
      intArray0[4] = 2;
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '7');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'7', '/', '/'}, charArray1);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(3, charArray1.length);
      assertEquals(2, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, 2);
      assertNull(integer0);
      assertEquals(0, integerArray0.length);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      DoubleStream doubleStream0 = mockRandom2.doubles(4182L);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(doubleStream0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      
      ArrayUtils.shuffle((Object[]) integerArray0, (Random) mockRandom2);
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertEquals(0, integerArray0.length);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L, (-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1129.27;
      Integer integer0 = new Integer(694);
      assertNotNull(integer0);
      assertEquals(694, (int)integer0);
      
      int int0 = 2;
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Integer integer2 = ArrayUtils.get((Integer[]) null, 2, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integerArray0[4]);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (int)integerArray0[4];
      longArray0[1] = (long) 694;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-669), int0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {694L, 694L}, longArray1);
      assertArrayEquals(new long[] {694L, 694L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.shift((int[]) null, 3108, (-1200), 2);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(longArray1, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {694L, 694L}, longArray1);
      assertArrayEquals(new long[] {694L, 694L}, longArray0);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int1 = ArrayUtils.lastIndexOf(longArray1, (long) int0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {694L, 694L}, longArray1);
      assertArrayEquals(new long[] {694L, 694L}, longArray0);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 0, 1194, (-551));
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.swap((short[]) null, 987, 987, 987);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      ArrayUtils.swap((short[]) null, 120, 120, (-4515));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 120;
      doubleArray0[1] = (double) (-4515);
      doubleArray0[2] = (double) 120;
      doubleArray0[3] = (double) (-4515);
      doubleArray0[4] = (double) 120;
      doubleArray0[5] = (double) 120;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 234.105971553029);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {120.0, (-4515.0), 120.0, (-4515.0), 120.0, 120.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {120.0, (-4515.0), 120.0, (-4515.0), 120.0, 120.0, 234.105971553029}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 120;
      floatArray0[1] = (float) (-4515);
      floatArray0[2] = (float) (-4515);
      floatArray0[3] = (float) (-4515);
      floatArray0[4] = (float) 120;
      floatArray0[5] = (float) (-4515);
      floatArray0[6] = (float) (-4515);
      floatArray0[7] = (float) 120;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {120.0F, (-4515.0F), (-4515.0F), (-4515.0F), 120.0F, (-4515.0F), (-4515.0F), 120.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {120.0F, (-4515.0F), (-4515.0F), (-4515.0F), 120.0F, (-4515.0F), (-4515.0F), 120.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-412), (-412), (-412));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean boolean5 = new Boolean(false);
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      Boolean boolean6 = Boolean.valueOf(false);
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean4));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      Boolean boolean7 = Boolean.valueOf(false);
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean4));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      Boolean[] booleanArray1 = new Boolean[8];
      booleanArray1[0] = boolean7;
      booleanArray1[1] = boolean5;
      booleanArray1[2] = boolean1;
      booleanArray1[3] = boolean0;
      Boolean boolean8 = new Boolean("\"7],^8]$H{MAz\"1o");
      assertTrue(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean4));
      assertNotNull(boolean8);
      assertFalse(boolean8);
      
      booleanArray1[4] = boolean8;
      booleanArray1[5] = boolean1;
      booleanArray1[6] = boolean3;
      booleanArray1[7] = boolean6;
      int[] intArray1 = ArrayUtils.insert((-3111), intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'/'}, charArray0);
      assertArrayEquals(new char[] {'/'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3652), charArray1, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3652, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[1] = (-1450L);
      Float float0 = new Float((-402.0));
      assertNotNull(float0);
      assertEquals((-402.0F), (float)float0, 0.01F);
      
      char char0 = '1';
      int int0 = (-5);
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-5), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[2] = (-1450L);
      longArray0[3] = 1L;
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertArrayEquals(new long[] {53L, 348L, (-1450L), 1L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5043;
      Short short0 = new Short((short)116);
      assertNotNull(short0);
      assertEquals((short)116, (short)short0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeElement((short[]) null, (short)2);
      assertNull(shortArray2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1L;
      Integer integer0 = new Integer((short)5043);
      assertNotNull(integer0);
      assertEquals(5043, (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Integer integer2 = new Integer((-123));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-123), (int)integer2);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[1] = 53L;
      longArray1[2] = (long) Integer.MAX_VALUE;
      longArray1[3] = 1L;
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 53L, 2147483647L, 1L}, longArray1);
      assertNotNull(longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1129.27;
      int[] intArray0 = null;
      Integer integer0 = new Integer(11);
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      
      int int0 = (-1);
      Integer integer1 = new Integer((-1412));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1412), (int)integer1);
      
      Integer integer2 = Integer.getInteger(":^", integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1412), (int)integer2);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer3 = new Integer((-1368));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-1368), (int)integer3);
      
      Integer integer4 = ArrayUtils.get(integerArray0, (-1), integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(0, integerArray0.length);
      assertEquals((-1368), (int)integer4);
      
      Integer[] integerArray1 = ArrayUtils.removeElement((Integer[]) null, (Object) integer4);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertNull(integerArray1);
      assertEquals(0, integerArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2029);
      longArray0[1] = (long) (-1412);
      longArray0[2] = (long) (-1074);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1236, 11);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-2029L), (-1412L), (-1074L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.swap((int[]) null, (-1074), 1236);
      Integer integer5 = ArrayUtils.get((Integer[]) null, (-1074));
      assertNull(integer5);
      
      try { 
        Integer.decode("Minimum abbreviation width is %d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Minimum abbreviation width is %d\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1877L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, 70);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) mockRandom0;
      objectArray0[5] = (Object) mockRandom0;
      objectArray0[6] = (Object) mockRandom0;
      ArrayUtils.shift(objectArray0, 985);
      assertEquals(7, objectArray0.length);
      
      MockRandom mockRandom1 = new MockRandom(985);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom(0L);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(mockRandom1.equals((Object)mockRandom2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(mockRandom1, mockRandom2);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(7, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 70;
      intArray0[1] = 985;
      intArray0[2] = 70;
      intArray0[3] = 985;
      intArray0[4] = 70;
      intArray0[5] = 985;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 985, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      longArray0[4] = 1609L;
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 36);
      assertArrayEquals(new long[] {(-1L), (-1L), 2450L, 0L, 1609L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Short short1 = new Short((short)1021);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)1021, (short)short1);
      
      Short short2 = new Short((short)0);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      
      Short short3 = new Short((short) (-2775));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short) (-2775), (short)short3);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[0] = short1;
      shortArray0[1] = short3;
      Short short4 = new Short((short) shortArray0[0]);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short1));
      assertNotNull(short4);
      assertEquals(4, shortArray0.length);
      assertEquals((short)1021, (short)short4);
      
      shortArray0[2] = short4;
      shortArray0[3] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-3624));
      assertArrayEquals(new short[] {(short)1021, (short) (-2775), (short)1021, (short)1021}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray2 = ArrayUtils.insert((int) (short) (-2775), floatArray0, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(3, floatArray2.length);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      
      Float[] floatArray3 = new Float[4];
      floatArray3[0] = (Float) (-1.0F);
      floatArray3[1] = (Float) (-1.0F);
      floatArray3[2] = (Float) 0.0F;
      floatArray3[3] = (Float) 0.0F;
      float[] floatArray4 = ArrayUtils.toPrimitive(floatArray3);
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 0.0F}, floatArray4, 0.01F);
      assertNotNull(floatArray4);
      assertEquals(4, floatArray3.length);
      assertEquals(4, floatArray4.length);
      assertNotSame(floatArray4, floatArray2);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-3624);
      intArray0[1] = (-1);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-3624), (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-80);
      int int1 = ArrayUtils.indexOf(floatArray0, (float) int0);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-80.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-73);
      longArray0[1] = (long) (byte) (-80);
      longArray0[2] = (long) 4;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 70;
      ArrayUtils.swap(longArray0, 1225, (int) (byte)2);
      assertArrayEquals(new long[] {(-73L), (-80L), 4L, (-1L), 70L}, longArray0);
      assertEquals(5, longArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf((double[]) null, (-34.0), 100.0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 71;
      intArray0[1] = 71;
      intArray0[2] = 71;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {71, 71, 71}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 71;
      doubleArray0[1] = 1124.0;
      doubleArray0[2] = (double) 71;
      doubleArray0[3] = (double) 71;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1653.634, 71.0);
      assertArrayEquals(new double[] {71.0, 1124.0, 71.0, 71.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1063.97799263121;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1063.97799263121);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(14, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)1;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(2, int0);
      
      ArrayUtils.reverse(byteArray0, (int) (byte)114, 776);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, 1063.97799263121);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(13, doubleArray2.length);
      assertEquals(14, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_INT_ARRAY, (int) (byte)91);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray1 = ArrayUtils.insert(2, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(10, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(13, doubleArray2.length);
      assertEquals(14, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertTrue(boolean0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2162);
      shortArray0[1] = (short)2167;
      shortArray0[2] = (short)56;
      shortArray0[3] = (short) (-2162);
      shortArray0[4] = (short) (-2162);
      shortArray0[5] = (short) (-2162);
      shortArray0[6] = (short) (-2162);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2162), (-1382));
      assertArrayEquals(new short[] {(short) (-2162), (short)2167, (short)56, (short) (-2162), (short) (-2162), (short) (-2162), (short) (-2162)}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte) (-114);
      byteArray0[8] = (byte)29;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)19, 85);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-40), (byte)72, (byte)39, (byte) (-127), (byte)4, (byte)66, (byte) (-114), (byte)29}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = 'q';
      charArray0[2] = '>';
      charArray0[3] = 'u';
      charArray0[4] = 'L';
      charArray0[5] = '6';
      charArray0[6] = '%';
      charArray0[7] = 'R';
      charArray0[8] = 'R';
      ArrayUtils.shift(charArray0, 2090, 2090, 16);
      assertArrayEquals(new char[] {'<', 'q', '>', 'u', 'L', '6', '%', 'R', 'R'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-27);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte) (-27)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)48;
      shortArray0[1] = (short)127;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)1301;
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'q';
      charArray0[2] = 'C';
      int int0 = ArrayUtils.indexOf(charArray0, 'C', (int) (short) (-1));
      assertArrayEquals(new char[] {'l', 'q', 'C'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'q';
      intArray0[1] = (int) 'l';
      intArray0[2] = (int) 'l';
      intArray0[3] = (int) 'C';
      intArray0[4] = (int) (short)127;
      intArray0[5] = (int) 'q';
      boolean boolean0 = ArrayUtils.contains(intArray0, 1340);
      assertArrayEquals(new int[] {113, 108, 108, 67, 127, 113}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
      
      MutableInt mutableInt0 = new MutableInt(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, mutableInt0.intValue());
      assertEquals(2147483647L, mutableInt0.longValue());
      assertEquals(2.147483647E9, mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.toInteger());
      assertEquals("2147483647", mutableInt0.toString());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.getValue());
      assertEquals(2.14748365E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.getValue();
      assertFalse(integer0.equals((Object)int0));
      assertEquals(Integer.MAX_VALUE, mutableInt0.intValue());
      assertEquals(2147483647L, mutableInt0.longValue());
      assertEquals(2.147483647E9, mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.toInteger());
      assertEquals("2147483647", mutableInt0.toString());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.getValue());
      assertEquals(2.14748365E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer integer1 = Integer.getInteger("Fk", integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(Integer.MAX_VALUE, mutableInt0.intValue());
      assertEquals(2147483647L, mutableInt0.longValue());
      assertEquals(2.147483647E9, mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.toInteger());
      assertEquals("2147483647", mutableInt0.toString());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.getValue());
      assertEquals(2.14748365E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-27));
      assertArrayEquals(new byte[] {(byte) (-27), (byte) (-27)}, byteArray0);
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Long long0 = new Long(663L);
      assertNotNull(long0);
      assertEquals(663L, (long)long0);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      Long long1 = new Long((-540L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-540L), (long)long1);
      
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[1]);
      assertArrayEquals(new long[] {663L, (-540L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      long[] longArray2 = ArrayUtils.insert(1, longArray1, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {663L, (-540L)}, longArray1);
      assertArrayEquals(new long[] {663L, 663L, (-540L), (-540L)}, longArray2);
      assertNotNull(longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      int int0 = (-3625);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      char[] charArray0 = ArrayUtils.insert(244, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-4132), (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4132, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)29);
      assertArrayEquals(new short[] {(short)29}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      char[] charArray0 = ArrayUtils.insert((int) (short)29, (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) 'Q';
      doubleArray0[2] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 81.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {81.0, 1063.97799263121}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Integer integer0 = new Integer((byte)1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = Integer.getInteger(", '", integer0);
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      Integer integer2 = new Integer(1662);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1662, (int)integer2);
      
      Integer integer3 = new Integer(1662);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(1662, (int)integer3);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) 'Q';
      intArray0[2] = (int) 'Q';
      intArray0[3] = (int) (byte)1;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 81, 81, 1}, intArray1);
      assertArrayEquals(new int[] {1, 81, 81, 1}, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      intArray0[1] = (int) 'Q';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'Q', 'Q', 'Q', '\u0000', 'Q', 'Q'}, charArray0);
      assertEquals(6, charArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(abstractMap_SimpleImmutableEntryArray0, (int) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      short[] shortArray0 = new short[3];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(stringArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(221);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(221, (int)integer0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[0] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = Integer.getInteger("n^uGffcG(", (-1114));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-1114), (int)integer3);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, false, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 73.0F;
      floatArray0[2] = (float) (-1114);
      int int2 = ArrayUtils.indexOf(floatArray0, 1.0F, (-1949));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new float[] {73.0F, 0.0F, (-1114.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int2);
      
      ArrayUtils.swap(longArray0, 0, (-1), (-2411));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      Integer integer0 = new Integer(2214);
      assertNotNull(integer0);
      assertEquals(2214, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((char[]) null, 2214, (-15));
      Long long0 = new Long(2214);
      assertNotNull(long0);
      assertEquals(2214L, (long)long0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)117;
      ArrayUtils.swap(byteArray0, (-6810), (-1), (int) (byte)12);
      assertArrayEquals(new byte[] {(byte)12, (byte)47, (byte)117}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Integer integer1 = new Integer((-626));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-626), (int)integer1);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer1, 2214);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.indexOf(longArray0, (long) (-626));
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      Integer integer0 = new Integer((-1764));
      assertNotNull(integer0);
      assertEquals((-1764), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(true);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean3;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[2] = boolean5;
      booleanArray0[3] = boolean2;
      booleanArray0[4] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = ArrayUtils.insert(1, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0);
      assertNotNull(stringArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = ArrayUtils.insert(1371, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      Integer integer0 = new Integer(860);
      assertNotNull(integer0);
      assertEquals(860, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      int[] intArray0 = new int[8];
      intArray0[0] = 3173;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (int) (byte) (-7);
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(true);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[1] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      double[] doubleArray0 = ArrayUtils.insert((-7), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      ArrayUtils.swap(charArray0, (-1), Integer.MAX_VALUE, (-1));
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'c';
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 'c';
      floatArray0[2] = (float) 'c';
      floatArray0[3] = (-1350.7F);
      floatArray0[4] = (float) Integer.MAX_VALUE;
      floatArray0[5] = (float) (-1);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, (-1350.7F), 99.0F, 99.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2389));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(objectArray0, (-2389), (-1), (-1));
      assertEquals(3, objectArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 'c';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-2389);
      longArray0[4] = (long) Integer.MAX_VALUE;
      longArray0[5] = (long) (-1);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), 99L, (-1L), (-2389L), 2147483647L, (-1L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 36;
      intArray0[2] = 36;
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) 36;
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-2743), 1717986918, (int) (byte)77);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      Float[] floatArray0 = new Float[11];
      ArrayUtils.shift((Object[]) floatArray0, (-4823), (-4823), 2261);
      assertEquals(11, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      ArrayUtils.shift(byteArray0, (-4846), Integer.MAX_VALUE, (-4846));
      assertArrayEquals(new byte[] {(byte)69, (byte)69, (byte)69}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((-3870));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)69;
      doubleArray0[1] = (double) (byte)69;
      doubleArray0[2] = (double) (byte)69;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {69.0, 69.0, 69.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {69.0, 69.0, 69.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      float[] floatArray0 = new float[8];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-2144832107), (-2146967921), 1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (-2146967921);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)120;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte) (-1), (byte)79, (byte)40, (byte)40}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Integer integer0 = Integer.getInteger((String) null);
      assertNull(integer0);
      
      Integer integer1 = Integer.getInteger("", (Integer) null);
      assertNull(integer1);
      
      Integer integer2 = new Integer(8);
      assertNotNull(integer2);
      assertEquals(8, (int)integer2);
      
      Integer integer3 = new Integer(1);
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(1, (int)integer3);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) (byte) (-1), (long) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-1), 602, 602);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Short short0 = new Short((short)5043);
      assertNotNull(short0);
      assertEquals((short)5043, (short)short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)5043);
      assertNull(shortArray1);
      
      Integer integer0 = new Integer((-346));
      assertNotNull(integer0);
      assertEquals((-346), (int)integer0);
      
      Integer integer1 = new Integer((short)116);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(116, (int)integer1);
      
      Integer integer2 = new Integer((short)2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      Integer integer3 = new Integer(1879048192);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(1879048192, (int)integer3);
      
      integerArray0[3] = integer3;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer2;
      integerArray0[7] = integer0;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = (double) (int)integerArray0[2];
      doubleArray0[2] = (double) (int)integerArray0[4];
      doubleArray0[3] = (double) (int)integerArray0[4];
      doubleArray0[4] = (double) (int)integerArray0[1];
      ArrayUtils.reverse(doubleArray0, (int) integerArray0[5], 434);
      assertArrayEquals(new double[] {(-346.0), 116.0, 116.0, 116.0, 116.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, integerArray0.length);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(4, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(4, (int)integer3);
      
      Integer integer4 = new Integer(1196);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(1196, (int)integer4);
      
      Integer integer5 = Integer.getInteger(":^", (Integer) int0);
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(4, (int)integer5);
      
      Integer integer6 = ArrayUtils.get(integerArray0, (-1), integer5);
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(5, integerArray0.length);
      assertEquals(4, (int)integer6);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 4;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1074), (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {4L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 50;
      intArray0[1] = int0;
      intArray0[2] = (-2140052908);
      ArrayUtils.swap(intArray0, int0, (-2140052908));
      assertArrayEquals(new int[] {50, 4, (-2140052908), 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      Integer integer7 = ArrayUtils.get(integerArray0, (-1850));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNull(integer7);
      assertEquals(5, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      Integer integer0 = new Integer(860);
      assertNotNull(integer0);
      assertEquals(860, (int)integer0);
      
      Integer integer1 = new Integer(860);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(860, (int)integer1);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 860;
      floatArray0[1] = (float) 860;
      floatArray0[2] = (float) 860;
      floatArray0[0] = (float) 860;
      floatArray0[0] = (float) 860;
      floatArray0[5] = (float) 860;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 860.0F, 2);
      assertArrayEquals(new float[] {860.0F, 860.0F, 860.0F, 0.0F, 0.0F, 860.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[2] = 40;
      intArray0[3] = (-2501);
      intArray0[4] = (-2716);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray0);
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[9];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 40;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 40;
      doubleArray0[3] = (double) (-2716);
      doubleArray0[4] = (double) (-2716);
      ArrayUtils.shift(doubleArray0, (-2501), Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {(-2716.0), (-2716.0), 40.0, 0.0, 40.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Float[] floatArray2 = new Float[1];
      Float float0 = new Float((-2716.0));
      assertNotNull(float0);
      assertEquals((-2716.0F), (float)float0, 0.01F);
      
      floatArray2[0] = float0;
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2);
      assertNotNull(floatArray3);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray3.length);
      assertSame(floatArray2, floatArray3);
      assertSame(floatArray3, floatArray2);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)1;
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Short short1 = new Short((short) (-443));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-443), (short)short1);
      
      Short short2 = new Short((short)1);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)1, (short)short2);
      
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray2, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1967), (-3378));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(shortArray2, (int) (short) (-443));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray2, shortArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1272L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-49);
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 441L);
      assertEquals((-1), int0);
      
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)98;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-39));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-49), (byte)93, (byte)1, (byte)8, (byte)6, (byte)79, (byte)98}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)93, (byte)1, (byte)8, (byte)6, (byte)79, (byte)98, (byte) (-39)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (int) (byte) (-39));
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(2, int1);
      
      Integer integer0 = new Integer((byte)1);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      int int2 = ArrayUtils.indexOf((Object[]) null, (Object) integer0, Integer.MAX_VALUE);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      Integer[] integerArray0 = new Integer[17];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(17, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      int int0 = 0;
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[0] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Integer integer2 = Integer.getInteger("org.apache.commons.lang3.ArrayUtils", (Integer) int0);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer[] integerArray1 = new Integer[5];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer1;
      integerArray1[1] = integer2;
      integerArray1[2] = integer2;
      integerArray1[3] = integer1;
      integerArray1[4] = integer0;
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray1, integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(1, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertEquals(4, integerArray2.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)123);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)123;
      ArrayUtils.shift(byteArray0, (-2441));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[0] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      charArray0[5] = 'z';
      charArray0[6] = 'z';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'z', '\u0000', '\u0000', 'z', 'z', 'z', 'z'}, charArray0);
      assertArrayEquals(new char[] {'z', '\u0000', '\u0000', 'z', 'z', 'z', 'z'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '\u0000';
      floatArray0[1] = (float) 'z';
      floatArray0[2] = (float) 'z';
      floatArray0[3] = (float) 'z';
      floatArray0[4] = (float) 'z';
      ArrayUtils.shift(floatArray0, (-575), 365, 123);
      assertArrayEquals(new float[] {122.0F, 122.0F, 122.0F, 0.0F, 122.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)123;
      shortArray0[1] = (short) (byte)123;
      shortArray0[4] = (short) (byte)123;
      shortArray0[5] = (short) (-2342);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)123, (short)123, (short)0, (short)0, (short)123, (short) (-2342)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)123, (short)123, (short)0, (short)0, (short)123, (short) (-2342)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 123;
      Integer integer0 = new Integer((short)123);
      assertNotNull(integer0);
      assertEquals(123, (int)integer0);
      
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) 123;
      Integer integer1 = new Integer((short)123);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(123, (int)integer1);
      
      integerArray0[3] = integer1;
      integerArray0[4] = (Integer) 123;
      integerArray0[5] = (Integer) 123;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      float[] floatArray0 = new float[4];
      ArrayUtils.shift(floatArray0, 3);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-2146293905));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2146293905), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2146293905));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-2146293905), (int)integer2);
      
      ArrayUtils.swap((char[]) null, Integer.MAX_VALUE, (-2357), 0);
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 417.8094631761);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {417.8094631761}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.reverse(booleanArray0, (-1721), (-2101));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2101);
      intArray0[1] = (-3110);
      intArray0[2] = (-2101);
      intArray0[3] = (-1721);
      intArray0[4] = (-2101);
      intArray0[5] = (-2101);
      intArray0[6] = (-2101);
      intArray0[7] = (-2101);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2146590623, 2381);
      assertArrayEquals(new int[] {(-2101), (-3110), (-2101), (-1721), (-2101), (-2101), (-2101), (-2101)}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(8, intArray0.length);
      
      ArrayUtils.shift(intArray0, 79);
      assertArrayEquals(new int[] {(-3110), (-2101), (-1721), (-2101), (-2101), (-2101), (-2101), (-2101)}, intArray0);
      assertEquals(8, intArray0.length);
      
      Integer integer0 = new Integer((-2101));
      assertNotNull(integer0);
      assertEquals((-2101), (int)integer0);
      
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[4] = false;
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray1, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(7, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 106);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-3110);
      floatArray0[1] = (float) 2146590623;
      floatArray0[2] = (float) (-3110);
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) (-3110);
      floatArray0[5] = (float) (-3110);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-3110.0F), 2.14659059E9F, (-3110.0F), (-1.0F), (-3110.0F), (-3110.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-3133.2291055387336);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-3133.2291055387336));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.5, (-3133.2291055387336)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3133.2291055387336), 1.5, (-3133.2291055387336)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-3);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)104, (byte) (-27), (byte) (-59), (byte) (-3)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short) (byte) (-59));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1963.0F);
      floatArray0[1] = (float) (byte) (-27);
      floatArray0[2] = (float) (byte)104;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-1963.0F), (-27.0F), 104.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)104;
      longArray0[1] = (long) (byte) (-27);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1270, (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {104L, (-27L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, (double) 104.0F);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.5, (-3133.2291055387336)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {104.0, 1.5, (-3133.2291055387336)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1189L));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 10;
      objectArray0[1] = (Object) 10;
      objectArray0[2] = (Object) 10;
      objectArray0[3] = (Object) 10;
      objectArray0[4] = (Object) 10;
      objectArray0[5] = (Object) 10;
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (-1189L));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) (-854.0F);
      doubleArray0[3] = 1220.345;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) 10;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {10.0, 10.0, (-854.0), 1220.345, 10.0, 10.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean2 = ArrayUtils.contains((Object[]) null, objectArray0[3]);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(9, objectArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(221);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(221, (int)integer0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[0] = (Object) integer0;
      objectArray0[0] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(221);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(221, (int)integer2);
      
      Integer integer3 = Integer.getInteger("n^uGffcG(", (-1114));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-1114), (int)integer3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      ArrayUtils.shift(charArray0, (-2410), 496, 0);
      assertArrayEquals(new char[] {'1', '1', '1', '1', '1'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[1] = (-1450L);
      longArray0[3] = 1L;
      Float float0 = new Float((-402.0));
      assertNotNull(float0);
      assertEquals((-402.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-1450L));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1450.0F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[8];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      floatArray0[2] = float0;
      floatArray0[3] = float1;
      floatArray0[4] = float1;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      floatArray0[7] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-854.0F));
      assertArrayEquals(new float[] {(-402.0F), (-1450.0F), (-402.0F), (-1450.0F), (-1450.0F), (-402.0F), (-402.0F), (-1450.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1450L);
      doubleArray0[1] = (double) (-1450L);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-1450.0), (-1450.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) floatArray0, (Object) null);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'w';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'l', 'w'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1L);
      assertArrayEquals(new double[] {(-1450.0), (-1450.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray1, (-1), (-1), (-1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'l', 'w'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-299.809795), (-1955));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1877L);
      assertNotNull(mockRandom0);
      
      Character character0 = Character.valueOf(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      Character character1 = new Character('%');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('%', (char)character1);
      
      Character character2 = Character.valueOf('9');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('9', (char)character2);
      
      Character character3 = new Character('v');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('v', (char)character3);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (double) ')');
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      char[] charArray0 = new char[1];
      ArrayUtils.swap(charArray0, (-1), Integer.MAX_VALUE, (-1));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.shift((byte[]) null, (-1));
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'z';
      floatArray0[1] = (float) (byte)33;
      floatArray0[2] = (float) (-1);
      floatArray0[4] = (float) (byte)33;
      floatArray0[5] = (-1583.0F);
      ArrayUtils.shift(floatArray0, (int) (byte)33, (-1581), Integer.MAX_VALUE);
      assertArrayEquals(new float[] {122.0F, 33.0F, (-1.0F), 0.0F, 33.0F, (-1583.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)33;
      shortArray0[1] = (short) (byte)33;
      shortArray0[2] = (short) (byte)33;
      shortArray0[3] = (short) (byte)33;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)33, (short)33, (short)33, (short)33}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)33, (short)33, (short)33, (short)33}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.get(objectArray0, (int) 33);
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 122.0F;
      objectArray0[2] = (Object) 33.0F;
      objectArray0[3] = (Object) (short)33;
      objectArray0[4] = (Object) (short)33;
      ArrayUtils.reverse(objectArray0);
      assertEquals(5, objectArray0.length);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-696), 2988);
      assertNull(byteArray0);
      
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = null;
      objectArray1[1] = (Object) (short)33;
      objectArray1[2] = (Object) 33.0F;
      objectArray1[3] = (Object) (-1.0F);
      objectArray1[4] = (Object) (-1583.0F);
      int int0 = ArrayUtils.lastIndexOf(objectArray1, objectArray0[0], 1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(5, objectArray0.length);
      assertEquals(5, objectArray1.length);
      assertEquals(1, int0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(221);
      assertNotNull(integer0);
      assertEquals(221, (int)integer0);
      
      Integer integer1 = new Integer(211);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(211, (int)integer1);
      
      Integer integer2 = new Integer(221);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(221, (int)integer2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = '`';
      charArray0[2] = 'q';
      charArray0[3] = 'A';
      charArray0[4] = 'd';
      charArray0[5] = 'B';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'N', '`', 'q', 'A', 'd', 'B'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-549);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-549)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.shift(floatArray0, (int) (short) (-549), 187, 37);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 211;
      intArray0[1] = (int) 'A';
      intArray0[2] = (-1);
      intArray0[3] = (int) '`';
      intArray0[4] = (int) 'N';
      intArray0[5] = (int) 'N';
      intArray0[6] = (int) 'B';
      intArray0[7] = 37;
      intArray0[8] = (int) 'B';
      ArrayUtils.shift(intArray0, (-2145452581), 3, 572);
      assertArrayEquals(new int[] {65, (-1), 211, 96, 78, 78, 66, 37, 66}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Integer integer0 = new Integer(103);
      assertNotNull(integer0);
      assertEquals(103, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '[';
      charArray0[2] = '6';
      int int0 = ArrayUtils.indexOf((int[]) null, 8);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((Object[]) null, (-1));
      MockRandom mockRandom0 = new MockRandom((-1838L));
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '6';
      doubleArray0[1] = 2800.9480644;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      charArray0[6] = '&';
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {2800.9480644, (-1.0), (-1.0), (-1.0), (-1.0), 0.0, 54.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1466));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1466), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2, integerArray0.length);
      assertEquals((-1466), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, (int) integerArray0[1], integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, integerArray0.length);
      assertEquals((-1466), (int)integer2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)121;
      ArrayUtils.shift(byteArray0, (-543), int0, (int) (byte) (-105));
      assertArrayEquals(new byte[] {(byte) (-105), (byte)26, (byte)121, (byte)8}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-1686), 261);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 261;
      floatArray0[1] = (-460.8939F);
      floatArray0[2] = (float) (byte)121;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {261.0F, (-460.8939F), 121.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {261.0F, (-460.8939F), 121.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-105), (byte)26, (byte)121, (byte)8, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)26, (byte)121, (byte)8}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      long[] longArray0 = new long[9];
      longArray0[1] = (-1017L);
      char[] charArray0 = new char[4];
      charArray0[1] = 's';
      ArrayUtils.swap(charArray0, (-1692), (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new char[] {'\u0000', 's', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      ArrayUtils.shift(byteArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.swap(charArray0, (int) (byte)0, 2065);
      assertArrayEquals(new char[] {'\u0000', 's', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.remove(charArray0, (int) (byte)0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', 's', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'s', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.reverse(booleanArray0, (-1721), (-2101));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)108;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2101);
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = 1.0F;
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {(-1.0F), (-2101.0F), 1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      charArray0[1] = '6';
      charArray0[2] = '=';
      charArray0[3] = 'q';
      charArray0[4] = 'n';
      charArray0[5] = 'p';
      charArray0[6] = ']';
      charArray0[7] = '8';
      charArray0[8] = '{';
      ArrayUtils.swap(charArray0, 540, (-1721));
      assertArrayEquals(new char[] {'E', '6', '=', 'q', 'n', 'p', ']', '8', '{'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      Integer integer0 = new Integer(123);
      assertNotNull(integer0);
      assertEquals(123, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1018;
      intArray0[2] = 123;
      intArray0[3] = 123;
      intArray0[4] = 123;
      intArray0[5] = 0;
      intArray0[6] = 563;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 1018, 123, 123, 123, 0, 563}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = '/';
      charArray0[2] = 'z';
      charArray0[3] = 'I';
      ArrayUtils.swap(charArray0, (-1510), (-834), (-834));
      assertArrayEquals(new char[] {'t', '/', 'z', 'I'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'t', '/', 'z', 'I'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(327);
      assertNotNull(integer0);
      assertEquals(327, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0, (-3020));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'D');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'t', '/', 'z', 'I'}, charArray0);
      assertArrayEquals(new char[] {'t', '/', 'z', 'I', 'D'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, (-3020), 55);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray2.length);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-412), (-412), (-412));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean boolean5 = new Boolean(false);
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      Boolean boolean6 = Boolean.valueOf(false);
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      Boolean boolean7 = Boolean.valueOf(false);
      assertTrue(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean3));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      Boolean[] booleanArray1 = new Boolean[8];
      booleanArray1[0] = boolean7;
      booleanArray1[1] = boolean5;
      booleanArray1[2] = boolean1;
      booleanArray1[3] = boolean0;
      Boolean boolean8 = new Boolean("\"7],^8]$H{MAz\"1o");
      assertTrue(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean5));
      assertNotNull(boolean8);
      assertFalse(boolean8);
      
      booleanArray1[4] = boolean8;
      booleanArray1[5] = boolean1;
      booleanArray1[6] = boolean3;
      booleanArray1[7] = boolean6;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(8, booleanArray2.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray0);
      
      Integer integer0 = new Integer((-412));
      assertNotNull(integer0);
      assertEquals((-412), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      ArrayUtils.swap(charArray0, (-1), Integer.MAX_VALUE, (-1));
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'c';
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 'c';
      floatArray0[2] = (float) 'c';
      floatArray0[3] = (-1350.7146F);
      floatArray0[4] = (float) Integer.MAX_VALUE;
      floatArray0[5] = (float) (-1);
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)102;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)102, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)102;
      intArray0[2] = (int) (short)0;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 102, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) 'Q';
      doubleArray0[2] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 81.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {81.0, 1063.97799263121}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, (double) (byte)1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 81.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {81.0, 1063.97799263121}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {81.0, 1063.97799263121}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      ArrayUtils.shift(doubleArray1, 2777, (-201), 0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 81.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {81.0, 1063.97799263121}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, false, 35);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'Q';
      longArray0[1] = (long) (-201);
      longArray0[2] = (long) (byte)1;
      ArrayUtils.shift(longArray0, (int) (byte)1);
      assertArrayEquals(new long[] {1L, 81L, (-201L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean[] booleanArray2 = new boolean[1];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray3));
      assertNotNull(booleanArray3);
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray3.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false);
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals((-1), int0);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'J';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'Q');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Q', 'Q', 'J', 'Q', 'Q'}, charArray0);
      assertArrayEquals(new char[] {'Q', 'J', 'Q', 'Q'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 3126.85189254048);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3126.85189254048, 4.0, 4.0, 4.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-15);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0, (-503), 3743);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) 3743;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte)97;
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) (byte) (-15);
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {3743.0F, 0.0F, 97.0F, (-1.0F), 0.0F, (-15.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)29);
      assertArrayEquals(new short[] {(short)29}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-994), floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short)32;
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short)32;
      shortArray0[5] = (short) (-1184);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)32, (-198));
      assertArrayEquals(new short[] {(short)32, (short)1, (short)32, (short)1, (short)32, (short) (-1184)}, shortArray0);
      assertEquals("{0, 2, 4}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(6, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2.0F);
      floatArray0[1] = (float) (short) (-1184);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-2.0F), (-1184.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2.0F), (-1184.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      ArrayUtils.shift(byteArray0, (int) (short)1, (-407), Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)54;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)54;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {54.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-2389));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) (-2389));
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)125;
      ArrayUtils.reverse(byteArray0, (-1), 2013265920);
      assertArrayEquals(new byte[] {(byte)125, (byte)5, (byte)1, (byte) (-88), (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer2;
      Integer integer3 = new Integer((-123));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-123), (int)integer3);
      
      integerArray0[4] = integer3;
      integerArray0[5] = integer0;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      int int1 = ArrayUtils.getLength((Object) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) int0;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 2024.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 1.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-405));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-405), (int)integer2);
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer((int) integerArray0[3]);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(5, integerArray0.length);
      assertEquals((-405), (int)integer3);
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer(50);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(50, (int)integer4);
      
      Integer integer5 = ArrayUtils.get(integerArray0, 1196, integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(5, integerArray0.length);
      assertEquals(50, (int)integer5);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer5);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (int)integerArray0[4];
      longArray0[1] = (long) (int)integerArray0[3];
      longArray0[2] = (long) (-405);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) integerArray0[3], int0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-405L), (-405L), (-405L)}, longArray1);
      assertArrayEquals(new long[] {(-405L), (-405L), (-405L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1196;
      intArray0[1] = 50;
      intArray0[2] = 1196;
      intArray0[3] = (int) integerArray0[4];
      intArray0[4] = (-405);
      intArray0[5] = (-405);
      intArray0[6] = (-1);
      ArrayUtils.shift(intArray0, 101, (-405), (-405));
      assertArrayEquals(new int[] {1196, 50, 1196, (-405), (-405), (-405), (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(101).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(5, integerArray0.length);
      assertFalse(boolean0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2488);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("eA*B+tEiP,07g", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer((-3077));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-3077), (int)integer3);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 120);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {120}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((float) 0L);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 120);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(120.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F, 120.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1.0), (double) 120);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      ArrayUtils.reverse((double[]) null, 120, 120);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, 120, (-3077), 0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'b';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) 'b';
      intArray0[3] = (int) '7';
      intArray0[4] = 2;
      intArray0[5] = (int) '3';
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {98, 55, 98, 55, 2, 51, 0, 0}, intArray0);
      assertArrayEquals(new int[] {98, 55, 98, 55, 2, 51, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 1856L;
      Object object0 = ArrayUtils.toPrimitive((Object) 98);
      assertNotNull(object0);
      assertEquals(98, object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 98;
      ArrayUtils.reverse(objectArray0);
      assertEquals(3, objectArray0.length);
      
      char[] charArray0 = new char[13];
      charArray0[0] = 'I';
      ArrayUtils.reverse(charArray0);
      assertEquals(13, charArray0.length);
      
      ArrayUtils.shift(objectArray0, 55);
      assertEquals(3, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, '7');
      assertTrue(boolean1 == boolean0);
      assertEquals(13, charArray0.length);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1856L;
      doubleArray0[1] = (double) 55;
      doubleArray0[2] = (double) '7';
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 'b';
      doubleArray0[5] = (double) 51;
      doubleArray0[6] = (double) '7';
      doubleArray0[7] = (-201.0);
      doubleArray0[8] = (double) 1856L;
      ArrayUtils.reverse(doubleArray0, 51, (-3554));
      assertArrayEquals(new double[] {1856.0, 55.0, 55.0, 1.0, 98.0, 51.0, 55.0, (-201.0), 1856.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)0;
      int[] intArray0 = new int[1];
      intArray0[0] = (-3378);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {(-3378)}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-618.21349518), (int) (byte)33);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-3378)}, intArray0);
      assertArrayEquals(new int[] {(-3378)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 36, (-72), (-72));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-72);
      intArray0[2] = (-72);
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-3110), (-3110));
      assertArrayEquals(new int[] {(-72), 0, (-72)}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.shift(intArray0, 0, 68, 68);
      assertArrayEquals(new int[] {0, (-72), (-72)}, intArray0);
      assertEquals(3, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 68);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-72), (-72)}, intArray0);
      assertArrayEquals(new int[] {0, (-72), (-72)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) 68);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      short short0 = (short)1136;
      int int0 = 0;
      Short short1 = new Short((short)1136);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)1136, (short)short1);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      int int1 = (-3110);
      int[] intArray0 = new int[9];
      intArray0[1] = (-2959);
      intArray0[1] = (-3110);
      intArray0[2] = (int) (short)1136;
      intArray0[3] = (-3110);
      intArray0[3] = (-3110);
      intArray0[5] = 0;
      intArray0[6] = (-3110);
      intArray0[7] = 0;
      intArray0[8] = (-3110);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0, (-1677));
      assertArrayEquals(new int[] {0, (-3110), 1136, (-3110), 0, 0, (-3110), 0, (-3110)}, intArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 4, 5, 7}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(9, intArray0.length);
      
      int int2 = 68;
      ArrayUtils.shift(intArray0, (int) (short)1136, 0, 146);
      assertArrayEquals(new int[] {0, (-3110), 1136, (-3110), 0, 0, (-3110), 0, (-3110)}, intArray0);
      assertEquals(9, intArray0.length);
      
      Integer[] integerArray1 = new Integer[1];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = (Integer) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray1, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 36, (-72), (-72));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-72);
      intArray0[1] = 36;
      intArray0[2] = (-72);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 36, (-72)}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-72);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.shift(floatArray0, (-2199), (-2417), 322);
      assertArrayEquals(new float[] {0.0F, (-72.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)89;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)50, (byte)17, (byte)125, (byte)95, (byte) (-116), (byte)89}, byteArray1);
      assertArrayEquals(new byte[] {(byte)17, (byte)50, (byte)17, (byte)125, (byte)95, (byte) (-116), (byte)89}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertArrayEquals(new int[] {0, 36, (-72)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-829)).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(2, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-405));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-405), (int)integer2);
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer((int) integerArray0[3]);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(5, integerArray0.length);
      assertEquals((-405), (int)integer3);
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer(50);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(50, (int)integer4);
      
      Integer integer5 = ArrayUtils.get(integerArray0, 1196, integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(5, integerArray0.length);
      assertEquals(50, (int)integer5);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer5);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (int)integerArray0[4];
      longArray0[1] = (long) (int)integerArray0[3];
      longArray0[2] = (long) (-405);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) integerArray0[3], int0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-405L), (-405L), (-405L)}, longArray1);
      assertArrayEquals(new long[] {(-405L), (-405L), (-405L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1196;
      intArray0[1] = 50;
      intArray0[2] = 1196;
      intArray0[3] = (int) integerArray0[4];
      intArray0[4] = (-405);
      intArray0[5] = (-405);
      intArray0[6] = (-1);
      ArrayUtils.shift(intArray0, 101, (-405), (-405));
      assertArrayEquals(new int[] {1196, 50, 1196, (-405), (-405), (-405), (-1)}, intArray0);
      assertEquals(7, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(5, integerArray0.length);
      assertTrue(boolean0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)123);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte)123;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 123, 123);
      assertArrayEquals(new int[] {0, 123}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)123);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)123, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = '%';
      charArray0[2] = ')';
      charArray0[3] = 'l';
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)3, (int) (byte)3);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int2);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)96);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[2] = 'U';
      charArray0[3] = 'b';
      charArray0[4] = ' ';
      charArray0[5] = 'U';
      ArrayUtils.swap(charArray0, 5106, 5106, 629);
      assertArrayEquals(new char[] {' ', '\u0000', 'U', 'b', ' ', 'U'}, charArray0);
      assertEquals(6, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 734L, (-1742));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[2] = (-1450L);
      longArray0[3] = 1L;
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertArrayEquals(new long[] {53L, 348L, (-1450L), 1L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5043;
      Short short0 = new Short((short)116);
      assertNotNull(short0);
      assertEquals((short)116, (short)short0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeElement((short[]) null, (short)2);
      assertNull(shortArray2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1L;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((short)5043);
      assertNotNull(integer0);
      assertEquals(5043, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = (-123);
      Integer integer2 = new Integer((-123));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-123), (int)integer2);
      
      integerArray0[2] = integer2;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(3, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) int0;
      longArray1[1] = 53L;
      longArray1[2] = (long) Integer.MAX_VALUE;
      longArray1[3] = 1L;
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-123L), 53L, 2147483647L, 1L}, longArray1);
      assertNotNull(longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 36, (-72), (-72));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2669);
      intArray0[1] = 36;
      intArray0[2] = 36;
      intArray0[3] = 36;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = ';';
      charArray0[2] = 'Z';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {')', ';', 'Z'}, charArray0);
      assertArrayEquals(new char[] {')', ';', 'Z', ')', ';', 'Z'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Boolean[] booleanArray1 = new Boolean[6];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray1[0] = boolean0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {36, 36, 36, (-2669)}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      Integer integer0 = new Integer(2214);
      assertNotNull(integer0);
      assertEquals(2214, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((char[]) null, 2214, (-15));
      Long long0 = new Long(2214);
      assertNotNull(long0);
      assertEquals(2214L, (long)long0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Integer integer1 = new Integer((-15));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-15), (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals((-15), object0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = '%';
      charArray0[2] = 'D';
      charArray0[3] = '9';
      charArray0[4] = 'w';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'w', '9', 'D', '%', 'E'}, charArray0);
      assertEquals(5, charArray0.length);
      
      ArrayUtils.shift(objectArray0, (-1));
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, '~');
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'w', '9', 'D', '%', 'E'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'w';
      floatArray0[1] = (float) '9';
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) '9';
      floatArray0[4] = (float) '%';
      floatArray0[5] = (float) 'E';
      floatArray0[6] = (float) '9';
      floatArray0[7] = (float) (byte)12;
      floatArray0[8] = (float) 'w';
      int int0 = ArrayUtils.indexOf(floatArray0, Float.NaN, 32);
      assertArrayEquals(new float[] {119.0F, 57.0F, (-1.0F), 57.0F, 37.0F, 69.0F, 57.0F, 12.0F, 119.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1818.51593));
      assertNotNull(double0);
      assertEquals((-1818.51593), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1818.51593));
      assertArrayEquals(new double[] {(-1818.51593)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1818.51593)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      ArrayUtils.swap(doubleArray1, (-1966), 998, (-2914));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-1818.51593)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      ArrayUtils.swap(charArray0, (-1), Integer.MAX_VALUE, (-1));
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'c';
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 'c';
      floatArray0[2] = (float) 'c';
      char[] charArray1 = ArrayUtils.insert((-154), charArray0, (char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 1147;
      doubleArray0[2] = (double) (-3421);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (-25.9200778775);
      ArrayUtils.swap(doubleArray0, 0, 13, 2901);
      assertArrayEquals(new double[] {2.147483647E9, 1147.0, (-3421.0), (-1.0), (-25.9200778775)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Float[] floatArray1 = new Float[9];
      floatArray1[0] = (Float) (-1.0F);
      floatArray1[1] = (Float) 99.0F;
      floatArray1[2] = (Float) (-1.0F);
      floatArray1[3] = (Float) 99.0F;
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray1[4] = float0;
      floatArray1[5] = (Float) (-1.0F);
      floatArray1[6] = (Float) (-1.0F);
      floatArray1[7] = (Float) 99.0F;
      floatArray1[8] = (Float) 99.0F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      Integer integer0 = new Integer(2214);
      assertNotNull(integer0);
      assertEquals(2214, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((char[]) null, 2214, (-15));
      Long long0 = new Long(2214);
      assertNotNull(long0);
      assertEquals(2214L, (long)long0);
      
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(5331.9023F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(5331.9023F, (float)float2, 0.01F);
      
      Float float3 = new Float(1.5);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(1.5F, (float)float3, 0.01F);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      floatArray0[1] = float3;
      Float float4 = new Float((-17.0F));
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      assertEquals((-17.0F), (float)float4, 0.01F);
      
      floatArray0[2] = float4;
      Float float5 = new Float(1.0);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotNull(float5);
      assertEquals(1.0F, (float)float5, 0.01F);
      
      floatArray0[3] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.5F, (-17.0F), 1.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 7;
      longArray0[1] = (long) 2214;
      longArray0[2] = (long) (-1022);
      longArray0[3] = (-1183L);
      longArray0[4] = (long) (byte)12;
      longArray0[5] = (long) (byte)12;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(7, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-506);
      shortArray0[2] = (short)364;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-2162);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 0);
      assertArrayEquals(new short[] {(short)0, (short) (-506), (short)364, (short)0, (short)0, (short) (-2162)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (int) (short)364;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 25);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 364, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 364, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'W';
      charArray0[2] = 'D';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'W', 'D'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.swap((double[]) null, (-1748), 76, (-3008));
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-3008));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-3008), (-1522), (-1.0));
      assertEquals((-1), int0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      
      ArrayUtils.swap(charArray0, 250, (-3008), (-1748));
      assertArrayEquals(new char[] {'\u0000', 'W', 'D'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      Integer integer0 = Integer.getInteger("&;T;DZ4=5TN8");
      assertNull(integer0);
      
      Integer integer1 = new Integer((-1748));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1748), (int)integer1);
      
      try { 
        Integer.decode("y?SgTE:^ C$E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"y?SgTE:^ C$E\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtils.insert(5, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("<m;Vek/Dw");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      ArrayUtils.reverse(booleanArray1, (-93), (int) (short)251);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, (boolean) boolean0);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 36, (-72), (-72));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-72);
      intArray0[1] = 36;
      intArray0[2] = (-72);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 36, (-72)}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-72);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 36;
      longArray0[1] = (long) 36;
      longArray0[2] = (long) (-72);
      longArray0[3] = (long) 36;
      longArray0[4] = (long) (-72);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {36L, 36L, (-72L), 36L, (-72L), 36L, 36L, (-72L), 36L, (-72L)}, longArray1);
      assertArrayEquals(new long[] {36L, 36L, (-72L), 36L, (-72L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-934);
      shortArray0[3] = (short)1983;
      shortArray0[4] = (short)30213;
      shortArray0[5] = (short) (-833);
      shortArray0[6] = (short)24405;
      shortArray0[7] = (short) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1, (short) (-934), (short)1983, (short)30213, (short) (-833), (short)24405, (short) (-1)}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      Integer integer0 = new Integer(860);
      assertNotNull(integer0);
      assertEquals(860, (int)integer0);
      
      Integer integer1 = new Integer(860);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(860, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-63);
      ArrayUtils.shift(byteArray0, (int) (byte)0, 261, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-7), (byte) (-63), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 860;
      floatArray0[1] = (float) (byte)121;
      floatArray0[2] = (float) (byte) (-63);
      floatArray0[3] = (float) (byte)8;
      floatArray0[4] = (float) (byte) (-63);
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) (byte) (-7);
      floatArray0[7] = (float) (byte)121;
      int int0 = ArrayUtils.indexOf(floatArray0, 2438.056F, (int) (byte)8);
      assertArrayEquals(new float[] {860.0F, 121.0F, (-63.0F), 8.0F, (-63.0F), 1.0F, (-7.0F), 121.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-1), 261, 1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[1] = (-1450L);
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 14, (-1795));
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)3, 2809);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, int0);
      
      ArrayUtils.reverse(byteArray0, 5, 1055);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)66);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), (-52));
      assertArrayEquals(new byte[] {(byte) (-86), (byte)117, (byte)123, (byte)72, (byte) (-1)}, byteArray0);
      assertEquals("{4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 2299, (-343), (-1294));
      Integer integer0 = new Integer((-849));
      assertNotNull(integer0);
      assertEquals((-849), (int)integer0);
      
      ArrayUtils.swap((short[]) null, 100, (int) (short)1);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2024;
      shortArray0[1] = (short) (-3633);
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)2024;
      boolean boolean4 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {1, 2024}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 36, (-72), (-72));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2669);
      intArray0[1] = 36;
      intArray0[2] = 36;
      intArray0[3] = 36;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = ';';
      charArray0[2] = 'Z';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {')', ';', 'Z'}, charArray0);
      assertArrayEquals(new char[] {')', ';', 'Z', ')', ';', 'Z'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Boolean[] booleanArray1 = new Boolean[6];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = new Boolean((String) null);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray1[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray1[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray1[5] = boolean5;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-1017L);
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = 's';
      ArrayUtils.swap(charArray0, (-1708), (int) (byte)40, (int) (byte)40);
      assertArrayEquals(new char[] {'s', 's', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)40, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '8');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'s', 's', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'8', 's', 's', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, (-1), (double) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1559L));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1559L);
      floatArray0[1] = (float) (-1559L);
      floatArray0[2] = (float) (-1559L);
      floatArray0[3] = (float) (short)1136;
      floatArray0[4] = (float) (-1559L);
      floatArray0[5] = (float) (short)1136;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1559.0F), (int) (short)1136);
      assertArrayEquals(new float[] {(-1559.0F), (-1559.0F), (-1559.0F), 1136.0F, (-1559.0F), 1136.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(6, floatArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-2146293905));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2146293905), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2146293905));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-2146293905), (int)integer2);
      
      integerArray0[2] = integer2;
      ArrayUtils.reverse(longArray0, (-1459), 0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotSame(longArray0, longArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, stringArray0.length);
      
      Long[] longArray2 = new Long[8];
      Long long0 = new Long((-1635L));
      assertNotNull(long0);
      assertEquals((-1635L), (long)long0);
      
      longArray2[0] = long0;
      Long long1 = new Long((-1559L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1559L), (long)long1);
      
      longArray2[1] = long1;
      Long long2 = new Long((long) integerArray0[1]);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(7, integerArray0.length);
      assertEquals((-2146293905L), (long)long2);
      
      longArray2[2] = long2;
      Long long3 = Long.valueOf(938L);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(938L, (long)long3);
      
      longArray2[3] = long3;
      Long long4 = new Long((long) longArray2[3]);
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals(8, longArray2.length);
      assertEquals(938L, (long)long4);
      
      longArray2[4] = long4;
      Long long5 = new Long((long) longArray2[0]);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertNotNull(long5);
      assertEquals(8, longArray2.length);
      assertEquals((-1635L), (long)long5);
      
      longArray2[5] = long5;
      Long long6 = new Long(938L);
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long2));
      assertTrue(long6.equals((Object)long3));
      assertTrue(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long0));
      assertNotNull(long6);
      assertEquals(938L, (long)long6);
      
      longArray2[6] = long6;
      Long long7 = new Long((long) longArray2[0]);
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long3));
      assertTrue(long7.equals((Object)long0));
      assertTrue(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long2));
      assertNotNull(long7);
      assertEquals(8, longArray2.length);
      assertEquals((-1635L), (long)long7);
      
      longArray2[7] = long7;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, (long) 0);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-1635L), (-1559L), (-2146293905L), 938L, 938L, (-1635L), 938L, (-1635L)}, longArray3);
      assertNotNull(longArray3);
      assertEquals(8, longArray2.length);
      assertEquals(8, longArray3.length);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[1] = (-1017L);
      char[] charArray0 = new char[4];
      charArray0[1] = 's';
      ArrayUtils.swap(charArray0, (-1708), (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new char[] {'\u0000', 's', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (-1708), (int) (byte)0, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-80);
      int int1 = ArrayUtils.indexOf(floatArray0, (float) int0);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-80.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.indexOf((char[]) null, 'W');
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-73), (int) (byte)120);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertArrayEquals(new float[] {(-80.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int3);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-80);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte) (-89);
      shortArray0[2] = (short) (byte) (-73);
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, (String) null);
      assertNotNull(stringArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, stringArray0.length);
      
      ArrayUtils.swap((Object[]) stringArray0, (-1450), 1215, (int) (byte) (-80));
      assertEquals(5, integerArray0.length);
      assertEquals(5, stringArray0.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'h');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = 0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int1);
      assertFalse(int1 == int0);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      assertFalse(int1 == int0);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int1));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer integer4 = new Integer(1196);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(1196, (int)integer4);
      
      Integer integer5 = Integer.getInteger(":^", (Integer) int0);
      assertFalse(int0 == int1);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(4, (int)integer5);
      
      Integer integer6 = ArrayUtils.get(integerArray0, 4, integer5);
      assertFalse(int0 == int1);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNull(integer6);
      assertEquals(5, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) int1);
      assertFalse(int1 == int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[1];
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 50;
      floatArray0[1] = (float) int1;
      floatArray0[2] = (float) 4;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 1196;
      floatArray0[5] = (float) 50;
      floatArray0[6] = (float) 4;
      floatArray0[7] = (float) 50;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F), (-2191));
      assertArrayEquals(new float[] {50.0F, 0.0F, 4.0F, 0.0F, 1196.0F, 50.0F, 4.0F, 50.0F}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(8, floatArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-405));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-405), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(50);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(50, (int)integer5);
      
      Integer integer6 = new Integer(int0);
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer6);
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.hashCode((Object) integerArray0[3]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(int1 == int0);
      assertEquals(5, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 1172;
      doubleArray0[2] = (double) (int)integerArray0[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1172.0, 1);
      assertArrayEquals(new double[] {(-1.0), 1172.0, (-405.0)}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      
      String string0 = ArrayUtils.toString((Object) integerArray0[3]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(string0);
      assertEquals(5, integerArray0.length);
      assertEquals("-405", string0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 5147;
      floatArray0[1] = (float) 740;
      floatArray0[2] = (float) 5147;
      floatArray0[3] = 5147.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {5147.0F, 740.0F, 5147.0F, 5147.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)12;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)44, (int) (byte)12);
      assertArrayEquals(new byte[] {(byte)2, (byte)1, (byte)12}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)2, (byte)1, (byte)12}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)12}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, (int) (byte)1, (-32));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {5147.0F, 740.0F, 5147.0F, 5147.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = 2122219134;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2122219134, 2122219134);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 127, 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2122219134, 3);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.reverse((char[]) null, 3, 2313);
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) 127);
      assertArrayEquals(new double[] {127.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      Long long0 = new Long(10L);
      assertNotNull(long0);
      assertEquals(10L, (long)long0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      ArrayUtils.shift(doubleArray0, (-3042), 2313, (-2121672547));
      assertArrayEquals(new double[] {127.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2122219134, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 127, 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      
      short[] shortArray3 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray3);
      assertNotNull(shortArray3);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(3, shortArray3.length);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      Integer integer1 = new Integer(4);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-89);
      floatArray0[1] = (float) 4;
      floatArray0[2] = (float) (byte) (-73);
      floatArray0[3] = (float) (byte)2;
      floatArray0[4] = (-1411.446F);
      floatArray0[5] = (float) 4;
      floatArray0[6] = (float) (byte)2;
      floatArray0[7] = (float) (byte) (-80);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1935.7537F));
      assertArrayEquals(new float[] {(-89.0F), 4.0F, (-73.0F), 2.0F, (-1411.446F), 4.0F, 2.0F, (-80.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, 'W');
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (-80.0F), (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new float[] {(-89.0F), 4.0F, (-73.0F), 2.0F, (-1411.446F), 4.0F, 2.0F, (-80.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int2);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (byte) (-80));
      assertNull(shortArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'W');
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1411.446F);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-1411.446044921875)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-73);
      int int3 = ArrayUtils.indexOf(longArray0, 0L, (int) (byte)2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertArrayEquals(new long[] {(-73L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 867L;
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 867L;
      longArray1[1] = 867L;
      longArray1[2] = 867L;
      longArray1[3] = 867L;
      longArray1[4] = 0L;
      longArray1[5] = 867L;
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {867L}, longArray0);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(10, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      ArrayUtils.shift(charArray0, (-17));
      assertArrayEquals(new char[] {','}, charArray0);
      assertEquals(1, charArray0.length);
      
      Character character0 = Character.valueOf('h');
      assertNotNull(character0);
      assertEquals('h', (char)character0);
      
      Character character1 = Character.valueOf('c');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('c', (char)character1);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character1;
      Character character2 = new Character('>');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('>', (char)character2);
      
      characterArray0[1] = character2;
      characterArray0[2] = (Character) ',';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '+');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'c', '>', ','}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray1, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, object0, (int) character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals(3, characterArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, (int) character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      Integer integer0 = new Integer(2214);
      assertNotNull(integer0);
      assertEquals(2214, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((char[]) null, 2214, 2214);
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) 2214);
      assertArrayEquals(new double[] {2214.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(3, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 'X');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, (int) integerArray0[0], 443);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(0, integerArray2.length);
      assertEquals(3, integerArray0.length);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-4660);
      shortArray0[2] = (short)364;
      shortArray0[3] = (short)1647;
      shortArray0[4] = (short)1803;
      shortArray0[5] = (short) (-2085);
      shortArray0[6] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1068);
      assertArrayEquals(new short[] {(short)0, (short) (-4660), (short)364, (short)1647, (short)1803, (short) (-2085), (short)2}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Integer[] integerArray0 = new Integer[8];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-614), 1437);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      Integer integer0 = new Integer(114);
      assertNotNull(integer0);
      assertEquals(114, (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 114, (-841));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 478L;
      int[] intArray0 = new int[6];
      intArray0[0] = (-3378);
      intArray0[1] = (-3378);
      intArray0[2] = (-3648);
      intArray0[3] = (-3378);
      intArray0[4] = (-3378);
      intArray0[5] = (-3378);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-3378), (-3648), (-3378), (-3378), (-3378), (-3378)}, intArray0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.shift(booleanArray0, (-581), (-3562), (-16));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-73.0F);
      floatArray0[1] = (float) 478L;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (-4132);
      floatArray0[4] = (float) (-3648);
      floatArray0[5] = (float) (-3378);
      ArrayUtils.swap(floatArray0, (-3378), 1);
      assertArrayEquals(new float[] {478.0F, (-73.0F), (-1.0F), (-4132.0F), (-3648.0F), (-3378.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      ArrayUtils.reverse(intArray0, (-2143214295), (-2110));
      assertArrayEquals(new int[] {(-3378), (-3648), (-3378), (-3378), (-3378), (-3378)}, intArray0);
      assertEquals(6, intArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-3378);
      integerArray0[1] = (Integer) (-3378);
      integerArray0[2] = (Integer) (-3378);
      integerArray0[3] = (Integer) (-3378);
      integerArray0[4] = (Integer) (-3378);
      Integer integer0 = Integer.valueOf((int) integerArray0[4]);
      assertNotNull(integer0);
      assertEquals(8, integerArray0.length);
      assertEquals((-3378), (int)integer0);
      
      Integer integer1 = Integer.getInteger(";$ g", integer0);
      assertNotNull(integer1);
      assertEquals(8, integerArray0.length);
      assertEquals((-3378), (int)integer1);
      
      integerArray0[5] = integer1;
      Integer integer2 = new Integer(2554);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2554, (int)integer2);
      
      integerArray0[6] = integer2;
      integerArray0[7] = (Integer) (-3648);
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-1785), 50);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      integerArray0[2] = integer1;
      int[] intArray0 = new int[6];
      intArray0[0] = (-3625);
      integerArray0[1] = (Integer) int0;
      intArray0[2] = 4;
      intArray0[3] = int0;
      intArray0[4] = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-530.9);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 4, (double) 4);
      assertArrayEquals(new double[] {(-530.9)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      Integer integer2 = ArrayUtils.get((Integer[]) null, int0);
      assertNull(integer2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) integerArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 530);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1063.97799263121;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1063.97799263121);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray3 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      double[] doubleArray4 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(0, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)1;
      ArrayUtils.swap(intArray0, 1534, 1);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 1.0, 1534, (double) 1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals((-1), int0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'b';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) 'b';
      intArray0[3] = (int) '7';
      intArray0[4] = 2;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 1856L;
      floatArray0[2] = (float) 'b';
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {98.0F, 1856.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 98);
      assertArrayEquals(new float[] {98.0F, 1856.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(2, int0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 436.62067F);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new float[] {98.0F, 1856.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertEquals(3, floatArray0.length);
      assertNotSame(bitSet1, bitSet0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new float[] {98.0F, 1856.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNull(object0);
      assertEquals(3, floatArray0.length);
      assertNotSame(bitSet1, bitSet0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[3];
      intArray0[0] = 71;
      intArray0[1] = 71;
      intArray0[2] = 71;
      Short short0 = new Short((short)195);
      assertNotNull(short0);
      assertEquals((short)195, (short)short0);
      
      short short1 = (short)98;
      Short short2 = new Short((short)98);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)98, (short)short2);
      
      Short short3 = new Short((short) (-1699));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short) (-1699), (short)short3);
      
      Short short4 = new Short((short)49);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short)49, (short)short4);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      shortArray0[1] = short4;
      shortArray0[2] = short2;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.swap(booleanArray0, 6, (int) short1, (-4132));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      int[] intArray0 = new int[1];
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-1.0F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = 0L;
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = 's';
      ArrayUtils.swap(charArray0, (-1708), (int) (byte)40, (int) (byte)40);
      assertArrayEquals(new char[] {'s', 's', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)40, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[6] = false;
      booleanArray0[3] = false;
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertSame(shortArray2, shortArray0);
      
      short[] shortArray3 = ArrayUtils.removeElement(shortArray2, (short) (byte)40);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertNotNull(shortArray3);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      assertSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)40;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) (short) (-1);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {40.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = 'E';
      charArray0[2] = '9';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.insert((-2425), charArray1, (char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray2.length);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'E';
      doubleArray0[3] = (double) 1147;
      doubleArray0[2] = (double) (-2425);
      doubleArray0[3] = (double) 'i';
      doubleArray0[4] = (double) '9';
      doubleArray0[5] = (double) 'E';
      doubleArray0[6] = (double) '9';
      doubleArray0[7] = (double) '9';
      doubleArray0[8] = (double) (-3421);
      ArrayUtils.swap(doubleArray0, 37, (-1073741823), (-1073741823));
      assertArrayEquals(new double[] {69.0, 0.0, (-2425.0), 105.0, 57.0, 69.0, 57.0, 57.0, (-3421.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.insert(2995, charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotNull(charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.swap(doubleArray0, 744, 0, 512);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1189L));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 10;
      objectArray0[1] = (Object) 10;
      objectArray0[2] = (Object) 10;
      objectArray0[3] = (Object) 10;
      objectArray0[4] = (Object) 10;
      objectArray0[5] = (Object) 10;
      objectArray0[6] = (Object) 10;
      objectArray0[7] = (Object) 10;
      objectArray0[8] = (Object) 10;
      ArrayUtils.swap(objectArray0, 10, (-524), 10);
      assertEquals(9, objectArray0.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'h');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)55;
      intArray0[1] = (int) (byte)55;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Integer[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = 127;
      intArray0[2] = 1225;
      intArray0[3] = 5;
      intArray0[4] = (-3111);
      int int0 = ArrayUtils.indexOf(intArray0, 98);
      assertArrayEquals(new int[] {55, 127, 1225, 5, (-3111)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((Object[]) null, 4163);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 55;
      doubleArray0[1] = (double) (-3111);
      doubleArray0[2] = 1563.7;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 55;
      doubleArray0[5] = (double) (-3111);
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {(-3111.0), 1563.7, (-1.0), 55.0, (-3111.0), 55.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) 5, (Integer) 1225);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, (Integer) (-3111));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1225;
      intArray1[1] = 1225;
      intArray1[2] = 127;
      intArray1[3] = 55;
      intArray1[4] = 98;
      intArray1[5] = 127;
      intArray1[6] = 5;
      intArray1[7] = (-25);
      intArray1[8] = 4163;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(abstractMap_SimpleImmutableEntryArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4163, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      Integer integer0 = new Integer((-3502));
      assertNotNull(integer0);
      assertEquals((-3502), (int)integer0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) floatArray0, (Object) integer0);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1135.9875F;
      floatArray0[3] = (-2903.7F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 2006.34F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 1135.9875F, 0.0F, (-2903.7F), 1.0F, 2006.34F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (-2903.7F);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, (-1.0), (-2903.699951171875)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)98;
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[1] = object1;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)52;
      shortArray1[1] = (short)52;
      shortArray1[2] = (short)52;
      shortArray1[3] = (short)52;
      shortArray1[4] = (short)52;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertArrayEquals(new short[] {(short)52, (short)52, (short)52, (short)52, (short)52}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new short[] {(short)52, (short)52, (short)52, (short)52, (short)52}, shortArray1);
      assertEquals(5, shortArray1.length);
      assertFalse(boolean2);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[22];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 120, 120);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(4, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      ArrayUtils.shift((short[]) null, (int) (short)16);
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1136L);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 863);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-115));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, 583, 36, (-613));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 36;
      intArray0[1] = 36;
      intArray0[2] = (-494);
      intArray0[3] = (-613);
      intArray0[4] = (-3545);
      intArray0[5] = (-72);
      intArray0[6] = (-72);
      intArray0[7] = (-613);
      intArray0[8] = 583;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {36, 36, (-494), (-613), (-3545), (-72), (-72), (-613), 583}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, integerArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = '?';
      charArray0[2] = 'd';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'m', '?', 'd', 'm', '?', 'd'}, charArray1);
      assertArrayEquals(new char[] {'m', '?', 'd'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(3, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)120;
      shortArray0[1] = (short) (-17320);
      shortArray0[2] = (short)4554;
      shortArray0[3] = (short) (-1373);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1373));
      assertArrayEquals(new short[] {(short)120, (short) (-17320), (short)4554, (short) (-1373)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {36, 36, (-494), (-613), (-3545), (-72), (-72), (-613), 583}, intArray0);
      assertArrayEquals(new int[] {36, 36, (-494), (-613), (-3545), (-72), (-72), (-613), 583, 1}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(10, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1136.0F;
      floatArray0[3] = (-2903.7F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 2006.34F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 1136.0F, 0.0F, (-2903.7F), 1.0F, 2006.34F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Float float0 = new Float(1136.0F);
      assertNotNull(float0);
      assertEquals(1136.0F, (float)float0, 0.01F);
      
      Float[] floatArray2 = new Float[9];
      floatArray2[0] = (Float) 1.0F;
      floatArray2[1] = (Float) 2006.34F;
      Float float1 = new Float((double) (-2903.7F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2903.7F), (float)float1, 0.01F);
      
      floatArray2[2] = float1;
      floatArray2[3] = (Float) 1.0F;
      floatArray2[4] = (Float) 1.0F;
      floatArray2[5] = (Float) 1136.0F;
      floatArray2[6] = (Float) 1136.0F;
      floatArray2[7] = (Float) 1.0F;
      floatArray2[8] = float0;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2, 1888.1F);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertArrayEquals(new float[] {1.0F, 2006.34F, (-2903.7F), 1.0F, 1.0F, 1136.0F, 1136.0F, 1.0F, 1136.0F}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertEquals(9, floatArray3.length);
      assertEquals(9, floatArray2.length);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertArrayEquals(new float[] {0.0F, 1136.0F, 0.0F, (-2903.7F), 1.0F, 2006.34F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray3);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-68);
      longArray0[1] = (long) (-1132);
      longArray0[2] = (long) (byte)40;
      longArray0[3] = (long) (-1132);
      longArray0[4] = (long) (byte) (-92);
      longArray0[5] = (long) (byte) (-92);
      ArrayUtils.swap(longArray0, (int) (byte)40, (int) (byte) (-92));
      assertArrayEquals(new long[] {(-68L), (-1132L), 40L, (-1132L), (-92L), (-92L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) floatArray2);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, floatArray2.length);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)40;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2856));
      assertArrayEquals(new short[] {(short)40}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)32, (int) (short)32);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      org.evosuite.runtime.Random.setNextRandom(64);
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      Character character1 = new Character('Z');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('Z', (char)character1);
      
      Character character2 = new Character('Z');
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('Z', (char)character2);
      
      Character character3 = Character.valueOf('9');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('9', (char)character3);
      
      Character character4 = Character.valueOf('9');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('9', (char)character4);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'Z');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '\u008F');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-2146293905));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2146293905), (int)integer1);
      
      int[] intArray0 = new int[5];
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer(102);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(102, (int)integer3);
      
      Integer integer4 = Integer.getInteger("", integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(102, (int)integer4);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer5 = ArrayUtils.get(integerArray0, (-65), integer4);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(0, integerArray0.length);
      assertEquals(102, (int)integer5);
      
      int int0 = 250;
      Integer integer6 = new Integer(250);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)int0));
      assertNotNull(integer6);
      assertEquals(250, (int)integer6);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      int int1 = (-613);
      long[] longArray2 = ArrayUtils.subarray(longArray1, (-2146293905), (-613));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      int int2 = (-1607);
      ArrayUtils.swap(intArray0, (-65), (-1607));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      int int3 = 5106;
      Integer integer7 = ArrayUtils.get(integerArray0, 5106);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNull(integer7);
      assertEquals(0, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer4, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      long[] longArray0 = new long[1];
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Integer integer0 = new Integer((-4140));
      assertNotNull(integer0);
      assertEquals((-4140), (int)integer0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (-470), (-470), (-575));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (-1.0F);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, (-72), (-72), (-1130));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-3110), (-72));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift((int[]) null, (-3110));
      Integer integer0 = new Integer((-428));
      assertNotNull(integer0);
      assertEquals((-428), (int)integer0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '@';
      charArray0[3] = 'f';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'(', '(', '@', 'f'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'X';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '[', 5106);
      assertArrayEquals(new char[] {'(', '(', '@', 'f'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 88L);
      assertNull(floatArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '(');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'(', '(', '@', 'f'}, charArray0);
      assertArrayEquals(new char[] {'(', '@', 'f'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 36, (-72), (-72));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-72);
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, (Integer) (-72));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte) (-5);
      byteArray0[8] = (byte)16;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-5));
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-51), (byte)30, (byte) (-114), (byte) (-16), (byte)0, (byte) (-54), (byte) (-5), (byte)16}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.insert((int) (byte)55, byteArray1, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'W';
      charArray0[2] = 'D';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'W', 'D'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.swap((double[]) null, (-1748), 76, (-3008));
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-3008));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-3008), (-1522), (-1.0));
      assertEquals((-1), int0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      
      ArrayUtils.swap(charArray0, 250, (-3008), (-1748));
      assertArrayEquals(new char[] {'\u0000', 'W', 'D'}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(1, int1);
      
      ArrayUtils.reverse(byteArray0, (int) (byte)91, (-64));
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) (-1522));
      assertArrayEquals(new double[] {(-1522.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray3 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {}, intArray3);
      assertNotNull(intArray3);
      assertEquals(0, intArray3.length);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray1 = ArrayUtils.insert((-2140372773), byteArray0, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)91, (byte) (-1)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 71.40367F;
      floatArray0[2] = 0.0F;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short)32;
      shortArray0[3] = (short) (-1094);
      shortArray0[4] = (short) (-1094);
      shortArray0[5] = (short) (-1094);
      shortArray0[6] = (short)32;
      shortArray0[7] = (short)32;
      shortArray0[8] = (short) (-1094);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)32, 2504);
      assertArrayEquals(new short[] {(short)32, (short)32, (short)0, (short) (-1094), (short) (-1094), (short) (-1094), (short)32, (short)32, (short) (-1094)}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(9, shortArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((short) (-1094));
      ArrayUtils.swap(floatArray0, (int) (short) (-1094), (int) (short) (-1094), (int) (short)32);
      assertArrayEquals(new float[] {0.0F, 71.40367F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('Z', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character1);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('Z', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('9');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('9', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('L');
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      assertEquals('L', (char)character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character2);
      assertFalse(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character4));
      assertFalse(character1.equals((Object)character4));
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)character2));
      assertFalse(character2.equals((Object)character3));
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)character0));
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', '9', 'L'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, 4122);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) 'Q';
      doubleArray0[2] = (double) (byte)1;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 81.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {81.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, (double) (byte)1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 81.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {81.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {81.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      ArrayUtils.shift(doubleArray1, 2777, (-201), 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 81.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {81.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, false, 35);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'Q';
      longArray0[1] = (long) (-201);
      ArrayUtils.shift(doubleArray1, (-569));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 81.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {81.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      Float float0 = new Float((-285.7F));
      assertNotNull(float0);
      assertEquals((-285.7F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte) (-68));
      assertArrayEquals(new float[] {(-68.0F), (-68.0F), (-285.7F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertArrayEquals(new float[] {(-68.0F), (-68.0F), (-285.7F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)2;
      longArray0[1] = (long) (byte)40;
      ArrayUtils.swap(longArray0, (int) (byte) (-68), (-1795));
      assertArrayEquals(new long[] {2L, 40L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)2;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(83);
      assertNotNull(integer0);
      assertEquals(83, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(835);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(835, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1214);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1214, (int)integer2);
      
      integerArray0[2] = integer2;
      int int0 = 745;
      Integer integer3 = new Integer(745);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(745, (int)integer3);
      
      integerArray0[3] = integer3;
      try { 
        Integer.decode("The String must not be empty");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"The String must not be empty\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)9354;
      shortArray0[1] = (short)2436;
      shortArray0[2] = (short)2891;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)4;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)4, 980);
      assertArrayEquals(new short[] {(short)9354, (short)2436, (short)2891, (short) (-1), (short)4}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(4, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)4;
      doubleArray0[1] = (-2359.372207);
      doubleArray0[2] = (double) (short)2891;
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short)2891;
      doubleArray0[5] = (double) (short)2891;
      doubleArray0[6] = (double) (short)2891;
      doubleArray0[7] = 1.0;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)2436;
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short)4;
      intArray0[3] = (int) (short)9354;
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = (int) (short)2891;
      intArray0[6] = (int) (short)2891;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9354, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(667, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 667, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      int int0 = 1055;
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      charArray0[1] = '-';
      charArray0[2] = 'd';
      charArray0[3] = '`';
      charArray0[4] = 'D';
      charArray0[5] = 'F';
      charArray0[6] = '1';
      charArray0[7] = 'i';
      charArray0[8] = 'E';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1055, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1055, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-26));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)725);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotNull(bitSet1);
      assertEquals(0, shortArray0.length);
      assertNotSame(bitSet1, bitSet0);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      ArrayUtils.swap((Object[]) doubleArray0, (-26), (-26));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1), (-1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      Integer integer0 = new Integer((-2758));
      assertNotNull(integer0);
      assertEquals((-2758), (int)integer0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1856L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {1856L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 1856L;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      ArrayUtils.swap(objectArray0, (-2758), (-524), (-1921));
      assertEquals(4, objectArray0.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'h');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-1559));
      assertNotNull(short0);
      assertEquals((short) (-1559), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1559));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1559), (short)short1);
      
      shortArray0[1] = short1;
      ArrayUtils.swap((Object[]) shortArray0, (int) shortArray0[1], 1620);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[1] = (-1450L);
      longArray0[3] = 1L;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1751L));
      assertArrayEquals(new long[] {53L, (-1450L), 0L, 1L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-4783);
      shortArray0[1] = (short)512;
      shortArray0[2] = (short) (-1920);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)512;
      doubleArray0[1] = (double) 53L;
      doubleArray0[2] = (double) 53L;
      doubleArray0[3] = (double) (-1751L);
      doubleArray0[4] = (double) 1L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, (int) (short) (-4783));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {512.0, 53.0, 53.0, (-1751.0), 1.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      ArrayUtils.shift((float[]) null, (-61));
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)512;
      intArray0[1] = (-441);
      intArray0[2] = (int) (short) (-1920);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3495), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3495, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-3081));
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (-1.0F);
      floatArray0[1] = 71.40367F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 71.40367F;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 71.40367F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 71.40367F;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((short)1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2130706432);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2130706432, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(441);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(441, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(119);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(119, (int)integer3);
      
      integerArray0[3] = integer3;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(integerArray0, (int) integerArray0[0]);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, integerArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[2] = (byte) (-80);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)33;
      char[] charArray0 = new char[4];
      charArray0[1] = '.';
      charArray0[2] = '\u0000';
      charArray0[3] = 'e';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '.', '\u0000', 'e'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '.', '\u0000', 'e'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)53;
      ArrayUtils.shift(floatArray0, (int) (byte)32, 1969, 384);
      assertArrayEquals(new float[] {53.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, '.');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '.', '\u0000', 'e'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '.', '\u0000', 'e'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'e'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(3, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray3 = ArrayUtils.nullToEmpty(charArray1);
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '.', '\u0000', 'e'}, charArray3);
      assertArrayEquals(new char[] {'\u0000', '.', '\u0000', 'e'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '.', '\u0000', 'e'}, charArray1);
      assertNotNull(charArray3);
      assertEquals(4, charArray3.length);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertSame(charArray3, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray1, charArray3);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-80);
      int int1 = ArrayUtils.indexOf(floatArray0, (float) int0);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-80.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.indexOf((char[]) null, 'W');
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-73), (int) (byte)120);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertArrayEquals(new float[] {(-80.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int3);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-80);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte) (-89);
      shortArray0[2] = (short) (byte) (-73);
      shortArray0[3] = (short) (byte) (-80);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)120);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short) (-89), (short) (-73), (short) (-80)}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short) (-89), (short) (-73), (short) (-80)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'c');
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (-1.0F);
      floatArray0[1] = 71.40367F;
      floatArray0[2] = 0.0F;
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short)6;
      shortArray0[2] = (short) (-1094);
      shortArray0[3] = (short) (-1094);
      shortArray0[4] = (short) (-1094);
      shortArray0[5] = (short) (-1094);
      shortArray0[6] = (short)32;
      shortArray0[7] = (short)32;
      shortArray0[8] = (short) (-1094);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)32, 2504);
      assertArrayEquals(new short[] {(short)32, (short)6, (short) (-1094), (short) (-1094), (short) (-1094), (short) (-1094), (short)32, (short)32, (short) (-1094)}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(9, shortArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((short) (-1094));
      ArrayUtils.swap(floatArray0, (int) (short) (-1094), (int) (short)6, (int) (short)32);
      assertArrayEquals(new float[] {0.0F, 71.40367F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('Z', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character1);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('Z', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('9');
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('9', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('L');
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('L', (char)character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character2);
      assertFalse(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character4));
      assertFalse(character2.equals((Object)character4));
      assertFalse(character2.equals((Object)character3));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', '9', 'L'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1063.97799263121);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-32), (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1805.9));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (byte)1;
      doubleArray3[1] = (double) (byte) (-32);
      doubleArray3[2] = (-1805.9);
      doubleArray3[3] = (-1805.9);
      doubleArray3[4] = (double) (byte) (-32);
      doubleArray3[5] = (double) (byte) (-32);
      double[] doubleArray4 = ArrayUtils.removeElements(doubleArray1, doubleArray3);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, (-32.0), (-1805.9), (-1805.9), (-32.0), (-32.0)}, doubleArray3, 0.01);
      assertNotNull(doubleArray4);
      assertEquals(0, doubleArray4.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(6, doubleArray3.length);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      Integer integer0 = new Integer((-576));
      assertNotNull(integer0);
      assertEquals((-576), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) Integer.MAX_VALUE);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, 'v');
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (float) Integer.MAX_VALUE, 1966);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      Float float0 = new Float((float) (short)4182);
      assertNotNull(float0);
      assertEquals(4182.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) (short)4182);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(4182.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(50.0F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(50.0F, (float)float2, 0.01F);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-72));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals("{1, 2}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1230.499F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-2543);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2543)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)4182;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (short) (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {4182L}, longArray0);
      assertArrayEquals(new long[] {4182L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short) (-2543);
      intArray0[3] = (int) (short) (-2543);
      intArray0[4] = (int) (short) (-2543);
      intArray0[5] = (int) (short)4182;
      int int0 = ArrayUtils.indexOf(intArray0, 2);
      assertArrayEquals(new int[] {(-1), (-1), (-2543), (-2543), (-2543), 4182}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short) (-23391);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1095);
      shortArray0[4] = (short)565;
      shortArray0[5] = (short)4;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)2;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1002));
      assertArrayEquals(new short[] {(short)3, (short) (-23391), (short)0, (short) (-1095), (short)565, (short)4, (short) (-1), (short)2}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 2146693260, (int) (short)4, (int) (short) (-1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)92;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-10));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-38), (byte) (-10), (byte)105, (byte)73, (byte)92}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short)2;
      intArray0[2] = (int) (short) (-23391);
      intArray0[3] = (int) (short)4;
      intArray0[4] = (int) (byte)92;
      intArray0[5] = (int) (byte) (-38);
      intArray0[6] = (int) (short)565;
      intArray0[7] = (int) (byte) (-38);
      intArray0[8] = (int) (short)4;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 565, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      ArrayUtils.swap(charArray0, (-1), Integer.MAX_VALUE, (-1));
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'c';
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 'c';
      floatArray0[2] = (float) 'c';
      floatArray0[3] = (-1350.7146F);
      floatArray0[4] = (float) Integer.MAX_VALUE;
      floatArray0[5] = (float) (-1);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, (-1350.7146F), 99.0F, 99.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 99.0F, (-1));
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, (-1350.7146F), 99.0F, 99.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
      
      Object object1 = null;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, (-1350.7146F), 99.0F, 99.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(6, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-24)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 867L;
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 867L;
      longArray1[1] = 867L;
      longArray1[2] = 867L;
      longArray1[3] = 867L;
      longArray1[4] = 0L;
      longArray1[5] = 867L;
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {867L}, longArray0);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(10, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      byte[] byteArray0 = new byte[8];
      int int0 = ArrayUtils.indexOf((int[]) null, (-1308), (-3592));
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)120;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)120}, shortArray1);
      assertArrayEquals(new short[] {(short)120}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)32, (byte) (-93), (byte) (-27), (byte)33, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '.';
      charArray0[2] = 'z';
      charArray0[3] = 'e';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '.', 'z', 'e'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '.', 'z', 'e'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)53;
      ArrayUtils.reverse(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'e', 'z', '.', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotSame(charArray0, charArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)32;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      ArrayUtils.shift(objectArray0, 1555);
      assertEquals(3, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray1, '\u0000');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'e', 'z', '.', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '.', 'z', 'e'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertTrue(boolean0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '.';
      intArray0[1] = 1555;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) 'z';
      intArray0[4] = (int) '\u0000';
      intArray0[5] = (int) (byte)33;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)32;
      intArray0[8] = (int) (byte) (-27);
      ArrayUtils.shift(intArray0, 3, 69, 1555);
      assertArrayEquals(new int[] {46, 1555, 0, (-27), 122, 0, 33, 0, 32}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      Float float0 = new Float((-2716.0F));
      assertNotNull(float0);
      assertEquals((-2716.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-2716.0F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2716.0F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float1;
      floatArray0[4] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-2716.0F), (-2716.0F), (-2716.0F), (-2716.0F), (-2716.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)54;
      Byte byte1 = new Byte((byte)54);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)54, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)54);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)54, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte)54, (byte)byte3);
      
      byteArray0[2] = byte3;
      byte byte4 = (byte) (-90);
      Byte byte5 = new Byte((byte) (-90));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      assertEquals((byte) (-90), (byte)byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte0);
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte0 == byte4);
      assertNotNull(byte6);
      assertEquals((byte)54, (byte)byte6);
      
      byteArray0[4] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)54, (byte)54, (byte) (-90), (byte)54}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertArrayEquals(new byte[] {(byte)54, (byte)54, (byte)54, (byte) (-90), (byte)54}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) floatArray0[3], (double) byte0);
      assertFalse(byte0 == byte4);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(5, floatArray0.length);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, byte0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byte0 == byte4);
      assertArrayEquals(new byte[] {(byte)54, (byte)54, (byte)54, (byte) (-90), (byte)54}, byteArray1);
      assertArrayEquals(new byte[] {(byte)54, (byte)54, (byte)54, (byte) (-90), (byte)54, (byte)54}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray1, 0.0F, (int) (byte) (-90));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new float[] {(-2716.0F), (-2716.0F), (-2716.0F), (-2716.0F), (-2716.0F)}, floatArray1, 0.01F);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(bitSet1, bitSet0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) (byte)54;
      shortArray0[3] = (short) (byte)54;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short) byte4;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)54, (short)54, (short)54, (short)54, (short)54, (short)54, (short) (-90)}, shortArray1);
      assertArrayEquals(new short[] {(short)54, (short)54, (short)54, (short)54, (short)54, (short)54, (short) (-90)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = 's';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'(', 's'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-2146293905));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2146293905), (int)integer1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-5013);
      intArray0[0] = (-5013);
      intArray0[2] = (-2021161079);
      intArray0[3] = 2432;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-5013), 0, (-2021161079), 2432, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2146293905);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-418.8150304);
      doubleArray0[3] = (double) 2432;
      doubleArray0[4] = (double) (-5013);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-2021161079);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-2.146293905E9), 0.0, (-418.8150304), 2432.0, (-5013.0), 0.0, (-2.021161079E9)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'b';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) 'b';
      intArray0[3] = (int) '7';
      intArray0[4] = 2;
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '7');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'7', '/', '/'}, charArray1);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(3, charArray1.length);
      assertEquals(2, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 0, (double) 98);
      assertArrayEquals(new double[] {98.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, 2832.0, 1, (-2980.219548608694));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-80);
      int int1 = ArrayUtils.indexOf(floatArray0, (float) int0);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-80.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.indexOf((char[]) null, 'W');
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-73), (int) (byte)120);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertArrayEquals(new float[] {(-80.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int3);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-80);
      floatArray1[1] = (float) (-1);
      floatArray1[2] = (float) (byte)2;
      floatArray1[3] = (float) int0;
      floatArray1[4] = (float) (byte) (-80);
      floatArray1[5] = 12.0F;
      floatArray1[6] = (float) (byte)120;
      floatArray1[7] = (float) (-1);
      floatArray1[8] = (float) int0;
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray1, (-767.2291F));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-80.0F), (-1.0F), 2.0F, 4.0F, (-80.0F), 12.0F, 120.0F, (-1.0F), 4.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-80.0F), (-1.0F), 2.0F, 4.0F, (-80.0F), 12.0F, 120.0F, (-1.0F), 4.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(9, floatArray2.length);
      assertEquals(9, floatArray1.length);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 867L;
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 867L;
      longArray1[1] = 867L;
      longArray1[2] = 867L;
      longArray1[3] = 867L;
      longArray1[4] = 0L;
      longArray1[5] = 867L;
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {867L}, longArray0);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(10, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      ArrayUtils.swap((Object[]) null, 127, 127, 127);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = '@';
      charArray0[3] = '@';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '@', '@'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) null, (int) '@');
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      byte byte0 = (byte)40;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[3] = (byte)40;
      ArrayUtils.shift(byteArray0, 8192);
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)0, (byte)40}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.swap((float[]) null, 1848, (int) (byte)40);
      Short short1 = new Short((byte)40);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)40, (short)short1);
      
      ArrayUtils.swap(booleanArray0, 1848, 312);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      
      Byte[] byteArray1 = new Byte[5];
      byteArray1[0] = (Byte) (byte)40;
      byteArray1[1] = (Byte) (byte)40;
      Byte byte1 = new Byte((byte)0);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray1[2] = byte1;
      byteArray1[3] = (Byte) (byte)40;
      byteArray1[4] = (Byte) (byte)40;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, (int) byte0, 1311.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 40, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 867L;
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 867L;
      longArray1[1] = 867L;
      longArray1[2] = 867L;
      longArray1[3] = 867L;
      longArray1[4] = 0L;
      longArray1[5] = 867L;
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {867L}, longArray0);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(10, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      ArrayUtils.shift(charArray0, (-17));
      assertArrayEquals(new char[] {','}, charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-17);
      floatArray0[1] = (float) 867L;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-25.798334F));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-17.0F), 867.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      char[] charArray0 = new char[1];
      ArrayUtils.shift(charArray0, (-1164));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 6;
      intArray0[1] = (-5013);
      intArray0[2] = 98;
      intArray0[4] = 2;
      intArray0[5] = 3173;
      intArray0[6] = 2432;
      intArray0[7] = (-2146735624);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {6, (-5013), 98, 0, 2, 3173, 2432, (-2146735624)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 115;
      intArray0[2] = 2427;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2427;
      intArray1[1] = 2427;
      intArray1[2] = 2427;
      intArray1[3] = 2427;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {115, 0, 2427}, intArray0);
      assertArrayEquals(new int[] {2427, 2427, 2427, 2427}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-350.8809988);
      doubleArray0[1] = 1.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (-484.1564743570078));
      assertArrayEquals(new double[] {(-350.8809988), 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-1), (-1), (-1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1454;
      shortArray0[1] = (short) (-23832);
      shortArray0[2] = (short) (-2108);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-491);
      shortArray0[5] = (short) (-1);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-23832));
      assertArrayEquals(new short[] {(short)1454, (short) (-23832), (short) (-2108), (short)2, (short) (-491), (short) (-1)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(221);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(221, (int)integer0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[0] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'q', (-215));
      assertArrayEquals(new char[] {'$'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      
      Object object0 = ArrayUtils.removeAll(objectArray0[2], bitSet0);
      assertArrayEquals(new char[] {'$'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      assertEquals(1, charArray0.length);
      
      objectArray0[5] = null;
      objectArray0[6] = (Object) integer0;
      Integer integer1 = new Integer(2229);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2229, (int)integer1);
      
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) integer1, 221);
      assertFalse(int1 == int0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(7, objectArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[9];
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2146735624);
      intArray1[1] = 1;
      intArray1[2] = 3173;
      intArray1[3] = (-2146735624);
      intArray1[4] = 3173;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2146735624), 1, 3173, (-2146735624), 3173}, intArray1);
      assertNotNull(intArray2);
      assertEquals(9, intArray2.length);
      assertEquals(9, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-2146735624);
      longArray0[3] = (long) 3173;
      int int0 = ArrayUtils.indexOf(longArray0, (-4119L), 221);
      assertArrayEquals(new long[] {1L, 1L, (-2146735624L), 3173L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1445);
      intArray1[1] = (-1445);
      intArray1[2] = (-1445);
      intArray1[3] = (-1445);
      intArray1[4] = (-1445);
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1445), (-1445), (-1445), (-1445), (-1445)}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      char[] charArray0 = new char[3];
      ArrayUtils.shift(charArray0, (-1658));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      int int0 = 48;
      ArrayUtils.shift((char[]) null, 48);
      long[] longArray0 = new long[7];
      longArray0[0] = 57L;
      longArray0[1] = (long) 48;
      longArray0[2] = (long) 48;
      longArray0[3] = (long) 48;
      longArray0[4] = (long) 48;
      longArray0[5] = (long) 48;
      longArray0[6] = (-1896L);
      int int1 = ArrayUtils.lastIndexOf(longArray0, 48L, (-1770));
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {57L, 48L, 48L, 48L, 48L, 48L, (-1896L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-485);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-485), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -485, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (int) (byte)0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      charArray0[1] = 'I';
      charArray0[2] = '>';
      charArray0[3] = 'I';
      charArray0[4] = '$';
      charArray0[5] = '5';
      ArrayUtils.shift(charArray0, (-17));
      assertArrayEquals(new char[] {'5', 'v', 'I', '>', 'I', '$'}, charArray0);
      assertEquals(6, charArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'I';
      floatArray0[1] = (float) (-17);
      floatArray0[2] = 779.721F;
      floatArray0[3] = (float) 'v';
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 'v';
      floatArray0[6] = (float) (-17);
      floatArray0[7] = (float) '5';
      floatArray0[8] = (float) (int)integerArray0[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 2751.7952F);
      assertArrayEquals(new float[] {73.0F, (-17.0F), 779.721F, 118.0F, (-1.0F), 118.0F, (-17.0F), 53.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      Long long0 = new Long(2214);
      assertNotNull(long0);
      assertEquals(2214L, (long)long0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)47;
      ArrayUtils.swap(byteArray0, (-6810), (-1), (int) (byte)12);
      assertArrayEquals(new byte[] {(byte)12, (byte)47, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer((-626));
      assertNotNull(integer0);
      assertEquals((-626), (int)integer0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0, 2214);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 1197);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte)7;
      ArrayUtils.swap(byteArray0, (-777), (int) (byte)2, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0, (byte)7}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-1017L);
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '', (int) (byte)0);
      assertArrayEquals(new char[] {'', '', '', ''}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '';
      intArray0[1] = (int) '';
      ArrayUtils.shift(intArray0, (int) (byte)0, 127, 0);
      assertArrayEquals(new int[] {127, 127}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '';
      floatArray0[1] = (float) 127;
      floatArray0[2] = (float) '';
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      floatArray0[7] = (float) '';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 169.71335F);
      assertArrayEquals(new float[] {127.0F, 127.0F, 127.0F, 0.0F, 0.0F, 0.0F, 0.0F, 127.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1863.977888197674));
      assertNotNull(double0);
      assertEquals((-1863.977888197674), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1863.977888197674), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1863.977888197674), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[1]);
      assertArrayEquals(new double[] {(-1863.977888197674), (-1863.977888197674), (-1863.977888197674)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 239;
      intArray0[1] = (-552);
      intArray0[2] = 3091;
      intArray0[3] = (-1073741823);
      intArray0[4] = (-365);
      intArray0[5] = (-3111);
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (-3111));
      assertNull(floatArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, ';');
      assertNull(charArray0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1863.977888197674);
      doubleArray2[1] = (double) doubleArray0[0];
      doubleArray2[2] = (double) (-1073741823);
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-1863.977888197674), (-1863.977888197674), (-1.073741823E9)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1863.977888197674)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1863.977888197674), (-1863.977888197674), (-1863.977888197674)}, doubleArray1, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      integerArray0[2] = integer1;
      int[] intArray0 = new int[6];
      intArray0[0] = (-3625);
      integerArray0[1] = (Integer) int0;
      intArray0[2] = 4;
      Integer integer2 = Integer.getInteger(":^", (Integer) (-3625));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-3625), (int)integer2);
      
      Integer integer3 = ArrayUtils.get(integerArray0, 65, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(5, integerArray0.length);
      assertEquals(4, (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      Object object0 = ArrayUtils.get((Object[]) integerArray0, 2166);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNull(object0);
      assertEquals(5, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      
      Integer integer4 = new Integer((-1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-1), (int)integer4);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(object1.equals((Object)int0));
      assertFalse(object1.equals((Object)integer2));
      assertFalse(object1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer1));
      assertFalse(object1.equals((Object)integer3));
      assertNotNull(object1);
      assertEquals((-1), object1);
      
      Integer integer5 = new Integer((-1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)object1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals((-1), (int)integer5);
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray1, (Object) integer1, (-3625));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer0.equals((Object)integer4));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer0.equals((Object)object1));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(int1 == int0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)object1));
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer5));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(5, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertEquals(0, int1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'b';
      floatArray0[1] = (float) (-617);
      floatArray0[2] = (float) 'b';
      floatArray0[3] = (float) 'b';
      ArrayUtils.shift(floatArray0, (-1), (-1), 3733);
      assertArrayEquals(new float[] {98.0F, (-617.0F), 98.0F, 98.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      Float[] floatArray1 = new Float[1];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray1[0] = float0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 's');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 36, (-72), (-72));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-72);
      intArray0[1] = 36;
      intArray0[2] = (-72);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-72), 36, (-72)}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      float[] floatArray0 = new float[8];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean(false);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      Boolean boolean5 = new Boolean(false);
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      Boolean boolean6 = Boolean.valueOf(false);
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      Boolean[] booleanArray1 = new Boolean[7];
      booleanArray1[0] = boolean0;
      booleanArray1[1] = boolean1;
      booleanArray1[2] = boolean5;
      booleanArray1[3] = boolean3;
      Boolean boolean7 = Boolean.valueOf((boolean) boolean3);
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean3.equals((Object)boolean5));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean4));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean6));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray1[4] = boolean7;
      booleanArray1[5] = boolean3;
      booleanArray1[6] = boolean2;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray0);
      
      Integer integer0 = Integer.getInteger((String) null);
      assertNull(integer0);
      
      Integer integer1 = new Integer(36);
      assertNotNull(integer1);
      assertEquals(36, (int)integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) null, (Object) integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 36, (-72), (-72));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-72);
      intArray0[1] = 36;
      intArray0[2] = (-72);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-72), 36, (-72)}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-72);
      floatArray0[1] = (float) (-72);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1063.97799263121);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 1.0, 1063.97799263121, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, 1063.97799263121);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 1.0, 1063.97799263121, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1063.97799263121}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_INT_ARRAY, (int) (byte)91);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 1.0, 1063.97799263121, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1063.97799263121}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.swap(doubleArray0, 62, 62, 120);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 88.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short short0 = new Short((short) (-12126));
      assertNotNull(short0);
      assertEquals((short) (-12126), (short)short0);
      
      Short short1 = new Short((short) (-12126));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-12126), (short)short1);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-2528.7303660499997));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2528.7305F), (float)float1, 0.01F);
      
      Float float2 = new Float(1.0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (short) (-12126));
      assertNull(floatArray0);
      
      ArrayUtils.swap(doubleArray1, 84, 84, (int) (short) (-12126));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = 'W';
      charArray0[2] = '4';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'F', 'W', '4'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, (-1522));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.swap((double[]) null, (-1748), 76, (-3008));
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-3008));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-3008), (-1522), (-1.0));
      assertEquals((-1), int0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      ArrayUtils.swap(charArray0, 250, (-3008), (-1748));
      assertArrayEquals(new char[] {'F', 'W', '4'}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)91);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)114, (byte)91, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(1, int1);
      
      ArrayUtils.reverse(byteArray0, (int) (byte)91, (-64));
      assertArrayEquals(new byte[] {(byte)114, (byte)91, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) (-1522));
      assertArrayEquals(new double[] {(-1522.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray3 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new int[] {}, intArray3);
      assertNotNull(intArray3);
      assertEquals(0, intArray3.length);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'c';
      ArrayUtils.swap(charArray0, (-4220), (-3842), (-4220));
      assertArrayEquals(new char[] {'V', 'c'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-3842));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1863.977888197674));
      assertNotNull(double0);
      assertEquals((-1863.977888197674), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1863.977888197674), (double)double1, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1094);
      shortArray0[1] = (short)32;
      shortArray0[2] = (short)32;
      shortArray0[3] = (short)32;
      shortArray0[4] = (short)32;
      shortArray0[5] = (short) (-1094);
      shortArray0[6] = (short)32;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1535, 1495);
      assertArrayEquals(new short[] {(short) (-1094), (short)32, (short)32, (short)32, (short)32, (short) (-1094), (short)32}, shortArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(7, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, 36, (int) (short)32);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      int int0 = ArrayUtils.indexOf(charArray0, '3', (int) (short)1535);
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      long[] longArray0 = new long[4];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 4783);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift(longArray0, 4783, 0, (-44));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Integer integer0 = new Integer(4783);
      assertNotNull(integer0);
      assertEquals(4783, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1419), 299);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (-1419);
      ArrayUtils.shift(floatArray0, (-1));
      assertArrayEquals(new float[] {(-1419.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Integer integer0 = new Integer((-2634));
      assertNotNull(integer0);
      assertEquals((-2634), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 2146564348);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-125));
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-125);
      doubleArray0[1] = (double) (byte) (-125);
      doubleArray0[2] = (double) (byte) (-125);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2528.63036605), (-1), (-60.094));
      assertArrayEquals(new double[] {(-125.0), (-125.0), (-125.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-60.094));
      assertArrayEquals(new double[] {(-125.0), (-125.0), (-125.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-125));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean2);
      
      Object[] objectArray0 = new Object[1];
      doubleArray0[0] = (-125.0);
      ArrayUtils.swap(objectArray0, (int) (byte) (-125), (-1));
      assertEquals(1, objectArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (byte) (-125);
      floatArray0[6] = 760.2F;
      floatArray0[8] = (float) (byte) (-125);
      ArrayUtils.shift(doubleArray0, (-1));
      assertArrayEquals(new double[] {(-125.0), (-125.0), (-125.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean3);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer integer0 = new Integer((-1621));
      assertNotNull(integer0);
      assertEquals((-1621), (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray0, (Object) integer0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-80);
      int int1 = ArrayUtils.indexOf(floatArray0, (float) int0);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-80.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.indexOf((char[]) null, 'W');
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-74), (int) (byte)120);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertArrayEquals(new float[] {(-80.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int3);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-80);
      floatArray1[1] = (float) (-1);
      floatArray1[2] = (float) (byte)2;
      floatArray1[3] = (float) int0;
      floatArray1[4] = (float) (byte) (-80);
      floatArray1[5] = 12.0F;
      floatArray1[6] = (float) (byte)120;
      floatArray1[7] = (float) (-1);
      floatArray1[8] = (float) int0;
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray1, (-767.2291F));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-80.0F), (-1.0F), 2.0F, 4.0F, (-80.0F), 12.0F, 120.0F, (-1.0F), 4.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-80.0F), (-1.0F), 2.0F, 4.0F, (-80.0F), 12.0F, 120.0F, (-1.0F), 4.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(9, floatArray2.length);
      assertEquals(9, floatArray1.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, (Integer) int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      Character character0 = new Character('Q');
      assertNotNull(character0);
      assertEquals('Q', (char)character0);
      
      Character character1 = Character.valueOf('n');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('n', (char)character1);
      
      Character character2 = new Character('V');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('V', (char)character2);
      
      Boolean boolean0 = new Boolean("Exactly one type of input must be provided in the @");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(108);
      assertNotNull(integer0);
      assertEquals(108, (int)integer0);
      
      Integer integer1 = new Integer(2332);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2332, (int)integer1);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurences((Integer[]) null, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[3] = (byte)40;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)0, (byte)40}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'}'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1865);
      assertNotNull(integer0);
      assertEquals(1865, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short) (-559));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-559), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1564);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1564, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(4, integerArray0.length);
      assertEquals(1564, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, (Integer) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      Short short0 = new Short((short)123);
      assertNotNull(short0);
      assertEquals((short)123, (short)short0);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)123;
      shortArray0[3] = (short) (-559);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)123, (short) (-559)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)123;
      longArray0[1] = (long) (short)123;
      longArray0[2] = (long) (short)123;
      longArray0[3] = (long) (short)123;
      longArray0[4] = 578L;
      longArray0[5] = (long) (short) (-559);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 123L);
      assertArrayEquals(new long[] {123L, 123L, 123L, 123L, 578L, (-559L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      char char0 = 'c';
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      int int0 = (-1);
      ArrayUtils.swap(charArray0, (-1), Integer.MAX_VALUE, (-1));
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'c';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) 'c';
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'c', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'f';
      charArray0[3] = '/';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'2', 'f', '\u0000', '/'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'f';
      longArray0[1] = (long) '2';
      boolean boolean3 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new long[] {102L, 50L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-99);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-99));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-99), (byte) (-99), (byte) (-99), (byte) (-99), (byte) (-99), (byte) (-99)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean4 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertArrayEquals(new char[] {'2', 'f', '\u0000', '/'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean4);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-99), (byte) (-99), (byte) (-99), (byte) (-99), (byte) (-99), (byte) (-99)}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null, 1L);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 3616);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1204);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 3616;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1204), (-1), (-1), 3616, (-1), (-1)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(12, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1204);
      doubleArray0[1] = 1352.7297;
      ArrayUtils.shift(doubleArray0, (-862));
      assertArrayEquals(new double[] {(-1204.0), 1352.7297}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short)5330);
      assertArrayEquals(new short[] {(short)5330}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-693), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -693, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      Float float0 = new Float((-2716.0F));
      assertNotNull(float0);
      assertEquals((-2716.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-2716.0F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2716.0F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float1;
      floatArray0[4] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-2716.0F), (-2716.0F), (-2716.0F), (-2716.0F), (-2716.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)54;
      Byte byte1 = new Byte((byte)54);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)54, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)54);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)54, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)54, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-90));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      assertEquals((byte) (-90), (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      assertEquals((byte)54, (byte)byte5);
      
      byteArray0[4] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)54, (byte)54, (byte) (-90), (byte)54}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertArrayEquals(new byte[] {(byte)54, (byte)54, (byte)54, (byte) (-90), (byte)54}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) floatArray0[3], (double) byte0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(5, floatArray0.length);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, byte0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)54, (byte)54, (byte)54, (byte) (-90), (byte)54}, byteArray1);
      assertArrayEquals(new byte[] {(byte)54, (byte)54, (byte)54, (byte) (-90), (byte)54, (byte)54}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(221);
      assertNotNull(integer0);
      assertEquals(221, (int)integer0);
      
      Integer integer1 = new Integer(221);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(221, (int)integer1);
      
      Integer integer2 = Integer.getInteger("DefaultLocale", 442);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(442, (int)integer2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)126, 1);
      assertArrayEquals(new byte[] {(byte)126}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)126, 1404);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)126}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int1);
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, (-1263));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)125;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)125);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)125}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, int0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte) (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (-989);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte) (-1);
      int int1 = ArrayUtils.indexOf(intArray0, (int) (byte) (-1), Integer.MAX_VALUE);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-1), (-1), (-989), (-1), (-1)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'c';
      ArrayUtils.swap(charArray0, (-4220), (-3842), (-4220));
      assertArrayEquals(new char[] {'V', 'c'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte) (-85);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)65);
      assertArrayEquals(new byte[] {(byte)85, (byte)65, (byte) (-50), (byte)2, (byte)50, (byte)76, (byte) (-50), (byte) (-85)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1136;
      longArray0[1] = (-1L);
      longArray0[2] = (long) 0;
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-2));
      assertNull(byteArray0);
      
      Boolean[] booleanArray1 = new Boolean[0];
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = '=';
      charArray0[2] = ';';
      charArray0[3] = '(';
      charArray0[4] = 'O';
      charArray0[5] = '\'';
      charArray0[6] = 'b';
      charArray0[7] = '8';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'^', '=', ';', '(', 'O', '\'', 'b', '8'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-1398));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '0');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'^', '=', ';', '(', 'O', '\'', 'b', '8'}, charArray0);
      assertArrayEquals(new char[] {'^', '=', ';', '(', 'O', '\'', 'b', '8'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(646.29954203245);
      assertNotNull(double0);
      assertEquals(646.29954203245, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1398));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1398.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2964.46703);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(2964.46703, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {646.29954203245, (-1398.0), 2964.46703}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean0);
      assertFalse(boolean0.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-1521.2F));
      assertArrayEquals(new float[] {(-1521.2F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)123);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)123;
      intArray0[1] = (int) (byte)123;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 123, 123);
      assertArrayEquals(new int[] {123, 123}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)123);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)123, 123);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '%';
      charArray0[2] = ')';
      charArray0[3] = 'l';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'\u0000', '%', ')', 'l'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      Integer integer0 = Integer.getInteger("r", (Integer) 123);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(123, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1136.0F;
      floatArray0[3] = (-2903.7F);
      floatArray0[4] = 1.0F;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(1, int0);
      
      int int1 = 56;
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 56;
      intArray0[2] = 56;
      intArray0[3] = 56;
      intArray0[4] = 56;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 56, 322);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 56, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1559L));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray2 = new boolean[3];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray2));
      assertEquals(3, booleanArray2.length);
      assertFalse(boolean0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'b';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) 'b';
      intArray0[3] = (int) '7';
      intArray0[4] = 2;
      intArray0[5] = (int) '3';
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {98, 55, 98, 55, 2, 51, 0, 0}, intArray0);
      assertArrayEquals(new int[] {98, 55, 98, 55, 2, 51, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 1856L;
      Object object0 = ArrayUtils.toPrimitive((Object) 98);
      assertNotNull(object0);
      assertEquals(98, object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 98;
      ArrayUtils.reverse(objectArray0);
      assertEquals(3, objectArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.shift(objectArray0, 55);
      assertEquals(3, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'G');
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 1856L);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 585, (float) 585);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 585, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, 0, (-2276.5444F));
      assertArrayEquals(new float[] {(-2276.5444F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-38L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-38L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      char char0 = '4';
      Character character0 = Character.valueOf('4');
      assertNotNull(character0);
      assertEquals('4', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('C');
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('C', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) char0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {52.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer integer0 = Integer.getInteger("", (int) char0);
      assertNotNull(integer0);
      assertEquals(52, (int)integer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)119;
      ArrayUtils.shift(byteArray0, 1848);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-1), (byte)119, (byte)119, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ArrayUtils.swap(floatArray1, (int) (byte)72, 312);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {52.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) (char)character1;
      Short short0 = new Short((byte)72);
      assertNotNull(short0);
      assertEquals((short)72, (short)short0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (int) (short) (-1216), (int) (short) (-1216));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray1, 312, (float) 312);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 312, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-922.0974368675);
      doubleArray0[1] = (-4628.74771146223);
      doubleArray0[2] = 2769.22812827821;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-442.54150454961115), (-4628.74771146223));
      assertArrayEquals(new double[] {(-922.0974368675), (-4628.74771146223), 2769.22812827821}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-112);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-56));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-56), (byte) (-112), (byte) (-25), (byte)36, (byte)2, (byte) (-112)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-112), (byte) (-25), (byte)36, (byte)2, (byte) (-112)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = (long) (byte) (-112);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (byte) (-56);
      longArray0[4] = 1119L;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (byte) (-112);
      longArray0[7] = 0L;
      longArray0[8] = (long) (byte) (-112);
      int int1 = ArrayUtils.indexOf(longArray0, 1L);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {1L, (-112L), (-1L), (-56L), 1119L, 0L, (-112L), 0L, (-112L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)123);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)123;
      intArray0[1] = (int) (byte)123;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 123, 123);
      assertArrayEquals(new int[] {123, 123}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)123);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)123, 123);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = '%';
      charArray0[2] = ')';
      charArray0[3] = 'l';
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)3, (int) (byte)3);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int2);
      
      ArrayUtils.reverse(byteArray0, 1, (-124));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)96);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 't';
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 116.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 678.49764, 3018.5936457);
      assertArrayEquals(new double[] {0.0, 116.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-922.0974368675);
      doubleArray0[1] = (-4628.74771146223);
      doubleArray0[2] = 2769.22812827821;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-442.54150454961115), (-3060.377864655));
      assertArrayEquals(new double[] {(-922.0974368675), (-4628.74771146223), 2769.22812827821}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-78));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte) (-112), (byte) (-25), (byte)36, (byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-112), (byte) (-25), (byte)36, (byte)2, (byte)2}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'm';
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short)16;
      shortArray0[2] = (short)16;
      shortArray0[4] = (short)16;
      shortArray0[5] = (short)1301;
      shortArray0[6] = (short)1301;
      shortArray0[7] = (short)16;
      shortArray0[8] = (short)1301;
      ArrayUtils.shift(shortArray0, (int) (short)1301);
      assertArrayEquals(new short[] {(short)16, (short)1301, (short)1301, (short)16, (short)1301, (short)16, (short)16, (short)16, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'g';
      longArray0[1] = (long) (short)16;
      longArray0[2] = (long) 'g';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {103L, 16L, 103L}, longArray0);
      assertArrayEquals(new long[] {103L, 16L, 103L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {103L, 16L, 103L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '5');
      assertArrayEquals(new char[] {'g', 'g', 'm', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)1301;
      doubleArray0[1] = (double) (short)1301;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)1301);
      assertArrayEquals(new double[] {1301.0, 1301.0}, doubleArray0, 0.01);
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '2');
      assertNull(charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '2';
      intArray0[1] = (int) '2';
      intArray0[2] = (int) '2';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-125));
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-125);
      doubleArray0[2] = (double) (byte) (-125);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2528.63036605), (-1), (-60.094));
      assertArrayEquals(new double[] {(-125.0), 0.0, (-125.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-60.094));
      assertArrayEquals(new double[] {(-125.0), 0.0, (-125.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-125));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-125.0), (-1));
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-125.0), 0.0, (-125.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "', is neither of type Map.Entry nor an Array";
      stringArray0[1] = ",";
      stringArray0[2] = "[Xq4}$5ht-";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-1017L);
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '', (int) (byte)0);
      assertArrayEquals(new char[] {'', '', '', ''}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (byte)40);
      assertNull(floatArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ';');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'', '', '', ''}, charArray0);
      assertArrayEquals(new char[] {'', '', '', ''}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      org.evosuite.runtime.Random.setNextRandom((byte)0);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)40;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)40;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)40, (short)0, (short)0, (short)40}, shortArray0);
      assertArrayEquals(new short[] {(short)40, (short)40}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "b6H-Z7j";
      stringArray0[1] = "JrY?o";
      stringArray0[2] = "The type must not be null";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = (-3435L);
      longArray0[3] = (-41L);
      longArray0[4] = (-579L);
      longArray0[5] = (-3126L);
      int int0 = 90;
      Integer integer0 = new Integer(90);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(90, (int)integer0);
      
      Integer integer1 = new Integer(90);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(90, (int)integer1);
      
      Integer integer2 = new Integer(90);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(90, (int)integer2);
      
      Integer integer3 = new Integer(90);
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(90, (int)integer3);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[1] = integer2;
      integerArray0[2] = integer2;
      integerArray0[3] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertArrayEquals(new int[] {90, 90, 90, 90}, intArray0);
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte) (-1), (byte) (-107), (byte) (-107), (byte) (-1)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-3435L), (-41L), (-579L), (-3126L), 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte) (-107), 1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)40, (byte)40}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-559);
      shortArray0[1] = (short) (byte)40;
      shortArray0[2] = (short) (byte)40;
      shortArray0[3] = (short) (byte)40;
      shortArray0[4] = (short) (byte)40;
      shortArray0[5] = (short) (-559);
      shortArray0[6] = (short)1136;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-559), (short)40, (short)40, (short)40, (short)40, (short) (-559), (short)1136}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)57;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)57;
      byteArray1[3] = (byte)57;
      byteArray1[4] = (byte)45;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)45, (byte) (-86), (byte)57}, byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte)40, (byte)57, (byte)57, (byte)45}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-559);
      shortArray0[1] = (short) (byte)45;
      shortArray0[2] = (short) (byte)45;
      shortArray0[3] = (short) (byte)40;
      shortArray0[4] = (short) (byte)40;
      shortArray0[5] = (short) (byte)45;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-559), (short)45, (short)45, (short)40, (short)40, (short)45}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'V';
      charArray0[4] = '<';
      charArray0[5] = '3';
      charArray0[6] = 'L';
      charArray0[7] = ' ';
      charArray0[8] = 'L';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'d', 'T', 'T', 'V', '<', '3', 'L', ' ', 'L'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = new int[3];
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Short short0 = new Short((short)16);
      assertNotNull(short0);
      assertEquals((short)16, (short)short0);
      
      Short short1 = new Short((short)0);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      Short short2 = new Short((short)504);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)504, (short)short2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertArrayEquals(new char[] {'y'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)504;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) 'y';
      intArray0[4] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 504, (int) (short)504);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {504, 0, 0, 121, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[1] = (-1450L);
      longArray0[3] = 1L;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1751L));
      assertArrayEquals(new long[] {53L, (-1450L), 0L, 1L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-4783);
      shortArray0[1] = (short)512;
      shortArray0[2] = (short) (-1920);
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {53L, (-1450L), 0L, 1L, 0L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {53L, (-1450L), 0L, 1L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) (short) (-1920), 0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {53L, (-1450L), 0L, 1L, 0L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {53L, (-1450L), 0L, 1L, 0L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray1.length);
      assertEquals((-1), int0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.contains(longArray1, (-1682L));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {53L, (-1450L), 0L, 1L, 0L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {53L, (-1450L), 0L, 1L, 0L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(boolean1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(intArray0, (int) (short)512, 322, 2054);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      long[] longArray0 = new long[12];
      longArray0[0] = (-2604L);
      longArray0[1] = 383L;
      longArray0[2] = 90L;
      longArray0[3] = (-2101L);
      longArray0[4] = 1L;
      longArray0[5] = (-1560L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(12, longArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((Integer[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)291;
      shortArray0[1] = (short) (-2434);
      shortArray0[2] = (short)1245;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)4;
      shortArray0[6] = (short)1301;
      shortArray0[7] = (short)16;
      shortArray0[8] = (short)48;
      ArrayUtils.shift(shortArray0, 2143);
      assertArrayEquals(new short[] {(short)48, (short)291, (short) (-2434), (short)1245, (short) (-1), (short) (-1), (short)4, (short)1301, (short)16}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1599));
      assertNotNull(integer0);
      assertEquals((-1599), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short) (-2434));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2434), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(82);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(82, (int)integer2);
      
      integerArray0[2] = integer2;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      char char0 = '4';
      Character character0 = Character.valueOf('4');
      assertNotNull(character0);
      assertEquals('4', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('C');
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('C', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) char0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {52.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer integer0 = Integer.getInteger("", (int) char0);
      assertNotNull(integer0);
      assertEquals(52, (int)integer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)119;
      ArrayUtils.shift(byteArray0, 1848);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-1), (byte)119, (byte)119, (byte)52}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ArrayUtils.swap(floatArray1, (int) (byte)72, 312);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {52.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) (char)character1;
      Short short0 = new Short((byte)72);
      assertNotNull(short0);
      assertEquals((short)72, (short)short0);
      
      Short short1 = new Short((short) (-1216));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1216), (short)short1);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-926));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-28106));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = '4';
      charArray0[2] = '[';
      charArray0[3] = 'U';
      charArray0[4] = 't';
      charArray0[5] = 'L';
      charArray0[6] = 'w';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '*');
      assertArrayEquals(new char[] {'~', '4', '[', 'U', 't', 'L', 'w'}, charArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(7, charArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, (-673));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals("{0, 2, 3}", bitSet1.toString());
      assertEquals(3, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(4, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertNotNull(bitSet1);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(bitSet1, bitSet0);
      
      Integer integer0 = Integer.valueOf((-673));
      assertNotNull(integer0);
      assertEquals((-673), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "9!vX7(");
      assertNotNull(string0);
      assertEquals("-673", string0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer1 = new Integer(1620);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1620, (int)integer1);
      
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 640);
      assertArrayEquals(new int[] {1620, (-673), (-673), (-673)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)123);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      ArrayUtils.shift(byteArray0, (int) (byte)33);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)84;
      shortArray0[1] = (short) (byte)123;
      shortArray0[2] = (short) (byte)33;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)123, (short)33, (short)84}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      ArrayUtils.shift((double[]) null, (int) (short)84, (int) (short)84, (-1712));
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (int) (short)123, (int) (short)33);
      assertNull(longArray0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 2636);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)53;
      byte byte1 = (byte)32;
      byteArray0[2] = (byte)32;
      byte byte2 = (byte) (-93);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)32;
      byte byte3 = (byte)33;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)32;
      ArrayUtils.shift(byteArray0, (int) (byte) (-93));
      assertArrayEquals(new byte[] {(byte)32, (byte) (-93), (byte)32, (byte)33, (byte)32, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[1];
      int int0 = (-3378);
      intArray0[0] = (-3378);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {(-3378)}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      ArrayUtils.shift((double[]) null, (int) (byte) (-93), 3635, (int) (byte) (-93));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3378, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)27);
      assertNotNull(byte0);
      assertEquals((byte)27, (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)27}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)118;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(16, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[7];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2146293905));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2146293905), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2146293905));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-2146293905), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(84);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(84, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(32);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(32, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
      
      integerArray0[6] = integer6;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1151));
      assertArrayEquals(new int[] {0, (-2146293905), (-2146293905), 84, 0, 32, 0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)5;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-1), (byte)40, (byte)5}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-1), (byte)40, (byte)5, (byte) (-107), (byte) (-1), (byte)40, (byte)5}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (-1539));
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[2];
      intArray0[0] = 629;
      intArray0[1] = 127;
      ArrayUtils.shift((Object[]) null, 85);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom(1069L);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-66));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse(intArray0, (-1), 1114111);
      assertArrayEquals(new int[] {127, 629}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1136;
      intArray0[1] = (int) (short)1136;
      intArray0[2] = (-62);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {1136, 1136, (-62)}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1136;
      longArray0[1] = (long) 1136;
      longArray0[2] = 2070L;
      longArray0[3] = (long) (-62);
      longArray0[4] = 867L;
      longArray0[5] = 867L;
      longArray0[6] = (long) 1136;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1136L, 1136L, 2070L, (-62L), 867L, 867L, 1136L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)1136;
      shortArray0[2] = (short) (-1721);
      shortArray0[3] = (short)1136;
      shortArray0[4] = (short)1136;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1136, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '[';
      charArray0[2] = '6';
      charArray0[3] = '4';
      charArray0[4] = '<';
      charArray0[5] = 'C';
      charArray0[6] = 'c';
      short[] shortArray0 = new short[0];
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertTrue(boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = new short[2];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)1056;
      shortArray2[1] = (short)128;
      short[] shortArray3 = ArrayUtils.removeElements(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1056, (short)128}, shortArray2);
      assertArrayEquals(new short[] {(short)1056, (short)128}, shortArray3);
      assertNotNull(shortArray3);
      assertEquals(0, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertEquals(2, shortArray3.length);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-27);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte) (-27)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-27);
      floatArray0[1] = (float) (short)1301;
      floatArray0[2] = (float) (byte) (-27);
      floatArray0[3] = (-1747.6F);
      floatArray0[4] = (-1891.8806F);
      floatArray0[5] = (float) (byte) (-27);
      floatArray0[6] = (float) (short)1301;
      ArrayUtils.shift(floatArray0, (int) (short)48, 2568, (int) (short) (-1));
      assertArrayEquals(new float[] {(-27.0F), 1301.0F, (-27.0F), (-1747.6F), (-1891.8806F), (-27.0F), 1301.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = 0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int1);
      assertFalse(int1 == int0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-405));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals((-405), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(50);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(50, (int)integer5);
      
      Integer integer6 = ArrayUtils.get(integerArray0, 1172, integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      assertEquals(5, integerArray0.length);
      assertEquals(50, (int)integer6);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer6);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      int int2 = ArrayUtils.hashCode((Object) integerArray0[3]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(5, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) 50;
      doubleArray0[2] = (double) (-405);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4.0, 50.0, (-405.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 50.0, (-405.0), 4.0, 50.0, (-405.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(2, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((float[]) null, 1196.0F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-472);
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-472), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[1] = (-1450L);
      longArray0[3] = 1L;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1751L));
      assertArrayEquals(new long[] {53L, (-1450L), 0L, 1L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-4783);
      shortArray0[1] = (short)512;
      shortArray0[2] = (short) (-1920);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (-1);
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-4783), (short)512, (short) (-1920), (short)1, (short) (-1)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean1);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean2 = ArrayUtils.isArrayIndexValid(integerArray0, (-324));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)32;
      ArrayUtils.shift(byteArray0, (int) (byte) (-93));
      assertArrayEquals(new byte[] {(byte)32, (byte) (-93), (byte)32, (byte)33, (byte)32, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-3378);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {(-3378)}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      ArrayUtils.shift((double[]) null, (int) (byte) (-93), 3635, (int) (byte) (-93));
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)53;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = 53L;
      longArray0[3] = (long) (byte)53;
      longArray0[4] = (long) (byte)32;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)32, (-3378));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {53L, 0L, 53L, 53L, 32L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (byte)32);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-3378)}, intArray1);
      assertArrayEquals(new int[] {(-3378)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1041;
      longArray0[1] = (long) 5;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1041, 1041);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1041L, 5L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      ArrayUtils.shift(intArray0, 5, 5, 5);
      assertArrayEquals(new int[] {5}, intArray0);
      assertEquals(1, intArray0.length);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift((double[]) null, 1041, 3635, (-2003));
      ArrayUtils.shift(longArray0, 3616, (-252), 1041);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {1041L, 5L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.shift((double[]) null, 552, 2147097062, (-10));
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = 10;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {10, 10}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[2] = 'O';
      charArray0[3] = 'N';
      short[] shortArray0 = new short[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-545), 0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertEquals(0, shortArray0.length);
      assertNotSame(bitSet1, bitSet0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 338.510704091;
      doubleArray0[1] = 1063.97799263121;
      doubleArray0[2] = (double) 'r';
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 'r';
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 10;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {338.510704091, 1063.97799263121, 10.0, 10.0, 0.0, 114.0, 0.0, 10.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {338.510704091, 1063.97799263121, 114.0, 10.0, 10.0, 0.0, 114.0, 0.0, 10.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2299;
      longArray0[1] = (long) (-1294);
      longArray0[2] = 831L;
      longArray0[3] = (long) 0;
      longArray0[4] = 831L;
      longArray0[5] = 831L;
      longArray0[6] = (long) 0;
      longArray0[7] = 831L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 831L, (-552));
      assertArrayEquals(new long[] {2299L, (-1294L), 831L, 0L, 831L, 831L, 0L, 831L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals((-1), int0);
      
      Integer integer0 = ArrayUtils.get((Integer[]) null, (-252));
      assertNull(integer0);
      
      MutableInt mutableInt0 = new MutableInt(2299);
      assertEquals((byte) (-5), mutableInt0.byteValue());
      assertEquals(2299, (int)mutableInt0.toInteger());
      assertEquals(2299, (int)mutableInt0.getValue());
      assertEquals("2299", mutableInt0.toString());
      assertEquals(2299.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2299.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2299L, mutableInt0.longValue());
      assertEquals((short)2299, mutableInt0.shortValue());
      assertEquals(2299, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.toInteger();
      assertFalse(integer1.equals((Object)int0));
      assertEquals((byte) (-5), mutableInt0.byteValue());
      assertEquals(2299, (int)mutableInt0.toInteger());
      assertEquals(2299, (int)mutableInt0.getValue());
      assertEquals("2299", mutableInt0.toString());
      assertEquals(2299.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2299.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2299L, mutableInt0.longValue());
      assertEquals((short)2299, mutableInt0.shortValue());
      assertEquals(2299, mutableInt0.intValue());
      assertNotNull(integer1);
      assertEquals(2299, (int)integer1);
      
      String string0 = ArrayUtils.toString((Object) integer1);
      assertFalse(integer1.equals((Object)int0));
      assertEquals((byte) (-5), mutableInt0.byteValue());
      assertEquals(2299, (int)mutableInt0.toInteger());
      assertEquals(2299, (int)mutableInt0.getValue());
      assertEquals("2299", mutableInt0.toString());
      assertEquals(2299.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2299.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2299L, mutableInt0.longValue());
      assertEquals((short)2299, mutableInt0.shortValue());
      assertEquals(2299, mutableInt0.intValue());
      assertNotNull(string0);
      assertEquals("2299", string0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2079), (-324));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2299L, (-1294L), 831L, 0L, 831L, 831L, 0L, 831L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Long[] longArray2 = new Long[7];
      longArray2[0] = (Long) (-1294L);
      longArray2[1] = (Long) 0L;
      longArray2[2] = (Long) (-1294L);
      longArray2[3] = (Long) (-1294L);
      longArray2[4] = (Long) 831L;
      longArray2[5] = (Long) 0L;
      longArray2[6] = (Long) 2299L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, 0L);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1294L), 0L, (-1294L), (-1294L), 831L, 0L, 2299L}, longArray3);
      assertNotNull(longArray3);
      assertEquals(7, longArray3.length);
      assertEquals(7, longArray2.length);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)0, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}", bitSet0.toString());
      assertEquals(10, bitSet0.length());
      assertEquals(10, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(10, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Boolean[] booleanArray0 = new Boolean[10];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(false);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf(false);
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean(false);
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf(false);
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(boolean0.equals((Object)boolean5));
      assertTrue(boolean0.equals((Object)boolean3));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(10, booleanArray1.length);
      assertEquals(10, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((-1.5043086F));
      assertNotNull(float0);
      assertEquals((-1.5043086F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1491.0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1491.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-970.81));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-970.81F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1.0F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals(1.0F, (float)float3, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 1, (-789));
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short)16;
      shortArray0[2] = (short) (-4255);
      Integer integer0 = new Integer((-1906));
      assertNotNull(integer0);
      assertEquals((-1906), (int)integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) floatArray0, (Object) integer0, (int) (short)16);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-3334), 55, (-3334));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 2299, (-343), (-1294));
      Integer integer0 = new Integer((-849));
      assertNotNull(integer0);
      assertEquals((-849), (int)integer0);
      
      ArrayUtils.swap((short[]) null, 100, (int) (short)1);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2024;
      shortArray0[1] = (short) (-3633);
      shortArray0[2] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)2024, (short) (-3633), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2299;
      intArray0[1] = (-78);
      intArray0[2] = (int) (short)2024;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)69;
      ArrayUtils.shift(byteArray0, (-147), (int) (byte)115, (-3215));
      assertArrayEquals(new byte[] {(byte)69, (byte)115}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom(2299);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 88.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short short0 = new Short((short) (-12135));
      assertNotNull(short0);
      assertEquals((short) (-12135), (short)short0);
      
      Short short1 = new Short((short) (-12135));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-12135), (short)short1);
      
      Short short2 = new Short((short)98);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)98, (short)short2);
      
      Short short3 = new Short((short) (-1699));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short) (-1699), (short)short3);
      
      Short short4 = new Short((short)195);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      assertEquals((short)195, (short)short4);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      int int0 = ArrayUtils.indexOf(charArray0, 'd');
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift(intArray1, 40);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.insert(10, intArray1, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 0, 20, (-2146329706));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)291;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.shift(booleanArray0, 1, (int) (short)291, (-2214));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-2214);
      longArray0[1] = (long) (-2214);
      longArray0[2] = (-1L);
      longArray0[3] = (long) (short)291;
      longArray0[4] = (long) (short) (-2434);
      longArray0[5] = (long) (short) (-2434);
      longArray0[6] = (long) (short)291;
      longArray0[7] = (long) (-2214);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-2214L), (-2214L), (-1L), 291L, (-2434L), (-2434L), 291L, (-2214L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 1, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.swap(longArray0, 18688, 18688, (-199));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1697.4692F;
      ArrayUtils.swap(floatArray0, 5, 5, 5);
      assertArrayEquals(new float[] {1697.4692F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 5, 5);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 5006L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 5;
      intArray0[1] = 9;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 5;
      intArray0[5] = 5;
      intArray0[6] = 5;
      intArray0[7] = 5;
      intArray0[8] = 5;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2215);
      assertArrayEquals(new int[] {5, 9, 5, 5, 5, 5, 5, 5, 5}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)8;
      ArrayUtils.shift(byteArray0, (int) (byte)121, 9, 5);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)121, (byte)8}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf(floatArray0, (float) 5, 1);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {1697.4692F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int1);
      
      ArrayUtils.swap(longArray0, 1, 777, (-3472));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)0, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(10, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}", bitSet0.toString());
      assertEquals(10, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(10, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(false);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean(false);
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf(false);
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(boolean0.equals((Object)boolean4));
      assertTrue(boolean0.equals((Object)boolean5));
      assertTrue(boolean0.equals((Object)boolean3));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1414);
      assertNotNull(integer0);
      assertEquals(1414, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1406);
      assertNotNull(integer0);
      assertEquals(1406, (int)integer0);
      
      Integer integer1 = Integer.getInteger("k]Da''/7l\">g5I%4w)", integer0);
      assertNotNull(integer1);
      assertEquals(1406, (int)integer1);
      
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 2450L;
      ArrayUtils.swap((double[]) null, (-3231), 122);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 4929.673;
      ArrayUtils.swap(doubleArray0, (-4149), (-902), 0);
      assertArrayEquals(new double[] {(-1.0), 4929.673}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-1054.441964075419);
      doubleArray0[2] = (-255.03286);
      doubleArray0[3] = 3.0;
      doubleArray0[4] = 1411.36;
      doubleArray0[5] = 2101.4086162409;
      doubleArray0[6] = 2101.4086162409;
      ArrayUtils.swap(doubleArray0, 999, 999);
      assertArrayEquals(new double[] {0.0, (-1054.441964075419), (-255.03286), 3.0, 1411.36, 2101.4086162409, 2101.4086162409}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 219.993F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (float) 72L);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      Integer integer0 = Integer.getInteger("", 67);
      assertNotNull(integer0);
      assertEquals(67, (int)integer0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)119;
      ArrayUtils.shift(byteArray0, (-1117));
      assertArrayEquals(new byte[] {(byte)40, (byte) (-92), (byte)2, (byte)72, (byte)119, (byte) (-68)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      ArrayUtils.swap(floatArray2, (-3186), (int) (byte)72);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      Float[] floatArray3 = ArrayUtils.toObject(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray3.length);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3186);
      ArrayUtils.swap(doubleArray0, (int) (byte) (-92), (int) (byte) (-68));
      assertArrayEquals(new double[] {(-3186.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (int) (byte) (-68), (int) (byte)72);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -68, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-548.3297367346008), (-2009), (double) (-2009));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(7, doubleArray0.length);
      
      ArrayUtils.swap(doubleArray0, (-2009), 3, 3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[1] = (-1450L);
      longArray0[3] = 1L;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)122;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)122, (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)122, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)122, (short)1, (short)122, (short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)50;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)50}, shortArray0);
      assertArrayEquals(new short[] {(short)50}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, (-2263));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 'Q';
      charArray0[2] = 'O';
      charArray0[4] = 'Q';
      charArray0[5] = 'N';
      charArray0[6] = '\\';
      charArray0[7] = 'O';
      charArray0[8] = '_';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 101);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'O', 'Q', 'O', '\u0000', 'Q', 'N', '\\', 'O', '_'}, charArray0);
      assertArrayEquals(new char[] {'O', 'Q', 'O', '\u0000', 'Q', 'N', '\\', 'O', '_'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.shift(intArray0, (-2041));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 219.993F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (float) 72L);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      Integer integer0 = Integer.getInteger("", 67);
      assertNotNull(integer0);
      assertEquals(67, (int)integer0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)2;
      Float float0 = new Float((-766.0353F));
      assertNotNull(float0);
      assertEquals((-766.0353F), (float)float0, 0.01F);
      
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray0, 219.993F);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray3.length);
      assertSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      
      Long long0 = new Long(2177L);
      assertNotNull(long0);
      assertEquals(2177L, (long)long0);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      longArray0[1] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {2177L, 2177L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      Long[] longArray0 = new Long[6];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(1268L);
      assertNotNull(long0);
      assertEquals(1268L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {1268L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[1] = (-1450L);
      longArray0[3] = 1L;
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) 1L);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-1450L), (-555));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2855.0F;
      floatArray0[1] = 1136.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-2903.7F);
      floatArray0[4] = 1.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2855.0F, 1136.0F, 1.0F, (-2903.7F), 1.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (-2903.7F);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, (-1.0), (-2903.699951171875)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)6;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 722;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = 5147;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2, 7);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte byte0 = new Byte((byte) (-23));
      assertNotNull(byte0);
      assertEquals((byte) (-23), (byte)byte0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1129.27;
      int int0 = ArrayUtils.indexOf((int[]) null, (-2029));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 70, (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = 'W';
      charArray0[2] = '}';
      charArray0[3] = 'w';
      charArray0[4] = '(';
      charArray0[5] = 'G';
      charArray0[6] = 'W';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '(');
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'y', 'W', '}', 'w', '(', 'G', 'W'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1877L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.swap(longArray0, 70, 3);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-71));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-71));
      assertNull(byteArray1);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.swap((byte[]) null, 17, 17);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-661.75653F));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 0, Integer.MAX_VALUE);
      assertNull(booleanArray0);
      
      ArrayUtils.swap((char[]) null, 916, 916, 90);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 0, 0);
      assertNull(booleanArray0);
      
      ArrayUtils.swap((char[]) null, 0, 0, 90);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 722;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = 0;
      intArray0[6] = 5147;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 297, (-3110));
      assertArrayEquals(new int[] {0, 0, 0, 722, 0, 0, 5147}, intArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(7, intArray0.length);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) 297);
      assertNotNull(float0);
      assertEquals(297.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {297.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 2671L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 5147;
      longArray0[5] = (-134L);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (-1022);
      longArray0[8] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.insert(0, (long[]) null, longArray0);
      assertArrayEquals(new long[] {2671L, 0L, 0L, 0L, 5147L, (-134L), 0L, (-1022L), 0L}, longArray0);
      assertNull(longArray1);
      assertEquals(9, longArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom(0);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-2144832107), (-2146967921), (-19));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-19);
      longArray0[1] = (long) (-2146967921);
      longArray0[2] = (long) (-19);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {(-19L), (-2146967921L), (-19L)}, longArray0);
      assertArrayEquals(new long[] {(-19L), (-2146967921L), (-19L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      ArrayUtils.reverse(charArray0, (int) (byte)0, (-2146967921));
      assertArrayEquals(new char[] {'}', '}', '}'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (double) (-19));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (byte) (-8));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-90);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte) (-8), (byte) (-8), (byte)0, (byte) (-90), (byte)0}, byteArray0);
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 3453L);
      assertNull(longArray0);
      
      Integer integer0 = new Integer(113);
      assertNotNull(integer0);
      assertEquals(113, (int)integer0);
      
      Long[] longArray1 = new Long[1];
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray1[0] = long0;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)1136;
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      longArray0[3] = (long) (short)1136;
      longArray0[4] = (long) 0;
      longArray0[5] = 0L;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) (short)1136;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1375L, 0);
      assertArrayEquals(new long[] {1136L, 0L, 0L, 1136L, 0L, 0L, 0L, 0L, 1136L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2389));
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-2389);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1), (-2389)}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) 0L;
      longArray1[1] = (Long) 0L;
      longArray1[2] = (Long) 1136L;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      ArrayUtils.swap((char[]) null, 4603, 4603, (-1510));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte) (-57);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)10, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)28, (byte)48, (byte)97, (byte)1, (byte) (-90), (byte)6, (byte)0, (byte)10, (byte) (-57)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(71);
      assertNotNull(double0);
      assertEquals(71.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 71);
      assertArrayEquals(new double[] {71.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1863.977888197674));
      assertNotNull(double0);
      assertEquals((-1863.977888197674), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1863.977888197674), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1863.977888197674), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[1]);
      assertArrayEquals(new double[] {(-1863.977888197674), (-1863.977888197674), (-1863.977888197674)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 239;
      intArray0[1] = (-552);
      intArray0[2] = 3091;
      intArray0[3] = (-1073741823);
      intArray0[4] = (-365);
      intArray0[5] = (-3111);
      ArrayUtils.shift(intArray0, (-3842), 239, (-1576));
      assertArrayEquals(new int[] {(-365), (-3111), 239, (-552), 3091, (-1073741823)}, intArray0);
      assertEquals(6, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 239;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-405.0F));
      assertArrayEquals(new float[] {239.0F}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)32;
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (byte) (-12));
      assertNull(floatArray0);
      
      Integer integer0 = new Integer(2147054837);
      assertNotNull(integer0);
      assertEquals(2147054837, (int)integer0);
      
      Integer integer1 = new Integer((byte) (-12));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-12), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('6');
      assertNotNull(character0);
      assertEquals('6', (char)character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      char char0 = '4';
      Character character0 = Character.valueOf('4');
      assertNotNull(character0);
      assertEquals('4', (char)character0);
      
      characterArray0[0] = character0;
      char char1 = 'C';
      Character character1 = new Character('C');
      assertFalse(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char1));
      assertFalse(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('C', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '4';
      intArray0[1] = (int) char0;
      intArray0[2] = (int) char0;
      intArray0[3] = (int) char0;
      intArray0[4] = (int) (char)character1;
      int int0 = 742;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 742);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 742, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 115;
      intArray0[1] = 128;
      intArray0[2] = 2427;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2427;
      intArray1[1] = 2427;
      intArray1[2] = 2427;
      intArray1[3] = 2427;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {115, 128, 2427}, intArray0);
      assertArrayEquals(new int[] {2427, 2427, 2427, 2427}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1826L);
      longArray0[2] = 1725L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, (-1826L), 1725L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0L;
      ArrayUtils.swap(objectArray0, (-524), (-524), 0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1086.2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1826L);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1086.2, 0.0, (-1826.0)}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "F/whI{SsUpbi|'";
      stringArray0[1] = "a7";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2855.0F;
      floatArray0[1] = 1136.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-2903.7F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 2006.34F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2855.0F, 1136.0F, 1.0F, (-2903.7F), 1.0F, 2006.34F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (-2903.7F);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, (-1.0), (-2903.699951171875)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)98;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-88), (byte)6, (byte)8, (byte)98}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      longArray0[4] = 1609L;
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 36);
      assertArrayEquals(new long[] {(-1L), (-1L), 2450L, 0L, 1609L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      ArrayUtils.swap(floatArray1, 36, 36);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.reverse((int[]) null, (-2110), (-2143214295));
      Integer integer0 = Integer.valueOf(1245);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1245, (int)integer0);
      
      Integer integer1 = Integer.getInteger(">Y,Dl])-'7V)", integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(1245, (int)integer1);
      
      Integer integer2 = new Integer((-1384));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1384), (int)integer2);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-1030), (int) 0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1094);
      MockRandom mockRandom0 = new MockRandom((short)0);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-1094);
      floatArray0[1] = (float) (byte) (-66);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) (short) (-1094);
      floatArray0[5] = (float) (byte)1;
      floatArray0[6] = (float) (short) (-1094);
      MockRandom mockRandom2 = new MockRandom((-1L));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)23);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)23;
      intArray0[1] = (int) (short) (-1094);
      intArray0[2] = (int) (short)0;
      ArrayUtils.reverse(intArray0, (-910), (-910));
      assertArrayEquals(new int[] {23, (-1094), 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-450));
      assertArrayEquals(new short[] {(short) (-450)}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[2] = 1856L;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)16;
      ArrayUtils.shift(shortArray0, (int) (short)16);
      assertArrayEquals(new short[] {(short)16}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.5);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short)16, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-28), (-28));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 51;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 51);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {51L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {51L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-169L);
      longArray0[1] = (-169L);
      longArray0[2] = (-169L);
      longArray0[3] = (-169L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-186L));
      assertArrayEquals(new long[] {(-169L), (-169L), (-169L), (-169L)}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-169L);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-169L), (-169L), (-169L), (-169L)}, longArray0);
      assertArrayEquals(new long[] {(-169L)}, longArray1);
      assertArrayEquals(new long[] {(-169L), (-169L), (-169L)}, longArray2);
      assertNotNull(longArray2);
      assertEquals(4, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(3, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-405));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-405), (int)integer2);
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer((-2382));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-2382), (int)integer3);
      
      Integer integer4 = new Integer((int) integerArray0[3]);
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(5, integerArray0.length);
      assertEquals((-405), (int)integer4);
      
      Integer integer5 = new Integer(4);
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(4, (int)integer5);
      
      Integer integer6 = ArrayUtils.get(integerArray0, 4, integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer5));
      assertNull(integer6);
      assertEquals(5, integerArray0.length);
      
      Integer integer7 = new Integer((-1460));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      assertEquals((-1460), (int)integer7);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.hashCode((Object) integer3);
      assertFalse(int1 == int0);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer7));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer5));
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 424);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-26));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(4, bitSet0.length());
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '?';
      charArray0[2] = 'X';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'/', '?', 'X'}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'/', '?', 'X'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) 948, (-1621));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-1017L);
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = 's';
      ArrayUtils.swap(charArray0, (-1708), (int) (byte)40, (int) (byte)40);
      assertArrayEquals(new char[] {'s', 's', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)40, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (-1708), (int) (byte)0, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = 127;
      intArray0[2] = 1225;
      intArray0[4] = (-3111);
      int int0 = ArrayUtils.indexOf(intArray0, 98);
      assertArrayEquals(new int[] {55, 127, 1225, 0, (-3111)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((Object[]) null, 4163);
      double[] doubleArray0 = new double[6];
      Byte byte0 = new Byte((byte)111);
      assertNotNull(byte0);
      assertEquals((byte)111, (byte)byte0);
      
      Byte byte1 = new Byte((byte)111);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)111, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte2 = (byte)2;
      Byte byte3 = new Byte((byte)2);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)2, (byte)byte3);
      
      byteArray0[0] = byte3;
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-18));
      assertArrayEquals(new byte[] {(byte)2, (byte)111}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), (-552));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 127, (-1073741823));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {55, 127, 1225, 0, (-3111)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(1, int1);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)111}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-18);
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) byte2;
      shortArray0[3] = (short) (byte) (-18);
      shortArray0[4] = (short) byte2;
      shortArray0[5] = (short) (byte) (-18);
      shortArray0[6] = (short) (byte)2;
      shortArray0[7] = (short) (byte) (-18);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-18), (short)2, (short)2, (short) (-18), (short)2, (short) (-18), (short)2, (short) (-18)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-18), (short)2, (short)2, (short) (-18), (short)2, (short) (-18), (short)2, (short) (-18)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 71);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1041L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-2144832107), (-2146967921), 1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (-2146967921);
      longArray0[2] = (long) 1;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {1L, (-2146967921L), 1L}, longArray0);
      assertArrayEquals(new long[] {1L, (-2146967921L), 1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      ArrayUtils.reverse(charArray0, (int) (byte)0, (-2146967921));
      assertArrayEquals(new char[] {'}', '}', '}'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (double) 1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (byte) (-8));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-2081L);
      longArray0[2] = 2450L;
      longArray0[3] = (-26L);
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), (-3510));
      assertArrayEquals(new long[] {(-1L), (-2081L), 2450L, (-26L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-26L);
      floatArray0[1] = 1.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-26.0F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = 'B';
      charArray0[2] = 'j';
      charArray0[3] = 'q';
      charArray0[4] = 'l';
      charArray0[5] = 'v';
      int int1 = ArrayUtils.indexOf(charArray0, 'C', 0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'~', 'B', 'j', 'q', 'l', 'v'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1073741823), (int) (byte) (-71));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-71), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 2450L;
      longArray0[3] = 858L;
      longArray0[4] = 1609L;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)7, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-617);
      floatArray0[1] = (float) (-2099);
      floatArray0[2] = (float) (-1L);
      floatArray0[4] = (float) 102;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 99);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.shift((long[]) null, (-2099));
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ArrayUtils.shift((Object[]) null, (int) (byte)0);
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      Byte byte1 = new Byte((byte)88);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)88, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)88);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-1073741823);
      int int0 = ArrayUtils.indexOf(intArray0, (-552), 0);
      assertArrayEquals(new int[] {0, 0, 0, (-1073741823)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)74;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[4] = (double) (-1073741823);
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)111;
      doubleArray0[7] = (double) 4163;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, 948);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 74.0, 0.0, 0.0, (-1.073741823E9), 0.0, 111.0, 4163.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(5, int1);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)74);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, (-1073741823)}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, (-1073741823)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)6;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)101, (byte) (-108), (byte) (-38), (byte) (-72), (byte) (-53), (byte)4, (byte) (-19), (byte)6}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      
      Object object0 = ArrayUtils.get((Object[]) byteArray1, 77);
      assertArrayEquals(new byte[] {(byte)12, (byte)101, (byte) (-108), (byte) (-38), (byte) (-72), (byte) (-53), (byte)4, (byte) (-19), (byte)6}, byteArray0);
      assertNull(object0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray1, (Object) null);
      assertArrayEquals(new byte[] {(byte)12, (byte)101, (byte) (-108), (byte) (-38), (byte) (-72), (byte) (-53), (byte)4, (byte) (-19), (byte)6}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals((-1), int0);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)6);
      assertNull(byteArray2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'P';
      charArray0[3] = 'S';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'S', 'S', 'P', 'S'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.swap((byte[]) null, (int) (byte)101, 3157);
      Integer integer0 = new Integer((-349));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-349), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[2] = 40;
      intArray0[3] = (-2501);
      intArray0[4] = (-2716);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray0);
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-2716);
      objectArray0[1] = (Object) 40;
      objectArray0[2] = (Object) 10;
      objectArray0[4] = (Object) (-2501);
      objectArray0[6] = (Object) 0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[5]);
      assertEquals(7, objectArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = null;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertTrue(int1 == int0);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int1);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-1));
      assertNull(byteArray1);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.insert(0, (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[2] = 40;
      intArray0[3] = (-2501);
      intArray0[4] = (-2716);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray0);
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1031.0F);
      floatArray0[1] = (float) 40;
      floatArray0[2] = (float) 10;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 10;
      floatArray0[6] = (float) 40;
      floatArray0[7] = (-1031.0F);
      floatArray0[8] = (-1350.7146F);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1350.7146F), (-1031.0F), 40.0F, 0.0F, 10.0F, 10.0F, 10.0F, 40.0F, (-1031.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-2716), 35);
      assertArrayEquals(new float[] {(-1350.7146F), (-1031.0F), 40.0F, 0.0F, 10.0F, 10.0F, 10.0F, 40.0F, (-1031.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-2716);
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) 10;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 3919.758F);
      assertArrayEquals(new float[] {(-1350.7146F), (-1031.0F), 40.0F, 0.0F, 10.0F, 10.0F, 10.0F, 40.0F, (-1031.0F)}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(9, floatArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertArrayEquals(new float[] {(-1350.7146F), (-1031.0F), 40.0F, 0.0F, 10.0F, 10.0F, 10.0F, 40.0F, (-1031.0F)}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNull(object0);
      assertEquals(9, floatArray0.length);
      
      objectArray0[5] = null;
      Object object1 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertNotNull(object1);
      assertEquals(7, objectArray0.length);
      assertEquals(0.0F, object1);
      
      objectArray0[6] = object1;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-1350.7146F), (-1031.0F), 40.0F, 0.0F, 10.0F, 10.0F, 10.0F, 40.0F, (-1031.0F)}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(7, objectArray0.length);
      assertEquals(9, floatArray0.length);
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[2] = 40;
      intArray0[3] = (-2501);
      intArray0[4] = (-2716);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray0);
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1031.0F);
      floatArray0[1] = (float) 40;
      floatArray0[2] = (float) 10;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 10;
      floatArray0[6] = (float) 40;
      floatArray0[7] = (-1031.0F);
      floatArray0[8] = (-1350.7146F);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1350.7146F), (-1031.0F), 40.0F, 0.0F, 10.0F, 10.0F, 10.0F, 40.0F, (-1031.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-2716), 35);
      assertArrayEquals(new float[] {(-1350.7146F), (-1031.0F), 40.0F, 0.0F, 10.0F, 10.0F, 10.0F, 40.0F, (-1031.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {(-1031.0F), 40.0F, 0.0F, 10.0F, 10.0F, 10.0F, 40.0F, (-1031.0F), (-1350.7146F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'b';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) 'b';
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = (int) '3';
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {98, 55, 98, 0, 2, 51, 0, 0}, intArray0);
      assertArrayEquals(new int[] {98, 55, 98, 0, 2, 51, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 1856L;
      Object object0 = ArrayUtils.get(objectArray0, 98);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[1] = null;
      intArray0[1] = 98;
      ArrayUtils.shift(longArray0, 98);
      assertArrayEquals(new long[] {1856L, 0L, (-103L), 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'b';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '7';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'Q');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'b', '3', '3', '3', '7'}, charArray1);
      assertArrayEquals(new char[] {'Q', 'b', '3', '3', '3', '7'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(6, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[2] = (double) 259;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(17, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (short) (-1491), 2746L);
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(53L, 0.0, 1.0);
      assertNotNull(doubleStream0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1491);
      doubleArray0[1] = (-1.0);
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'm');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'t', 't', 't'}, charArray0);
      assertArrayEquals(new char[] {'t', 't', 't'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-1491.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1491.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'t', 't', 't'}, charArray0);
      assertArrayEquals(new char[] {'t', 't', 't'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0, "|<");
      assertNotNull(stringArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 3455);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3455, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1510.0);
      doubleArray0[2] = 1412.86;
      doubleArray0[3] = 277.0802307128906;
      doubleArray0[4] = 131.26173460276;
      doubleArray0[5] = 472.063;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1510.0), 1412.86, 277.0802307128906, 131.26173460276, 472.063}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift(doubleArray0, 2982, 2982, 2982);
      assertArrayEquals(new double[] {(-1.0), (-1510.0), 1412.86, 277.0802307128906, 131.26173460276, 472.063}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '!';
      charArray0[2] = 'p';
      charArray0[3] = '1';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-927));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -927, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-3625);
      intArray0[2] = 50;
      intArray0[3] = 0;
      intArray0[4] = 97;
      intArray0[5] = 97;
      ArrayUtils.shift(booleanArray0, 0, 50, 4028);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 97;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {97.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 97, (-1307));
      assertArrayEquals(new int[] {0, (-3625), 50, 0, 97, 97}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)654;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-3010);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)654, (short) (-1), (short) (-3010)}, shortArray0);
      assertArrayEquals(new short[] {(short)654, (short) (-1), (short) (-3010)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short)654);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {654L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 50, 50, (-2126834765));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 743, 743);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (-3673.901792142197), 50);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1410.6504F;
      floatArray0[1] = 1196.0F;
      floatArray0[2] = 1660.1F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 779.721F;
      floatArray0[5] = (-1453.3092F);
      floatArray0[6] = 67.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1410.6504F, 1196.0F, 1660.1F, 0.0F, 779.721F, (-1453.3092F), 67.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(18688);
      assertNotNull(integer0);
      assertEquals(18688, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger("n^uGffcG(", (-371));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-371), (int)integer4);
      
      integerArray0[4] = integer4;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {18688, 0, 0, 0, (-371)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {18688, 0, 0, 0, (-371)}, intArray0);
      assertArrayEquals(new int[] {18688, (-371)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(5, integerArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18688, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) 'Q';
      doubleArray0[2] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 81.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {81.0, 1063.97799263121}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, (double) (byte)1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 81.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {81.0, 1063.97799263121}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {81.0, 1063.97799263121}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      ArrayUtils.shift(doubleArray1, 2777, (-201), 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1.0, 81.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {81.0, 1063.97799263121}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      BitSet bitSet0 = new BitSet((byte)1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      Integer integer1 = new Integer(35);
      assertNotNull(integer1);
      assertEquals(35, (int)integer1);
      
      Integer integer2 = new Integer((-201));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-201), (int)integer2);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)2, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)2, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)0, (short)2, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 2.1531034010754366);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN, (-1465.593659341));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1239.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1.0F;
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertArrayEquals(new float[] {1239.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean1);
      
      org.evosuite.runtime.Random.setNextRandom(1487);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)108;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)108, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)108, (short)108, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)52;
      floatArray0[1] = (float) (byte)108;
      floatArray0[2] = (float) (byte)108;
      floatArray0[3] = (float) (short)108;
      floatArray0[4] = (float) (short)108;
      floatArray0[5] = (float) 54;
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {52.0F, 108.0F, 108.0F, 108.0F, 108.0F, 54.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)108;
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (byte)52);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {108L}, longArray0);
      assertArrayEquals(new long[] {108L, 52L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(54);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(54, (int)integer1);
      
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt((-1));
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.getValue();
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(758);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(758, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger("");
      assertNull(integer4);
      
      integerArray0[4] = null;
      Integer integer5 = new Integer((short)108);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(108, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[5]);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      assertEquals(7, integerArray0.length);
      assertEquals(108, (int)integer6);
      
      integerArray0[6] = integer6;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      longArray0[3] = (long) 'b';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) 'b';
      intArray0[3] = 0;
      intArray0[4] = 98;
      intArray0[5] = (int) '7';
      intArray0[6] = (int) 'P';
      intArray0[7] = (int) 'p';
      ArrayUtils.shift(intArray0, (-2102), 55, 0);
      assertArrayEquals(new int[] {0, 55, 98, 0, 98, 55, 80, 112}, intArray0);
      assertEquals(8, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = 'b';
      charArray0[2] = 'p';
      charArray0[3] = 'b';
      charArray0[4] = '_';
      charArray0[5] = 'p';
      charArray0[6] = 'b';
      charArray0[7] = 'P';
      charArray0[8] = 'p';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '2');
      assertArrayEquals(new char[] {'p', 'b', 'p', 'b', '_', 'p', 'b', 'P', 'p'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2108), Integer.MAX_VALUE);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1572), 114);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-790.7326));
      assertNotNull(double0);
      assertEquals((-790.7326), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-790.7326)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-2579));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 219.993F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (float) 72L);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      Integer integer0 = Integer.getInteger("", 67);
      assertNotNull(integer0);
      assertEquals(67, (int)integer0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)2;
      Float float0 = new Float((-766.0353F));
      assertNotNull(float0);
      assertEquals((-766.0353F), (float)float0, 0.01F);
      
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray0, 219.993F);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray3.length);
      assertNotSame(floatArray3, floatArray2);
      assertSame(floatArray3, floatArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)40;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)40;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (byte) (-68);
      shortArray0[6] = (short) (byte)40;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-362));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short)40, (short)2, (short)40, (short)0, (short) (-68), (short)40}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)40, (short)2, (short)40, (short)0, (short) (-68), (short)40}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Float[] floatArray4 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertNotNull(floatArray4);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray4.length);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(floatArray4, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'B');
      assertArrayEquals(new char[] {'B'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = '4';
      charArray0[2] = '[';
      charArray0[3] = 'U';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)83;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-110), 15);
      assertArrayEquals(new byte[] {(byte)2, (byte)83}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '4');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'~', '4', '[', 'U', '\u0000', '\u0000', '\u0000', '4'}, charArray1);
      assertArrayEquals(new char[] {'~', '4', '[', 'U', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.shift(intArray0, (-89));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.shift(intArray0, (-1909), (-1172), 1526);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[2] = 40;
      intArray0[3] = (-2501);
      intArray0[4] = (-2716);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray0);
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 40;
      longArray0[1] = (long) 40;
      longArray0[2] = (long) 40;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 10;
      longArray0[5] = (long) 10;
      longArray0[6] = (long) (-2501);
      longArray0[7] = (long) 40;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1041, 5);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {40L, 40L, 40L, 0L, 10L, 10L, (-2501L), 40L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.shift(intArray1, (-2716), (-2501), (-2003));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray0);
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 10L;
      ArrayUtils.shift(doubleArray0, (-599), 3635, 2);
      assertArrayEquals(new double[] {10.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.shift(longArray0, (-432), (-2716), 3616);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {40L, 40L, 40L, 0L, 10L, 10L, (-2501L), 40L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-1017L);
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '', (int) (byte)0);
      assertArrayEquals(new char[] {'', '\u0000', '', ''}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (byte)40);
      assertNull(floatArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ';');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'', '\u0000', '', ''}, charArray0);
      assertArrayEquals(new char[] {'', '\u0000', '', ''}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 1, 36, 1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-405));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-405), (int)integer2);
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer((int) integerArray0[3]);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(5, integerArray0.length);
      assertEquals((-405), (int)integer3);
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer(50);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(50, (int)integer4);
      
      Integer integer5 = ArrayUtils.get(integerArray0, 1196, integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(5, integerArray0.length);
      assertEquals(50, (int)integer5);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer5);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (int)integerArray0[4];
      longArray0[1] = (long) (int)integerArray0[3];
      longArray0[2] = (long) (-405);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) integerArray0[3], int0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-405L), (-405L), (-405L), 0L}, longArray1);
      assertArrayEquals(new long[] {(-405L), (-405L), (-405L), 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1196;
      intArray0[1] = 50;
      intArray0[2] = 1196;
      intArray0[3] = (int) integerArray0[4];
      intArray0[4] = (-405);
      intArray0[5] = (-405);
      intArray0[6] = (-1);
      ArrayUtils.shift(intArray0, 101, (-405), (-405));
      assertArrayEquals(new int[] {1196, 50, 1196, (-405), (-405), (-405), (-1)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 84);
      assertArrayEquals(new int[] {84}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 867L;
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 867L;
      longArray1[1] = 867L;
      longArray1[2] = 867L;
      longArray1[3] = 867L;
      longArray1[4] = 0L;
      longArray1[5] = 867L;
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {867L}, longArray0);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(10, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)120;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)120;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 0L;
      objectArray1[1] = object0;
      objectArray1[2] = (Object) 867L;
      objectArray1[3] = (Object) 867L;
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(4, objectArray1.length);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean2);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      booleanArray0[4] = true;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)16);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 3616);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1204);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 3616;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1204), (-1), (-1), 3616, (-1), (-1)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(12, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-68);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)34, 4540);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte) (-20), (byte) (-39), (byte)77, (byte) (-68)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 34);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 34;
      intArray0[2] = 34;
      intArray0[3] = 34;
      intArray0[4] = (-1);
      intArray0[5] = 34;
      intArray0[6] = 34;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-1), 34, 34, 34, (-1), 34, 34}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 34;
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 829L;
      longArray1[1] = (long) 34;
      longArray1[2] = (long) 34;
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {34L}, longArray0);
      assertArrayEquals(new long[] {829L, 34L, 34L}, longArray1);
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(1, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-27);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte) (-27)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)48;
      shortArray0[1] = (short)127;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)1301;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)48, (short)127, (short)48, (short) (-1), (short)1301}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)48, (short)127, (short)48, (short) (-1), (short)1301}, shortArray0);
      assertArrayEquals(new short[] {(short)48, (short)127, (short)48, (short) (-1), (short)1301}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (short)48);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((float[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)1301;
      longArray0[1] = (long) (short)1301;
      longArray0[2] = (long) (short)48;
      longArray0[3] = (long) (short) (-1);
      ArrayUtils.shift(longArray0, (int) (short)1301, (int) (short) (-1), (-1563));
      assertArrayEquals(new long[] {1301L, 1301L, 48L, (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 8;
      ArrayUtils.swap(longArray0, 8, 8, 8);
      assertArrayEquals(new long[] {8L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.shift(shortArray0, (int) (short) (-2319));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[1] = (-1450L);
      longArray0[3] = 1L;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-789), (-789));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short)16;
      shortArray0[2] = (short)16;
      shortArray0[3] = (short)16;
      shortArray0[4] = (short)16;
      ArrayUtils.shift(shortArray0, (-2539));
      assertArrayEquals(new short[] {(short)16, (short)16, (short)16, (short)16, (short)16}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElement((long[]) null, 1136L);
      assertNull(longArray1);
      
      long[] longArray2 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)108;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (byte)108, 2146491539);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 2299, (-343), (-1294));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1294);
      MockRandom mockRandom0 = new MockRandom(617L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      short[] shortArray0 = new short[9];
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      ArrayUtils.reverse(shortArray0, (int) (short)1136, 0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      Float float0 = new Float((float) (short)4182);
      assertNotNull(float0);
      assertEquals(4182.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1118.6317F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1118.6317F, (float)float1, 0.01F);
      
      Float float2 = new Float((float) (short)4182);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(4182.0F, (float)float2, 0.01F);
      
      Float float3 = new Float(10.0F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(10.0F, (float)float3, 0.01F);
      
      Float float4 = new Float((double) 0);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotNull(float4);
      assertEquals(0.0F, (float)float4, 0.01F);
      
      Float float5 = new Float((double) (short)4182);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      assertEquals(4182.0F, (float)float5, 0.01F);
      
      Float[] floatArray0 = new Float[9];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      floatArray0[2] = float2;
      floatArray0[3] = float0;
      floatArray0[4] = float3;
      floatArray0[5] = float2;
      Float float6 = new Float((-1124.6F));
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotNull(float6);
      assertEquals((-1124.6F), (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      floatArray0[7] = float0;
      floatArray0[8] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[8]);
      assertArrayEquals(new float[] {4182.0F, 1118.6317F, 4182.0F, 4182.0F, 10.0F, 4182.0F, (-1124.6F), 4182.0F, 10.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-2081L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      longArray0[4] = 1609L;
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 36);
      assertArrayEquals(new long[] {(-1L), (-2081L), 2450L, 0L, 1609L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2450L;
      doubleArray0[3] = (-2548.378);
      ArrayUtils.shift(doubleArray0, (-2102), 36, 0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 2450.0, (-2548.378)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2102), 2615);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 0.0, 2450.0, (-2548.378)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 2450.0, (-2548.378)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1933L);
      longArray0[1] = (-1L);
      longArray0[2] = (-1942L);
      longArray0[3] = 1L;
      longArray0[4] = 478L;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-3378));
      assertNotNull(integer0);
      assertEquals((-3378), (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1658.8164414771031;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 478L;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1305.020450749812, (double) 1L);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1658.8164414771031, 1.0, 478.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1);
      
      Integer integer1 = ArrayUtils.get((Integer[]) null, (-3378));
      assertNull(integer1);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 120, 1153);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1658.8164414771031, 1.0, 478.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 2);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 705);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[2] = 40;
      intArray0[3] = (-2501);
      intArray0[4] = (-2716);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray0);
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1029.7386F);
      floatArray0[1] = (float) 40;
      floatArray0[2] = (float) 10;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 10;
      floatArray0[6] = (float) 40;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 86, 2, 35);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      ArrayUtils.swap(floatArray0, (-2501), 2268);
      assertArrayEquals(new float[] {(-1029.7386F), 40.0F, 10.0F, 10.0F, 10.0F, 0.0F, 40.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      integerArray0[2] = integer1;
      int[] intArray0 = new int[6];
      intArray0[0] = (-3625);
      intArray0[1] = int0;
      intArray0[2] = 4;
      intArray0[3] = int0;
      intArray0[4] = 0;
      intArray0[5] = 4;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {4, 4, 4, 0, 4, (-3625)}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.reverse((float[]) null);
      int int1 = ArrayUtils.lastIndexOf((float[]) null, 0.0F, int0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      boolean[] booleanArray2 = ArrayUtils.insert((-1), booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1352.7297;
      doubleArray0[1] = 4163.0;
      doubleArray0[2] = (double) (-1);
      ArrayUtils.shift(doubleArray0, (-1));
      assertArrayEquals(new double[] {4163.0, (-1.0), 1352.7297}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean[] booleanArray3 = new boolean[2];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      booleanArray3[0] = true;
      booleanArray3[1] = true;
      boolean[] booleanArray4 = ArrayUtils.removeAllOccurences(booleanArray3, true);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray4));
      assertNotNull(booleanArray4);
      assertEquals(2, booleanArray3.length);
      assertEquals(0, booleanArray4.length);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      int[] intArray0 = null;
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      long long0 = 867L;
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = 2079;
      Integer integer0 = new Integer(2079);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2079, (int)integer0);
      
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shift(longArray0, 3477, (-3786), (-3786));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = '3';
      charArray0[2] = 'm';
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer(2);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Integer integer2 = Integer.getInteger("", integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer3 = new Integer(1662);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(1662, (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(0, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '3';
      intArray0[1] = (int) 'g';
      intArray0[2] = 0;
      intArray0[3] = (int) '3';
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {51, 103, 0, 51}, intArray0);
      assertArrayEquals(new int[] {51, 103, 0, 51}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.reverse((Object[]) integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(0, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'm', '3', 'g'}, charArray0);
      assertEquals(6, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {103, 0, 51, 51}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1877L;
      longArray0[1] = 1181L;
      longArray0[2] = 0L;
      longArray0[3] = 1877L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1375L, 2);
      assertArrayEquals(new long[] {1877L, 1181L, 0L, 1877L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2391));
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.5822);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-325));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (byte)52, (int) (short) (-545));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (byte)108);
      assertArrayEquals(new short[] {(short)108}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, 3793, (-2479), 2367);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-1));
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2479);
      floatArray0[1] = (float) (-2479);
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertArrayEquals(new float[] {(-2479.0F), (-2479.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1548;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1), (short)1548, (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short)1548, (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Short[] shortArray2 = new Short[7];
      shortArray2[0] = (Short) (short) (-1);
      shortArray2[1] = (Short) (short) (-1);
      shortArray2[2] = (Short) (short)1548;
      shortArray2[3] = (Short) (short) (-1);
      shortArray2[4] = (Short) (short) (-1);
      shortArray2[5] = (Short) (short) (-1);
      shortArray2[6] = (Short) (short)1548;
      Short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray2);
      assertNotNull(shortArray3);
      assertEquals(7, shortArray2.length);
      assertEquals(7, shortArray3.length);
      assertSame(shortArray2, shortArray3);
      assertSame(shortArray3, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 722;
      intArray0[4] = (int) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 2040.31263407273;
      doubleArray0[5] = (double) 722;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 722.0, 2040.31263407273, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 722;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 722.0;
      objectArray0[4] = (Object) 0;
      objectArray0[5] = (Object) 0.0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[5]);
      assertEquals(6, objectArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[1] = (-1450L);
      longArray0[3] = 1L;
      longArray0[4] = 1311L;
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertArrayEquals(new long[] {53L, (-1450L), 0L, 1L, 1311L}, longArray0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-30839);
      shortArray0[2] = (short) (-1831);
      shortArray0[3] = (short)113;
      shortArray0[4] = (short)2458;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-30839), (short) (-1831), (short)113, (short)2458}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1311L;
      floatArray0[1] = (float) 53L;
      floatArray0[2] = (float) (-1450L);
      floatArray0[3] = (float) 53L;
      floatArray0[4] = (float) (short) (-30839);
      floatArray0[5] = (float) (short) (-30839);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {1311.0F, 53.0F, (-1450.0F), 53.0F, (-30839.0F), (-30839.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1311.0F, 53.0F, (-1450.0F), 53.0F, (-30839.0F), (-30839.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      
      Short[] shortArray2 = new Short[6];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (Short) (short)0;
      ArrayUtils.reverse(floatArray1);
      assertArrayEquals(new float[] {(-30839.0F), (-30839.0F), 53.0F, (-1450.0F), 53.0F, 1311.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-30839.0F), (-30839.0F), 53.0F, (-1450.0F), 53.0F, 1311.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, (float) 53L, (int) (short) (-1831));
      assertArrayEquals(new float[] {(-30839.0F), (-30839.0F), 53.0F, (-1450.0F), 53.0F, 1311.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-30839.0F), (-30839.0F), 53.0F, (-1450.0F), 53.0F, 1311.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-2126834765));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2126834765), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(8, integerArray0.length);
      assertEquals((-2126834765), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      integerArray0[2] = integer2;
      try { 
        Integer.decode("/6$+fig4l<RHcMk4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/6$+fig4l<RHcMk4\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (short) (-2319));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      org.evosuite.runtime.Random.setNextRandom((short) (-2319));
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[2] = (float) (short) (-2319);
      int int0 = ArrayUtils.lastIndexOf(floatArray2, 2.0F, (int) (short) (-2319));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2319.0F)}, floatArray2, 0.01F);
      assertEquals(3, floatArray2.length);
      assertEquals((-1), int0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = 10;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 10, 10);
      assertArrayEquals(new int[] {10, 10}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.shift(intArray0, 10);
      assertArrayEquals(new int[] {10, 10}, intArray0);
      assertEquals(2, intArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      ArrayUtils.swap(intArray0, (-1), (int) (byte)0);
      assertArrayEquals(new int[] {10, 10}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = 10;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {10, 10}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[2] = 'O';
      charArray0[3] = 'N';
      charArray0[5] = 'r';
      charArray0[6] = '\\';
      charArray0[8] = 'Q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 10, 10);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'r', '\u0000', 'O', 'N', '\u0000', 'r', '\\', '\u0000', 'Q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {10, 10}, intArray0);
      assertEquals(2, intArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      ArrayUtils.swap(intArray0, (-1), (int) (byte)0);
      assertArrayEquals(new int[] {10, 10}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(160, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 160, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2598), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2598, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = (-532);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-532), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -532, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short)0, (-3302));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'q';
      intArray0[1] = (int) 'W';
      intArray0[2] = (int) 'W';
      intArray0[3] = (int) 'W';
      intArray0[4] = (-1);
      intArray0[5] = (int) (short)0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {113, 87, 87, 87, (-1), 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 87;
      objectArray0[2] = (Object) true;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.swap((boolean[]) null, 262, 127, 127);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Byte byte0 = new Byte((byte) (-12));
      assertNotNull(byte0);
      assertEquals((byte) (-12), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-91));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-91), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-75));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-75), (byte)byte2);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte0;
      byteArray0[1] = byte1;
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)2);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)2, (byte)byte3);
      
      byteArray0[3] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-12));
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-91), (byte) (-75), (byte)2}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)291;
      shortArray0[1] = (short) (-2434);
      shortArray0[2] = (short)1245;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)4;
      shortArray0[6] = (short)1301;
      shortArray0[7] = (short)16;
      shortArray0[8] = (short)48;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte) (-1)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)291, (short) (-2434), (short)1245, (short) (-1), (short) (-1), (short)4, (short)1301, (short)16, (short)48}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)291, (short) (-2434), (short)1245, (short) (-1), (short) (-1), (short)4, (short)1301, (short)16, (short)48}, shortArray1);
      assertArrayEquals(new short[] {(short)291, (short) (-2434), (short)1245, (short) (-1), (short) (-1), (short)4, (short)1301, (short)16, (short)48}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (short)4);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1);
      
      short[] shortArray2 = ArrayUtils.remove(shortArray1, 8);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)291, (short) (-2434), (short)1245, (short) (-1), (short) (-1), (short)4, (short)1301, (short)16, (short)48}, shortArray1);
      assertArrayEquals(new short[] {(short)291, (short) (-2434), (short)1245, (short) (-1), (short) (-1), (short)4, (short)1301, (short)16, (short)48}, shortArray0);
      assertArrayEquals(new short[] {(short)291, (short) (-2434), (short)1245, (short) (-1), (short) (-1), (short)4, (short)1301, (short)16}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      float[] floatArray0 = new float[4];
      ArrayUtils.shift(floatArray0, (-2));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-3155.4);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-3155.4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.5, (-3155.4)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3155.4), 1.5, (-3155.4)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)104, (byte) (-27), (byte) (-59), (byte) (-1)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray1, (-3155.4));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.5, (-3155.4)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3155.4), 1.5, (-3155.4)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (byte) (-27);
      ArrayUtils.shift(floatArray0, (int) (byte) (-27));
      assertArrayEquals(new float[] {(-27.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-661.8535F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'S';
      charArray0[2] = 'i';
      charArray0[3] = 'e';
      charArray0[4] = 'n';
      charArray0[5] = '1';
      charArray0[6] = 'P';
      charArray0[7] = '';
      charArray0[8] = 'e';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'i', (-2052));
      assertArrayEquals(new char[] {'\u0000', 'S', 'i', 'e', 'n', '1', 'P', '', 'e'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-1.0F));
      assertNull(floatArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'g');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', 'S', 'i', 'e', 'n', '1', 'P', '', 'e'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'S', 'i', 'e', 'n', '1', 'P', '', 'e'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '}');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[13] = 1.0;
      int[] intArray0 = ArrayUtils.insert(10, (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, 3793, (-2479), 2367);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-284L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-569L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = 'd';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'R', 'd', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      char[] charArray0 = new char[7];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1136;
      longArray0[1] = (-1L);
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1136L, (-1L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-2));
      assertNull(byteArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.swap((byte[]) null, 0, 50);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-2);
      floatArray0[1] = (float) (short)1136;
      floatArray0[2] = (float) (short)1136;
      floatArray0[3] = (float) (short)1136;
      floatArray0[4] = (float) (short)1136;
      floatArray0[5] = (-3498.0F);
      boolean boolean2 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {(-2.0F), 1136.0F, 1136.0F, 1136.0F, 1136.0F, (-3498.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean2);
      
      ArrayUtils.swap(longArray0, (-552), (-552));
      assertArrayEquals(new long[] {1136L, (-1L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = 'X';
      charArray0[2] = '@';
      charArray0[3] = 'f';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'(', 'X', '@', 'f'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'X';
      longArray0[1] = (long) 'X';
      longArray0[2] = (long) 'f';
      longArray0[3] = (long) 'X';
      longArray0[4] = (long) 'f';
      longArray0[5] = (long) '@';
      longArray0[6] = (long) 'X';
      longArray0[7] = (long) '(';
      longArray0[8] = (long) '@';
      boolean boolean2 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new long[] {88L, 88L, 102L, 88L, 102L, 64L, 88L, 40L, 64L}, longArray0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-99);
      byteArray1[3] = (byte) (-99);
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray1, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-99), (byte) (-99)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-99), (byte) (-99)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      boolean boolean3 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new char[] {'(', 'X', '@', 'f'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-26));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '?';
      charArray0[2] = 'X';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'/', '?', 'X'}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'/', '?', 'X'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, '', 2123080424);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new char[] {'/', '?', 'X'}, charArray0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertEquals(3, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(bitSet1, bitSet0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) '/';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, 'C');
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'/'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(1, charArray2.length);
      assertEquals(1, characterArray0.length);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2855);
      assertNotNull(integer0);
      assertEquals(2855, (int)integer0);
      
      integerArray0[0] = integer0;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) '/');
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {47}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'X';
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 2855);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {88.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {88.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2454);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2454)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2454)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[1] = (float) 'c';
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 'c';
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 99.0F, 0.0F, 0.0F, 99.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {99.0F, 99.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, object0, 79);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)123);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)123;
      intArray0[1] = (int) (byte)123;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 123, 123);
      assertArrayEquals(new int[] {123, 123}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)123);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)123, 123);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = '%';
      charArray0[2] = ')';
      charArray0[3] = 'l';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'x', '%', ')', 'l'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, object0, 327);
      assertArrayEquals(new char[] {'x', '%', ')', 'l'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = 127;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 2108;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) 55;
      doubleArray0[4] = (double) 55;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 2108;
      doubleArray0[7] = (double) 2108;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(11, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 3616);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1204);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 3616;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1204), (-1), (-1), 3616, (-1), (-1)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(12, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 3616;
      longArray0[2] = (long) (-1204);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 3616;
      ArrayUtils.shift(longArray0, (-3233));
      assertArrayEquals(new long[] {3616L, (-1L), 3616L, (-1204L), 0L, (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.shift(longArray0, (-515), 4783, 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 4783);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 4783;
      longArray0[1] = (long) 0;
      longArray0[2] = 2161L;
      ArrayUtils.shift(longArray0, (-515), 4783, 0);
      assertArrayEquals(new long[] {4783L, 0L, 2161L}, longArray0);
      assertEquals(3, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)7;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-515), 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)101, (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayUtils.shift(longArray0, 0, 3453, 1983);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.shift(longArray0, 0, 0, 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1204);
      intArray0[3] = 3616;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1204), 0, 0, 3616, 0, 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (long) 3616;
      longArray0[2] = (long) (-1204);
      longArray0[4] = (long) 0;
      ArrayUtils.shift(longArray0, (-3233));
      assertArrayEquals(new long[] {0L, 0L, 3616L, (-1204L), 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      char char0 = 'Q';
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      int[] intArray1 = new int[4];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = (-343);
      intArray1[3] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[2], intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)8;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0, "");
      assertNotNull(stringArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 13;
      int int0 = 2717;
      intArray0[2] = 2717;
      intArray0[3] = (-354);
      intArray0[4] = 118;
      intArray0[5] = 109;
      int int1 = 159;
      intArray0[6] = 159;
      intArray0[7] = (-3906);
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2717, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, 1577, 1577, 1577);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      longArray0[4] = 1609L;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)56, 103);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-244));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-244), (int)integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer2 = Integer.valueOf((int) (byte)0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(3, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      MockRandom mockRandom0 = new MockRandom((-1710L));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) (byte)0);
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {(-1L), 2450L, 0L, 1609L, (-1L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1877L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      Integer integer0 = new Integer(84);
      assertNotNull(integer0);
      assertEquals(84, (int)integer0);
      
      Integer integer1 = new Integer(84);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(84, (int)integer1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      int[] intArray0 = new int[23];
      int[] intArray1 = new int[23];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElements(intArray1, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertEquals(23, intArray1.length);
      assertEquals(23, intArray2.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-2126834765), 899);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty((float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[2] = 40;
      intArray0[3] = (-2501);
      intArray0[4] = (-2716);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray0);
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1031.0F);
      floatArray0[1] = (float) 40;
      floatArray0[2] = (float) 10;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 10;
      floatArray0[5] = (float) 40;
      floatArray0[6] = (float) 40;
      floatArray0[7] = (-1031.0F);
      floatArray0[8] = (-1350.7146F);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1350.7146F), (-1031.0F), 40.0F, 40.0F, 10.0F, 10.0F, 10.0F, 40.0F, (-1031.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-824.144021580127);
      doubleArray0[2] = (-4312.904);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 434.00063303;
      doubleArray0[6] = 2185.556019688974;
      doubleArray0[7] = 1874.0;
      doubleArray0[8] = 3597.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 103);
      assertArrayEquals(new double[] {(-1.0), (-824.144021580127), (-4312.904), 1.0, (-1.0), 434.00063303, 2185.556019688974, 1874.0, 3597.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, 1L, (-2146742368));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 71.0F;
      floatArray0[2] = 0.0F;
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      Integer integer1 = new Integer(5);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(5, (int)integer1);
      
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
      
      MockRandom mockRandom0 = new MockRandom(5);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[4];
      longArray0[3] = (long) 3;
      longArray0[1] = (-811L);
      longArray0[2] = (long) 3;
      longArray0[3] = (-811L);
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new long[] {(-811L), 3L, (-811L), 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotSame(mockRandom1, mockRandom0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0, 2145594920, (-3532));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-1), (-1), 89);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 36);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 89, (-1));
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayUtils.shift(doubleArray0, (-1022));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-243), booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = 'G';
      charArray0[2] = 'M';
      charArray0[3] = '\"';
      charArray0[4] = '\'';
      charArray0[5] = 'v';
      charArray0[6] = '6';
      charArray0[7] = 'g';
      charArray0[8] = '+';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {';', 'G', 'M', '\"', '\'', 'v', '6', 'g', '+'}, charArray1);
      assertArrayEquals(new char[] {';', 'G', 'M', '\"', '\'', 'v', '6', 'g', '+'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '\'';
      intArray0[1] = (int) '\"';
      intArray0[2] = (-2758);
      intArray0[3] = (int) '+';
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {39, 34, (-2758), 43}, intArray0);
      assertArrayEquals(new int[] {39, 39, 34, (-2758), 43, 34, (-2758), 43}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '\"';
      floatArray0[1] = (float) ';';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1142.0F), 43);
      assertArrayEquals(new float[] {34.0F, 59.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      float[] floatArray0 = new float[6];
      ArrayUtils.swap(floatArray0, (-4846), (int) (byte) (-31), 5);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-4846);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 88.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short short0 = new Short((short) (-12135));
      assertNotNull(short0);
      assertEquals((short) (-12135), (short)short0);
      
      Short short1 = new Short((short) (-12135));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-12135), (short)short1);
      
      ArrayUtils.shift(booleanArray0, (-72), (int) (short) (-12135), (-4132));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-72);
      floatArray0[1] = 13.0F;
      floatArray0[2] = (float) (short) (-1699);
      floatArray0[3] = (float) (short) (-12135);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (short)98;
      floatArray0[6] = (float) (-4132);
      floatArray0[7] = (float) (-72);
      ArrayUtils.swap(floatArray0, (int) (short) (-1699), (-4132));
      assertArrayEquals(new float[] {(-72.0F), 13.0F, (-1699.0F), (-12135.0F), 0.0F, 98.0F, (-4132.0F), (-72.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = 127;
      intArray0[2] = 1225;
      intArray0[3] = 5;
      intArray0[4] = (-3111);
      int int0 = ArrayUtils.indexOf(intArray0, 98);
      assertArrayEquals(new int[] {55, 127, 1225, 5, (-3111)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((Object[]) null, 4163);
      double[] doubleArray0 = new double[6];
      Byte byte0 = new Byte((byte)111);
      assertNotNull(byte0);
      assertEquals((byte)111, (byte)byte0);
      
      Byte byte1 = new Byte((byte)111);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)111, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte2 = new Byte((byte)2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)2, (byte)byte2);
      
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-18));
      assertArrayEquals(new byte[] {(byte)2, (byte)111}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), (-552));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 127, (-1073741823));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {55, 127, 1225, 5, (-3111)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(1, int1);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 55, (-1), 1.0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertEquals(6, doubleArray0.length);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      Integer integer0 = new Integer(4603);
      assertNotNull(integer0);
      assertEquals(4603, (int)integer0);
      
      Integer integer1 = new Integer((-234));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-234), (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Integer integer2 = new Integer((-3774));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-3774), (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer2, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      Integer integer3 = Integer.getInteger("1N7S|", 95);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(95, (int)integer3);
      
      MutableInt mutableInt0 = new MutableInt(9);
      assertEquals((byte)9, mutableInt0.byteValue());
      assertEquals(9, (int)mutableInt0.getValue());
      assertEquals(9, (int)mutableInt0.toInteger());
      assertEquals("9", mutableInt0.toString());
      assertEquals(9L, mutableInt0.longValue());
      assertEquals(9.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(9, mutableInt0.intValue());
      assertEquals(9.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)9, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer4 = mutableInt0.getValue();
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals((byte)9, mutableInt0.byteValue());
      assertEquals(9, (int)mutableInt0.getValue());
      assertEquals(9, (int)mutableInt0.toInteger());
      assertEquals("9", mutableInt0.toString());
      assertEquals(9L, mutableInt0.longValue());
      assertEquals(9.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(9, mutableInt0.intValue());
      assertEquals(9.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)9, mutableInt0.shortValue());
      assertNotNull(integer4);
      assertEquals(9, (int)integer4);
      
      Integer integer5 = new Integer(95);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(95, (int)integer5);
      
      Integer integer6 = new Integer(275);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(275, (int)integer6);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer5, integer6);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer6));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 7);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry2;
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry2;
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(14, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray0.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      
      ArrayUtils.reverse((Object[]) abstractMap_SimpleImmutableEntryArray1, (-3774), 433);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray0.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertEquals(14, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray0.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)118);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)118;
      intArray0[1] = (int) (byte)118;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 118, 118);
      assertArrayEquals(new int[] {118, 118}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)118);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)118, 97);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 97;
      floatArray0[1] = (float) (byte)118;
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (-823.8F));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new float[] {97.0F, 118.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int2);
      
      ArrayUtils.swap(floatArray0, 118, 118);
      assertArrayEquals(new float[] {97.0F, 118.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = ';';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'J';
      ArrayUtils.swap(charArray0, (-1094), (-1463), 0);
      assertArrayEquals(new char[] {'`', ';', 'k', 'k', 'J'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 118;
      Integer integer0 = new Integer(118);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(118, (int)integer0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 118;
      longArray0[1] = (long) '`';
      longArray0[2] = (-1L);
      longArray0[3] = (long) '`';
      longArray0[4] = (long) 'J';
      longArray0[5] = (long) 'k';
      longArray0[6] = (-343L);
      longArray0[7] = (long) (byte)118;
      longArray0[8] = (long) (-1);
      // Undeclared exception!
      try { 
        LongBuffer.wrap(longArray0, 118, (-1094));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.LongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      short[] shortArray0 = new short[2];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (short) (-1491), 2746L);
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1491);
      ArrayUtils.shift(shortArray0, (-3090), (-3090), (int) (short) (-1491));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      boolean[] booleanArray0 = new boolean[26];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(26, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)16;
      ArrayUtils.shift(shortArray0, (int) (short)16);
      assertArrayEquals(new short[] {(short)16}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1136L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray1);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray1);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, 1312);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 36, (-72), (-72));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-72);
      intArray0[1] = 36;
      intArray0[2] = (-72);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-72), 36, (-72)}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-72);
      floatArray0[1] = (float) (-72);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-3110), (-3110));
      assertArrayEquals(new int[] {(-72), 36, (-72)}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.shift(intArray0, (-428));
      assertArrayEquals(new int[] {(-72), (-72), 36}, intArray0);
      assertEquals(3, intArray0.length);
      
      Integer integer0 = new Integer((-72));
      assertNotNull(integer0);
      assertEquals((-72), (int)integer0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '', (int) (byte)40);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (byte)40);
      assertNull(floatArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'H');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      longArray0[3] = (long) 'b';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) 'b';
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = (int) '7';
      intArray0[6] = (int) 'P';
      intArray0[7] = (int) 'p';
      ArrayUtils.shift(intArray0, (-2102), 0, 2);
      assertArrayEquals(new int[] {0, 55, 98, 0, 2, 55, 80, 112}, intArray0);
      assertEquals(8, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)46, 1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertNotNull(bitSet1);
      assertEquals(0, byteArray0.length);
      assertNotSame(bitSet1, bitSet0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = '7';
      charArray0[2] = 'p';
      charArray0[3] = 'b';
      charArray0[4] = '_';
      charArray0[5] = 'p';
      charArray0[6] = 'b';
      charArray0[7] = 'P';
      charArray0[8] = 'p';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '2');
      assertArrayEquals(new char[] {'p', '7', 'p', 'b', '_', 'p', 'b', 'P', 'p'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-2106L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      longArray0[4] = 1609L;
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 36);
      assertArrayEquals(new long[] {(-1L), (-2106L), 2450L, 0L, 1609L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-1), 1233, (-1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2106L);
      doubleArray0[1] = 1.0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[3];
      intArray0[0] = 71;
      intArray0[1] = 71;
      intArray0[2] = 71;
      Short short0 = new Short((short)195);
      assertNotNull(short0);
      assertEquals((short)195, (short)short0);
      
      Short short1 = new Short((short)98);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)98, (short)short1);
      
      Short short2 = new Short((short) (-1699));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-1699), (short)short2);
      
      Short short3 = new Short((short)49);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short)49, (short)short3);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      shortArray0[1] = short3;
      shortArray0[2] = short1;
      shortArray0[3] = short2;
      shortArray0[4] = short2;
      shortArray0[5] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)195, (short)49, (short)98, (short) (-1699), (short) (-1699), (short) (-1699)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short) (-1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)195, (short)49, (short)98, (short) (-1699), (short) (-1699), (short) (-1699)}, shortArray1);
      assertArrayEquals(new short[] {(short)195, (short)49, (short)98, (short) (-1699), (short) (-1699), (short) (-1699)}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertEquals(6, shortArray0.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = 127;
      intArray0[2] = 1225;
      intArray0[3] = 5;
      intArray0[4] = (-3111);
      int int0 = ArrayUtils.indexOf(intArray0, 98);
      assertArrayEquals(new int[] {55, 127, 1225, 5, (-3111)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((Object[]) null, 4163);
      double[] doubleArray0 = new double[6];
      Byte byte0 = new Byte((byte)111);
      assertNotNull(byte0);
      assertEquals((byte)111, (byte)byte0);
      
      Byte byte1 = new Byte((byte)111);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)111, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte2 = new Byte((byte)2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)2, (byte)byte2);
      
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-18));
      assertArrayEquals(new byte[] {(byte)2, (byte)111}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), (-552));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 127, (-1073741823));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {55, 127, 1225, 5, (-3111)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(1, int1);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {55, 127, 1225, 5, (-3111)}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      char char0 = '4';
      Character character0 = Character.valueOf('4');
      assertNotNull(character0);
      assertEquals('4', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('C');
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('C', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) char0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, 931, (int) char0, (-92));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-92);
      doubleArray0[2] = (double) 'C';
      doubleArray0[3] = (double) (-92);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {1.0, (-92.0), 67.0, (-92.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 743;
      intArray0[1] = (int) char0;
      intArray0[2] = 931;
      intArray0[3] = 931;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 931, 78);
      assertArrayEquals(new int[] {743, 52, 931, 931}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(3, int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-196.951749), (-2126834765));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {1.0, (-92.0), 67.0, (-92.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 36, (-72), (-72));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-72);
      intArray0[1] = 36;
      intArray0[2] = (-72);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 36, (-72)}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-72);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 36);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 36, (-72)}, intArray0);
      assertArrayEquals(new int[] {0, (-72)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-2074));
      assertNotNull(integer0);
      assertEquals((-2074), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-125));
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-125);
      doubleArray0[1] = (double) (byte) (-125);
      doubleArray0[2] = (double) (byte) (-125);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2528.63036605), (-1), 0.1);
      assertArrayEquals(new double[] {(-125.0), (-125.0), (-125.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.1);
      assertArrayEquals(new double[] {(-125.0), (-125.0), (-125.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-125));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-125.0);
      ArrayUtils.swap(objectArray0, (int) (byte) (-125), (-1));
      assertEquals(1, objectArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (byte) (-125);
      floatArray0[6] = 760.2F;
      floatArray0[7] = (float) (-1);
      floatArray0[8] = (float) (byte) (-125);
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-125.0F), 760.2F, (-1.0F), (-125.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-125.0F), 760.2F, (-1.0F), (-125.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int1 = ArrayUtils.indexOf(intArray1, (-1), (-1));
      assertTrue(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals((-1), int1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), (-1578));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-125.0), (-125.0), (-125.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (-2528.63036605));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new double[] {(-125.0), (-125.0), (-125.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int2);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ArrayUtils.shift((Object[]) null, (int) (byte)0);
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      Byte byte1 = new Byte((byte)88);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)88, (byte)byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)88);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-1073741823);
      int int0 = ArrayUtils.indexOf(intArray0, (-552), 0);
      assertArrayEquals(new int[] {0, 0, 0, (-1073741823)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)74;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (-1073741823);
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)111;
      doubleArray0[7] = (double) 4163;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, 948);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 74.0, 0.0, 0.0, (-1.073741823E9), 0.0, 111.0, 4163.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(5, int1);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)74);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, (-1073741823)}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, (-1073741823)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2113929216), (-2113929216));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.swap((float[]) null, (-1193), (-1193));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, (Integer) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Integer integer0 = new Integer(97);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(97, (int)integer0);
      
      Integer integer1 = new Integer(97);
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(97, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      Integer integer2 = Integer.getInteger("+?vL<o|skBW*h GUQ", (-2146725623));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-2146725623), (int)integer2);
      
      Integer integer3 = new Integer(55);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(55, (int)integer3);
      
      Integer integer4 = new Integer((-1193));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-1193), (int)integer4);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer3, integer4);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      MutableInt mutableInt0 = new MutableInt((-1614));
      assertEquals((-1614), (int)mutableInt0.getValue());
      assertEquals((-1614.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1614", mutableInt0.toString());
      assertEquals((-1614.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-78), mutableInt0.byteValue());
      assertEquals((-1614), (int)mutableInt0.toInteger());
      assertEquals((short) (-1614), mutableInt0.shortValue());
      assertEquals((-1614), mutableInt0.intValue());
      assertEquals((-1614L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Integer integer5 = mutableInt0.getValue();
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals((-1614), (int)mutableInt0.getValue());
      assertEquals((-1614.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1614", mutableInt0.toString());
      assertEquals((-1614.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-78), mutableInt0.byteValue());
      assertEquals((-1614), (int)mutableInt0.toInteger());
      assertEquals((short) (-1614), mutableInt0.shortValue());
      assertEquals((-1614), mutableInt0.intValue());
      assertEquals((-1614L), mutableInt0.longValue());
      assertNotNull(integer5);
      assertEquals((-1614), (int)integer5);
      
      Integer integer6 = new Integer(105);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      assertEquals(105, (int)integer6);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.indexOf(longArray0, (long) 0, (-2126834765));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.reverse((float[]) null);
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) (-2126834765), 41);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.insert((-5706), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-5706);
      longArray0[2] = (long) (-5706);
      longArray0[3] = (long) (-5706);
      longArray0[4] = (long) (-5706);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-5706L), 0L, (-5706L), (-5706L), (-5706L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 37, (-5706));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-5706L), 0L, (-5706L), (-5706L), (-5706L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-5706L);
      objectArray0[1] = (Object) (-5706L);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1]);
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      Integer integer0 = new Integer((-1403));
      assertNotNull(integer0);
      assertEquals((-1403), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertNotNull(string0);
      assertEquals("-1403", string0);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 71.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1229.0212F;
      floatArray0[4] = (-3093.935F);
      floatArray0[5] = 0.0F;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 831L, 6);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals((-1), int0);
      
      Integer integer0 = ArrayUtils.get((Integer[]) null, 6);
      assertNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-615), (-615));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Long[] longArray2 = new Long[2];
      longArray2[0] = (Long) 0L;
      longArray2[1] = (Long) 0L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, 0L);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray3);
      assertNotNull(longArray3);
      assertEquals(2, longArray2.length);
      assertEquals(2, longArray3.length);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      short[] shortArray0 = new short[8];
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(floatArray0, (-2146708010), (int) (short) (-443));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 88;
      intArray0[1] = 88;
      ArrayUtils.swap(intArray0, 88, 2, 88);
      assertArrayEquals(new int[] {88, 88}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-2081L);
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, (-407L), (-3510));
      assertArrayEquals(new long[] {(-1L), (-2081L), (-1L), 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = 1.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[6];
      charArray0[1] = 'B';
      charArray0[2] = 'j';
      charArray0[3] = 'q';
      charArray0[4] = 'l';
      charArray0[5] = 'v';
      int int1 = ArrayUtils.indexOf(charArray0, 'C', (-1));
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', 'B', 'j', 'q', 'l', 'v'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)596);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences((short[]) null, (short)12);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)1319);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1141);
      intArray0[1] = (int) (short)1319;
      intArray0[2] = (int) (short)1319;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-1141), 1319, 1319}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '9';
      charArray0[2] = 'w';
      charArray0[3] = 'J';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'b', (-2501));
      assertArrayEquals(new char[] {'{', '9', 'w', 'J'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'{', '9', 'w', 'J'}, charArray0);
      assertArrayEquals(new char[] {'{', '9', 'w', 'J'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = 'S';
      charArray0[2] = 'i';
      charArray0[3] = 'e';
      charArray0[4] = 'o';
      charArray0[5] = '1';
      charArray0[6] = 'P';
      charArray0[7] = '';
      charArray0[8] = '';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'i', (-2052));
      assertArrayEquals(new char[] {'b', 'S', 'i', 'e', 'o', '1', 'P', '', ''}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(int0, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-27);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-27), (byte) (-27)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)48;
      shortArray0[1] = (short)127;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)1301;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)48, (short)127, (short)48, (short) (-1), (short)1301}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)48, (short)127, (short)48, (short) (-1), (short)1301}, shortArray0);
      assertArrayEquals(new short[] {(short)48, (short)127, (short)48, (short) (-1), (short)1301}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-56), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -56, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-450));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-450)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-450);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1085, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1085, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 243;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = Integer.MAX_VALUE;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = Integer.MAX_VALUE;
      intArray1[1] = 243;
      intArray1[2] = 243;
      intArray1[3] = 243;
      intArray1[4] = Integer.MAX_VALUE;
      intArray1[5] = Integer.MAX_VALUE;
      intArray1[6] = 243;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 83);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 83, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      ArrayUtils.swap(charArray0, (-1510), (-1963), 1987);
      assertArrayEquals(new char[] {'='}, charArray0);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)3;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)68, (int) (byte)28);
      assertArrayEquals(new byte[] {(byte)97, (byte)3}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-89));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)97, (byte)3}, byteArray0);
      assertArrayEquals(new byte[] {(byte)97, (byte)3}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      long[] longArray0 = new long[1];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)44, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-244));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-244), (int)integer0);
      
      Integer integer1 = new Integer(9);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(9, (int)integer1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = new Integer[0];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer[] integerArray2 = ArrayUtils.addAll(integerArray0, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(1, integerArray2.length);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      
      MockRandom mockRandom0 = new MockRandom(54L);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) (byte)44);
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      long[] longArray0 = new long[1];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)44, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-244));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-244), (int)integer0);
      
      Integer integer1 = new Integer(9);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(9, (int)integer1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = new Integer[0];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer[] integerArray2 = ArrayUtils.addAll(integerArray0, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(1, integerArray2.length);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      
      MockRandom mockRandom0 = new MockRandom(54L);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) (byte)44);
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)123);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte)123;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 123, 123);
      assertArrayEquals(new int[] {0, 123}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)123, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 20);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int2);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, (-1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 123}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (-1));
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2026L, (-2205));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (int) (byte)1;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, int0);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 1, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 1, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int1 = ArrayUtils.indexOf(intArray0, (-5013), (int) (byte)0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 1, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals((-1), int1);
      assertNotSame(intArray0, intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-5013);
      floatArray0[1] = (float) 0;
      floatArray0[2] = 386.0F;
      floatArray0[3] = (float) 1;
      floatArray0[4] = 361.0F;
      floatArray0[5] = (float) (byte)20;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-5013.0F), 0.0F, 386.0F, 1.0F, 361.0F, 20.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 219.993F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      long[] longArray0 = new long[4];
      longArray0[0] = 72L;
      longArray0[1] = 72L;
      longArray0[2] = 0L;
      longArray0[3] = (-788L);
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = '\"';
      charArray0[2] = '.';
      charArray0[3] = '.';
      charArray0[4] = '3';
      charArray0[5] = 'g';
      charArray0[6] = '3';
      charArray0[7] = 'g';
      charArray0[8] = '.';
      ArrayUtils.swap(charArray0, (-1), 0, 0);
      assertArrayEquals(new char[] {'g', '\"', '.', '.', '3', 'g', '3', 'g', '.'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = ArrayUtils.contains(charArray0, '[');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.swap(charArray0, (-2145907970), (-2145907970), (-2145907970));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-1533L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)33;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte) (-93), (int) (byte)32);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = '/';
      charArray0[2] = '\"';
      charArray0[3] = '';
      charArray0[4] = 'J';
      ArrayUtils.swap(charArray0, 977, 20, (int) (byte)33);
      assertArrayEquals(new char[] {'f', '/', '\"', '', 'J'}, charArray0);
      assertEquals(5, charArray0.length);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (byte) (-93));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int[] intArray0 = new int[3];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, Integer.MAX_VALUE);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = 'G';
      charArray0[2] = 'M';
      charArray0[3] = '\"';
      charArray0[4] = '\'';
      ArrayUtils.shift(booleanArray0, 49, (-2650), 49);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 49;
      doubleArray0[1] = 88.0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {49.0, 88.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[20];
      intArray0[0] = (-2650);
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-2650), 49);
      assertFalse(int1 == int0);
      assertEquals(20, intArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-3625);
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = 'v';
      charArray0[2] = '&';
      charArray0[3] = '6';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      charArray0[6] = 'v';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'6', 'v', '&', '6', 'g', 'g', 'v'}, charArray1);
      assertArrayEquals(new char[] {'6', 'v', '&', '6', 'g', 'g', 'v'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-3625), 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(12, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.insert(1795, (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1063.97799263121;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1063.97799263121);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)1;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (byte)1;
      doubleArray2[1] = (double) (byte)1;
      doubleArray2[2] = (double) (byte)1;
      double[] doubleArray3 = ArrayUtils.removeAllOccurrences(doubleArray2, 1412.86);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      ArrayUtils.shift(doubleArray1, 36, (int) (byte)1, 36);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (byte)1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{1, 2, 3, 4, 5}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(6, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)1;
      ArrayUtils.shift(longArray0, 36);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      Float float0 = new Float((-2716.0F));
      assertNotNull(float0);
      assertEquals((-2716.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-2716.0F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2716.0F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float1;
      floatArray0[4] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-2716.0F), (-2716.0F), (-2716.0F), (-2716.0F), (-2716.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)54;
      Byte byte1 = new Byte((byte)54);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)54, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)54);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)54, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)54, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-90));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      assertEquals((byte) (-90), (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      assertEquals((byte)54, (byte)byte5);
      
      byteArray0[4] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)54, (byte)54, (byte) (-90), (byte)54}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertArrayEquals(new byte[] {(byte)54, (byte)54, (byte)54, (byte) (-90), (byte)54}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-1.0), (-1680));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray3));
      assertNotNull(booleanArray3);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray2.length);
      assertEquals(8, booleanArray3.length);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertSame(booleanArray2, booleanArray3);
      assertSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)123);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)123;
      intArray0[1] = (int) (byte)123;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 123, 123);
      assertArrayEquals(new int[] {123, 123}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)123);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      
      Float float0 = new Float((-31.0F));
      assertNotNull(float0);
      assertEquals((-31.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((-1834.258));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1834.258F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      floatArray0[3] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-31.0F), (-1834.258F), (-1834.258F), (-1834.258F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      
      Short short0 = new Short((byte)123);
      assertNotNull(short0);
      assertEquals((short)123, (short)short0);
      
      Short[] shortArray0 = new Short[9];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      shortArray0[8] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)123, (short)123, (short)123, (short)123, (short)123, (short)123, (short)123, (short)123, (short)123}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short)1331);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)123, (short)123, (short)123, (short)123, (short)123, (short)123, (short)123, (short)123, (short)123}, shortArray1);
      assertArrayEquals(new short[] {(short)123, (short)123, (short)123, (short)123, (short)123, (short)123, (short)123, (short)123, (short)123}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      boolean boolean2 = ArrayUtils.isSorted(floatArray1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new float[] {(-31.0F), (-1834.258F), (-1834.258F), (-1834.258F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((-1.5043086F));
      assertNotNull(float0);
      assertEquals((-1.5043086F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1491.0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1491.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(3227.54391760026);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(3227.544F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1.0F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals(1.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-1.0F));
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals((-1.0F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-767.6409510644727));
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotNull(float5);
      assertEquals((-767.6409F), (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.5043086F), (-1491.0F), 3227.544F, 1.0F, (-1.0F), (-767.6409F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      long[] longArray0 = new long[6];
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (float)floatArray0[3];
      doubleArray0[1] = (-1491.0);
      doubleArray0[2] = (double) (float)floatArray0[2];
      doubleArray0[3] = (-1491.0);
      doubleArray0[4] = 1095.7;
      doubleArray0[5] = (double) (float)floatArray0[2];
      doubleArray0[6] = (-513.0);
      doubleArray0[7] = (double) (float)floatArray0[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, Double.NaN, 287);
      assertArrayEquals(new double[] {1.0, (-1491.0), 3227.5439453125, (-1491.0), 1095.7, 3227.5439453125, (-513.0), (-1491.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) 76;
      objectArray0[2] = (Object) 76;
      ArrayUtils.shift(objectArray0, 76);
      assertEquals(3, objectArray0.length);
      
      Integer integer0 = new Integer(76);
      assertNotNull(integer0);
      assertEquals(76, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) 83;
      ArrayUtils.shift(objectArray0, 83);
      assertEquals(3, objectArray0.length);
      
      Integer integer0 = new Integer(83);
      assertNotNull(integer0);
      assertEquals(83, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      Long long0 = new Long(2214);
      assertNotNull(long0);
      assertEquals(2214L, (long)long0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) long0;
      objectArray0[1] = (Object) long0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2214;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      ArrayUtils.swap(floatArray0, 0, 11, 0);
      assertArrayEquals(new float[] {2214.0F, 0.0F, 2.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 4324.3955F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2214.0F, 0.0F, 2.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2214.0F, 0.0F, 2.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-86), (byte)39, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)39, (byte) (-1)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)39;
      floatArray0[1] = (float) (byte)39;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte)39);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {39.0F, 39.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {39.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer integer0 = Integer.getInteger("", (int) (byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-86);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-86);
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-86);
      ArrayUtils.shift(byteArray2, (-983));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-86)}, byteArray2);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 9);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class0;
      classArray0[4] = class0;
      classArray0[5] = class0;
      classArray0[6] = class0;
      classArray0[7] = class0;
      classArray0[8] = class0;
      ArrayUtils.swap(floatArray0, (-86), 2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {39.0F, 39.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      byte byte0 = (byte)0;
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 722;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = 0;
      intArray0[6] = 5147;
      float[] floatArray0 = new float[3];
      floatArray0[0] = 16.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {16.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      int int0 = 9;
      Integer integer0 = Integer.valueOf(9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5147, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      long[] longArray0 = new long[9];
      longArray0[1] = (-1010L);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = ' ';
      charArray0[2] = '(';
      ArrayUtils.swap(charArray0, 5106, 629, 0);
      assertArrayEquals(new char[] {'U', ' ', '(', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      byte[] byteArray0 = new byte[2];
      objectArray0[4] = (Object) (byte)100;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)1, (-4340));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Integer[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1, (int) (short)1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)0}, shortArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)1795);
      assertNotNull(short0);
      assertEquals((short)1795, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1795);
      assertArrayEquals(new short[] {(short)1795}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-7));
      assertArrayEquals(new short[] {(short) (-7), (short) (-7)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)759);
      assertNotNull(short0);
      assertEquals((short)759, (short)short0);
      
      shortArray0[1] = short0;
      Short short1 = new Short((short)759);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)759, (short)short1);
      
      shortArray0[2] = short1;
      Short short2 = new Short((short) shortArray0[2]);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals(7, shortArray0.length);
      assertEquals((short)759, (short)short2);
      
      shortArray0[3] = short2;
      Short short3 = Short.valueOf((short) shortArray0[3]);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals(7, shortArray0.length);
      assertEquals((short)759, (short)short3);
      
      shortArray0[4] = short3;
      Short short4 = new Short((short)1);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals((short)1, (short)short4);
      
      shortArray0[5] = short4;
      Short short5 = new Short((short)759);
      assertTrue(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertNotNull(short5);
      assertEquals((short)759, (short)short5);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[3]);
      assertArrayEquals(new short[] {(short)759, (short)759, (short)759, (short)759, (short)759, (short)1, (short)759}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = 'E';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '*';
      charArray0[5] = 'w';
      charArray0[6] = 'V';
      charArray0[7] = '-';
      ArrayUtils.swap(charArray0, 1963, 89, 89);
      assertArrayEquals(new char[] {'_', 'E', '2', '2', '*', 'w', 'V', '-'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)51);
      assertNotNull(short0);
      assertEquals((short)51, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)51);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)51, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-3581));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-3581), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1151));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short) (-1151), (short)short3);
      
      shortArray0[3] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1);
      assertArrayEquals(new short[] {(short)51, (short)51, (short) (-3581), (short) (-1151)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)23594);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      Integer integer0 = new Integer(860);
      assertNotNull(integer0);
      assertEquals(860, (int)integer0);
      
      Integer integer1 = new Integer(860);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(860, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)102;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-7));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-63), (byte)49, (byte) (-54), (byte) (-38), (byte)102}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)49, (byte) (-54), (byte) (-38), (byte)102}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      short[] shortArray0 = new short[1];
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2129;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2129, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2129, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(3207.0F);
      assertNotNull(float0);
      assertEquals(3207.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {3207.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      Object object2 = ArrayUtils.get(objectArray0, (-1230));
      assertNull(object2);
      assertEquals(3, objectArray0.length);
      
      Long long0 = new Long((-2476L));
      assertNotNull(long0);
      assertEquals((-2476L), (long)long0);
      
      Long long1 = new Long((-1));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2983L);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.insert((-1230), longArray1, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, Integer.MAX_VALUE, (-3842));
      assertNull(byteArray0);
      
      ArrayUtils.shift((Object[]) longArray0, Integer.MAX_VALUE, (-2147483646), 2330);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1089);
      longArray0[1] = (long) (-1089);
      longArray0[2] = (long) (-1089);
      longArray0[3] = (long) (-1089);
      longArray0[4] = (long) (-1089);
      longArray0[5] = (long) (-1089);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1089), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1089, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1491.0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1491.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(3227.54391760026);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(3227.544F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1.0F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals(1.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-1.0F));
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals((-1.0F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-767.0));
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotNull(float5);
      assertEquals((-767.0F), (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1491.0F), 3227.544F, 1.0F, (-1.0F), (-767.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1022);
      longArray0[1] = (long) (-1022);
      longArray0[2] = (long) (-1022);
      longArray0[3] = (long) (-1022);
      longArray0[4] = (long) (-1022);
      longArray0[5] = (long) (-1022);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1022), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1022, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)30;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)4;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)4, (byte)30}, byteArray0);
      assertArrayEquals(new byte[] {(byte)4}, byteArray1);
      assertArrayEquals(new byte[] {(byte)30}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-238);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-238), (int) (short) (-238));
      assertArrayEquals(new short[] {(short) (-238)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = '\"';
      charArray0[2] = 'J';
      charArray0[3] = '}';
      charArray0[4] = ':';
      charArray0[5] = 'a';
      charArray0[6] = '3';
      charArray0[7] = 'S';
      charArray0[8] = 'b';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1022), '$');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1022, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)16;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)16;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte)16);
      assertArrayEquals(new float[] {0.0F, 16.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      MockRandom mockRandom0 = new MockRandom((-560L));
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-101);
      longArray0[1] = (-560L);
      longArray0[2] = (long) (byte)16;
      longArray0[3] = (-598L);
      longArray0[4] = (long) (byte) (-101);
      longArray0[5] = 0L;
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (-1L);
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {(-560L), 16L, (-598L), (-101L), 0L, 0L, (-1L), (-101L)}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-57);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)40, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-1017L);
      longArray0[2] = (long) (byte) (-57);
      longArray0[3] = 0L;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = 0L;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1017L);
      doubleArray0[1] = (double) (byte)40;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1017.0), 40.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)25245;
      shortArray0[1] = (short)1795;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)25245, (short)1795}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 2299, (-343), (-1294));
      Integer integer0 = new Integer((-849));
      assertNotNull(integer0);
      assertEquals((-849), (int)integer0);
      
      ArrayUtils.swap((short[]) null, 100, (int) (short)1);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2024;
      shortArray0[1] = (short) (-3633);
      shortArray0[2] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)2024, (short) (-3633), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2299;
      intArray0[1] = (-78);
      intArray0[2] = (int) (short)2024;
      intArray0[3] = (-2145153983);
      intArray0[4] = 100;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {100, (-2145153983), 2024, (-78), 2299}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 2299, (-343), (-1294));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1294);
      longArray0[2] = (long) 2299;
      longArray0[3] = (long) 2299;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-1294L), 0L, 2299L, 2299L}, longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2816;
      shortArray0[1] = (short) (-799);
      shortArray0[2] = (short) (-3430);
      shortArray0[3] = (short)14;
      shortArray0[4] = (short)43;
      shortArray0[5] = (short) (-31930);
      shortArray0[6] = (short)616;
      shortArray0[7] = (short)50;
      shortArray0[8] = (short) (-2115);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ArrayUtils.shift(byteArray0, (-2989));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2989);
      longArray0[1] = (long) (-2989);
      longArray0[2] = (long) (-2989);
      int[] intArray0 = new int[1];
      intArray0[0] = (-2989);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2989, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)50;
      shortArray0[0] = (short)50;
      shortArray0[1] = (short)12;
      short short1 = (short)1076;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)1076);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)50, (short)12}, shortArray0);
      assertArrayEquals(new short[] {(short)50, (short)12}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1203.26F);
      floatArray0[1] = (float) (short)50;
      floatArray0[2] = (float) (short)12;
      floatArray0[3] = (float) (short)50;
      floatArray0[4] = (float) (short)50;
      floatArray0[5] = (float) (short)50;
      floatArray0[6] = (float) (short)1076;
      int int0 = (-3416);
      ArrayUtils.swap(shortArray1, (-3416), (-2145048582));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)50, (short)12}, shortArray0);
      assertArrayEquals(new short[] {(short)50, (short)12}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)50;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1951L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (short) (-2319));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-432);
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 12;
      intArray0[3] = (-1);
      ArrayUtils.swap(intArray0, (-198), 12, 59);
      assertArrayEquals(new int[] {(-432), 0, 12, (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0), 0);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-2295));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-432);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 59;
      floatArray0[3] = (float) (-198);
      floatArray0[4] = (float) (-2295);
      floatArray0[5] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-432.0F), 0.0F, 59.0F, (-198.0F), (-2295.0F), (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-2295));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-2295), (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 12;
      integerArray0[2] = (Integer) 0;
      Integer integer1 = new Integer((-2442));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals((-2442), (int)integer1);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) int0);
      assertTrue(int0 == int1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-432.0F), 0.0F, 59.0F, (-198.0F), (-2295.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-80.0F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-80.0F));
      assertArrayEquals(new float[] {(-80.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      float[] floatArray0 = new float[2];
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, 1.0F);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[2];
      ArrayUtils.swap(intArray0, 0, 0, (-1254));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2258);
      shortArray0[1] = (short)2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2009), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2009, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 403;
      intArray0[1] = 273;
      intArray0[2] = 1935;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2145408740, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 977, 40, 273);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)102;
      shortArray0[1] = (short)1728;
      shortArray0[2] = (short)2136;
      shortArray0[3] = (short) (-23832);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (-662);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)59;
      shortArray0[8] = (short)35;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-522), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -522, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(305L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-708), (-109));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = '7';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'h';
      ArrayUtils.swap(charArray0, 0, 35, 1050);
      assertArrayEquals(new char[] {'h', 'h', '7', 'm', 'm', 'h'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      float[] floatArray0 = new float[8];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      ArrayUtils.swap(charArray0, (-79), 2298, (-79));
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, (-343), (-343), (-2479));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2479);
      longArray0[1] = (long) (-343);
      longArray0[2] = (long) 'Q';
      longArray0[3] = (long) 'Q';
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 1181L);
      assertArrayEquals(new long[] {(-2479L), (-343L), 81L, 81L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 2299, (-343), (-1294));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2299;
      longArray0[2] = (long) 2299;
      longArray0[3] = (long) 2299;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {2299L, 0L, 2299L, 2299L}, longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1294);
      intArray0[1] = 2299;
      intArray0[2] = (-1294);
      intArray0[3] = (-621);
      intArray0[4] = 2299;
      intArray0[5] = (-1294);
      intArray0[6] = (-343);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-621));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1294), 2299, (-1294), (-621), 2299, (-1294), (-343)}, intArray0);
      assertArrayEquals(new int[] {(-621), (-1294), 2299, (-1294), (-621), 2299, (-1294), (-343)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-575);
      shortArray0[1] = (short) (-1423);
      shortArray0[2] = (short) (-15);
      shortArray0[3] = (short)3819;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (-109);
      shortArray0[6] = (short)24432;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1333);
      assertArrayEquals(new short[] {(short) (-575), (short) (-1423), (short) (-15), (short)3819, (short)1, (short) (-109), (short)24432}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-15);
      byte byte0 = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)0;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte) (-15);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -15, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2263.6938F;
      floatArray0[1] = 2263.6938F;
      floatArray0[2] = 2263.6938F;
      floatArray0[1] = 2263.6938F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {2263.6938F, 2263.6938F, 2263.6938F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      Integer integer2 = Integer.valueOf((-1));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      float[] floatArray0 = new float[7];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      Integer integer0 = new Integer((-1729));
      assertNotNull(integer0);
      assertEquals((-1729), (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      ArrayUtils.swap((boolean[]) null, (-1729), (-1729), (-1729));
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = 36;
      int int1 = (-72);
      int int2 = Integer.MAX_VALUE;
      ArrayUtils.swap(booleanArray0, 36, (-72), Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-72);
      intArray0[1] = 36;
      intArray0[2] = (-72);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-72), 36, (-72)}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-72);
      floatArray0[1] = (float) (-72);
      floatArray0[2] = (float) (-72);
      floatArray0[3] = (float) (-72);
      floatArray0[4] = (float) 36;
      floatArray0[5] = 2263.6938F;
      floatArray0[6] = (float) (-72);
      floatArray0[7] = (float) 36;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-72.0F), (-72.0F), (-72.0F), (-72.0F), 36.0F, 2263.6938F, (-72.0F), 36.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      
      Integer integer0 = Integer.valueOf((-72));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertNotNull(integer0);
      assertEquals((-72), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1182);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-1506);
      shortArray0[3] = (short)5;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)9;
      shortArray0[6] = (short)1142;
      shortArray0[7] = (short) (-1480);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1182), (short)1, (short) (-1506), (short)5, (short)1, (short)9, (short)1142, (short) (-1480)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1182), (short)1, (short) (-1506), (short)5, (short)1, (short)9, (short)1142, (short) (-1480)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 119);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 119, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 5194;
      intArray0[1] = 2424;
      intArray0[2] = (-269);
      intArray0[3] = 3467;
      intArray0[4] = 53;
      intArray0[5] = (-1);
      intArray0[6] = 0;
      intArray0[7] = (-1625);
      intArray0[8] = 20;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) '#';
      floatArray0[3] = (float) '#';
      floatArray0[4] = (float) 3;
      floatArray0[5] = (float) '#';
      floatArray0[6] = (float) '#';
      floatArray0[7] = (float) 3;
      floatArray0[8] = (float) 3;
      float[] floatArray1 = ArrayUtils.insert(3, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {3.0F, 3.0F, 35.0F, 35.0F, 3.0F, 35.0F, 35.0F, 3.0F, 3.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1697.4692F;
      ArrayUtils.swap(floatArray0, 5, 5, 5);
      assertArrayEquals(new float[] {1697.4692F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 5, 5);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 5006L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 5;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 5;
      intArray0[5] = 5;
      ArrayUtils.shift(floatArray0, (-3756), (-1), (-109));
      assertArrayEquals(new float[] {1697.4692F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 419.23F);
      assertArrayEquals(new float[] {419.23F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-123));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-123);
      intArray0[1] = (int) (short) (-123);
      intArray0[2] = (int) (short) (-123);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-123));
      assertArrayEquals(new int[] {(-123), (-123), (-123)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, int0);
      
      ArrayUtils.swap((char[]) null, (-421), 1806, 256);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-123);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {(-123L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray2.length);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray2.length);
      assertFalse(boolean0);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1063.97799263121;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 3228.54391760026);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 3228.54391760026, 1.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray1, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'D';
      charArray0[4] = 'D';
      charArray0[5] = 'D';
      char[] charArray1 = ArrayUtils.add(charArray0, 2, 'K');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'D', 'q', 'K', 'q', 'D', 'D', 'D'}, charArray1);
      assertArrayEquals(new char[] {'D', 'q', 'q', 'D', 'D', 'D'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(6, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'D';
      floatArray0[1] = (float) (byte)1;
      floatArray0[2] = (float) 'q';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte)1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {68.0F, 1.0F, 113.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 68.0F, 1.0F, 113.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte)20;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)20, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)20}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte)0;
      intArray0[2] = (-1655);
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      int int0 = ArrayUtils.indexOf(charArray0, '@');
      assertArrayEquals(new char[] {'@'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-1633), 37, 1093);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 0, 12, 179);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-1), 179, 419);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 103;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-3625);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0, (-3625), 0, 0, 0, 103}, intArray0);
      assertEquals(7, intArray0.length);
      
      ArrayUtils.shift((boolean[]) null, (int) (byte)0, (int) (byte)0, (int) (byte)2);
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, (int) (byte)0);
      assertArrayEquals(new int[] {0, 0, (-3625), 0, 0, 0, 103}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 127, 37, (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)113;
      shortArray0[1] = (short) (-30839);
      shortArray0[2] = (short)113;
      shortArray0[3] = (short) (-30839);
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-1262));
      assertNotNull(short0);
      assertEquals((short) (-1262), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals(2, shortArray0.length);
      assertEquals((short) (-1262), (short)short1);
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[1] = (-1450L);
      longArray0[3] = 1L;
      longArray0[4] = 1311L;
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertArrayEquals(new long[] {53L, (-1450L), 0L, 1L, 1311L}, longArray0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5043;
      shortArray0[1] = (short) (-30839);
      shortArray0[2] = (short) (-1831);
      shortArray0[3] = (short)113;
      shortArray0[4] = (short)2458;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)5043, (short) (-30839), (short) (-1831), (short)113, (short)2458}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1311L;
      floatArray0[1] = (float) 53L;
      floatArray0[2] = (float) (-1450L);
      floatArray0[3] = (float) 53L;
      floatArray0[4] = (float) (short) (-30839);
      floatArray0[5] = (float) (short) (-30839);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {1311.0F, 53.0F, (-1450.0F), 53.0F, (-30839.0F), (-30839.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1311.0F, 53.0F, (-1450.0F), 53.0F, (-30839.0F), (-30839.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      
      Short[] shortArray2 = new Short[6];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (Short) (short)5043;
      shortArray2[1] = (Short) (short) (-30839);
      shortArray2[2] = (Short) (short)2458;
      shortArray2[3] = (Short) (short)2458;
      shortArray2[4] = (Short) (short)5043;
      shortArray2[5] = (Short) (short) (-30839);
      Short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertEquals(6, shortArray2.length);
      assertEquals(6, shortArray3.length);
      assertNotSame(shortArray2, shortArray1);
      assertSame(shortArray2, shortArray3);
      assertSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 219.993F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      long[] longArray0 = new long[4];
      longArray0[0] = 72L;
      longArray0[1] = 72L;
      longArray0[2] = 0L;
      longArray0[3] = (-788L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {72L, 72L, 0L, (-788L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)122, (byte)122}, byteArray0);
      assertArrayEquals(new byte[] {(byte)122, (byte)122, (byte)122, (byte)122}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray1, (-322.82F));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)122;
      intArray0[1] = (int) (byte)122;
      intArray0[2] = 121;
      intArray0[3] = (int) (byte)122;
      ArrayUtils.swap(intArray0, (-2588), (-2588), 122);
      assertArrayEquals(new int[] {122, 122, 121, 122}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1491);
      shortArray0[1] = (short)1633;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (short) (-1491), 2746L);
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(53L, 0.0, 1.0);
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)1633, (short) (-1491)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)1633;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((short)1633);
      assertNotNull(integer0);
      assertEquals(1633, (int)integer0);
      
      Integer integer1 = new Integer((-1378));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1378), (int)integer1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[2] = (byte) (-80);
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)53;
      objectArray0[1] = (Object) (byte) (-80);
      objectArray0[2] = (Object) (byte)53;
      Object object0 = ArrayUtils.get(objectArray0, 2146612360);
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[3] = null;
      Integer integer0 = new Integer((-2339));
      assertNotNull(integer0);
      assertEquals((-2339), (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0);
      assertEquals(4, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      long[] longArray0 = new long[20];
      longArray0[0] = (long) (byte)40;
      int int0 = ArrayUtils.indexOf(longArray0, 2019L, 41);
      assertEquals(20, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = ' ';
      charArray0[2] = '(';
      ArrayUtils.swap(charArray0, 5106, 629, 0);
      assertArrayEquals(new char[] {'U', ' ', '(', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)12;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)100, (byte)1, (byte)12, (byte)100, (byte)1, (byte)12}, byteArray1);
      assertArrayEquals(new byte[] {(byte)100, (byte)1, (byte)12}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int0 = 0;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) 0, 76L);
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)2522);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 226);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 4183);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4183, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, (-343), (-343), (-2479));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2479);
      longArray0[1] = (long) (-343);
      longArray0[2] = (long) 'Q';
      longArray0[3] = (long) 'Q';
      longArray0[4] = (long) (-343);
      longArray0[5] = (long) (-2479);
      longArray0[6] = (long) (-343);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-2479L), (-343L), 81L, 81L, (-343L), (-2479L), (-343L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1063.97799263121;
      doubleArray0[1] = (double) 'Q';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1063.97799263121);
      assertArrayEquals(new double[] {1063.97799263121, 81.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 90;
      int int1 = ArrayUtils.indexOf(intArray0, 3940, (-1506));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {90}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-2479L), (-343L), 81L, 81L, (-343L), (-2479L), (-343L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(221);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(221, (int)integer0);
      
      double[] doubleArray0 = new double[1];
      ArrayUtils.shift(doubleArray0, (-596));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-596), 2231);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 2200);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2200, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      MockRandom mockRandom0 = new MockRandom(3602L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'6'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2174L);
      long[] longArray1 = ArrayUtils.add(longArray0, 0, (-2174L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-2174L)}, longArray0);
      assertArrayEquals(new long[] {(-2174L), (-2174L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      byte byte0 = (byte) (-101);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte)2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, false);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(0, int1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte) (-101);
      intArray0[3] = (-1);
      intArray0[4] = 76;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 76, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)50;
      shortArray0[1] = (short)12;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)1076);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)50, (short)12}, shortArray0);
      assertArrayEquals(new short[] {(short)50, (short)12}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1203.26F);
      floatArray0[1] = (float) (short)50;
      floatArray0[2] = (float) (short)12;
      floatArray0[3] = (float) (short)50;
      floatArray0[4] = (float) (short)50;
      floatArray0[5] = (float) (short)50;
      floatArray0[6] = (float) (short)1076;
      ArrayUtils.swap(shortArray1, (-3416), (-2145048582));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)50, (short)12}, shortArray0);
      assertArrayEquals(new short[] {(short)50, (short)12}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = Character.valueOf('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('b');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('b', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('`');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('`', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('#');
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('#', (char)character3);
      
      characterArray0[3] = character3;
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 3173.0);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[1] = object1;
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.nullToEmpty((Integer[]) null, (Class<Integer[]>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1491);
      shortArray0[1] = (short)1633;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (short) (-1491), 2746L);
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(53L, 0.0, 1.0);
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)1633, (short) (-1491)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1491);
      doubleArray0[1] = (-1.0);
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      Character character1 = new Character('t');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('t', (char)character1);
      
      Character character2 = Character.valueOf('t');
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('t', (char)character2);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'t'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = '3';
      charArray0[2] = 'm';
      charArray0[3] = '.';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'g');
      assertArrayEquals(new char[] {'g', '3', 'm', '.', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'g';
      longArray0[1] = (long) '.';
      longArray0[2] = (long) 'm';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {103L, 46L, 109L, 103L, 46L, 109L}, longArray1);
      assertArrayEquals(new long[] {103L, 46L, 109L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '3';
      doubleArray0[1] = (double) 'm';
      doubleArray0[2] = (double) 'm';
      doubleArray0[3] = (double) 'm';
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 3328, 566.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3328, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'f';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'V', Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'V', 'f'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 219.993F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (float) 72L);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      Integer integer0 = Integer.getInteger("", 67);
      assertNotNull(integer0);
      assertEquals(67, (int)integer0);
      
      byte[] byteArray0 = new byte[6];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 219.993F;
      doubleArray0[1] = (-1.0);
      doubleArray0[3] = (-513.473);
      doubleArray0[4] = (double) 67;
      doubleArray0[5] = (-59.3427322);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-1.0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {219.9929962158203, (-1.0), 0.0, (-513.473), 67.0, (-59.3427322), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray0, 219.9929962158203, (double) 72L);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {219.9929962158203, (-1.0), 0.0, (-513.473), 67.0, (-59.3427322), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean2);
      
      float[] floatArray3 = ArrayUtils.removeAllOccurrences(floatArray1, (float) 72L);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray3.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 0.1, 0.1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 6;
      intArray0[1] = (-5013);
      intArray0[2] = 98;
      intArray0[3] = (-2021161086);
      intArray0[4] = 2;
      intArray0[5] = 3173;
      intArray0[6] = 2432;
      intArray0[7] = (-2146735624);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {6, (-5013), 98, (-2021161086), 2, 3173, 2432, (-2146735624)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2432;
      doubleArray0[1] = (double) 3173;
      doubleArray0[2] = (double) 3173;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 98;
      doubleArray0[5] = (double) 98;
      doubleArray0[6] = (double) (-2146735624);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 2, 0.0);
      assertArrayEquals(new double[] {2432.0, 3173.0, 3173.0, 6.0, 98.0, 98.0, (-2.146735624E9)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      
      Integer integer0 = ArrayUtils.get((Integer[]) null, 3173);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = '>';
      charArray0[3] = '.';
      charArray0[4] = 'y';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'e');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'B', 'B', '>', '.', 'y'}, charArray0);
      assertArrayEquals(new char[] {'e', 'B', 'B', '>', '.', 'y'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '.';
      intArray0[1] = (int) '>';
      intArray0[2] = (int) '>';
      int int0 = ArrayUtils.indexOf(intArray0, 62, (-886));
      assertArrayEquals(new int[] {46, 62, 62}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, int0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 46;
      integerArray0[1] = (Integer) 62;
      integerArray0[2] = (Integer) 62;
      integerArray0[3] = (Integer) 62;
      integerArray0[4] = (Integer) 62;
      integerArray0[5] = (Integer) 62;
      integerArray0[6] = (Integer) 62;
      integerArray0[7] = (Integer) 62;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {46, 62, 62}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(3, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      Short short0 = new Short((short)83);
      assertNotNull(short0);
      assertEquals((short)83, (short)short0);
      
      Short short1 = new Short((short)0);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      int[] intArray0 = new int[3];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 0L;
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      int int0 = 1;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      ArrayUtils.swap((short[]) null, (int) (short)1, (int) (short)1885);
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = 1;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = (int) (short)1885;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {1885, 1, 1, 1, 1, 1, 1}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 904;
      intArray0[1] = 1;
      intArray0[2] = 126;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1, 126);
      assertArrayEquals(new int[] {904, 1, 126}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-9));
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'Q';
      int int0 = ArrayUtils.indexOf(charArray0, 'o');
      assertArrayEquals(new char[] {'\u0000', 'Q'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2342);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1383;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)0, 0);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short) (-2342), (short)0, (short)0, (short)1383}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(1, int1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) 'o';
      intArray0[3] = (int) (short)0;
      int int2 = ArrayUtils.lastIndexOf(intArray0, (-700));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new int[] {0, 0, 111, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-2081L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, (-407L), (-3510));
      assertArrayEquals(new long[] {(-1L), (-2081L), 2450L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = 1.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = 'B';
      charArray0[2] = 'j';
      charArray0[3] = 'q';
      charArray0[4] = 'l';
      charArray0[5] = 'v';
      int int1 = ArrayUtils.indexOf(charArray0, 'C', (-1));
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'~', 'B', 'j', 'q', 'l', 'v'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte)2);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte)0, (-1322));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)1136;
      longArray0[1] = (long) (short)1136;
      longArray0[2] = (long) (short)1136;
      longArray0[3] = (long) (short)1136;
      longArray0[4] = (long) (short)1136;
      longArray0[5] = (long) (short)1136;
      longArray0[6] = (long) (short)1136;
      longArray0[7] = (long) (short)1136;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1136L);
      assertArrayEquals(new long[] {1136L, 1136L, 1136L, 1136L, 1136L, 1136L, 1136L, 1136L}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1189L));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[9];
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'h');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = '>';
      charArray0[3] = '.';
      charArray0[4] = 'y';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'e');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'B', 'B', '>', '.', 'y'}, charArray0);
      assertArrayEquals(new char[] {'e', 'B', 'B', '>', '.', 'y'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '.';
      intArray0[1] = (int) '>';
      intArray0[2] = (int) '>';
      int int0 = ArrayUtils.indexOf(intArray0, 62, (-886));
      assertArrayEquals(new int[] {46, 62, 62}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, int0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 46;
      integerArray0[1] = (Integer) 62;
      integerArray0[2] = (Integer) 62;
      integerArray0[4] = (Integer) 62;
      integerArray0[5] = (Integer) 62;
      integerArray0[6] = (Integer) 62;
      integerArray0[7] = (Integer) 62;
      Integer integer0 = Integer.getInteger("r", integerArray0[6]);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(8, integerArray0.length);
      assertEquals(62, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, 'y');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'B', 'B', '>', '.', 'y'}, charArray0);
      assertArrayEquals(new char[] {'e', 'B', 'B', '>', '.'}, charArray2);
      assertArrayEquals(new char[] {'e', 'B', 'B', '>', '.', 'y'}, charArray1);
      assertNotNull(charArray2);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray2.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)1;
      objectArray0[1] = (Object) (short)1;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      int int0 = 0;
      Integer integer0 = new Integer((short)1);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer1 = new Integer((-3694));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-3694), (int)integer1);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 0, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      try { 
        Integer.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (int) (short)1);
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[7];
      long long0 = (-1L);
      Long long1 = Long.valueOf((-1L));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-1));
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((short)1);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(1L, (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long((-116L));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals((-116L), (long)long4);
      
      Long long5 = Long.getLong("Arguments cannot both be null", long4);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertNotNull(long5);
      assertEquals((-116L), (long)long5);
      
      longArray0[3] = long5;
      Long long6 = new Long(long0);
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long4));
      assertTrue(long6.equals((Object)long0));
      assertTrue(long6.equals((Object)long2));
      assertTrue(long6.equals((Object)long1));
      assertNotNull(long6);
      assertEquals((-1L), (long)long6);
      
      longArray0[4] = long6;
      Long long7 = new Long((-1978L));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long0));
      assertNotNull(long7);
      assertEquals((-1978L), (long)long7);
      
      longArray0[5] = long7;
      Long long8 = new Long((long) longArray0[2]);
      assertFalse(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long4));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long7));
      assertTrue(long8.equals((Object)long3));
      assertNotNull(long8);
      assertEquals(7, longArray0.length);
      assertEquals(1L, (long)long8);
      
      longArray0[6] = long8;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertArrayEquals(new long[] {(-1L), (-1L), 1L, (-116L), (-1L), (-1978L), 1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)32;
      ArrayUtils.shift(byteArray0, (int) (byte) (-93));
      assertArrayEquals(new byte[] {(byte)32, (byte) (-93), (byte)32, (byte)33, (byte)32, (byte)76, (byte)53}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-3378);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {(-3378)}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)53;
      shortArray0[1] = (short) (byte)76;
      shortArray0[2] = (short) (byte)33;
      shortArray0[3] = (short) (byte)32;
      shortArray0[4] = (short) (byte)53;
      shortArray0[5] = (short) (byte) (-93);
      shortArray0[6] = (short) (byte)33;
      shortArray0[7] = (short) (byte)76;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)76, (short)33, (short)32, (short)53, (short) (-93), (short)33, (short)76, (short)53}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 53;
      intArray0[1] = (-13);
      intArray0[2] = 2131;
      intArray0[3] = (-1);
      intArray0[4] = 5;
      intArray0[5] = 76;
      intArray0[6] = (-1506);
      intArray0[7] = Integer.MAX_VALUE;
      intArray0[8] = 101;
      int int0 = ArrayUtils.indexOf(intArray0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {53, (-13), 2131, (-1), 5, 76, (-1506), Integer.MAX_VALUE, 101}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      Integer integer0 = new Integer(2214);
      assertNotNull(integer0);
      assertEquals(2214, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((char[]) null, 2214, 2214);
      ArrayUtils.reverse((char[]) null, (-1120), 117);
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 2214);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = null;
      try {
        bitSet0 = new BitSet((byte) (-77));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -77
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 2299, (-343), (-1294));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1294);
      longArray0[2] = (long) 2299;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-1294L), 0L, 2299L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2299;
      intArray0[1] = (-1);
      intArray0[2] = 3;
      int int1 = ArrayUtils.indexOf(intArray0, 3940, 2175);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {2299, (-1), 3}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-1294L), 0L, 2299L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short)0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      Byte[] byteArray0 = new Byte[16];
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)36;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)36;
      intArray0[4] = (int) (short)36;
      intArray0[5] = 2147218324;
      intArray0[6] = (int) (short)1;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {36, 1, 36, 36, 2147218324, 1, 1}, intArray0);
      assertEquals(7, intArray0.length);
      
      ArrayUtils.shift((boolean[]) null, 3, (int) (short)36, 36);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2147218324;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (double) 2147218324;
      doubleArray0[4] = (double) 36;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (-923.812458);
      doubleArray0[8] = (-2670.1341795455037);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.147218324E9, 1.0, 1.5, 2.147218324E9, 36.0, 1.0, 3.0, (-923.812458), (-2670.1341795455037)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.147218324E9, 1.0, 1.5, 2.147218324E9, 36.0, 1.0, 3.0, (-923.812458), (-2670.1341795455037)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (-3510));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 36;
      floatArray0[1] = (float) 36;
      floatArray0[2] = (float) 36;
      floatArray0[3] = (float) 3;
      floatArray0[4] = (float) 36;
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, floatArray0);
      assertArrayEquals(new float[] {36.0F, 36.0F, 36.0F, 3.0F, 36.0F}, floatArray0, 0.01F);
      assertNull(floatArray1);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)54;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)54;
      ArrayUtils.shift(floatArray0, (-13), (-13), (int) (short)1);
      assertArrayEquals(new float[] {1.0F, 54.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (short)1;
      floatArray1[1] = (float) (short)1;
      floatArray1[2] = (float) (-13);
      floatArray1[3] = (float) (-13);
      ArrayUtils.shift(floatArray1, (-13), (int) (short)54, (int) (short)54);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-13.0F), (-13.0F), 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      Double double0 = new Double((-13));
      assertNotNull(double0);
      assertEquals((-13.0), (double)double0, 0.01);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)51, 2147218324);
      assertArrayEquals(new short[] {(short)54, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'Q';
      int int0 = ArrayUtils.indexOf(charArray0, 'o');
      assertArrayEquals(new char[] {'\u0000', 'Q'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      Double double0 = Double.valueOf((double) (-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double((short) (-2342));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2342.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-2342.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'Q';
      longArray0[1] = (long) (short) (-2342);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short) (-2342), 101);
      assertArrayEquals(new long[] {81L, (-2342L)}, longArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.swap(longArray0, (-5), 101, (-5));
      assertArrayEquals(new long[] {81L, (-2342L)}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-951));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '2', (-1513));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-2081L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, (-407L), (-3510));
      assertArrayEquals(new long[] {(-1L), (-2081L), 2450L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = 1.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = 'B';
      charArray0[2] = 'j';
      charArray0[3] = 'q';
      charArray0[4] = 'l';
      charArray0[5] = 'v';
      int int1 = ArrayUtils.indexOf(charArray0, 'C', (-1));
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'~', 'B', 'j', 'q', 'l', 'v'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)30;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (byte)0, 1.0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-2320.59575350373), (-2030), (double) (-2030));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1063.97799263121;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1063.97799263121);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1805.9));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      ArrayUtils.shift(doubleArray1, (int) (byte)1, 100, 65);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (-407));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("eA*B+tEiP,07g", integer0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(52);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(52, (int)integer2);
      
      Integer integer3 = new Integer((-3077));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-3077), (int)integer3);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 18688);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)291;
      shortArray0[1] = (short) (-2434);
      shortArray0[2] = (short)1245;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)4;
      shortArray0[6] = (short)1301;
      shortArray0[7] = (short)16;
      shortArray0[8] = (short)48;
      ArrayUtils.shift(shortArray0, 2143);
      assertArrayEquals(new short[] {(short)48, (short)291, (short) (-2434), (short)1245, (short) (-1), (short) (-1), (short)4, (short)1301, (short)16}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2341);
      assertNotNull(integer0);
      assertEquals(2341, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1322);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1322, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1558));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1558), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((short)4);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(4, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger((String) null);
      assertNull(integer4);
      
      Integer integer5 = Integer.getInteger((String) null, (Integer) null);
      assertNull(integer5);
      
      integerArray0[4] = null;
      Integer integer6 = new Integer((-2127961068));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals((-2127961068), (int)integer6);
      
      integerArray0[5] = integer6;
      Integer integer7 = new Integer((short)48);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertNotNull(integer7);
      assertEquals(48, (int)integer7);
      
      integerArray0[6] = integer7;
      Integer integer8 = new Integer(2);
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer6));
      assertNotNull(integer8);
      assertEquals(2, (int)integer8);
      
      integerArray0[7] = integer8;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 8);
      assertArrayEquals(new int[] {2341, 1322, (-1558), 4, 8, (-2127961068), 48, 2}, intArray0);
      assertNotNull(intArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1876);
      assertArrayEquals(new int[] {1876, 1876}, intArray0);
      assertNotNull(intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1268L);
      assertNull(longArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)32, (byte) (-93), (byte) (-27), (byte)33, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = '.';
      charArray0[2] = 'z';
      charArray0[3] = 'e';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'H', '.', 'z', 'e'}, charArray0);
      assertArrayEquals(new char[] {'H', '.', 'z', 'e'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)53;
      floatArray0[1] = (float) 'H';
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) 72.0F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2102);
      ArrayUtils.swap(intArray0, (-2063), (int) (byte)53, (int) (byte)76);
      assertArrayEquals(new int[] {(-2102)}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)76;
      longArray0[1] = (long) (byte)33;
      longArray0[2] = (long) (byte)32;
      longArray0[3] = (long) (byte)32;
      longArray0[4] = (long) (byte)76;
      longArray0[5] = (long) 'z';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 64L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {76L, 33L, 32L, 32L, 76L, 122L}, longArray0);
      assertArrayEquals(new long[] {76L, 33L, 32L, 32L, 76L, 122L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 792L;
      longArray0[1] = 578L;
      longArray0[2] = 572L;
      longArray0[3] = 792L;
      longArray0[4] = 734L;
      longArray0[5] = (-1751L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {792L, 578L, 572L, 792L, 734L, (-1751L)}, longArray0);
      assertArrayEquals(new long[] {792L, 578L, 572L, 792L, 734L, (-1751L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = 0;
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int1);
      assertFalse(int1 == int0);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-405));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertNotNull(integer3);
      assertEquals((-405), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int1));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      ArrayUtils.shift((Object[]) integerArray0, (-124));
      assertEquals(5, integerArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(int0);
      assertFalse(int0 == int1);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(992L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-405);
      doubleArray0[1] = (double) (-124);
      doubleArray0[2] = (double) int1;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertFalse(int0 == int1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertArrayEquals(new double[] {(-124.0), 0.0, (-405.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(mockRandom0, mockRandom1);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      Long long0 = new Long(2214);
      assertNotNull(long0);
      assertEquals(2214L, (long)long0);
      
      byte[] byteArray0 = new byte[3];
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) long0;
      objectArray0[1] = (Object) long0;
      Object object0 = ArrayUtils.get(objectArray0, 7);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      Long long1 = new Long(572L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(572L, (long)long1);
      
      Long long2 = new Long((-271L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-271L), (long)long2);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)77;
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)12;
      byteArray1[5] = (byte)12;
      byteArray1[6] = (byte)12;
      byteArray1[7] = (byte)12;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)77, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(11, byteArray2.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      
      ArrayUtils.shift(objectArray0, (-460), 2, (int) (byte)12);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtils.shift(objectArray0, 0, (int) (byte)8, (int) (byte)8);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-3070));
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'b';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) 'b';
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = (int) '3';
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {98, 55, 98, 0, 2, 51, 0, 0}, intArray0);
      assertArrayEquals(new int[] {98, 55, 98, 0, 2, 51, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 1856L;
      Object object0 = ArrayUtils.get(objectArray0, 98);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) 98;
      ArrayUtils.reverse(objectArray0);
      assertEquals(3, objectArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(3, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'G');
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)52;
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)52;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (-2241.22258281);
      doubleArray0[5] = (double) 2108;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      doubleArray0[7] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, 2108.0, (-2241.22258281), 0.0, 0.0, 0.0, 52.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (-2668.92F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = '3';
      charArray0[2] = 'm';
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer(2);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Integer integer2 = Integer.getInteger("", integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer3 = new Integer(1662);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(1662, (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(0, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '3';
      intArray0[1] = (int) 'g';
      ArrayUtils.shift(intArray0, 103, 0, 0);
      assertArrayEquals(new int[] {51, 103, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'm';
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {109.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {109.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {51, 103, 0, 0}, intArray0);
      assertArrayEquals(new int[] {51, 103, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-26));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '?';
      charArray0[2] = 'X';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'/', '?', 'X'}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'/', '?', 'X'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, '', 2123080424);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new char[] {'/', '?', 'X'}, charArray0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertEquals(3, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(bitSet1, bitSet0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) '/';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, 'C');
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'/'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(1, charArray2.length);
      assertEquals(1, characterArray0.length);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2855);
      assertNotNull(integer0);
      assertEquals(2855, (int)integer0);
      
      integerArray0[0] = integer0;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 4);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {4}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-515);
      longArray0[1] = (long) (-515);
      ArrayUtils.shift(longArray0, 799, 2146108378, 2146108378);
      assertArrayEquals(new long[] {(-515L), (-515L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      Integer integer0 = new Integer(2146108378);
      assertNotNull(integer0);
      assertEquals(2146108378, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (int) (byte)0, 669);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)2, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)2;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte)0);
      assertArrayEquals(new float[] {0.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-101);
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.indexOf(booleanArray0, false);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)2;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new int[] {2}, intArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(1, intArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte)2, (-1322));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-101.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 4783);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      Integer integer0 = new Integer((byte)101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 379;
      intArray0[1] = 379;
      intArray0[1] = 379;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {379, 379, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ArrayUtils.shift(byteArray0, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '&', Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (-1408), 435, (-1408));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      longArray0[4] = 1609L;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)7, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-617);
      floatArray0[1] = (float) (-2102);
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) '.';
      floatArray0[4] = (float) 102;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 1609L;
      floatArray0[7] = (float) (byte)7;
      floatArray0[8] = (float) 'e';
      ArrayUtils.shift(floatArray0, (int) (byte)7, 2, (-617));
      assertArrayEquals(new float[] {(-617.0F), (-2102.0F), (-1.0F), 46.0F, 102.0F, 0.0F, 1609.0F, 7.0F, 101.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 1, 2);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null, 5, 5);
      int[] intArray0 = new int[4];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 5;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {5, 5, 5, 5}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1172.0);
      assertNotNull(double0);
      assertEquals(1172.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.1, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.7);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(0.7, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.5);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(1.5, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(5);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(5.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-3502.919369204611));
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotNull(double5);
      assertEquals((-3502.919369204611), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1172.0);
      assertArrayEquals(new double[] {1172.0, 0.1, 0.7, 1.5, 5.0, (-3502.919369204611)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)118);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)118;
      intArray0[1] = (int) (byte)118;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 118, 118);
      assertArrayEquals(new int[] {118, 118}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)118);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)118, 97);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 97;
      floatArray0[1] = (float) (byte)118;
      floatArray0[2] = (float) 1;
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (-823.8F));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new float[] {97.0F, 118.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int2);
      
      ArrayUtils.swap(floatArray0, 118, 118);
      assertArrayEquals(new float[] {97.0F, 118.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) 118, (Integer) 118);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) 118, (Integer) 118);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      Integer integer0 = Integer.getInteger("+?vL<o|skBW*h GUQ", 275);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertNotNull(integer0);
      assertEquals(275, (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      MutableInt mutableInt0 = new MutableInt(1);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, (Integer) null);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(8, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      
      ArrayUtils.reverse((Object[]) abstractMap_SimpleImmutableEntryArray1, (-1), 1);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntryArray0.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertEquals(8, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-63);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)40, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = 'T';
      charArray0[2] = '&';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'&', 'T', '&'}, charArray0);
      assertArrayEquals(new char[] {'&', 'T', '&'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1031.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1031.0F), (int) (byte)0);
      assertArrayEquals(new float[] {(-1031.0F)}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, floatArray0.length);
      
      boolean[] booleanArray2 = new boolean[5];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = true;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      booleanArray2[4] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(5, booleanArray2.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(boolean0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 46L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) (byte)40;
      objectArray0[2] = (Object) '&';
      objectArray0[3] = (Object) (-1031.0F);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-432);
      intArray0[1] = 0;
      intArray0[2] = 12;
      intArray0[3] = (-1);
      ArrayUtils.swap(intArray0, (-198), 12, 59);
      assertArrayEquals(new int[] {(-432), 0, 12, (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-2295));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)1347, (-312));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((short)1347);
      assertNotNull(long0);
      assertEquals(1347L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-198));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-198L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = Long.getLong("RiQ)\"X@", 92L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(92L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-1L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(92L);
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      assertEquals(92L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((long) longArray0[3]);
      assertTrue(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertNotNull(long5);
      assertEquals(6, longArray0.length);
      assertEquals((-1L), (long)long5);
      
      longArray0[5] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2L);
      assertArrayEquals(new long[] {1347L, (-198L), 92L, (-1L), 92L, (-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      boolean[] booleanArray0 = new boolean[9];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)108;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (-2241.22258281);
      doubleArray0[5] = (double) 2108;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      doubleArray0[7] = (-0.06513677581827358);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-0.06513677581827358), 2.147483647E9, 2108.0, (-2241.22258281), 0.0, 0.0, 0.0, 108.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)52;
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)52;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (-2241.22258281);
      doubleArray0[5] = (double) 2108;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      doubleArray0[7] = 0.0;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 52.0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {52.0, 0.0, 0.0, 0.0, (-2241.22258281), 2108.0, 2.147483647E9, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 88.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short short0 = new Short((short) (-12135));
      assertNotNull(short0);
      assertEquals((short) (-12135), (short)short0);
      
      Short short1 = new Short((short) (-12135));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-12135), (short)short1);
      
      Short short2 = new Short((short)98);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)98, (short)short2);
      
      Short short3 = new Short((short) (-1699));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short) (-1699), (short)short3);
      
      Short short4 = new Short((short)195);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      assertEquals((short)195, (short)short4);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-12135)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (-12135), 90);
      assertArrayEquals(new short[] {(short) (-12135)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 64.0;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 64.0, (-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-3155.4);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-2491.7782));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.5, (-3155.4)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2491.7782), 1.5, (-3155.4)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)104, (byte) (-27), (byte) (-59), (byte) (-1)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray1, (-2491.7782));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.5, (-3155.4)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2491.7782), 1.5, (-3155.4)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ArrayUtils.shift(shortArray0, 10);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1046);
      shortArray0[1] = (short) (-98);
      shortArray0[2] = (short) (-460);
      shortArray0[3] = (short)120;
      shortArray0[4] = (short)583;
      shortArray0[5] = (short)1725;
      shortArray0[6] = (short) (-700);
      ArrayUtils.shift(shortArray0, (-651), 6, 16);
      assertArrayEquals(new short[] {(short) (-460), (short)120, (short)583, (short)1725, (short) (-1046), (short) (-98), (short) (-700)}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-343);
      floatArray0[1] = (float) (-343);
      floatArray0[2] = (-1350.7146F);
      floatArray0[3] = (float) (-343);
      floatArray0[4] = (-1350.7146F);
      floatArray0[5] = (float) (-2501);
      floatArray0[6] = (-1031.0F);
      floatArray0[7] = (float) 'Q';
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {81.0F, (-1031.0F), (-2501.0F), (-1350.7146F), (-343.0F), (-1350.7146F), (-343.0F), (-343.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      int[] intArray0 = new int[10];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(10, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1136;
      intArray0[1] = 2145467189;
      intArray0[2] = 3100;
      intArray0[3] = 2146898676;
      intArray0[4] = (-2734);
      intArray0[5] = 69;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1136, 2145467189, 3100, 2146898676, (-2734), 69}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift(intArray0, 2145467189, 675, 1136);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {1136, 2145467189, 3100, 2146898676, (-2734), 69}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray1);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(2145467189);
      assertNotNull(double0);
      assertEquals(2.145467189E9, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(69);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(69.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2146898676);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(2.146898676E9, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals(4, doubleArray0.length);
      assertEquals(2.145467189E9, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {2.145467189E9, 69.0, 2.146898676E9, 2.145467189E9}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 867L;
      longArray0[1] = 867L;
      longArray0[2] = 867L;
      longArray0[4] = 0L;
      longArray0[5] = 867L;
      byte[] byteArray0 = new byte[8];
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "', has a length less than 2");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = 111;
      intArray0[2] = (-238);
      intArray0[3] = 5;
      intArray0[4] = (-3111);
      int int0 = ArrayUtils.indexOf(intArray0, 98);
      assertArrayEquals(new int[] {55, 111, (-238), 5, (-3111)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((Object[]) null, 4163);
      double[] doubleArray0 = new double[6];
      Byte byte0 = new Byte((byte)111);
      assertNotNull(byte0);
      assertEquals((byte)111, (byte)byte0);
      
      Byte byte1 = new Byte((byte)111);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)111, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte2 = new Byte((byte)2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)2, (byte)byte2);
      
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-18));
      assertArrayEquals(new byte[] {(byte)2, (byte)111}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      BitSet bitSet0 = new BitSet();
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      int int1 = ArrayUtils.indexOf(intArray0, 111, (-1073741823));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {55, 111, (-238), 5, (-3111)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(1, int1);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      ArrayUtils.shift(doubleArray0, 102);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray1, integerArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-933), 18688, 4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '#');
      assertArrayEquals(new char[] {'#', '#'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '#';
      doubleArray0[1] = (double) '#';
      doubleArray0[2] = (double) '#';
      doubleArray0[3] = (double) '#';
      doubleArray0[4] = (double) '#';
      doubleArray0[5] = (double) '#';
      doubleArray0[6] = (double) '#';
      ArrayUtils.shift(doubleArray0, 3, 3, 3);
      assertArrayEquals(new double[] {35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) integer0, (-4443));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(2, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[4] = (float) 1;
      ArrayUtils.shift(floatArray0, 1, 1, 1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (short)1, (int) (short)1);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(51);
      assertNotNull(integer0);
      assertEquals(51, (int)integer0);
      
      Integer integer1 = new Integer((-1378));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1378), (int)integer1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short)15;
      shortArray0[2] = (short)3297;
      shortArray0[3] = (short)4;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)54;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)9, (short)15, (short)3297, (short)4, (short) (-1), (short)54}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (-789.7F), (-2854));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-2854), (-2854), (-2854));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 88.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short short0 = new Short((short) (-12135));
      assertNotNull(short0);
      assertEquals((short) (-12135), (short)short0);
      
      Short short1 = new Short((short) (-12135));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-12135), (short)short1);
      
      Short short2 = new Short((short)98);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)98, (short)short2);
      
      Short short3 = new Short((short) (-1699));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short) (-1699), (short)short3);
      
      Short short4 = new Short((short)195);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short)195, (short)short4);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      int int0 = ArrayUtils.indexOf(charArray0, 'd');
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-1);
      ArrayUtils.shift(byteArray0, (int) (byte) (-1), (-10), (int) (short)98);
      assertArrayEquals(new byte[] {(byte)82, (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      ArrayUtils.swap(longArray0, 127, (-1), 127);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)113;
      shortArray0[1] = (short) (-30839);
      shortArray0[2] = (short)2458;
      shortArray0[3] = (short)113;
      shortArray0[4] = (short)113;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-30839);
      shortArray0[7] = (short)113;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)113, (short) (-30839), (short)2458, (short)113, (short)113, (short)0, (short) (-30839), (short)113}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertArrayEquals(new short[] {(short)113, (short) (-30839), (short)2458, (short)113, (short)113, (short)0, (short) (-30839), (short)113}, shortArray0);
      assertNotNull(shortArray2);
      assertEquals(8, shortArray2.length);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      longArray0[1] = 348L;
      longArray0[2] = (-1450L);
      longArray0[3] = 1L;
      longArray0[4] = 1311L;
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertArrayEquals(new long[] {53L, 348L, (-1450L), 1L, 1311L}, longArray0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5043;
      shortArray0[1] = (short) (-30839);
      shortArray0[2] = (short) (-1831);
      shortArray0[3] = (short)113;
      shortArray0[4] = (short)2458;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)5043, (short) (-30839), (short) (-1831), (short)113, (short)2458}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.shift(floatArray1, (-1861), (-1861), 127);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 324L;
      ArrayUtils.swap(longArray0, (-1702), 1621, 21);
      assertArrayEquals(new long[] {0L, 324L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 54;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 322, (-1963));
      assertArrayEquals(new int[] {54}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = false;
      booleanArray1[6] = true;
      booleanArray1[7] = false;
      ArrayUtils.shift(booleanArray1, (-1), (-201), (-1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true, false}, booleanArray1));
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short)1136, (-201));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-3625);
      intArray0[2] = 50;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-3625), 50, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.shift(booleanArray0, (-3625), 0, 4028);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, (-1307));
      assertArrayEquals(new int[] {(-3625), 50, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, (int) integerArray0[1], 109, 32);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      assertEquals(2, integerArray0.length);
      assertEquals(5, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 110, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 110, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-3625);
      intArray0[2] = 50;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      ArrayUtils.shift(booleanArray0, 0, 50, 4028);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, (-1307));
      assertArrayEquals(new int[] {0, (-3625), 50, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, (-3070), 708, 708);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 3, 3, 1106);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-916), 83, 83);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      integerArray0[2] = integer1;
      int[] intArray0 = new int[6];
      intArray0[0] = (-3625);
      intArray0[1] = int0;
      intArray0[2] = 4;
      intArray0[3] = int0;
      intArray0[4] = 0;
      intArray0[5] = 4;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {4, 4, 4, 0, 4, (-3625)}, intArray0);
      assertEquals(6, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (-3625), int0, (-4132));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) 4;
      floatArray0[3] = (float) 4;
      floatArray0[4] = (float) (-4132);
      ArrayUtils.swap(floatArray0, 0, 0);
      assertArrayEquals(new float[] {4.0F, 4.0F, 4.0F, 4.0F, (-4132.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert(1728, (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'T');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1063.97799263121;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1063.97799263121);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-666.64928), Double.NaN);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, '1');
      assertNull(charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-302.376275118);
      Object[] objectArray0 = new Object[2];
      Integer integer0 = new Integer(12);
      assertNotNull(integer0);
      assertEquals(12, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-828.9354194), 12, 64.0);
      assertArrayEquals(new double[] {1.0, 1.0, (-302.376275118), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-794));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2356);
      shortArray0[1] = (short)0;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 779.721F;
      floatArray0[1] = (float) (short)1311;
      floatArray0[2] = (float) (short)1311;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)2;
      floatArray0[5] = (float) (short) (-2356);
      int int0 = ArrayUtils.indexOf(floatArray0, 169.71335F);
      assertArrayEquals(new float[] {779.721F, 1311.0F, 1311.0F, 0.0F, 2.0F, (-2356.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, true);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-2356);
      intArray0[1] = (int) (short) (-2356);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short) (-2356);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte)17);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      short[] shortArray0 = new short[3];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(stringArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(3, stringArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray0, (short)5);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)4182;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)1;
      ArrayUtils.reverse(shortArray0, (int) (short)1, 6);
      assertArrayEquals(new short[] {(short)1, (short)4182, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)1, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)4182, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-1), (short)4182, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      byte byte1 = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      short short0 = (short)3053;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3053;
      shortArray0[1] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (byte) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3053, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)3053, (short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-1), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-1670L));
      assertNotNull(long0);
      assertEquals((-1670L), (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2415L));
      assertArrayEquals(new long[] {(-1670L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-332.071656));
      assertNotNull(float0);
      assertEquals((-332.07166F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertArrayEquals(new float[] {(-332.07166F), (-332.07166F), (-332.07166F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      Long long0 = new Long(2214);
      assertNotNull(long0);
      assertEquals(2214L, (long)long0);
      
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 2214);
      assertArrayEquals(new long[] {2214L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      Float[] floatArray0 = new Float[8];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      int[] intArray0 = new int[6];
      intArray0[0] = 12;
      intArray0[1] = (-3625);
      intArray0[2] = 50;
      intArray0[3] = 12;
      Long long0 = Long.valueOf(2450L);
      assertNotNull(long0);
      assertEquals(2450L, (long)long0);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      longArray0[1] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-379L));
      assertArrayEquals(new long[] {2450L, 2450L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((float) longArray0[0]);
      assertNotNull(float0);
      assertEquals(2, longArray0.length);
      assertEquals(2450.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1120.92));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1120.92F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1.0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) 50);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals(50.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = Float.valueOf(1784.9F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotNull(float4);
      assertEquals(1784.9F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-3149.3892F));
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotNull(float5);
      assertEquals((-3149.3892F), (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 12);
      assertArrayEquals(new float[] {2450.0F, (-1120.92F), 1.0F, 50.0F, 1784.9F, (-3149.3892F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      Short short0 = new Short((short)854);
      assertNotNull(short0);
      assertEquals((short)854, (short)short0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "3ny");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((short)854);
      assertNotNull(long0);
      assertEquals(854L, (long)long0);
      
      longArray0[1] = long0;
      Long long1 = new Long((-1665L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1665L), (long)long1);
      
      longArray0[2] = long1;
      long long2 = 0L;
      Long long3 = new Long(0L);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(0L);
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals(0L, (long)long4);
      
      longArray0[4] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long2);
      assertArrayEquals(new long[] {0L, 854L, (-1665L), 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1554L));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, 0.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)54;
      shortArray0[1] = (short)1;
      ArrayUtils.reverse(shortArray0, 6, (int) (short)54);
      assertArrayEquals(new short[] {(short)54, (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 3);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '9';
      floatArray0[2] = (float) 'i';
      floatArray0[3] = (float) 'E';
      floatArray0[4] = 1638.652F;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {1638.652F, 69.0F, 105.0F, 0.0F, 57.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2145465294);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals((-1), int0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 56, 56);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 56, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 3);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-78));
      assertArrayEquals(new byte[] {(byte) (-78)}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, 2452L);
      assertArrayEquals(new long[] {2452L}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 56, 56);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 56, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'I');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-661.75653F));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 0, 0);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-661.75653F);
      doubleArray0[1] = (double) (-661.75653F);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (double) (-661.75653F);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-661.7565307617188), (-661.7565307617188)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, (-661.7565307617188)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-661.7565307617188)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-2081L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      longArray0[4] = 1609L;
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 36);
      assertArrayEquals(new long[] {(-1L), (-2081L), 2450L, 0L, 1609L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2450L;
      doubleArray0[3] = (-2548.378);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 2450.0, (-2548.378)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-1.0F);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      int int0 = 1;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) 1;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) (short)1;
      floatArray0[6] = (float) (short)1;
      floatArray0[7] = (float) (short)1;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1.0F;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1.0F;
      doubleArray1[1] = (double) 1.0F;
      doubleArray1[2] = (double) 1.0F;
      doubleArray1[3] = (double) 1.0F;
      doubleArray1[4] = (double) 1.0F;
      doubleArray1[5] = 1584.193505;
      doubleArray1[6] = (double) 1.0F;
      doubleArray1[7] = (-2548.378);
      doubleArray1[8] = (double) (short)1;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1584.193505, 1.0, (-2548.378), 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 219.993F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (float) 72L);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      Integer integer0 = Integer.getInteger("", 67);
      assertNotNull(integer0);
      assertEquals(67, (int)integer0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 219.993F;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 72L;
      doubleArray0[3] = (-513.473);
      doubleArray0[4] = (double) 67;
      doubleArray0[5] = (-59.3427322);
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      Character[] characterArray0 = new Character[20];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)50;
      shortArray0[1] = (short)12;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)1076);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)50, (short)12}, shortArray0);
      assertArrayEquals(new short[] {(short)50, (short)12}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1203.26F);
      floatArray0[1] = (float) (short)50;
      floatArray0[2] = (float) (short)12;
      floatArray0[3] = (float) (short)50;
      floatArray0[4] = (float) (short)50;
      floatArray0[5] = (float) (short)50;
      floatArray0[6] = (float) (short)1076;
      ArrayUtils.swap(shortArray1, (-3416), (-2145048582));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)50, (short)12}, shortArray0);
      assertArrayEquals(new short[] {(short)50, (short)12}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = Character.valueOf('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('b');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('b', (char)character1);
      
      characterArray0[1] = character1;
      char char0 = '`';
      Character character2 = Character.valueOf('`');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('`', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('#');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('#', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(char0);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('`', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character(char0);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals('`', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('P');
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)char0));
      assertNotNull(character6);
      assertEquals('P', (char)character6);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'#', 'b', '`', '#', '`', '`', 'P'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)77;
      shortArray0[1] = (short) (byte)77;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)77, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 77, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)36;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {1, 36, 1}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.shift((boolean[]) null, (-343), 1, 16);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {16.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {16.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)36;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(240, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 240, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray1, 4563, 2503L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4563, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = ' ';
      charArray0[2] = '(';
      charArray0[3] = '}';
      charArray0[4] = 'k';
      charArray0[5] = 'J';
      charArray0[6] = '~';
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {' ', '(', '}', 'k', 'J', '~', 'U'}, charArray0);
      assertEquals(7, charArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) ' ';
      longArray0[1] = (-1997L);
      longArray0[2] = (long) '}';
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) '}';
      longArray0[5] = (long) 'k';
      longArray0[6] = (long) '~';
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) (short)1136, 32L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1136, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      Short short0 = new Short((short) (-2573));
      assertNotNull(short0);
      assertEquals((short) (-2573), (short)short0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom((short) (-2573));
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)32, (byte) (-93), (byte) (-27), (byte)33, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = '.';
      charArray0[2] = 'z';
      charArray0[3] = 'e';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'H', '.', 'z', 'e'}, charArray0);
      assertArrayEquals(new char[] {'H', '.', 'z', 'e'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)76;
      longArray0[1] = (long) 'H';
      longArray0[2] = (long) '.';
      longArray0[3] = (long) (byte)33;
      longArray0[4] = (long) (byte)53;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {76L, 72L, 46L, 33L, 53L}, longArray0);
      assertArrayEquals(new long[] {76L, 72L, 46L, 33L, 53L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 71.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1229.0212F;
      floatArray0[4] = (-3093.935F);
      floatArray0[5] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-809.9F), Integer.MAX_VALUE);
      assertArrayEquals(new float[] {(-1.0F), 71.0F, 0.0F, 1229.0212F, (-3093.935F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = '&';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'T', '&'}, charArray0);
      assertArrayEquals(new char[] {'T', '&'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F), 0);
      assertArrayEquals(new float[] {(-1.0F), 71.0F, 0.0F, 1229.0212F, (-3093.935F), 0.0F}, floatArray0, 0.01F);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(6, floatArray0.length);
      
      boolean[] booleanArray2 = new boolean[5];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      ArrayUtils.shift(floatArray0, 4, Integer.MAX_VALUE, (-2102));
      assertArrayEquals(new float[] {(-1.0F), 71.0F, 0.0F, 1229.0212F, (-3093.935F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, (-1));
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) (-3093.935F);
      Object object1 = ArrayUtils.get(objectArray0, 0, objectArray0[1]);
      assertNull(object1);
      assertEquals(9, objectArray0.length);
      
      objectArray0[3] = null;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) (-1.0F);
      objectArray0[7] = (Object) 0.0F;
      Object object2 = ArrayUtils.get(objectArray0, Integer.MAX_VALUE);
      assertNull(object2);
      assertEquals(9, objectArray0.length);
      
      objectArray0[8] = null;
      ArrayUtils.swap(objectArray0, 1072, (-1262), 1072);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 53L;
      Integer integer0 = new Integer(340);
      assertNotNull(integer0);
      assertEquals(340, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {53L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 53L;
      objectArray0[2] = (Object) 53L;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      ArrayUtils.swap(objectArray0, 340, 340, 340);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = 127;
      intArray0[2] = 1225;
      intArray0[3] = 5;
      intArray0[4] = (-3111);
      int int0 = ArrayUtils.indexOf(intArray0, 98);
      assertArrayEquals(new int[] {55, 127, 1225, 5, (-3111)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((Object[]) null, 4163);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 55;
      doubleArray0[1] = (double) 1225;
      doubleArray0[2] = 1563.7;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 55;
      doubleArray0[5] = (double) (-3111);
      ArrayUtils.swap((Object[]) null, 2902, 127, 127);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 765);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-86), (byte)39, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)39, (byte) (-1)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)39;
      floatArray0[1] = (float) (byte)39;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte)39);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {39.0F, 39.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {39.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer integer0 = Integer.getInteger("", (int) (byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-86);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-86);
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-86);
      ArrayUtils.shift(byteArray2, (-983));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-86)}, byteArray2);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 9);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class0;
      classArray0[4] = class0;
      classArray0[5] = class0;
      classArray0[6] = class0;
      classArray0[7] = class0;
      classArray0[8] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(9, classArray0.length);
      assertEquals(9, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (short) (-1491), 2746L);
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(53L, 0.0, 1.0);
      assertNotNull(doubleStream0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1491);
      doubleArray0[1] = (-1.0);
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      Character character1 = Character.valueOf('t');
      assertNotNull(character1);
      assertEquals('t', (char)character1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 2746L;
      longArray0[1] = 2746L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-1491), (int) 't');
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2746L, 2746L}, longArray0);
      assertArrayEquals(new long[] {2746L, 2746L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.swap((int[]) null, (-2140052908), (-2140052908));
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-5395), 1, (-490));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-5395), (-5395));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      Integer integer1 = new Integer(196);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(196, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry4;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry3;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(abstractMap_SimpleImmutableEntryArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 5, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)50;
      shortArray0[1] = (short)12;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)1076);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)50, (short)12}, shortArray0);
      assertArrayEquals(new short[] {(short)50, (short)12}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1203.26F);
      floatArray0[1] = (float) (short)50;
      floatArray0[2] = (float) (short)12;
      floatArray0[3] = (float) (short)50;
      floatArray0[4] = (float) (short)50;
      floatArray0[5] = (float) (short)50;
      floatArray0[6] = (float) (short)1076;
      char[] charArray0 = new char[4];
      charArray0[0] = 'c';
      charArray0[1] = 'V';
      charArray0[2] = '<';
      charArray0[3] = 'e';
      ArrayUtils.swap(charArray0, (int) (short)1076, 3386, (-4220));
      assertArrayEquals(new char[] {'c', 'V', '<', 'e'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'c';
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'c', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = 'X';
      charArray0[2] = '@';
      charArray0[3] = 'f';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'(', 'X', '@', 'f'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = (-3116L);
      longArray0[3] = 92L;
      longArray0[4] = (long) '(';
      longArray0[5] = (long) 'f';
      longArray0[6] = (-1L);
      longArray0[7] = (long) '@';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3386, 3386);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, (-3116L), 92L, 40L, 102L, (-1L), 64L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)112);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)112}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      char[] charArray0 = new char[13];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'S');
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(13, charArray0.length);
      
      ArrayUtils.swap(charArray0, 3482, 0, 0);
      assertEquals(13, charArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-506);
      shortArray0[2] = (short)364;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-2162);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 0);
      assertArrayEquals(new short[] {(short)0, (short) (-506), (short)364, (short)0, (short)0, (short) (-2162)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short) (-2162);
      objectArray0[1] = (Object) (short)364;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short) (-506);
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) (short)364;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-2734));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2734, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      long[] longArray0 = new long[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'H';
      IntStream intStream0 = mockRandom1.ints((long) 72);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(intStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      intArray0[1] = (int) 'H';
      intArray0[2] = (int) 'H';
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {72, 72, 72}, intArray0);
      assertArrayEquals(new int[] {72, 72, 72}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Integer integer0 = new Integer(72);
      assertNotNull(integer0);
      assertEquals(72, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(72, object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 72;
      double double0 = mockRandom1.nextGaussian();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(mockRandom1, mockRandom0);
      
      objectArray0[1] = (Object) mockRandom1;
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.reverse((char[]) null);
      ArrayUtils.shift(objectArray0, 8192);
      assertEquals(2, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, 'H');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1984);
      shortArray0[1] = (short)15526;
      shortArray0[2] = (short)4731;
      shortArray0[3] = (short) (-93);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1984));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1984), (short)15526, (short)4731, (short) (-93)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1984), (short)15526, (short)4731, (short) (-93), (short) (-1984)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = 127;
      intArray0[2] = 55;
      intArray0[3] = 5;
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = 'C';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = 'C';
      charArray0[6] = 'C';
      charArray0[7] = 'C';
      charArray0[8] = 'C';
      ArrayUtils.reverse(charArray0, (-2342), 127);
      assertArrayEquals(new char[] {'C', 'C', 'C', 'C', '<', '<', 'C', '4', '4'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[2] = 'm';
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer('m');
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(109, (int)integer1);
      
      Integer integer2 = Integer.getInteger("", integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(109, (int)integer2);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer3 = new Integer(1662);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(1662, (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '\"';
      intArray0[1] = (int) 'g';
      intArray0[2] = 0;
      intArray0[3] = (int) '\u0000';
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {34, 103, 0, 0}, intArray0);
      assertArrayEquals(new int[] {34, 103, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.reverse((Object[]) integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertEquals(0, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'm', '\u0000', 'g'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = 1856L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1856L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1856L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0, 3, 117);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1856L;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 229.72);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {1856.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int1);
      
      BitSet bitSet0 = null;
      try {
        bitSet0 = new BitSet((byte) (-77));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -77
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      short[] shortArray0 = new short[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2, (-2187));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1063.97799263121;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = 1063.97799263121;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1063.97799263121);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-666.64928), Double.NaN);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0, 1063.97799263121}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (-1094);
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short) (byte)1;
      shortArray0[5] = (short)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)24432, (-1893));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new short[] {(short)1, (short)1, (short) (-1094), (short)1, (short)1, (short)0}, shortArray0);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotNull(bitSet1);
      assertEquals(6, shortArray0.length);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      Integer integer0 = new Integer(2214);
      assertNotNull(integer0);
      assertEquals(2214, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((char[]) null, 2214, (-19));
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (-19));
      assertArrayEquals(new double[] {(-19.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(2214);
      assertNotNull(long0);
      assertEquals(2214L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {2214L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      ArrayUtils.reverse((double[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-19));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -19, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      doubleArray0[7] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, 0.0, 0.0, 2.147483647E9, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((-405));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-405), (int)integer2);
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer((int) integerArray0[3]);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(5, integerArray0.length);
      assertEquals((-405), (int)integer3);
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer(50);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(50, (int)integer4);
      
      Integer integer5 = ArrayUtils.get(integerArray0, 1196, integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals(5, integerArray0.length);
      assertEquals(50, (int)integer5);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer5);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.hashCode((Object) integerArray0[3]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(int1 == int0);
      assertEquals(5, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) 50;
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '{';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'l');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'4', '{'}, charArray0);
      assertArrayEquals(new char[] {'4', '{'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 50.0, 4.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shuffle(floatArray0, (Random) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)24, 10);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 886;
      floatArray0[1] = (float) (short)24;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(floatArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 3555, 3555);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3555, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-2081L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      longArray0[4] = 1609L;
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 36);
      assertArrayEquals(new long[] {(-1L), (-2081L), 2450L, 0L, 1609L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1L);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 2017, 36);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2017, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)122;
      shortArray0[2] = (short)122;
      shortArray0[3] = (short)671;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)122, (short)122, (short)671, (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)122, (short)122, (short)671, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)122, (short)122, (short)671, (short)1, (short)122, (short)122, (short)671, (short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      Integer integer0 = new Integer((-576));
      assertNotNull(integer0);
      assertEquals((-576), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-77));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertNotNull(objectArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1697.4692F;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(5, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1697.4692F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, (double) 1697.4692F, 5);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1697.46923828125}, doubleArray2, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, 110, 2146491539, 2146491539);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.reverse((long[]) null, 2146491539, 2146491539);
      ArrayUtils.reverse((long[]) null, 0, 5);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-2081L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      longArray0[4] = 1609L;
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 36);
      assertArrayEquals(new long[] {(-1L), (-2081L), 2450L, 0L, 1609L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      ArrayUtils.shift(floatArray0, 36, 122, (-2923));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 122, 1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {1609L, 0L, 2450L, (-2081L), (-1L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-2146293905));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2146293905), (int)integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integerArray0[1];
      ArrayUtils.reverse(longArray0, (-1459), 0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotSame(longArray0, longArray1);
      
      char[] charArray0 = new char[3];
      MockRandom mockRandom0 = new MockRandom((-2146293905));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray1, 11, (long) integerArray0[2]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = (-3435L);
      longArray0[3] = (-41L);
      longArray0[4] = (-579L);
      longArray0[5] = (-3126L);
      longArray0[6] = 3984L;
      longArray0[7] = 53L;
      longArray0[8] = 76L;
      ArrayUtils.reverse(longArray0, (-2866), (-2866));
      assertArrayEquals(new long[] {(-1L), (-1L), (-3435L), (-41L), (-579L), (-3126L), 3984L, 53L, 76L}, longArray0);
      assertEquals(9, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'j';
      charArray0[2] = 's';
      charArray0[3] = 'z';
      charArray0[4] = '';
      charArray0[5] = 'z';
      charArray0[6] = 'O';
      charArray0[7] = '7';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2866), (-2866));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'d', 'j', 's', 'z', '', 'z', 'O', '7'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(8, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1066L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1066L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, 91);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 0;
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0L);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 6281.2323582613);
      assertArrayEquals(new double[] {6281.2323582613, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0L;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null, (short)2);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1136.1897013472674));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 454.20151677);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1121));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-964.5878479061262));
      assertArrayEquals(new double[] {(-964.5878479061262)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-26));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '?';
      charArray0[2] = 'X';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'/', '?', 'X'}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'/', '?', 'X'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, '', 2123080424);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new char[] {'/', '?', 'X'}, charArray0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertEquals(3, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(bitSet1, bitSet0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) '/';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, 'C');
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'/'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(1, charArray2.length);
      assertEquals(1, characterArray0.length);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2855);
      assertNotNull(integer0);
      assertEquals(2855, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(7, integerArray0.length);
      assertEquals(2855, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1348);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1348, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-26));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-26), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(Integer.MAX_VALUE, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(7, integerArray0.length);
      assertEquals(1348, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(Integer.MAX_VALUE, (int)integer6);
      
      integerArray0[6] = integer6;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0, (byte)2, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)2;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte)0);
      assertArrayEquals(new float[] {0.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-101);
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte) (-101);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) (byte)2;
      doubleArray0[7] = 0.0;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-101);
      int int1 = ArrayUtils.indexOf(intArray0, (int) (byte)0, (int) (byte)2);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-101)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int1);
      
      Integer integer0 = new Integer(2354);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2354, (int)integer0);
      
      Integer integer1 = Integer.getInteger("jR&@R", integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2354, (int)integer1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, (Integer) (-101));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-661.75653F));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.add(floatArray1, 0, (-661.75653F));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-661.75653F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(floatArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      char[] charArray0 = new char[13];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(13, charArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, ')');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertEquals(13, charArray0.length);
      assertEquals(14, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 100, ')');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 13
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-513);
      shortArray0[2] = (short)364;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-513);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)364;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-513.0), 0.0, 0.0, 364.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-513.0), 0.0, 0.0, 364.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short short0 = new Short((short) (-513));
      assertNotNull(short0);
      assertEquals((short) (-513), (short)short0);
      
      Short short1 = new Short((short)195);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)195, (short)short1);
      
      Short short2 = new Short((short) (-1699));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-1699), (short)short2);
      
      Short short3 = new Short((short)364);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short)364, (short)short3);
      
      Short short4 = new Short((short) (-1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      assertEquals((short) (-1), (short)short4);
      
      Short[] shortArray1 = new Short[4];
      shortArray1[0] = short2;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = short3;
      shortArray1[3] = short3;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1699), (short)0, (short)364, (short)364}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(4, shortArray2.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray2, shortArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = 'q';
      char[] charArray1 = ArrayUtils.add(charArray0, 2, 'D');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'D', 'q'}, charArray0);
      assertArrayEquals(new char[] {'D', 'q', 'D'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = 'g';
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (-26));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('i');
      assertNotNull(character0);
      assertEquals('i', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(',');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals(',', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('\"');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('\"', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('g');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('g', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(',');
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      assertEquals(',', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf((char) character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character4));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals('g', (char)character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, ',');
      assertArrayEquals(new char[] {'i', ',', '\"', 'g', ',', 'g'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 36;
      float[] floatArray0 = new float[13];
      Character[] characterArray0 = new Character[2];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '2');
      assertArrayEquals(new char[] {'2', '2'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-10), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -10, Length: 13
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (short)364);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short short0 = new Short((short)15157);
      assertNotNull(short0);
      assertEquals((short)15157, (short)short0);
      
      Short short1 = new Short((short)20);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)20, (short)short1);
      
      Short short2 = new Short((short)0);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      
      Short short3 = new Short((short)102);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short)102, (short)short3);
      
      Short short4 = new Short((short) (-1699));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short) (-1699), (short)short4);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short0;
      shortArray0[1] = short1;
      shortArray0[2] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)15157, (short)20, (short)102}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      ArrayUtils.shuffle(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.shift(floatArray0, (-2));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)32, (byte) (-93), (byte) (-27), (byte)33, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = '.';
      charArray0[2] = 'z';
      charArray0[3] = 'e';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'H', '.', 'z', 'e'}, charArray0);
      assertArrayEquals(new char[] {'H', '.', 'z', 'e'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)53;
      floatArray0[1] = (float) 'H';
      ArrayUtils.shift(floatArray0, (-617), 102, (-2102));
      assertArrayEquals(new float[] {53.0F, 72.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) (-2072);
      floatArray0[2] = (float) (-2072);
      floatArray0[3] = (float) (-2072);
      floatArray0[4] = (float) (-2072);
      floatArray0[5] = (float) (-2072);
      floatArray0[6] = (float) (-2072);
      floatArray0[7] = (float) (-2072);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)40;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)40);
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40, (byte)40}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeAll(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      Integer integer0 = new Integer((-576));
      assertNotNull(integer0);
      assertEquals((-576), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) Integer.MAX_VALUE);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) Integer.MAX_VALUE, 1966);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-576);
      int int2 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new long[] {(-576L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 1L, 48);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      Short short0 = new Short((short)160);
      assertNotNull(short0);
      assertEquals((short)160, (short)short0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (-3625), 2333);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2333;
      doubleArray0[1] = (double) (-3625);
      doubleArray0[2] = (double) 2333;
      doubleArray0[3] = (double) 2333;
      doubleArray0[4] = (double) 2333;
      ArrayUtils.swap(doubleArray0, (-1), (-1), (-1));
      assertArrayEquals(new double[] {2333.0, (-3625.0), 2333.0, 2333.0, 2333.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short) (-6007);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-6007);
      doubleArray0[4] = (double) (short)4;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 2525.751598611415);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-6007.0), (-1.0), (-6007.0), 4.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2525.751598611415, 0.0, (-6007.0), (-1.0), (-6007.0), 4.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (short)4);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(4.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) (short) (-6007));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-6007.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) floatArray0[0]);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals(8, floatArray0.length);
      assertEquals((-1.0F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1306.650604720115);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals(1306.6506F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      assertEquals(0.0F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((float) (short) (-6007));
      assertEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotNull(float6);
      assertEquals((-6007.0F), (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((float) floatArray0[4]);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotNull(float7);
      assertEquals(8, floatArray0.length);
      assertEquals(1306.6506F, (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1L));
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 902L);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      float[] floatArray2 = new float[4];
      floatArray2[0] = (float) (-1L);
      floatArray2[1] = 4723.0F;
      floatArray2[2] = (-1370.57F);
      floatArray2[3] = 1.0F;
      float[] floatArray3 = ArrayUtils.removeElements(floatArray2, floatArray2);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 4723.0F, (-1370.57F), 1.0F}, floatArray2, 0.01F);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray3.length);
      assertEquals(4, floatArray2.length);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray2, floatArray3);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      Short[] shortArray0 = new Short[25];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0, "");
      assertNotNull(stringArray0);
      assertEquals(25, shortArray0.length);
      assertEquals(25, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      short[] shortArray0 = new short[9];
      int int0 = new Short((short)1136);
      assertEquals((short)1136, int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)76;
      longArray0[2] = (long) (byte)53;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 76L, 53L}, longArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(3, longArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = '/';
      charArray0[2] = 'T';
      charArray0[3] = '2';
      charArray0[4] = 'U';
      charArray0[5] = 'T';
      charArray0[6] = '-';
      charArray0[7] = 'L';
      charArray0[8] = 'b';
      int int0 = ArrayUtils.indexOf(charArray0, '/');
      assertArrayEquals(new char[] {'b', '/', 'T', '2', 'U', 'T', '-', 'L', 'b'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)22;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)87);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)123, (byte) (-85), (byte)79, (byte) (-105), (byte)76, (byte)22}, byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-85), (byte)79, (byte) (-105), (byte)76, (byte)22}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '9';
      floatArray0[2] = (float) 'i';
      floatArray0[3] = (float) 'E';
      floatArray0[4] = 1638.652F;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1638.652F, 69.0F, 105.0F, 0.0F, 57.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2145465294);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals((-1), int0);
      assertNotSame(booleanArray0, booleanArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = '9';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '9', (-1));
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'E', '9'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int1);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)54;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)54;
      ArrayUtils.shift(floatArray0, (-13), (-13), (int) (short)1);
      assertArrayEquals(new float[] {1.0F, 54.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (short)1;
      floatArray1[1] = (float) (short)1;
      floatArray1[2] = (float) (-13);
      floatArray1[3] = (float) (-13);
      ArrayUtils.shift(floatArray1, (-13), (int) (short)54, (int) (short)54);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-13.0F), (-13.0F), 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      Double double0 = new Double((-13));
      assertNotNull(double0);
      assertEquals((-13.0), (double)double0, 0.01);
      
      Double double1 = Double.valueOf((double) (-13));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-13.0), (double)double1, 0.01);
      
      Double double2 = new Double((short)54);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(54.0, (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double2;
      doubleArray0[1] = double1;
      doubleArray0[2] = double2;
      doubleArray0[3] = double2;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {54.0, (-13.0), 54.0, 54.0, (-13.0), (-13.0), (-13.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)54;
      longArray0[1] = (long) (short)54;
      longArray0[2] = (long) (short)54;
      longArray0[3] = (long) (short)54;
      longArray0[4] = (long) (short)1;
      longArray0[5] = (long) (short)54;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, (-2288));
      assertArrayEquals(new long[] {54L, 54L, 54L, 54L, 1L, 54L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(6, longArray0.length);
      
      ArrayUtils.swap(longArray0, (-13), (int) (short)54, (int) (short)54);
      assertArrayEquals(new long[] {54L, 54L, 54L, 54L, 1L, 54L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 977;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 529;
      floatArray0[1] = (float) 977;
      floatArray0[2] = (float) 977;
      floatArray0[3] = (float) (-2734);
      ArrayUtils.shift(floatArray0, 2147218324, 529, 2147218324);
      assertArrayEquals(new float[] {529.0F, 977.0F, 977.0F, (-2734.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      ArrayUtils.shift(floatArray0, 63, 529, 2147218324);
      assertArrayEquals(new float[] {529.0F, 977.0F, 977.0F, (-2734.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(977);
      assertNotNull(double0);
      assertEquals(977.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = Double.valueOf((-302.376275118));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-302.376275118), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-302.376275118));
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-302.376275118), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {977.0, (-302.376275118), (-302.376275118)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-988));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'n';
      intArray0[2] = (int) 'n';
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = (int) '3';
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {110, 0, 110, 0, 2, 51, 0, 0}, intArray0);
      assertArrayEquals(new int[] {110, 0, 110, 0, 2, 51, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 1856L;
      Object object0 = ArrayUtils.get(objectArray0, 110);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      Long long0 = new Long((-271L));
      assertNotNull(long0);
      assertEquals((-271L), (long)long0);
      
      Long long1 = new Long((-61L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-61L), (long)long1);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) 0L;
      longArray1[1] = long1;
      longArray1[2] = (Long) 0L;
      longArray1[3] = (Long) (-103L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 110);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-61L), 0L, (-103L)}, longArray2);
      assertNotNull(longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray2, longArray0);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {110, 0, 110, 0, 2, 51, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {110, 0, 110, 0, 2, 51, 0, 0}, intArray1);
      assertNotNull(intArray2);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray2.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      
      long[] longArray3 = ArrayUtils.insert(2, longArray2, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertArrayEquals(new long[] {0L, (-61L), 0L, (-103L)}, longArray2);
      assertArrayEquals(new long[] {0L, (-61L), 0L, (-61L), 0L, (-103L), 0L, (-103L)}, longArray3);
      assertNotNull(longArray3);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertEquals(8, longArray3.length);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1066L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1066L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '@';
      charArray0[3] = 'f';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'(', '(', '@', 'f'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (double) (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) '(';
      objectArray0[1] = (Object) 'f';
      objectArray0[2] = (Object) 'f';
      objectArray0[3] = (Object) '(';
      objectArray0[4] = (Object) '(';
      objectArray0[5] = (Object) '(';
      objectArray0[6] = (Object) '@';
      ArrayUtils.swap(objectArray0, 123, 123, (-1));
      assertEquals(7, objectArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)144;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-31);
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)144, (short) (-1), (short) (-31)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(boolean1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)97;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte) (-15);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-15);
      shortArray0[2] = (short) (-3740);
      shortArray0[3] = (short) (byte) (-15);
      shortArray0[4] = (short) (byte)97;
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[7] = (short) (byte)0;
      shortArray0[8] = (short) (byte)97;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short) (-15), (short) (-3740), (short) (-15), (short)97, (short) (-1), (short) (-1), (short)0, (short)97}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-15), (short) (-3740), (short) (-15), (short)97, (short) (-1), (short) (-1), (short)0, (short)97}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) (short)0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2072);
      floatArray0[1] = (float) (-2072);
      floatArray0[2] = (float) (-2072);
      floatArray0[3] = (float) (-2072);
      floatArray0[4] = (float) (-2072);
      floatArray0[5] = (float) (-2072);
      floatArray0[6] = (float) (-2072);
      floatArray0[7] = (float) (-2072);
      ArrayUtils.shift(floatArray0, (-2734), 2147218324, 529);
      assertArrayEquals(new float[] {(-2072.0F), (-2072.0F), (-2072.0F), (-2072.0F), (-2072.0F), (-2072.0F), (-2072.0F), (-2072.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 529;
      longArray0[1] = (long) 2147218324;
      longArray0[2] = 815L;
      longArray0[3] = 2450L;
      longArray0[4] = (long) (-2072);
      longArray0[5] = (long) (-2072);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1061L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {529L, 2147218324L, 815L, 2450L, (-2072L), (-2072L)}, longArray0);
      assertArrayEquals(new long[] {1061L, 529L, 2147218324L, 815L, 2450L, (-2072L), (-2072L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-18456);
      shortArray0[1] = (short) (-741);
      shortArray0[2] = (short)46;
      shortArray0[3] = (short) (-2099);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)954;
      shortArray0[6] = (short)5627;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-18456), (short) (-741), (short)46, (short) (-2099), (short) (-1), (short)954, (short)5627}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)12);
      assertNull(shortArray0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 13.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (short)1076;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {13.0F, 0.0F, 1076.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1066L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-5934.735758633655), 1066.0);
      assertArrayEquals(new double[] {1066.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, (-656), 1.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-548.3297367346008), (-2027), (double) (-2027));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(10, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2428.64287961535), (-2428.64287961535));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = 1063.97799263121;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1063.97799263121}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, 1.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 1063.97799263121, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 10;
      intArray0[2] = 40;
      intArray0[3] = (-2501);
      intArray0[4] = (-2716);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray0);
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 40;
      longArray0[2] = (long) 40;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 10;
      longArray0[5] = (long) 10;
      longArray0[6] = (long) (-2501);
      longArray0[7] = (long) 40;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1041, 5);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {40L, 0L, 40L, 0L, 10L, 10L, (-2501L), 40L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(intArray1, (-2716), (-2501), (-2003));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray0);
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 10L;
      ArrayUtils.shift(doubleArray0, (-599), 3635, 2);
      assertArrayEquals(new double[] {10.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray2 = ArrayUtils.insert(0, intArray1, (int[]) null);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray0);
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray2);
      assertArrayEquals(new int[] {0, 10, 40, (-2501), (-2716)}, intArray1);
      assertNotNull(intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray2.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      short[] shortArray0 = new short[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1, (int) (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (-2307);
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      int[] intArray1 = ArrayUtils.insert((int) (short)1, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, (-2307), 1, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1, (-2307), 1, 1, (-2307), 1, 1}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertArrayEquals(new long[] {(-103L), 0L, 1856L, 0L}, longArray0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = ArrayUtils.insert((-2716), (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 40;
      floatArray0[1] = (float) (-2716);
      floatArray0[2] = (-1031.0F);
      floatArray0[3] = (float) (-2716);
      floatArray0[4] = (float) (-2716);
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-1031.0F);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1031.0F), 1.0F, (-2716.0F), (-2716.0F), (-1031.0F), (-2716.0F), 40.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) (byte)104);
      assertArrayEquals(new long[] {104L}, longArray0);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      int[] intArray0 = new int[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1808), 1656);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.shift(intArray0, (-1793), 1656, (-1808));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) bitSet0;
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ArrayUtils.shift(byteArray0, (-12));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      ArrayUtils.shift(byteArray0, 14);
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-125), (byte)32}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'h');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'h', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 127, 37, (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)113;
      Integer integer0 = Integer.getInteger("r", (Integer) null);
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)123);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)123;
      intArray0[1] = (int) (byte)123;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 123, 123);
      assertArrayEquals(new int[] {123, 123}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)123);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)123, 123);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = '%';
      charArray0[2] = ')';
      charArray0[3] = 'l';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'x', '%', ')', 'l'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      Integer integer0 = Integer.getInteger("r", (Integer) 123);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(123, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'O');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'x', '%', ')', 'l'}, charArray1);
      assertArrayEquals(new char[] {'x', '%', ')', 'l'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'h');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'h'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 0;
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'n');
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'n';
      floatArray0[1] = (float) 'n';
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (-2960.2014F);
      floatArray0[5] = (float) 2;
      ArrayUtils.shift(floatArray0, 2, (-108), 0);
      assertArrayEquals(new float[] {110.0F, 110.0F, 2.0F, 2.0F, (-2960.2014F), 2.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = '>';
      charArray0[3] = '.';
      charArray0[4] = 'y';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'e');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'B', 'B', '>', '.', 'y'}, charArray0);
      assertArrayEquals(new char[] {'e', 'B', 'B', '>', '.', 'y'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '.';
      intArray0[1] = (int) '>';
      intArray0[2] = (int) '>';
      int int0 = ArrayUtils.indexOf(intArray0, 62, (-886));
      assertArrayEquals(new int[] {46, 62, 62}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, int0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 46;
      integerArray0[1] = (Integer) 62;
      integerArray0[2] = (Integer) 62;
      integerArray0[3] = (Integer) 62;
      integerArray0[4] = (Integer) 62;
      integerArray0[5] = (Integer) 62;
      integerArray0[6] = (Integer) 62;
      integerArray0[7] = (Integer) 62;
      Integer integer0 = Integer.getInteger("r", integerArray0[6]);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(8, integerArray0.length);
      assertEquals(62, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1491);
      shortArray0[1] = (short)1633;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (short) (-1491), 2746L);
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(53L, 0.0, 1.0);
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)1633, (short) (-1491)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)1633;
      longArray0[1] = (long) (short)1633;
      longArray0[2] = (long) (short) (-1491);
      longArray0[3] = (long) (short)1633;
      longArray0[4] = (long) (short)1633;
      longArray0[5] = (long) (short) (-1491);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {1633L, 1633L, (-1491L), 1633L, 1633L, (-1491L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)57);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)122}, byteArray0);
      assertArrayEquals(new byte[] {(byte)122}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1491);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1491.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-15));
      assertNotNull(byte0);
      assertEquals((byte) (-15), (byte)byte0);
      
      byteArray0[0] = byte0;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertNotNull(objectArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, objectArray0.length);
      assertSame(byteArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      int[] intArray0 = new int[16];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(16, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Integer[] integerArray0 = new Integer[7];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, int0);
      assertNull(integer1);
      assertEquals(7, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, 0);
      assertNotNull(object1);
      assertEquals(7, objectArray0.length);
      assertEquals(0, object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, 45);
      assertNull(object3);
      assertEquals(7, objectArray0.length);
      
      objectArray0[3] = null;
      Object object4 = ArrayUtils.get(objectArray0, Integer.MAX_VALUE);
      assertNull(object4);
      assertEquals(7, objectArray0.length);
      
      objectArray0[4] = null;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object2));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)object1));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer integer2 = new Integer(584);
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)object0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(584, (int)integer2);
      
      integerArray0[4] = integer2;
      Integer integer3 = new Integer(0);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)object1));
      assertTrue(integer3.equals((Object)object0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      integerArray0[5] = integer3;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      Integer integer4 = new Integer(0);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)object0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)object1));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      Integer integer5 = ArrayUtils.get(integerArray0, 45, integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)object0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)object1));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer5.equals((Object)object0));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)object1));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(8, integerArray0.length);
      assertEquals(0, (int)integer5);
      
      Object object6 = ArrayUtils.get(objectArray0, 0, (Object) integer5);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)object0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)object1));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer5.equals((Object)object0));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)object1));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(object6.equals((Object)integer2));
      assertTrue(object6.equals((Object)integer5));
      assertTrue(object6.equals((Object)integer4));
      assertFalse(object6.equals((Object)integer1));
      assertTrue(object6.equals((Object)integer3));
      assertNotNull(object6);
      assertEquals(7, objectArray0.length);
      assertEquals(8, integerArray0.length);
      assertEquals(0, object6);
      
      objectArray0[6] = object6;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(7, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-4663);
      intArray0[1] = (-499);
      intArray0[2] = 0;
      intArray0[3] = (-284);
      intArray0[4] = 1968;
      intArray0[5] = 0;
      intArray0[6] = 391;
      intArray0[7] = (-1031);
      intArray0[8] = 0;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-499), 0, (-284), 1968, 0, 391, (-1031), 0, (-4663)}, intArray0);
      assertEquals(9, intArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-1031);
      floatArray0[3] = (float) (-284);
      floatArray0[4] = (float) 1968;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) (-499);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-4663));
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1031.0F), (-284.0F), 1968.0F, 0.0F, (-499.0F)}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(7, floatArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 391;
      longArray0[1] = (long) (-284);
      longArray0[2] = (long) 0;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-284L), 0L, 391L}, longArray0);
      assertEquals(3, longArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = 'p';
      charArray0[2] = 'k';
      charArray0[3] = '+';
      charArray0[4] = '?';
      charArray0[5] = 'u';
      charArray0[6] = ';';
      charArray0[7] = '/';
      charArray0[8] = '';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, '/');
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new char[] {'N', 'p', 'k', '+', '?', 'u', ';', '/', ''}, charArray0);
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{7}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(8, bitSet1.length());
      assertNotNull(bitSet1);
      assertEquals(9, charArray0.length);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.swap(shortArray0, 9, (-1169), 1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 434.16);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 434.16}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer integer0 = Integer.valueOf(1885);
      assertNotNull(integer0);
      assertEquals(1885, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      Integer integer2 = new Integer((short) (-1491));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1491), (int)integer2);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, 3271);
      assertFalse(boolean0);
      
      ArrayUtils.shift((boolean[]) null, 2421, 79, 106);
      ArrayUtils.reverse((boolean[]) null, (-43), 79);
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.shift(booleanArray0, 2146654415, (-3625), (-814));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.reverse(booleanArray0, (-1), (-123));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(4, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)52;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.reverse(booleanArray0, Integer.MAX_VALUE, 2108);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("<m;Vek/Dw");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1003.0F;
      ArrayUtils.swap(floatArray0, 1928, (int) (short)0);
      assertArrayEquals(new float[] {1003.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)123);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)123;
      intArray0[1] = (int) (byte)123;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 123, 123);
      assertArrayEquals(new int[] {123, 123}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)123);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)123, 97);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 97;
      floatArray0[1] = (float) (byte)123;
      floatArray0[2] = (float) 1;
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (-823.8F));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new float[] {97.0F, 123.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int2);
      
      ArrayUtils.swap(floatArray0, 123, 123);
      assertArrayEquals(new float[] {97.0F, 123.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) 123, (Integer) 123);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) 123, (Integer) 123);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      Integer integer0 = Integer.getInteger("+?vL<o|skBW*h GUQ", 275);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(275, (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      MutableInt mutableInt0 = new MutableInt(1);
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertFalse(integer1.equals((Object)int2));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, (Integer) null);
      assertFalse(integer1.equals((Object)int2));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(8, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1697.8676F;
      ArrayUtils.swap(floatArray0, 33, 33, 33);
      assertArrayEquals(new float[] {1697.8676F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 33, 33);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {(-1), 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)7, 0);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int1);
      
      org.evosuite.runtime.Random.setNextRandom(1476);
  }

  @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2162);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-2162);
      shortArray0[3] = (short)48;
      shortArray0[4] = (short) (-2162);
      shortArray0[5] = (short)1136;
      shortArray0[6] = (short)127;
      shortArray0[7] = (short) (-2162);
      shortArray0[8] = (short) (-2162);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3746), 1);
      assertArrayEquals(new short[] {(short) (-2162), (short)0, (short) (-2162), (short)48, (short) (-2162), (short)1136, (short)127, (short) (-2162), (short) (-2162)}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      long[] longArray0 = new long[4];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 71);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), 71);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      org.evosuite.runtime.Random.setNextRandom((-1501));
  }

  @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      int int0 = (-2191);
      Integer integer0 = new Integer((-2191));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2191), (int)integer0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 53L;
      longArray0[1] = 1L;
      longArray0[2] = (long) 'Q';
      longArray0[3] = (-1450L);
      longArray0[4] = 53L;
      longArray0[5] = 1311L;
      ArrayUtils.swap(longArray0, (-2803), 48, 48);
      assertArrayEquals(new long[] {53L, 1L, 81L, (-1450L), 53L, 1311L}, longArray0);
      assertEquals(6, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-30839);
      shortArray0[1] = (short)2458;
      shortArray0[2] = (short)2458;
      shortArray0[3] = (short)5043;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-30839), (short)2458, (short)2458, (short)5043}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      ArrayUtils.shift(byteArray0, 22);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)32, (byte) (-125)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      
      Integer integer0 = new Integer((-4107));
      assertNotNull(integer0);
      assertEquals((-4107), (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) integer0, 543);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 867L;
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 867L;
      longArray1[1] = 867L;
      longArray1[2] = 867L;
      longArray1[3] = 867L;
      longArray1[4] = 0L;
      longArray1[5] = 867L;
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {867L}, longArray0);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 867L, 0L, 867L, 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(10, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte)32;
      ArrayUtils.shift(byteArray0, 1724);
      assertArrayEquals(new byte[] {(byte)32, (byte)32, (byte) (-125), (byte)32, (byte)32, (byte)32, (byte)32, (byte)32}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(8, classArray0.length);
      assertEquals(8, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 55;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {55, 0}, intArray0);
      assertArrayEquals(new int[] {55, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 55;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[6] = (double) 55;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)48;
      shortArray0[1] = (short)3420;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)3250;
      shortArray0[4] = (short) (-2657);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)69;
      ArrayUtils.swap(shortArray0, (int) (short)48, (-1));
      assertArrayEquals(new short[] {(short)48, (short)3420, (short) (-1), (short)3250, (short) (-2657), (short) (-1), (short)69}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'v';
      charArray1[1] = 'v';
      charArray1[2] = 'v';
      charArray1[3] = 'v';
      charArray1[4] = 'v';
      charArray1[5] = 'v';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'v', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'v', 'v', 'v', 'v', 'v', 'v'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertEquals(2, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.hashCode((Object) null);
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'l');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      char[] charArray0 = new char[4];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\u0000');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals(4, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)0, 0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-1), (-4072.80967219492));
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = 'h';
      charArray0[2] = 'M';
      charArray0[3] = '7';
      charArray0[4] = 'M';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'h');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'L', 'M', '7', 'M'}, charArray1);
      assertArrayEquals(new char[] {'L', 'h', 'M', '7', 'M'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = 1856L;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 1856L;
      objectArray0[1] = (Object) 1856L;
      objectArray0[2] = (Object) 1856L;
      objectArray0[3] = (Object) 1856L;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(4, objectArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-460), (-1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Q', 'Q', 'Q', 'Q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-8);
      intArray0[1] = (int) 'Q';
      ArrayUtils.shift(intArray0, (-1));
      assertArrayEquals(new int[] {81, (-8)}, intArray0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1073741824, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1073741824, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.shift((int[]) null, 1);
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray1, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.shift((boolean[]) null, 2299, (-343), (-1294));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1294);
      longArray0[2] = (long) 2299;
      longArray0[3] = (long) 2299;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {(-1294L), 0L, 2299L, 2299L}, longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 3, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, (int) (short)418, (short)418);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 418, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-2110));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2110, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1933L);
      longArray0[1] = (-1L);
      longArray0[2] = (-1942L);
      long long0 = 1L;
      longArray0[3] = 1L;
      long long1 = 478L;
      longArray0[4] = 478L;
      ArrayUtils.shift((boolean[]) null, 12);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1933L);
      floatArray0[1] = (float) (-1942L);
      floatArray0[2] = (float) (-1942L);
      floatArray0[3] = (float) 1L;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1933.0F), (-1942.0F), (-1942.0F), 1.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      char char0 = 'V';
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      int int0 = (-2673);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-2673));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2673, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)36;
      ArrayUtils.swap(shortArray0, (int) (short)1, (int) (short)1);
      assertArrayEquals(new short[] {(short)36}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((short)36);
      assertNotNull(integer0);
      assertEquals(36, (int)integer0);
      
      integerArray0[0] = integer0;
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Short short1 = new Short((short) (-22244));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-22244), (short)short1);
      
      Short short2 = new Short((short) (-2734));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-2734), (short)short2);
      
      Short short3 = new Short((short) (-1));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short) (-1), (short)short3);
      
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = short0;
      shortArray1[1] = short2;
      shortArray1[2] = short1;
      shortArray1[3] = short1;
      shortArray1[4] = short2;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short) (-2734), (short) (-22244), (short) (-22244), (short) (-2734)}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(5, shortArray2.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray2, shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)shortArray1[1];
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) integerArray0[0];
      intArray0[3] = (int) integerArray0[0];
      intArray0[4] = (int) (short) (-22244);
      intArray0[5] = (int) (short)36;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {(-2734), (-1), 36, 36, (-22244), 36}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[0];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 97;
      floatArray0[2] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-823.8F));
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {97.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int1);
      
      ArrayUtils.swap(floatArray0, 0, 0);
      assertArrayEquals(new float[] {97.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) 0, (Integer) 0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) 0, (Integer) 0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      Integer integer0 = Integer.getInteger("+?vL<o|skBW*h GUQ", 275);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(275, (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, (Integer) null);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(8, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 3496);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2356);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1311;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-940);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)3053);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2356), (short)0, (short)1311, (short)0, (short) (-940)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2356), (short)0, (short)1311, (short)0, (short) (-940)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)13;
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)2, (byte)92, (byte)126, (byte) (-50), (byte)65, (byte)4, (byte)13}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) (byte)92;
      longArray0[3] = (long) (short)1311;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2450L);
      assertArrayEquals(new long[] {0L, 2L, 92L, 1311L}, longArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 2L;
      floatArray0[2] = (float) (byte)13;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) (byte)2;
      floatArray0[5] = (float) (byte)13;
      floatArray0[6] = (float) (byte)126;
      floatArray0[7] = (float) (short)0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2427.34F);
      assertArrayEquals(new float[] {0.0F, 2.0F, 13.0F, 0.0F, 2.0F, 13.0F, 126.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)63);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 40);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {40, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-26));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-26)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = 'c';
      ArrayUtils.swap(charArray0, (-4220), (-3827), (-4220));
      assertArrayEquals(new char[] {'P', 'c'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      integerArray0[0] = null;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      int int0 = 5;
      Integer integer3 = new Integer(5);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(5, (int)integer3);
      
      Integer integer4 = Integer.getInteger("", integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(5, (int)integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer(int0);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(5, (int)integer5);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 5;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1440);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1440, 5, 0}, intArray1);
      assertArrayEquals(new int[] {5, 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 862.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 862.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {862.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-86), (byte)39, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)39, (byte) (-1)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)39;
      floatArray0[1] = (float) (byte)39;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte)39);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {39.0F, 39.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {39.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = null;
      Integer integer0 = Integer.getInteger("", (int) (byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-86);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-86);
      intArray0[3] = (int) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1465.8222812428542);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(19, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-302.376275118);
      doubleArray0[3] = 2195.9;
      doubleArray0[4] = 3841.84314203;
      doubleArray0[5] = 1693.4478163;
      doubleArray0[6] = 11.446038646174;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (-2854.9730410361417);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-302.376275118));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0, (-302.376275118), 2195.9, 3841.84314203, 1693.4478163, 11.446038646174, (-1.0), (-2854.9730410361417)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 2195.9, 3841.84314203, 1693.4478163, 11.446038646174, (-1.0), (-2854.9730410361417)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 71.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1229.0212F;
      floatArray0[4] = (-3093.935F);
      floatArray0[5] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-809.9F), Integer.MAX_VALUE);
      assertArrayEquals(new float[] {(-1.0F), 71.0F, 0.0F, 1229.0212F, (-3093.935F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = '&';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'T', '&'}, charArray0);
      assertArrayEquals(new char[] {'T', '&'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F), 0);
      assertArrayEquals(new float[] {(-1.0F), 71.0F, 0.0F, 1229.0212F, (-3093.935F), 0.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(6, floatArray0.length);
      
      boolean[] booleanArray2 = new boolean[5];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray2[2] = false;
      booleanArray2[3] = true;
      booleanArray2[4] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(5, booleanArray2.length);
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)58;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(20, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)58;
      longArray0[1] = (long) (byte)36;
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte)36;
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (long) (byte)58;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-313L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {58L, 36L, (-1L), 36L, (-1L), 58L}, longArray0);
      assertArrayEquals(new long[] {58L, 36L, (-1L), 36L, (-1L), 58L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-313L);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) 58L;
      doubleArray0[3] = (-1618.7039);
      doubleArray0[4] = (double) (-1L);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-313.0), (-1.0), 58.0, (-1618.7039), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-313.0), (-1.0), 58.0, (-1618.7039), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ArrayUtils.shift(byteArray0, (int) (byte)56);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      int[] intArray0 = new int[4];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-76), (-432));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, intArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 403;
      intArray0[1] = 0;
      intArray0[2] = 1935;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2145408740, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 977, 40, 0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2));
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      long[] longArray0 = new long[20];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 0);
      assertEquals(20, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 5);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, 0L, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(0, int0);
      assertNotSame(longArray1, longArray0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-405));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-405), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      int[] intArray0 = new int[1];
      intArray0[0] = (-405);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -405, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2718);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2718, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, (-2));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0224348F;
      floatArray0[1] = 1.0224348F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0224348F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0224348F, 1.0224348F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0224348F, 1.0224348F, 1.0224348F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.shift(floatArray0, (-2837), 1975, (-1762));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0224348F, 1.0224348F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.shift(floatArray0, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-617);
      ArrayUtils.shift(floatArray0, (int) (byte)0, 1, (-1551));
      assertArrayEquals(new float[] {(-617.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 102, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)32, (byte) (-93), (byte) (-27), (byte)33, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = '.';
      charArray0[2] = 'z';
      charArray0[3] = 'e';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'H', '.', 'z', 'e'}, charArray0);
      assertArrayEquals(new char[] {'H', '.', 'z', 'e'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)40);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)32, (byte) (-93), (byte) (-27), (byte)33, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)36;
      ArrayUtils.swap(shortArray0, (int) (short)1, (int) (short)1);
      assertArrayEquals(new short[] {(short)36}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((short)36);
      assertNotNull(integer0);
      assertEquals(36, (int)integer0);
      
      integerArray0[0] = integer0;
      try { 
        Integer.decode("Q<;~j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Q<;~j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      ArrayUtils.swap(shortArray0, 944, (int) (short) (-1), (int) (short) (-1));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-57);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)40, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-1017L);
      longArray0[2] = (long) (byte) (-57);
      longArray0[3] = 0L;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = 0L;
      longArray0[6] = (-1291L);
      longArray0[7] = (long) (byte) (-57);
      longArray0[8] = (long) (byte) (-57);
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {(-1017L), 0L, 0L, 0L, 0L, (-1291L), (-57L), (-57L), (-57L)}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte)20;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)20, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)20}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (-1655);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Integer[] integerArray0 = new Integer[5];
      ArrayUtils.swap((short[]) null, (int) (short)1, (int) (short)1885);
  }

  @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2162);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)83, (int) (short) (-2162));
      assertArrayEquals(new short[] {(short) (-2162)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-513);
      shortArray0[2] = (short)364;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-513);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)364;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-513.0), 0.0, 0.0, 364.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-513.0), 0.0, 0.0, 364.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short short0 = new Short((short) (-513));
      assertNotNull(short0);
      assertEquals((short) (-513), (short)short0);
      
      Short short1 = new Short((short)195);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)195, (short)short1);
      
      Short short2 = new Short((short) (-1699));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-1699), (short)short2);
      
      Short short3 = new Short((short)12);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short)12, (short)short3);
      
      Short short4 = new Short((short) (-1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short) (-1), (short)short4);
      
      Short[] shortArray1 = new Short[4];
      shortArray1[0] = short0;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = short3;
      shortArray1[3] = short3;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-513), (short)0, (short)12, (short)12}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(4, shortArray2.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)55);
      assertArrayEquals(new byte[] {(byte)55, (byte)55}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)55, byteArray1, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-940);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)99);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short) (-940)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-940)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)92;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-50), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -50, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2371), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2371, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2356);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-2356);
      intArray0[1] = (int) (short) (-2356);
      intArray0[3] = (int) (short) (-2356);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-2356), (-2356), 0, (-2356)}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(2079);
      assertNotNull(integer0);
      assertEquals(2079, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2356);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-2356);
      intArray0[1] = (int) (short) (-2356);
      intArray0[2] = (int) (short) (-2356);
      intArray0[3] = (int) (short) (-2356);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-2356), (-2356), (-2356), (-2356)}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(2079);
      assertNotNull(integer0);
      assertEquals(2079, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.shift((boolean[]) null, 2299, (-343), (-1294));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-343);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-343.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-343.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0, (-495));
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-405));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-405), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(50);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(50, (int)integer5);
      
      Integer integer6 = new Integer(int0);
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer6);
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.hashCode((Object) integerArray0[3]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(int1 == int0);
      assertEquals(5, integerArray0.length);
      assertNotSame(integerArray0, integerArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1172;
      intArray0[1] = 4;
      intArray0[2] = 50;
      intArray0[3] = 50;
      intArray0[4] = 50;
      intArray0[5] = (-405);
      intArray0[6] = 0;
      intArray0[7] = (int) integerArray0[3];
      intArray0[8] = int0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1), int0);
      assertArrayEquals(new int[] {1172, 4, 50, 50, 50, (-405), 0, (-405), 0}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 15;
      Integer integer0 = new Integer(15);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(15, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[2] = (-1.0F);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2167;
      shortArray0[1] = (short)2167;
      shortArray0[2] = (short)2167;
      shortArray0[3] = (short) (-3373);
      shortArray0[4] = (short)2167;
      shortArray0[5] = (short)56;
      shortArray0[6] = (short)56;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)4382, (-3176));
      assertArrayEquals(new short[] {(short)2167, (short)2167, (short)2167, (short) (-3373), (short)2167, (short)56, (short)56}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)19;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-40), (-3874));
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)11, (byte) (-40), (byte)4, (byte)19}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 83;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 83, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)20;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte) (-1), (byte)20}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1), (byte)20}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)20;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (-1655);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 20, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)95);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.insert(0, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray1, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertEquals(0, integerArray2.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
  }

  @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      char[] charArray0 = new char[8];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)77;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)79);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)94, (byte)119, (byte)77}, byteArray0);
      assertArrayEquals(new byte[] {(byte)94, (byte)119, (byte)77, (byte)79}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Integer integer0 = Integer.valueOf(7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      Integer integer0 = new Integer(2146428300);
      assertNotNull(integer0);
      assertEquals(2146428300, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(2, (int)integer3);
      
      Integer integer4 = Integer.getInteger("", integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(2, (int)integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer(int0);
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals((-1), (int)integer5);
      
      Integer integer6 = Integer.getInteger("", integer5);
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)int0));
      assertNotNull(integer6);
      assertEquals((-1), (int)integer6);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer6);
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 566.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2349.2516395135685);
      doubleArray0[6] = (-4798.8300020963);
      doubleArray0[7] = 2525.751598611415;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3294.0);
      assertArrayEquals(new double[] {0.0, 0.0, 566.0, 0.0, 0.0, (-2349.2516395135685), (-4798.8300020963), 2525.751598611415}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)32, (byte) (-93), (byte) (-27), (byte)33, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = '.';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'H';
      charArray1[1] = 'H';
      charArray1[2] = '4';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000'}, charArray2);
      assertArrayEquals(new char[] {'H', '.', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'H', 'H', '4'}, charArray1);
      assertNotNull(charArray2);
      assertEquals(3, charArray2.length);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1882);
      assertArrayEquals(new int[] {1882, 1882}, intArray0);
      assertNotNull(intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1882, 1882);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1882, 1882}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)123);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)123;
      intArray0[1] = (int) (byte)123;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 123, 123);
      assertArrayEquals(new int[] {123, 123}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)123);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)123, 123);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '%';
      charArray0[2] = ')';
      charArray0[3] = 'l';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'\u0000', '%', ')', 'l'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      Integer integer0 = Integer.getInteger("r", (Integer) 123);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(123, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'O');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '%', ')', 'l'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '%', ')', 'l'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean[] booleanArray2 = new boolean[3];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray2, true);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
      assertEquals(3, booleanArray2.length);
      assertFalse(boolean1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      Integer integer0 = new Integer(860);
      assertNotNull(integer0);
      assertEquals(860, (int)integer0);
      
      Integer integer1 = new Integer(860);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(860, (int)integer1);
      
      int int0 = ArrayUtils.indexOf((char[]) null, '7');
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 860;
      intArray0[3] = 860;
      intArray0[4] = (-1);
      intArray0[5] = (int) '7';
      intArray0[6] = 860;
      intArray0[7] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 59, 860);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), (-1), 860, 860, (-1), 55, 860, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-3875), (-3875));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'c';
      ArrayUtils.swap(charArray0, (-4220), (-3842), (-4220));
      assertArrayEquals(new char[] {'V', 'c'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2130706432), (-972));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-972), (-2130706432), 100.0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 977;
      intArray0[1] = 753;
      intArray0[2] = 35;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 35, 977);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {977, 753, 35}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = '4';
      charArray0[2] = '~';
      charArray0[3] = 'M';
      charArray0[4] = 'o';
      charArray0[5] = 'b';
      charArray0[6] = 'b';
      charArray0[7] = '!';
      charArray0[8] = '4';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'%', '4', '~', 'M', 'o', 'b', 'b', '!', '4'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      integerArray0[2] = integer2;
      int int1 = 2;
      Integer integer3 = new Integer(2);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(2, (int)integer3);
      
      Integer integer4 = Integer.getInteger("", integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(2, (int)integer4);
      
      integerArray0[3] = integer4;
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = 'h';
      charArray0[2] = '3';
      charArray0[3] = 'G';
      charArray0[4] = 'h';
      ArrayUtils.swap(charArray0, 52, (-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'3', 'h', '3', 'G', 'h'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = '3';
      charArray0[2] = 'm';
      charArray0[3] = '.';
      charArray0[4] = '3';
      charArray0[5] = 'h';
      ArrayUtils.swap(charArray0, 0, 0, 0);
      assertArrayEquals(new char[] {'g', '3', 'm', '.', '3', 'h'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.shift(charArray0, 1556);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2622.5572619597297);
      doubleArray0[1] = 4678.74372324;
      doubleArray0[3] = (-1502.32968960609);
      doubleArray0[4] = 1.5;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 4678.74372324, 3240.2992352);
      assertArrayEquals(new double[] {(-2622.5572619597297), 4678.74372324, 0.0, (-1502.32968960609), 1.5}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (-898.09782402145);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2872.529859);
      doubleArray0[5] = 1361.642578047206;
      doubleArray0[6] = (-3067.735944529);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-2147483640));
      assertArrayEquals(new int[] {(-2147483640), (-2147483640), (-2147483640)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2147483640, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      long long0 = (-1376L);
      longArray0[3] = (-1376L);
      longArray0[4] = 0L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1376L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1376L), 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)43;
      byteArray0[0] = (byte)43;
      byte byte1 = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-60);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) (byte)43);
      assertNotNull(doubleStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      mockRandom0.setSeed((-1376L));
      boolean boolean1 = mockRandom0.nextBoolean();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs(0L, (-1376L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-951);
      intArray0[1] = (-951);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-951));
      assertArrayEquals(new int[] {(-951), (-951)}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 946.982F;
      floatArray0[1] = (-5284.5F);
      floatArray0[2] = 277.08023F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {946.982F, (-5284.5F), 277.08023F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-5284.5F), 277.08023F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte) (-44));
      assertNotNull(byte0);
      assertEquals((byte) (-44), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-28);
      Byte byte2 = new Byte((byte) (-28));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-28), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-44));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte) (-44), (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte1);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte) (-28), (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte1);
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      assertEquals((byte) (-28), (byte)byte5);
      
      byteArray0[4] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-17));
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-28), (byte) (-44), (byte) (-28), (byte) (-28)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)76, (byte)53, (byte)32, (byte) (-93), (byte) (-27), (byte)33, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      Integer integer0 = new Integer(117);
      assertNotNull(integer0);
      assertEquals(117, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 117, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 117, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer((-846));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-846), (int)integer2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (int) 'v', integer2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 118, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, 1, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, (-3803), integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3803, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayUtils.shift(doubleArray0, 1376);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, (-393));
      Integer integer0 = new Integer((-393));
      assertNotNull(integer0);
      assertEquals((-393), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1129.27;
      int int0 = ArrayUtils.indexOf((int[]) null, (-2029));
      assertEquals((-1), int0);
      
      ArrayUtils.shift((Object[]) null, (-656));
      MockRandom mockRandom0 = new MockRandom((-656));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-1));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1129.27}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotSame(mockRandom1, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((int[]) null, (-2029));
      assertEquals((-1), int0);
      
      ArrayUtils.shift((Object[]) null, (-2029));
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-1));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(mockRandom1, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = ArrayUtils.get(objectArray0, (-1));
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get((Object[]) null, 1717986918);
      assertNull(object1);
      
      objectArray0[1] = null;
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      objectArray0[2] = null;
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0, (-1));
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0, (-8));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)1177;
      shortArray0[5] = (short)1177;
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray0, (Object) null);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      boolean[] booleanArray1 = ArrayUtils.addFirst((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'w';
      longArray0[1] = (-664L);
      longArray0[2] = (long) (short)1177;
      longArray0[3] = (long) (short)1177;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)1177, 7);
      assertArrayEquals(new long[] {119L, (-664L), 1177L, 1177L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ArrayUtils.hashCode((Object) "i");
  }

  @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-405));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(50);
      Integer integer6 = ArrayUtils.get(integerArray0, 1172, integer5);
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer6);
      assertEquals(5, integerArray1.length);
      assertNotNull(integerArray1);
      
      ArrayUtils.addAll((float[]) null, (float[]) null);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      
      ArrayUtils.hashCode((Object) integerArray0[3]);
      int[] intArray0 = new int[9];
      intArray0[0] = 1172;
      intArray0[1] = 4;
      intArray0[2] = 50;
      intArray0[3] = 50;
      intArray0[4] = 50;
      intArray0[5] = (-405);
      intArray0[6] = 0;
      intArray0[7] = (int) integerArray0[3];
      intArray0[8] = int0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1), int0);
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      Integer integer0 = new Integer(48);
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      ArrayUtils.isEmpty((short[]) null);
      Integer[] integerArray0 = new Integer[6];
      Integer.getInteger("");
      integerArray0[0] = null;
      Integer integer0 = new Integer(0);
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[2] = integer1;
      int int0 = 5;
      Integer integer2 = new Integer(5);
      Integer integer3 = Integer.getInteger("", integer2);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(50);
      integerArray0[5] = integer5;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertEquals(6, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      Character character0 = new Character('O');
      assertEquals('O', (char)character0);
  }

  @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      ArrayUtils.shuffle((Object[]) booleanArray0);
      Character character0 = new Character('D');
      Character character1 = new Character('D');
      assertEquals('D', (char)character1);
  }

  @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      float[] floatArray0 = new float[8];
      ArrayUtils.toObject(floatArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-77));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -77, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-168));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -168, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, (-2136904910));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2136904910, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.subarray(booleanArray0, (-2661), (-2661));
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)16);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2509, (-1073));
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-2522), (-2522), (-2522));
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse((byte[]) null);
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[1] = 's';
      ArrayUtils.swap(charArray0, (-2604), (-1), (-1));
      ArrayUtils.subarray((byte[]) null, (-2604), (-1708));
      ArrayUtils.nullToEmpty((short[]) null);
      ArrayUtils.swap(booleanArray0, 1, (-1), (-2118066063));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1071L);
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1870L);
      long[] longArray0 = new long[2];
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayUtils.shift(longArray0, (-527), 91, (-527));
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-57);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)40, (byte)0}, byteArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-1017L);
      longArray0[2] = (long) (byte) (-57);
      longArray0[3] = 0L;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = 0L;
      longArray0[6] = (-1291L);
      longArray0[7] = (long) (byte) (-57);
      longArray0[8] = (long) (byte) (-57);
      MockRandom mockRandom0 = new MockRandom(0L);
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {(-1017L), (-57L), 0L, 0L, 0L, (-1291L), (-57L), (-57L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (byte)0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      Integer integer0 = new Integer((-2144505167));
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 423.326F);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3.0F;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      ArrayUtils.toPrimitive((Object) null);
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 71.0F;
      floatArray0[2] = 0.0F;
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(12);
      ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      MockRandom mockRandom0 = new MockRandom(12);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 3;
      longArray0[1] = (-811L);
      longArray0[2] = (long) 3;
      longArray0[3] = (-811L);
      MockRandom mockRandom1 = new MockRandom();
      ArrayUtils.shuffle(longArray0, (Random) mockRandom1);
      assertArrayEquals(new long[] {(-811L), 3L, (-811L), 3L}, longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 71.0F;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = (double) (-811L);
      doubleArray0[3] = (double) (-811L);
      ArrayUtils.shift(doubleArray0, 3);
      assertArrayEquals(new double[] {12.0, (-811.0), (-811.0), 71.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      ArrayUtils.swap(charArray0, (-1510), (-1963), 1987);
      assertArrayEquals(new char[] {'='}, charArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)97;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (-1555));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)28;
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (int) (byte)0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(12);
      integerArray0[1] = integer1;
      ArrayUtils.addAll(integerArray0, integerArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      MockRandom mockRandom0 = new MockRandom(0L);
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      Double[] doubleArray0 = new Double[9];
      try { 
        Double.valueOf("3_am9ja:Sf;=J4q>D8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      ArrayUtils.lastIndexOf((byte[]) null, (byte)18, (int) (byte)18);
      Integer[] integerArray0 = new Integer[2];
      ArrayUtils.addAll(integerArray0, integerArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.7;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-17));
      assertEquals("{}", bitSet0.toString());
      
      Integer integer0 = new Integer((byte) (-17));
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.get(objectArray0, 1207);
      objectArray0[0] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, (-1190));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      Object object1 = ArrayUtils.get(objectArray0, (-2513), object0);
      objectArray0[0] = object1;
      Object object2 = ArrayUtils.get(objectArray0, Integer.MAX_VALUE, object1);
      objectArray0[1] = object2;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 2158);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      ArrayUtils.removeElement(booleanArray1, false);
      ArrayUtils.lastIndexOf((short[]) null, (short)0, 0);
      double[] doubleArray0 = new double[0];
      ArrayUtils.clone(doubleArray0);
      short[] shortArray0 = ArrayUtils.insert(2147483630, (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-1610), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(6081.26);
      doubleArray0[0] = double0;
      Double double1 = new Double(6081.26);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      doubleArray0[2] = double2;
      Double double3 = new Double(1899.9651);
      doubleArray0[3] = double3;
      Double double4 = new Double(6081.26);
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[4]);
      doubleArray0[5] = double5;
      Double double6 = new Double(18.535415385);
      doubleArray0[6] = double6;
      ArrayUtils.toPrimitive(doubleArray0, 18.535415385);
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      MockRandom mockRandom0 = new MockRandom((-1L));
      ArrayUtils.reverse(booleanArray0, (-1721), (-2101));
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)6;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-354), 836);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-77), (byte)60, (byte)60, (byte)108, (byte)108, (byte)6}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      longArray0[4] = 1609L;
      ArrayUtils.indexOf(longArray0, (-1L), 36);
      Double double0 = new Double(108.0);
      Double double1 = new Double(0L);
      Double double2 = new Double(81.0);
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 81.0);
      assertNotNull(doubleArray1);
      
      long[] longArray1 = new long[5];
      longArray1[0] = 1609L;
      longArray1[1] = (long) (-1);
      longArray1[2] = 0L;
      longArray1[3] = (long) 36;
      longArray1[4] = 1609L;
      long[] longArray2 = ArrayUtils.addAll(longArray1, (long[]) null);
      assertNotNull(longArray2);
      assertEquals(5, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[9];
      longArray1[4] = 0L;
      ArrayUtils.addAll(longArray0, longArray1);
      byte[] byteArray0 = new byte[8];
      ArrayUtils.isSorted(byteArray0);
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 100.0);
      assertArrayEquals(new double[] {100.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1721);
      intArray0[1] = 138;
      ArrayUtils.subarray((byte[]) null, (-1721), (-1721));
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, (-1721));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1721, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      ArrayUtils.isEmpty((int[]) null);
      long[] longArray0 = new long[1];
      longArray0[0] = 867L;
      long[] longArray1 = new long[6];
      longArray1[0] = 867L;
      longArray1[1] = 867L;
      longArray1[2] = 867L;
      longArray1[3] = 867L;
      longArray1[4] = 0L;
      longArray1[5] = 867L;
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertArrayEquals(new long[] {867L, 867L, 867L, 867L, 867L, 0L, 867L}, longArray2);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4973.85);
      doubleArray0[1] = (double) 867L;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 867L);
      assertArrayEquals(new double[] {(-4973.85), 867.0, 867.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      
      ArrayUtils.insert(2, shortArray0, shortArray1);
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      ArrayUtils.subarray((byte[]) null, 102, 1);
      Long[] longArray3 = new Long[0];
      Long[] longArray4 = ArrayUtils.nullToEmpty(longArray3);
      assertNotSame(longArray4, longArray3);
  }

  @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      ArrayUtils.toPrimitive((Float[]) null, 1.0F);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '#';
      floatArray0[1] = (float) '#';
      floatArray0[3] = (float) '#';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      float[] floatArray0 = new float[8];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(8, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)50;
      shortArray0[1] = (short)12;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)1076);
      assertArrayEquals(new short[] {(short)50, (short)12}, shortArray1);
      
      long[] longArray0 = new long[0];
      ArrayUtils.removeElements(longArray0, longArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1203.26F);
      floatArray0[1] = (float) (short)50;
      floatArray0[2] = (float) (short)12;
      floatArray0[3] = (float) (short)50;
      floatArray0[4] = (float) (short)50;
      floatArray0[5] = (float) (short)50;
      floatArray0[6] = (float) (short)1076;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      ArrayUtils.shift(booleanArray0, 708, 708, 708);
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      char[] charArray0 = new char[18];
      charArray0[0] = 'L';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'L');
      assertEquals(17, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-2081L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      longArray0[4] = 1609L;
      ArrayUtils.indexOf(longArray0, (-1L), 36);
      float[] floatArray0 = new float[3];
      ArrayUtils.isNotEmpty(floatArray0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = 'V';
      charArray0[2] = 'c';
      charArray0[3] = 'r';
      charArray0[4] = 'V';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 1647);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1647, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      int[] intArray0 = new int[3];
      intArray0[0] = (-2147405512);
      intArray0[1] = (-2147405512);
      intArray0[2] = (int) '\u008B';
      ArrayUtils.swap(intArray0, (-2147405512), 78, 788);
      assertArrayEquals(new int[] {(-2147405512), (-2147405512), 139}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, (-3070), (-3070), (-3070));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-198);
      ArrayUtils.swap(intArray0, 2832, (-1), 2832);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2832;
      doubleArray0[2] = 2769.22812827821;
      doubleArray0[2] = (double) 12;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (-310));
      assertEquals(1, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-310);
      longArray0[1] = (long) (-198);
      long[] longArray1 = ArrayUtils.subarray(longArray0, Integer.MAX_VALUE, 3386);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-432);
      intArray0[1] = 0;
      intArray0[2] = 12;
      intArray0[3] = (-1);
      ArrayUtils.swap(intArray0, (-198), 12, 59);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 0);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-2295));
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'r';
      charArray0[1] = 'V';
      charArray0[2] = 'c';
      charArray0[3] = '>';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertArrayEquals(new char[] {'V', 'c', '>'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      Integer integer0 = new Integer(2214);
      ArrayUtils.swap((float[]) null, 773, 773, 1424);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-18);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-18);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-90);
      shortArray0[1] = (short) (byte) (-18);
      shortArray0[2] = (short) (byte) (-90);
      shortArray0[3] = (short) (byte) (-18);
      shortArray0[4] = (short) (byte) (-18);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray1.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short) (-90);
      objectArray0[1] = (Object) (short) (-18);
      objectArray0[2] = (Object) (short) (-18);
      objectArray0[3] = (Object) (byte) (-90);
      objectArray0[4] = (Object) (short) (-90);
      objectArray0[5] = (Object) (short) (-90);
      objectArray0[6] = (Object) (short) (-90);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2]);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) int0;
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1750, int0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.shift((short[]) null, 1750);
      ArrayUtils.shift((short[]) null, (-1478), 100, 4);
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer0, 4);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-933);
      shortArray0[1] = (short)83;
      shortArray0[2] = (short)16;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)251;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-933);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (short)83;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, (int) (short)0, (-2102), (int) (short)0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      ArrayUtils.swap(booleanArray0, (-412), (-412), (-412));
      int[] intArray0 = new int[0];
      ArrayUtils.toObject(intArray0);
      boolean boolean0 = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      ArrayUtils.removeElement(booleanArray1, true);
      ArrayUtils.lastIndexOf((short[]) null, (short)0, (int) (short)0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      ArrayUtils.lastIndexOf(doubleArray0, (-4072.80967219492), (-322), (double) (-322));
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) (-1.0);
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (-1.0);
      objectArray0[4] = (Object) (-1.0);
      Object object1 = new Object();
      ArrayUtils.lastIndexOf(objectArray0, object1, (-1));
      ArrayUtils.shift(doubleArray0, (int) (short)0);
      try { 
        Short.valueOf("s*F6X21DhQ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"s*F6X21DhQ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertEquals("{1}", bitSet0.toString());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 10;
      floatArray0[2] = (float) 0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 0);
      assertArrayEquals(new float[] {0.0F, 10.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2162);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1136;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2168), (int) (short) (-2162));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 219.993F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(51);
      Integer integer1 = new Integer((-1378));
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray0, (Object) integer1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)0, 30);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.lastIndexOf(doubleArray0, 2265.72115, 99, 2265.72115);
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      MockRandom mockRandom0 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      ArrayUtils.removeElement(booleanArray0, true);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ArrayUtils.shuffle(objectArray0);
      Integer integer0 = new Integer(514);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, 127, integerArray0[3]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      long[] longArray0 = new long[1];
      Integer integer0 = new Integer(221);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[0] = (Object) integer0;
      objectArray0[0] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(221);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1114);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-4072.80967219492);
      ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0, (-4944.0));
      Integer integer3 = new Integer((-1114));
      ArrayUtils.lastIndexOf(objectArray0, (Object) integer3, (-3844));
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      ArrayUtils.removeElement(booleanArray1, false);
      short short0 = (short)0;
      ArrayUtils.lastIndexOf((short[]) null, (short)0, 0);
      double[] doubleArray0 = new double[0];
      ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-1), (-4072.80967219492));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) false;
      ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], (int) (short)0);
      ArrayUtils.shift(doubleArray0, 0);
      Short[] shortArray0 = new Short[1];
      try { 
        Short.valueOf("Arguments cannot both be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Arguments cannot both be null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)1;
      ArrayUtils.removeElements(byteArray0, byteArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (byte)30;
      doubleArray0[2] = (double) (byte)30;
      doubleArray0[3] = (double) (byte)30;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)1;
      doubleArray0[6] = (-2606.1143698);
      doubleArray0[7] = (double) (byte)1;
      doubleArray0[8] = (double) (byte)1;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1063.97799263121);
      ArrayUtils.shift(doubleArray1, (-581), 5, (int) (byte)1);
      assertArrayEquals(new double[] {0.0, (-1.0), 30.0, 30.0, 30.0, 1.0, (-2606.1143698), 1.0, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-586.24585F);
      floatArray0[1] = 1388.0F;
      floatArray0[2] = 1121.3181F;
      floatArray0[3] = (-2837.849F);
      ArrayUtils.remove(floatArray0, 0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-586.24585F);
      objectArray0[1] = (Object) (-2837.849F);
      objectArray0[2] = (Object) (-586.24585F);
      ArrayUtils.shuffle(objectArray0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (-1235L);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-2476));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2476, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayUtils.shift(doubleArray0, 102);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.indexOf(booleanArray0, false, (-1921));
      ArrayUtils.addAll((int[]) null, (int[]) null);
      ArrayUtils.shift((double[]) null, (-1921));
  }

  @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1596;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1596);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(10, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 1226);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1226, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 832);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.insert(0, booleanArray0, booleanArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1352.7297;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)14;
      shortArray0[3] = (short) (-945);
      shortArray0[4] = (short)716;
      shortArray0[5] = (short)13;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)5;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)6;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte)62;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)62;
      byteArray1[5] = (byte)4;
      byteArray1[6] = (byte)4;
      byteArray1[7] = (byte)120;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)2, (byte)41, (byte)34, (byte)6}, byteArray2);
      assertEquals(5, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1933L);
      longArray0[1] = (-1L);
      longArray0[2] = (-1942L);
      longArray0[3] = 1L;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.isNotEmpty(booleanArray0);
      ArrayUtils.isNotEmpty(longArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 100, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = 127;
      ArrayUtils.indexesOf(intArray0, 0, 0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = '\\';
      charArray0[2] = 'O';
      charArray0[3] = 'N';
      long[] longArray0 = new long[0];
      ArrayUtils.isNotEmpty(longArray0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-2116), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2116, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = 'H';
      charArray0[2] = 'p';
      char[] charArray1 = new char[5];
      charArray1[0] = 'H';
      charArray1[1] = 'H';
      charArray1[2] = 'p';
      charArray1[3] = 'p';
      charArray1[4] = 'p';
      ArrayUtils.isSameLength(charArray0, charArray1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'H';
      doubleArray0[1] = (double) 2442;
      doubleArray0[2] = (double) 'p';
      doubleArray0[3] = (double) 'H';
      doubleArray0[4] = (double) 2442;
      doubleArray0[5] = (double) 'p';
      ArrayUtils.reverse(doubleArray0, (-2766), 4270);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {112.0, 2442.0, 72.0, 112.0, 2442.0, 72.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, (byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.insert(1668, (boolean[]) null, (boolean[]) null);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), (-1));
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 946.982F;
      floatArray0[1] = (-5284.5F);
      floatArray0[2] = 277.08023F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertArrayEquals(new float[] {(-5284.5F), 277.08023F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-44);
      Byte byte1 = new Byte((byte) (-44));
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-28));
      Byte byte3 = new Byte(byte0);
      Byte byte4 = new Byte((byte) (-28));
      Byte byte5 = new Byte((byte) (-77));
      Byte byte6 = new Byte((byte) (-18));
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-77));
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-77), (byte) (-77), (byte) (-77), (byte) (-77)}, byteArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-5284.5F);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-5284.5F);
      doubleArray0[6] = (double) 277.08023F;
      doubleArray0[7] = (double) (-5284.5F);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-18), (-284));
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = 'X';
      charArray0[2] = '@';
      charArray0[3] = 'f';
      ArrayUtils.isSameLength(charArray0, charArray0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'X';
      longArray0[1] = (long) 'X';
      longArray0[2] = (long) 'f';
      longArray0[3] = (long) 'X';
      longArray0[4] = (long) 'f';
      longArray0[5] = (long) '@';
      longArray0[6] = (long) 'X';
      longArray0[7] = (long) '(';
      longArray0[8] = (long) '@';
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '@';
      doubleArray0[1] = (double) '(';
      doubleArray0[2] = (double) 'X';
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) 64L;
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) 88L;
      doubleArray0[8] = (double) (byte) (-99);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 64L);
      assertArrayEquals(new double[] {40.0, 88.0, 0.0, 0.0, 0.0, 88.0, (-99.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1933L);
      longArray0[1] = (-1L);
      longArray0[2] = (-1942L);
      longArray0[3] = 1L;
      longArray0[4] = 478L;
      longArray0[5] = (-1342L);
      longArray0[6] = (-1L);
      longArray0[7] = 0L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 3386, 3386);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-93);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)76;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1721, 3386);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)364;
      shortArray0[5] = (short)364;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-513);
      shortArray0[2] = (short)364;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1136;
      shortArray0[5] = (short) (-2162);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 403;
      intArray0[1] = 0;
      intArray0[2] = 1935;
      intArray0[3] = 2;
      intArray0[4] = (-1294);
      intArray0[5] = (-3625);
      ArrayUtils.shuffle(intArray0);
      ArrayUtils.shift((boolean[]) null, 0, 403, 97);
  }

  @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, (-833));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      ArrayUtils.shift(booleanArray0, (-2146491539), (-10), 18688);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 36, (-72), Integer.MAX_VALUE);
      int[] intArray0 = new int[3];
      intArray0[0] = (-72);
      intArray0[1] = 36;
      intArray0[2] = (-72);
      ArrayUtils.toObject(intArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-72);
      floatArray0[1] = (float) (-72);
      ArrayUtils.indexesOf(intArray0, (-3110), (-3110));
      ArrayUtils.shift(intArray0, (-428));
      Byte byte0 = new Byte((byte) (-23));
      Integer integer0 = new Integer((-72));
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      ArrayUtils.indexesOf(longArray0, (-103L));
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(1L);
      ArrayUtils.isEmpty(longArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'b';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) 'b';
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = (int) '3';
      intArray0[6] = (int) 'P';
      intArray0[7] = (int) 'p';
      ArrayUtils.shift(intArray0, (-2102), 0, 2);
      assertArrayEquals(new int[] {98, 55, 98, 0, 2, 51, 80, 112}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)75);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1863.977888197674));
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      doubleArray0[2] = double2;
      ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[1]);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.toObject(booleanArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 239;
      Byte byte0 = new Byte((byte)120);
      ArrayUtils.toPrimitive((Byte[]) null, (byte)82);
      ArrayUtils.indexOf(intArray0, 1331, (-804));
      ArrayUtils.shift((byte[]) null, (-357), (-102), (-552));
      org.evosuite.runtime.Random.setNextRandom((-1930));
  }

  @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-25));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-25)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 867L;
      long[] longArray1 = new long[9];
      longArray1[0] = 867L;
      longArray1[1] = 867L;
      longArray1[2] = 867L;
      longArray1[3] = 867L;
      longArray1[4] = 0L;
      ArrayUtils.indexesOf((int[]) null, (-3110), (-1692));
      ArrayUtils.shift((int[]) null, (-3110));
      Integer integer0 = new Integer((byte) (-23));
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, (-786));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)52;
      ArrayUtils.subarray((char[]) null, 297, 7);
      Byte byte0 = new Byte((byte)108);
      Integer integer0 = new Integer(2179);
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)11);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.shift(intArray0, 0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 146, 297);
      assertEquals(0, charArray1.length);
      
      Byte byte0 = new Byte((byte) (-23));
      Integer integer0 = new Integer(7);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-23);
      shortArray0[1] = (short) (byte) (-23);
      shortArray0[2] = (short) (byte) (-23);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-23));
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)32;
      int[] intArray0 = new int[8];
      intArray0[0] = 117;
      intArray0[1] = (int) (byte)53;
      intArray0[2] = (int) (byte)53;
      intArray0[3] = (int) (byte)53;
      intArray0[4] = (int) (byte)32;
      intArray0[5] = (int) (byte)32;
      intArray0[6] = (int) (byte)32;
      intArray0[7] = (int) (byte)76;
      ArrayUtils.toObject(intArray0);
      ArrayUtils.indexesOf((int[]) null, Integer.MAX_VALUE, 1613);
      ArrayUtils.shift(intArray0, (-1734));
      Integer integer0 = new Integer(95);
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = 127;
      ArrayUtils.indexesOf(intArray0, 0, 0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = '\\';
      charArray0[2] = 'O';
      charArray0[3] = 'N';
      charArray0[4] = 'Q';
      charArray0[5] = ' ';
      charArray0[6] = 'a';
      charArray0[7] = '}';
      charArray0[8] = 'Q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 10, 10);
      assertEquals(0, charArray1.length);
      
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {10, 127}, intArray0);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)70);
      byteArray0[3] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)70}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-21);
      intArray0[1] = 127;
      ArrayUtils.indexesOf(intArray0, 6, 6);
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = 'N';
      charArray0[4] = 'Q';
      charArray0[5] = ' ';
      charArray0[6] = 'a';
      charArray0[7] = '}';
      charArray0[8] = 'Q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-21), (-21));
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      
      ArrayUtils.shift(intArray0, 6);
      assertArrayEquals(new int[] {(-21), 127}, intArray0);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)59);
      Byte byte1 = new Byte((byte)59);
      Byte byte2 = new Byte((byte) (-82));
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-82));
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-82), (byte) (-82), (byte) (-82)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      ArrayUtils.removeElements((double[]) null, (double[]) null);
      ArrayUtils.reverse((char[]) null, 1782, 1782);
      ArrayUtils.addFirst((double[]) null, (-1426.2423396362467));
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 632;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 56;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(2, intArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 56;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 56;
      doubleArray0[6] = (double) 56;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 92.9257838);
      assertArrayEquals(new double[] {92.9257838, 0.0, 0.0, 56.0, 0.0, 0.0, 56.0, 56.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      boolean[] booleanArray0 = new boolean[13];
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertEquals(1, int0);
      
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray1, true);
      assertEquals(27, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[2];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3332, booleanArray0, booleanArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3332, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      int int0 = 1;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.insert(1, booleanArray0, booleanArray0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      try { 
        Integer.valueOf("[%,n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[%,n\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.contains(longArray0, 3507L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, 3507L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      long[] longArray1 = bitSet0.toLongArray();
      assertArrayEquals(new long[] {1L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      char[] charArray0 = new char[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '[');
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayUtils.indexesOf(longArray0, (long) 71);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L);
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-103L);
      longArray0[1] = 0L;
      longArray0[2] = 1856L;
      longArray0[3] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-103L));
      assertEquals(1, bitSet0.length());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 'b';
      charArray0[2] = '-';
      charArray0[3] = '?';
      charArray0[4] = '/';
      int int0 = ArrayUtils.indexOf(charArray0, '@');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 125.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1186.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1354.6F, 104);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      ArrayUtils.removeElements((int[]) null, (int[]) null);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 0);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.lastIndexOf(charArray0, '-', 0);
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf(" in an array of ");
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(" in an array of ");
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray1, 0, false);
      assertEquals(4, booleanArray2.length);
      
      ArrayUtils.clone(booleanArray1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)78;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)78);
      assertArrayEquals(new byte[] {(byte)69}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 219.993F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-1));
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray0, (Object) integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 2450L;
      longArray0[3] = 0L;
      longArray0[4] = 1609L;
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 41);
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 2308.0667F;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) (-2081L);
      floatArray0[5] = (-1350.7146F);
      floatArray0[6] = (float) (-1L);
      ArrayUtils.reverse(floatArray0);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 1609L, 1);
      assertArrayEquals(new float[] {(-1.0F), (-1350.7146F), (-2081.0F), 0.0F, 0.0F, 2308.0667F, Float.NaN}, floatArray0, 0.01F);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ArrayUtils.shift(byteArray0, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 76);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      int int0 = 71;
      int[] intArray0 = new int[3];
      intArray0[0] = 71;
      intArray0[1] = 71;
      intArray0[2] = 71;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      Integer integer0 = new Integer(50);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 71;
      integerArray0[1] = (Integer) 71;
      integerArray0[2] = (Integer) 71;
      ArrayUtils.get(integerArray0, 71, (Integer) 71);
      Integer integer1 = new Integer(2596);
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertNotNull(object0);
      
      ArrayUtils.removeElement((Integer[]) null, object0);
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = new boolean[2];
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.hashCode((Object) int0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      ArrayUtils.lastIndexOf((byte[]) null, (byte)0, (int) (byte)0);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      int int0 = 12;
      Integer integer1 = new Integer(12);
      integerArray0[1] = integer1;
      ArrayUtils.addAll(integerArray0, integerArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = '&';
      charArray0[5] = '&';
      ArrayUtils.nullToEmpty(charArray0);
      ArrayUtils.indexesOf((float[]) null, 186.34586F, int0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) (byte)0);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      ArrayUtils.indexesOf(doubleArray0, (-548.3297367346008), (-2030), (double) (-2030));
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-900);
      ArrayUtils.swap(shortArray0, (-2432), (-1), (int) (short) (-900));
      assertArrayEquals(new short[] {(short) (-900)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.insert(1, booleanArray0, booleanArray0);
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(1);
      integerArray0[0] = integer0;
      ArrayUtils.swap((short[]) null, (int) (short)1, (int) (short)1885);
  }

  @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ArrayUtils.shift(shortArray0, 878);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      ArrayUtils.swap(shortArray0, (int) (short)1, 1924);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-6007);
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)4199;
      shortArray0[5] = (short)36;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)1885;
      ArrayUtils.swap(shortArray0, (int) (short) (-1), (-3606));
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short) (-6007), (short)4, (short)4199, (short)36, (short)0, (short)1, (short)1885}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = new boolean[8];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      booleanArray1[7] = true;
      ArrayUtils.removeElements(booleanArray0, booleanArray1);
      ArrayUtils.nullToEmpty((byte[]) null);
      boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 158, 158);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 12, 12);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(1, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)98);
      assertArrayEquals(new byte[] {(byte)98, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'Q';
      int int0 = ArrayUtils.indexOf(charArray0, 'o');
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2342);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1383;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)0, 0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      ArrayUtils.insert((-701), (byte[]) null, (byte[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-701);
      doubleArray0[1] = (double) (-701);
      doubleArray0[2] = (double) (-701);
      doubleArray0[3] = (double) (-701);
      doubleArray0[4] = (double) (-701);
      doubleArray0[5] = (double) (-701);
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (double) (-701);
      doubleArray0[8] = (double) (-701);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1253.37584592823), 808, 2808.16925563425);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)39;
      short short0 = (short)1311;
      ArrayUtils.removeAllOccurrences((short[]) null, (short) (-1275));
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)1311, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1311, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)36);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)2522);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      short[] shortArray0 = new short[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1, (int) (short)0);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-2118));
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3131);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-3131));
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = 57;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 57);
      assertEquals(13, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)54);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)1);
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 5);
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 40;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1), (-1));
      assertEquals(3, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      int int0 = 4;
      Integer integer0 = new Integer(4);
      integerArray0[0] = integer0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)364;
      doubleArray0[1] = (double) int0;
      integerArray0[0] = (Integer) int0;
      doubleArray0[3] = (double) (short)364;
      doubleArray0[4] = (double) 4;
      doubleArray0[0] = (double) (short)0;
      doubleArray0[6] = (double) (short)364;
      doubleArray0[7] = (double) 4;
      double[] doubleArray1 = new double[8];
      ArrayUtils.removeAllOccurences(doubleArray1, 364.0);
      Short short0 = new Short((short)3568);
      Short short1 = new Short((short)364);
      Short short2 = new Short((short) (-1699));
      Short short3 = new Short((short) (-24144));
      Short short4 = new Short((short)231);
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2090.3);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)54);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, (float) 841);
      assertArrayEquals(new float[] {841.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-632));
      assertArrayEquals(new short[] {(short) (-632)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 667.017769;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 2680.268;
      doubleArray0[3] = (-1145.3465339);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 2680.268);
      ArrayUtils.indexesOf(doubleArray1, 860.0, 3379, 1.5);
      assertArrayEquals(new double[] {667.017769, (-1.0), (-1145.3465339)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertEquals("{1}", bitSet0.toString());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 10;
      floatArray0[2] = (float) 0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 0);
      assertArrayEquals(new float[] {0.0F, 10.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short)1381);
      shortArray0[0] = short0;
      Short short1 = new Short((short)1381);
      shortArray0[1] = short1;
      Short short2 = new Short((short)4325);
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[2]);
      shortArray0[4] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1381, (short)1381, (short)4325, (short)1381, (short)4325}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      Integer integer0 = new Integer((-4243));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1618;
      ArrayUtils.isSorted(intArray0);
      Integer integer0 = new Integer(1618);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      float[] floatArray0 = new float[9];
      ArrayUtils.shift(floatArray0, 0);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 0, 0);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-2072), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2072, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.removeElement(booleanArray0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      ArrayUtils.shuffle(objectArray0);
      Character.valueOf('9');
      Character character0 = new Character('9');
      Character.valueOf('b');
      Character character1 = new Character('9');
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'b';
      longArray0[1] = 1136L;
      longArray0[2] = (long) 'b';
      longArray0[3] = (long) 'b';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1136L);
      ArrayUtils.removeElements(longArray0, longArray1);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '9';
      floatArray0[1] = (float) 1136L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 98L, (-1521));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (short) (-2314));
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.isSorted(doubleArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 7, (double) 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((float[]) null, (-80.0F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-64), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -64, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-101);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      ArrayUtils.shuffle(byteArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)2;
      ArrayUtils.indexOf(floatArray0, (float) (byte)0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-101);
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte) (-101);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) (byte)2;
      double double0 = 0.0;
      doubleArray0[7] = 0.0;
      int int0 = 2035;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 2035, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2035, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 83;
      intArray0[1] = 55;
      intArray0[2] = 5;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 83, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      ArrayUtils.indexesOf((boolean[]) null, true);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-3472);
      intArray0[2] = 1317;
      intArray0[3] = 108;
      intArray0[4] = 1651;
      intArray0[5] = 2937;
      intArray0[6] = (-1);
      intArray0[7] = (-185);
      intArray0[8] = (-104);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2937, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-1344.229));
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double((-1.0));
      doubleArray0[2] = double2;
      Double double3 = new Double(1.5);
      doubleArray0[3] = double3;
      Double double4 = new Double((byte)90);
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[5] = double5;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      Short[] shortArray0 = new Short[15];
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1658()  throws Throwable  {
      ArrayUtils.nullToEmpty((Double[]) null);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(3595);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2182);
      integerArray0[1] = integer1;
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1659()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1660()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 1063.97799263121;
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1063.97799263121);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertArrayEquals(new double[] {1063.97799263121}, doubleArray2, 0.01);
      
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test1661()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1662()  throws Throwable  {
      Short short0 = new Short((short) (-1592));
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.removeAllOccurrences(booleanArray0, false);
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "Test '%s' was supposed to run no longer than %d ms.");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1663()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1664()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1665()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1666()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.removeElement(booleanArray0, false);
      Object[] objectArray0 = new Object[2];
      ArrayUtils.shuffle(objectArray0);
      Character character0 = new Character('9');
      Integer integer0 = new Integer((-1444));
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(integer0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1667()  throws Throwable  {
      Integer integer0 = new Integer(2214);
      ArrayUtils.isSameType(integer0, integer0);
      Long long0 = new Long(2214);
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1668()  throws Throwable  {
      Integer integer0 = new Integer(2214);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(integer0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }
}
