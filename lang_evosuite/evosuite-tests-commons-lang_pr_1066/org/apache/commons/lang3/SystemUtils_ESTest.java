/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 21:19:16 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.commons.lang3.JavaVersion;
import org.apache.commons.lang3.SystemUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SystemUtils_ESTest extends SystemUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSVersionMatch("OS/400", "OS/400");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSNameMatch("0", "0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = SystemUtils.isJavaVersionMatch("?", "?");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_12;
      boolean boolean0 = SystemUtils.isJavaVersionAtMost(javaVersion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_16;
      boolean boolean0 = SystemUtils.isJavaVersionAtLeast(javaVersion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      File file0 = SystemUtils.getUserHome();
      assertEquals("/home/azureuser", file0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser/LLm4PrTest/lang_experiments");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      File file0 = SystemUtils.getUserDir();
      assertTrue(file0.exists());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/azureuser/LLm4PrTest/lang_experiments");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      File file0 = SystemUtils.getUserDir();
      assertEquals("/home/azureuser/LLm4PrTest/lang_experiments", file0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      File file0 = SystemUtils.getJavaIoTmpDir();
      assertEquals("/tmp", file0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-8-openjdk-amd64/jre");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      File file0 = SystemUtils.getJavaHome();
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-8-openjdk-amd64/jre");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = SystemUtils.getJavaHome();
      assertTrue(file0.canWrite());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = SystemUtils.getEnvironmentVariable("LinuxLinux", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtils.isOSVersionMatch("1.8", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.SystemUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtils.isOSNameMatch("/", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtils.isOSMatch("0", "0", (String) null, "0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtils.isJavaVersionMatch("Java Virtual Machine Specification", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtils.isJavaVersionAtMost((JavaVersion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.JavaVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtils.isJavaVersionAtLeast((JavaVersion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.JavaVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemUtils.getEnvironmentVariable((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.ProcessEnvironment$Variable", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSVersionMatch((String) null, "10");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSNameMatch((String) null, "zvH=iqF!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSMatch("SolarisLinux", "]L6~ce29d", "SolarisLinux", "10.9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSMatch("OpenBSD", "OpenBSD", "OpenBSD", "OpenBSD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSMatch("JRZUac9//$>/%dJ", (String) null, "Mac OS X", "/tmp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSMatch("/", "java.specification.version", "Windows 2003", "OS/2Linux");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = SystemUtils.isOSMatch((String) null, "OpenBSD", "OpenBSD", "15");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = SystemUtils.isJavaVersionMatch((String) null, "10");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = SystemUtils.getHostName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = SystemUtils.getEnvironmentVariable("52.0", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = SystemUtils.getEnvironmentVariable("_", "D;");
      assertNotNull(string0);
      assertEquals("/home/azureuser/LLm4PrTest/lang_experiments/.venv/bin/python3", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SystemUtils systemUtils0 = new SystemUtils();
      assertFalse(SystemUtils.IS_OS_MAC_OSX_TIGER);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = SystemUtils.isJavaAwtHeadless();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      File file0 = SystemUtils.getUserHome();
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      File file0 = SystemUtils.getJavaHome();
      assertEquals("jre", file0.getName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SystemUtils.getUserName();
      assertEquals("azureuser", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_0_9;
      boolean boolean0 = SystemUtils.isJavaVersionAtLeast(javaVersion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_1_2;
      boolean boolean0 = SystemUtils.isJavaVersionAtMost(javaVersion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      File file0 = SystemUtils.getJavaIoTmpDir();
      assertEquals(0L, file0.getUsableSpace());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SystemUtils.getUserName("D;");
      assertEquals("azureuser", string0);
  }
}
