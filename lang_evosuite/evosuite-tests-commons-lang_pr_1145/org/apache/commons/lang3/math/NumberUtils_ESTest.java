/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:02:58 GMT 2025
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isParsable("$j+RvwSD+6U}i)6hu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0yZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("$R");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte) (-63));
      assertEquals((byte) (-63), byte0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-174), (short)1525, (short) (-74));
      assertEquals((short) (-174), short0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = NumberUtils.min(316L, 831L, (-283L));
      assertEquals((-283L), long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)5;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1846L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1846L), long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("$z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // $z is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("+LHw712o]rU1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"LH\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short short0 = NumberUtils.toShort("X/`F2@X0FmAzfI", (short)15);
      assertEquals((short)15, short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short short0 = NumberUtils.toShort("0X0X", (short) (-332));
      assertEquals((short) (-332), short0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short short0 = NumberUtils.toShort("6");
      assertEquals((short)6, short0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(70);
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      BigDecimal bigDecimal1 = NumberUtils.toScaledBigDecimal(bigDecimal0, 70, roundingMode0);
      assertNotSame(bigDecimal0, bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float((-3865.25F));
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(float0);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      BigDecimal bigDecimal1 = NumberUtils.toScaledBigDecimal(bigDecimal0, 4063, roundingMode0);
      assertEquals((short) (-3865), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-2866));
      BigDecimal bigDecimal1 = NumberUtils.toScaledBigDecimal(bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((short) (-2866), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal("6", (-1), roundingMode0);
      assertEquals((byte)10, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal("9");
      assertEquals((short)9, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Float float0 = NumberUtils.FLOAT_MINUS_ONE;
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(float0, 0, roundingMode0);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Float float0 = NumberUtils.FLOAT_ONE;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(float0);
      assertEquals((byte)1, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Double double0 = NumberUtils.DOUBLE_ONE;
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(double0, (int) (byte)69, roundingMode0);
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Double double0 = NumberUtils.DOUBLE_MINUS_ONE;
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(double0, 0, roundingMode0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double double0 = NumberUtils.DOUBLE_MINUS_ONE;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(double0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = NumberUtils.toLong("[", 3565L);
      assertEquals(3565L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = NumberUtils.toLong("4");
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = NumberUtils.toInt("{Lg7>r Bb?##", (int) (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = NumberUtils.toFloat("6");
      assertEquals(6.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal(0, mathContext0);
      double double0 = NumberUtils.toDouble(bigDecimal0, (double) (short)0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Float float0 = NumberUtils.FLOAT_MINUS_ONE;
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(float0, (-218), roundingMode0);
      double double0 = NumberUtils.toDouble(bigDecimal0, (double) 1);
      assertEquals((-1.0E218), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      double double0 = NumberUtils.toDouble(bigDecimal0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      double double0 = NumberUtils.toDouble(bigDecimal0);
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = NumberUtils.toDouble("l.", (double) (byte)4);
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = NumberUtils.toDouble("08");
      assertEquals(8.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("Vg^l<C]-qk{$/~r0S^", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("~", (byte) (-62));
      assertEquals((byte) (-62), byte0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("1");
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)338;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-31709);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-31709), short0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)26;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(26L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3038;
      intArray0[1] = 3224;
      intArray0[2] = 108;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(108, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2882.7F;
      floatArray0[1] = 1707.11F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1337.3351F;
      floatArray0[4] = 1093.175F;
      floatArray0[5] = 1982.3F;
      floatArray0[6] = 835.495F;
      floatArray0[7] = 1759.276F;
      floatArray0[8] = 1694.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 381.588977435;
      doubleArray0[1] = 381.588977435;
      doubleArray0[2] = 3494.6940114257;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 381.588977435;
      doubleArray0[5] = 381.588977435;
      doubleArray0[6] = 381.588977435;
      doubleArray0[7] = 381.588977435;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1333.0);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1333.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)124, byte0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-70);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-70), byte0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short short0 = NumberUtils.min((short)57, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long long0 = NumberUtils.min(183L, (long) (short)0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = NumberUtils.min(1274L, 1274L, 1274L);
      assertEquals(1274L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float float0 = NumberUtils.min(1571.4778F, 0.0F, 1571.4778F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float float0 = NumberUtils.min((float) (short)88, 1571.4778F, 1571.4778F);
      assertEquals(88.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = NumberUtils.min(0.0, (double) (short)0, 3.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = NumberUtils.min((-20.59534628433), 0.0, 372.492841);
      assertEquals((-20.59534628433), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)32, (byte)2, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)30, (byte)4, (byte)4);
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-250);
      shortArray0[1] = (short) (-250);
      shortArray0[2] = (short) (-250);
      shortArray0[3] = (short) (-250);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-250), short0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 831L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(831L, long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1384L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-1384L), long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-10);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1384L);
      floatArray0[1] = (float) (-1384L);
      floatArray0[2] = (float) (-1384L);
      floatArray0[3] = (float) (-1384L);
      floatArray0[4] = (float) (-1384L);
      floatArray0[5] = (float) (-1384L);
      floatArray0[6] = (float) (-1384L);
      floatArray0[7] = (float) (-1384L);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-1384.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2147483648L);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-2.147483648E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)100, byte0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-31);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-31), byte0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      short short0 = NumberUtils.max((short)2, (short) (-17134), (short) (-339));
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-2018), (short) (-2018), (short) (-2018));
      assertEquals((short) (-2018), short0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = NumberUtils.max((long) (short)0, (long) (short)0, (long) (short)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = NumberUtils.max((long) (short) (-2018), (long) (short) (-2018), (long) (short) (-2018));
      assertEquals((-2018L), long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = NumberUtils.max(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = NumberUtils.max((-1913), (-2), (-1913));
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float float0 = NumberUtils.max((-1441.0F), 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float float0 = NumberUtils.max((float) 1L, 1.0F, 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = NumberUtils.max(0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = NumberUtils.max((-1623.4314), (double) (-2311L), (double) (-2311L));
      assertEquals((-1623.4314), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("00");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Long long0 = NumberUtils.createLong("00");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0x1");
      assertEquals(1L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("1");
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("61");
      assertEquals(61.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("#08F");
      assertEquals((short)143, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("10");
      assertEquals((short)10, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = NumberUtils.compare((byte)84, (byte)27);
      assertEquals(57, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = NumberUtils.compare((byte)0, (byte)84);
      assertEquals((-84), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal("0Xb7qLtX-Z5(MYwL1qnoj", 0, roundingMode0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float(Float.NaN);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal(float0, 2131266020, roundingMode0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = NumberUtils.FLOAT_ONE;
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal(float0, (-2147152755), roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal(float0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      RoundingMode roundingMode0 = RoundingMode.UP;
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal(double0, 57, roundingMode0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal(double0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("e+_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("0;0X0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("0xhdoA]gs");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("\".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("#1");
      assertEquals((byte)1, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0XhdoA]gs");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"hdoA]gs\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("=H;u+5z`rR.uDa");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=H;u+5z`rR.uDa\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("]D,'fVah*Wh&>V/^");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]D,'fVah*Wh&>V/^\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("Mm*RBByn");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("0xzp=.XLG]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"zp=.XLG]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("0xzUf'neqmHD>XgvWB");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"zU\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("0x3-%uU3DpMxobpe[8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3-%uU3DpMxobpe[8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((String) null, 16, roundingMode0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal("\r", 4, roundingMode0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((Double) null, 0, roundingMode0);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Double double0 = NumberUtils.DOUBLE_ONE;
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal(double0, (-707), roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((Float) null, 2138, roundingMode0);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal(bigDecimal0, (-30), roundingMode0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Rounding necessary
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((BigDecimal) null, 0, roundingMode0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short short0 = NumberUtils.toShort("00", (short)88);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("org.apache.commons.lang3.Validate", (byte)111);
      assertEquals((byte)111, byte0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)111);
      assertEquals((byte)111, byte0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      double double0 = NumberUtils.toDouble(bigDecimal0, (double) (byte)0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = NumberUtils.toDouble("[", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (float) (-1888L));
      assertEquals((-1888.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float float0 = NumberUtils.toFloat("e+_", 1.0082464F);
      assertEquals(1.0082464F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = NumberUtils.toLong("'1", (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (-3746));
      assertEquals((-3746), int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = NumberUtils.toInt("Hj\"8~Ri", (int) (short)2598);
      assertEquals(2598, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = NumberUtils.compare((short)0, (short)3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = NumberUtils.compare((short)3, (short)3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = NumberUtils.compare((short)4300, (short)13);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = NumberUtils.compare(2394L, (-21L));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = NumberUtils.compare(2114L, 2114L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = NumberUtils.compare(1L, 1210L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = NumberUtils.compare((-521), 1942);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = NumberUtils.compare(1, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = NumberUtils.compare(1, (-731));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = NumberUtils.isParsable("0.0.r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = NumberUtils.isParsable("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = NumberUtils.isParsable("-Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = NumberUtils.isParsable("##.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = NumberUtils.isParsable("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = NumberUtils.isParsable("61");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("8E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("3-%uU3DpMxobpe[8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable(".+ZY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("8EJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("03-%uU3DpMxobpe[8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("01");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0X00uC4_T R");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("0Xa1D/;DOp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("0X0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("00uC4_T R");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("0x0x0...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = NumberUtils.isCreatable("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-83), (byte) (-83), (byte) (-30));
      assertEquals((byte) (-30), byte0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-61), (byte)68, (byte)57);
      assertEquals((byte)68, byte0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)113, (byte)24, (byte)24);
      assertEquals((byte)113, byte0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1332), (short) (-494), (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = NumberUtils.max((-191), (-4053), 542);
      assertEquals(542, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      long long0 = NumberUtils.max((long) 0, 1L, 2147483647L);
      assertEquals(2147483647L, long0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      long long0 = NumberUtils.max(2147483647L, (-2147483648L), (-1888L));
      assertEquals(2147483647L, long0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)1, (byte) (-46), (byte)30);
      assertEquals((byte) (-46), byte0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-51), (byte)64, (byte)100);
      assertEquals((byte) (-51), byte0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      short short0 = NumberUtils.min((short)31591, (short)31591, (short) (-3285));
      assertEquals((short) (-3285), short0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      short short0 = NumberUtils.min((short)1796, (short)108, (short)108);
      assertEquals((short)108, short0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = NumberUtils.min(87, Integer.MAX_VALUE, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = NumberUtils.min(87, (-2147483646), 0);
      assertEquals((-2147483646), int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = NumberUtils.min(16, 16, 16);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      long long0 = NumberUtils.min(0L, (-1196L), 0L);
      assertEquals((-1196L), long0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 37L;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(37.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-3083.0);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-50);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-21832);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 120;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1144L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-211.989F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-211.989F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      float[] floatArray0 = new float[19];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 474.6540243;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)57;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[4] = (-234);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-234), int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int[] intArray0 = new int[12];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2309;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("00");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0x0tn% oFnF-(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("+oL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"oL\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // An empty string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("nB_2-]Q^sb;eK92");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0d");
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("2d");
      assertEquals(2.0, number0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("08F");
      assertEquals(8.0F, number0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("e`l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e`l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("y;G_L8*G.*OVP{]L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // y;G_L8*G.*OVP{]L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // d is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("/vU'F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // /vU'F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("0eYc&'8`#-E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0eYc&'8`#-E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber(".QP#d BqRd:-?+dOf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .QP#d BqRd:-?+dOf is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("org.apache.commons.lang3.Validate");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.Validate is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("...");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("0X#^97mk<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"#^97mk<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("0xhdoA]gs");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"hdoA]gs\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("#[fc8BG^cE?CNgwUJ9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[fc\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0x0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("+o Y[&*Uy w)ia2}(e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // +o Y[&*Uy w)ia2}(e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((String) null);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((Double) null);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((BigDecimal) null);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("Z|AJ");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double double0 = NumberUtils.toDouble((BigDecimal) null, (double) (short)288);
      assertEquals(288.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double double0 = NumberUtils.toDouble("$RYs>vs:>')q");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1839L));
      double double0 = NumberUtils.toDouble(bigDecimal0);
      assertEquals((-1839.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      int int0 = NumberUtils.toInt("9");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("5");
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(double0);
      assertEquals((short)5, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal((Float) null);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      double double0 = NumberUtils.max(11.10963549102, (-1.0), (-1.0));
      assertEquals(11.10963549102, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.toFloat((String) null, (float) numberUtils0.LONG_ZERO);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      double double0 = NumberUtils.min(330.6858570315404, 45.0, 32.0);
      assertEquals(32.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber(";p+ba#y]'5S,:hll");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ;p+ba#y]'5S,:hll is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      float float0 = NumberUtils.min((-188.0F), (-188.0F), 2343.61F);
      assertEquals((-188.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.toScaledBigDecimal("Array and element cannot both be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      float float0 = NumberUtils.max((-2637.723F), (-2637.723F), (-2637.723F));
      assertEquals((-2637.723F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      int int0 = NumberUtils.compare((byte)24, (byte)24);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Float float0 = NumberUtils.FLOAT_ONE;
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      BigDecimal bigDecimal0 = NumberUtils.toScaledBigDecimal(float0, 8192, roundingMode0);
      BigDecimal bigDecimal1 = NumberUtils.toScaledBigDecimal(bigDecimal0);
      assertEquals((short)1, bigDecimal1.shortValue());
  }
}
