/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 09:26:28 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.RandomUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class RandomUtils_ESTest extends RandomUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = RandomUtils.nextLong();
      byte[] byteArray0 = RandomUtils.nextBytes(1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      long long1 = RandomUtils.nextLong(0L, (long) 1);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = RandomUtils.nextLong(0L, 1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      long long0 = RandomUtils.nextLong(2733L, (long) Integer.MAX_VALUE);
      assertEquals(1073744556L, long0);
      
      int int0 = RandomUtils.nextInt(2221, Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      long long0 = RandomUtils.nextLong();
      assertEquals(1073741823L, long0);
      
      int int0 = RandomUtils.nextInt();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float float0 = RandomUtils.nextFloat(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      byte[] byteArray0 = RandomUtils.nextBytes(2339);
      assertEquals(2339, byteArray0.length);
      
      float float0 = RandomUtils.nextFloat((float) 2339, 2.14748365E9F);
      assertEquals((-1.71798285E9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      float float0 = RandomUtils.nextFloat(234.4554F, (float) Integer.MAX_VALUE);
      assertEquals(1.71798694E9F, float0, 0.01F);
      
      float float1 = RandomUtils.nextFloat();
      assertEquals((-2.7222588E38F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      float float0 = RandomUtils.nextFloat(3123.972F, (float) Integer.MAX_VALUE);
      assertEquals(1.71798758E9F, float0, 0.01F);
      
      double double0 = RandomUtils.nextDouble((double) 3123.972F, (double) Integer.MAX_VALUE);
      assertEquals((-1.7179812944505372E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      RandomUtils.nextDouble();
      double double0 = RandomUtils.nextDouble();
      assertEquals((-1.4381545078898526E308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = RandomUtils.nextBytes(0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomUtils.nextDouble(0.0, 2118.24);
      double double0 = RandomUtils.nextDouble(0.0, 2118.24);
      assertEquals(211.82399999999998, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = RandomUtils.nextInt(1626, 2828);
      assertEquals(1626, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextFloat((-358.5331F), (-358.5331F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextFloat(1028.8406F, 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = RandomUtils.nextDouble((double) 0L, (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextDouble((-1.0), (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextDouble((double) 1469L, 1047.914);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      RandomUtils.nextFloat(234.4554F, (float) Integer.MAX_VALUE);
      // Undeclared exception!
      RandomUtils.nextLong((long) Integer.MAX_VALUE, 9223372035781033984L);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = RandomUtils.nextLong(1469L, 1469L);
      assertEquals(1469L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextLong((-1L), (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextLong(0L, (-2971L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = RandomUtils.nextInt(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextInt((-2016), (-2016));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Both range values must be non-negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextInt(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtils.nextBytes((-3991));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Count cannot be negative.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = RandomUtils.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      float float0 = RandomUtils.nextFloat();
      assertEquals(3.4028235E37F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = RandomUtils.nextInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = RandomUtils.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long long0 = RandomUtils.nextLong();
      assertEquals(0L, long0);
      
      int int0 = RandomUtils.nextInt();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RandomUtils randomUtils0 = new RandomUtils();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float float0 = RandomUtils.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
  }
}
