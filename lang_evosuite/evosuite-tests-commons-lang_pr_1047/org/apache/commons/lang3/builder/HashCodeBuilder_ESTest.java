/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 21:52:36 GMT 2025
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Field;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HashCodeBuilder_ESTest extends HashCodeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, (int)hashCodeBuilder0.build());
      
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, (Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      float[] floatArray0 = new float[2];
      floatArray0[1] = 1194.71F;
      Object object0 = new Object();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      HashCodeBuilder hashCodeBuilder1 = new HashCodeBuilder();
      hashCodeBuilder0.append(floatArray0);
      Class<String> class0 = String.class;
      HashCodeBuilder.reflectionHashCode(485, 485, "t~M*[Ncm\"}G)}jT-", true, (Class<? super String>) class0, (String[]) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1194.71F;
      doubleArray0[1] = (double) (-819485932);
      doubleArray0[2] = (double) 1194.71F;
      doubleArray0[3] = (double) (-819485932);
      doubleArray0[4] = (double) (-819485932);
      hashCodeBuilder0.append(doubleArray0);
      assertEquals(1784156581, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<String> class0 = String.class;
      int int0 = HashCodeBuilder.reflectionHashCode((-1807), (-1807), ".7b'U^O<", false, (Class<? super String>) class0, (String[]) null);
      assertEquals(1152731857, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((long[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object) "DH");
      HashCodeBuilder hashCodeBuilder1 = new HashCodeBuilder(3727, 3727);
      Object[] objectArray0 = new Object[0];
      hashCodeBuilder1.append(objectArray0);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2366);
      shortArray0[1] = (short)20;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)37;
      shortArray0[4] = (short)9;
      shortArray0[5] = (short)46;
      hashCodeBuilder1.append(shortArray0);
      Object object0 = new Object();
      hashCodeBuilder1.append((boolean[]) null);
      assertEquals((-376630316), (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((boolean[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((double[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      HashCodeBuilder.reflectionHashCode((Object) "5HpcDIze9p=2o1zws\"h", false);
      HashCodeBuilder.reflectionHashCode((-1241), 17, object0, false);
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append('\\');
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      hashCodeBuilder1.append(charArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.appendSuper(2647);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)127;
      hashCodeBuilder2.append(byteArray0);
      assertEquals(1502479887, hashCodeBuilder2.toHashCode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1392.8555F);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(floatArray0);
      hashCodeBuilder1.append(false);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-325);
      shortArray0[1] = (short) (-1);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(false);
      Object object0 = new Object();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      hashCodeBuilder1.append(booleanArray0);
      hashCodeBuilder2.build();
      assertEquals((-1639065466), hashCodeBuilder2.toHashCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((char[]) null);
      float[] floatArray0 = new float[1];
      hashCodeBuilder0.append(floatArray0);
      assertEquals(23273, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((float[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(2, 32, (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "MLXB((Qm1rYE$S", (String[]) null);
      //  // Unstable assertion: assertEquals(476689306, int0);
      
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(7, 7);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 476689306;
      doubleArray0[1] = (double) 476689306;
      doubleArray0[2] = (double) 476689306;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = (double) 476689306;
      doubleArray0[5] = (double) 476689306;
      hashCodeBuilder0.append((Object) "MLXB((Qm1rYE$S");
      HashCodeBuilder.reflectionHashCode((Object) "MLXB((Qm1rYE$S", (String[]) null);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(doubleArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.appendSuper(476689306);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append('$');
      hashCodeBuilder3.append((short)1);
      //  // Unstable assertion: assertEquals(380525006, (int)hashCodeBuilder3.build());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      byte[] byteArray0 = new byte[1];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(byteArray0);
      assertEquals(629, (int)hashCodeBuilder0.build());
      
      hashCodeBuilder1.append('&');
      assertEquals(23311, hashCodeBuilder1.toHashCode());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>(linkedHashSet0);
      int int0 = HashCodeBuilder.reflectionHashCode((Object) linkedHashSet0, (Collection<String>) linkedList0);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(1327, 1327);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((Object) null);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((-1.0));
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((Object[]) null);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((short)32);
      byte[] byteArray0 = new byte[0];
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(byteArray0);
      hashCodeBuilder5.append('c');
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder1.append(booleanArray0);
      hashCodeBuilder6.append((short)2868);
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'K';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      charArray0[6] = 'c';
      hashCodeBuilder4.append(charArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'c';
      intArray0[1] = (int) 'K';
      intArray0[2] = (int) 'c';
      hashCodeBuilder3.append(intArray0);
      assertEquals(2021928232, hashCodeBuilder3.toHashCode());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1194.71F;
      floatArray0[1] = 1194.71F;
      hashCodeBuilder0.append(floatArray0);
      hashCodeBuilder0.append((byte)7);
      hashCodeBuilder0.append(false);
      assertEquals((-450208811), hashCodeBuilder0.toHashCode());
      
      HashCodeBuilder.isRegistered("l0Ck]%6(");
      int int0 = HashCodeBuilder.reflectionHashCode((int) (byte)7, (int) (byte)7, (Object) "?c62QzXI/Q{kt$2C&");
      assertEquals((-1830748677), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder.getRegistry();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(0L);
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      double[] doubleArray0 = new double[3];
      hashCodeBuilder1.append((double) 0L);
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      hashCodeBuilder0.append(doubleArray0);
      int[] intArray0 = new int[0];
      hashCodeBuilder1.append(intArray0);
      hashCodeBuilder1.hashCode();
      //  // Unstable assertion: assertEquals(817088549, hashCodeBuilder1.toHashCode());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "w~C4=f9T4H.jkgrM.yk", (Collection<String>) linkedHashSet0);
      //  // Unstable assertion: assertEquals((-747700082), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      HashCodeBuilder.reflectionHashCode(object0, true);
      Object object1 = new Object();
      HashCodeBuilder.reflectionHashCode(object1, true);
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object object2 = new Object();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(object1);
      hashCodeBuilder1.append((short) (-3488));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) hashCodeBuilder1;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append(objectArray0);
      HashCodeBuilder.isRegistered("");
      hashCodeBuilder2.appendSuper(11);
      HashCodeBuilder hashCodeBuilder3 = new HashCodeBuilder();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(byteArray0);
      int int0 = hashCodeBuilder4.toHashCode();
      assertEquals(629, (int)hashCodeBuilder3.build());
      assertEquals(629, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashCodeBuilder.reflectionHashCode(2589, 2589, (Object) "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Field> unaryOperator1 = UnaryOperator.identity();
      Function<String, Field> function0 = (Function<String, Field>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyString());
      Function<String, Field> function1 = unaryOperator0.andThen((Function<? super String, ? extends Field>) function0);
      Function<String, Field> function2 = unaryOperator1.compose((Function<? super String, ? extends Field>) function1);
      unaryOperator0.andThen((Function<? super String, ? extends Field>) function2);
      linkedList0.replaceAll(unaryOperator0);
      HashCodeBuilder.reflectionHashCode((Object) "", (Collection<String>) linkedList0);
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      function1.apply("");
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 6702925;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 6702925;
      doubleArray0[4] = (double) 6702925;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 2589;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(doubleArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) unaryOperator0;
      objectArray0[1] = (Object) 6702925.0;
      objectArray0[2] = (Object) hashCodeBuilder0;
      objectArray0[3] = (Object) function2;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(objectArray0);
      hashCodeBuilder3.toHashCode();
      //  // Unstable assertion: assertEquals((-748803860), hashCodeBuilder1.toHashCode());
      
      boolean boolean0 = HashCodeBuilder.isRegistered("]J&(>K>K{4B&\">9XQEN");
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder.getRegistry();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(0L);
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      double[] doubleArray0 = new double[3];
      hashCodeBuilder1.append((double) 0L);
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      hashCodeBuilder0.append(doubleArray0);
      int[] intArray0 = new int[0];
      hashCodeBuilder1.append(intArray0);
      hashCodeBuilder1.hashCode();
      hashCodeBuilder1.append(false);
      assertEquals(167505242, (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      HashCodeBuilder.reflectionHashCode(object0, false);
      HashCodeBuilder.reflectionHashCode(17, 17, object0, false);
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append('\\');
      hashCodeBuilder1.append((double[]) null);
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append(charArray0);
      hashCodeBuilder2.appendSuper(2147483645);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)2;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder0.append(byteArray0);
      int int0 = hashCodeBuilder3.toHashCode();
      assertEquals(45780943, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((short) (-2264));
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2264);
      shortArray0[2] = (short) (-2264);
      shortArray0[3] = (short) (-2264);
      shortArray0[4] = (short) (-2264);
      shortArray0[5] = (short) (-2264);
      hashCodeBuilder1.append((byte)0);
      shortArray0[6] = (short) (-2264);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(shortArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-2264);
      doubleArray0[1] = (double) (short) (-2264);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(doubleArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-2264);
      longArray0[1] = (long) (short) (-2264);
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short) (-2264);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(longArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(floatArray0);
      Object object0 = new Object();
      hashCodeBuilder5.append(object0);
      assertEquals(94066360, hashCodeBuilder3.toHashCode());
      assertEquals(94066360, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(24, 24, linkedHashSet0, false, (Class<? super LinkedHashSet<Field>>) class0, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((short)0);
      Object object0 = new Object();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(object0);
      HashCodeBuilder.getRegistry();
      hashCodeBuilder1.append(123L);
      assertEquals(861298, (int)hashCodeBuilder1.build());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      HashCodeBuilder.reflectionHashCode(object0, (Collection<String>) linkedHashSet0);
      Object object1 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "<O";
      int int0 = HashCodeBuilder.reflectionHashCode(object1, stringArray0);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 93;
      int int1 = 2390;
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(93, 2390);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      HashCodeBuilder.reflectionHashCode(1089, 1089, object0, false);
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(booleanArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((long) 1089);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-336);
      shortArray0[2] = (short)2031;
      shortArray0[3] = (short)1184;
      shortArray0[4] = (short)32;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)1636;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(shortArray0);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(object0);
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(3149.75F);
      hashCodeBuilder5.append((byte[]) null);
      assertEquals((-701747230), hashCodeBuilder2.toHashCode());
      assertEquals((-701747230), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((byte[]) null);
      assertEquals(629, hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(1769, (-1924), (String) null, false, (Class<? super String>) class0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object object0 = new Object();
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Integer integer0 = hashCodeBuilder0.build();
      assertEquals(17, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((int[]) null);
      assertEquals(629, (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-1.0));
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(0L);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((byte)113);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(booleanArray0);
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(0.0F);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)113;
      longArray0[1] = (long) (byte)113;
      longArray0[2] = (long) (byte)113;
      longArray0[3] = 0L;
      longArray0[4] = (long) (byte)113;
      longArray0[5] = (long) (byte)113;
      longArray0[6] = (long) (byte)113;
      longArray0[7] = (long) (byte)113;
      hashCodeBuilder5.append(longArray0);
      assertEquals((-526625025), hashCodeBuilder5.toHashCode());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(1661, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashCodeBuilder.getRegistry();
      int int0 = (-1700);
      int int1 = 0;
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder((-1700), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) hashCodeBuilder0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) hashCodeBuilder0;
      objectArray0[3] = (Object) hashCodeBuilder0;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(objectArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.appendSuper((-296));
      int[] intArray0 = new int[5];
      intArray0[0] = (-296);
      intArray0[1] = (-296);
      intArray0[2] = (-296);
      intArray0[3] = (-296);
      intArray0[4] = (-296);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(intArray0);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(0.0F);
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((-52));
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      hashCodeBuilder5.append(booleanArray0);
      assertEquals((-1172251888), (int)hashCodeBuilder3.build());
      assertEquals((-1172251888), hashCodeBuilder4.toHashCode());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object[] objectArray0 = new Object[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(objectArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((short)3267);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(0.0F);
      Object object0 = new Object();
      HashCodeBuilder.reflectionHashCode(object0, false);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(true);
      Object object1 = new Object();
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(object1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-49);
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = 'q';
      charArray0[2] = '~';
      charArray0[3] = '.';
      charArray0[4] = 'F';
      charArray0[5] = '3';
      hashCodeBuilder4.append(charArray0);
      hashCodeBuilder2.append(byteArray0);
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append((byte)47);
      hashCodeBuilder3.append((Object) null);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-83);
      shortArray0[1] = (short) (byte) (-49);
      shortArray0[2] = (short) (byte) (-49);
      shortArray0[3] = (short) (byte) (-83);
      hashCodeBuilder5.append(shortArray0);
      hashCodeBuilder6.append((double) (byte) (-83));
      assertEquals(1208331499, (int)hashCodeBuilder5.build());
      assertEquals(1208331499, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object object0 = new Object();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      HashCodeBuilder.reflectionHashCode(object0, (Collection<String>) linkedHashSet0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1194.71F;
      floatArray0[1] = (-1392.8555F);
      hashCodeBuilder0.append(floatArray0);
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      hashCodeBuilder0.append(true);
      short[] shortArray0 = new short[8];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(shortArray0);
      Object object1 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashCodeBuilder.reflectionHashCode((Object) linkedHashSet1, (Collection<String>) null);
      hashCodeBuilder1.append((char[]) null);
      assertEquals((-602663655), (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(1475, (-1410), (Object) "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((short[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(170, 170, (Object) "org.apache.commons.lang3.builder.HashCodeBuilder");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Object object0 = new Object();
      int int0 = HashCodeBuilder.reflectionHashCode((-631), (-631), object0, true);
      assertEquals((-631), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      boolean[] booleanArray0 = new boolean[6];
      hashCodeBuilder0.append(booleanArray0);
      assertEquals(738946171, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(')');
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((byte)1);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((short) (-1805));
      double[] doubleArray0 = new double[8];
      HashCodeBuilder.reflectionHashCode((Object) "pW>3r0Qma E>oEi", true);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) ')';
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) ')';
      doubleArray0[4] = 1134.7881;
      doubleArray0[5] = (double) ')';
      doubleArray0[6] = (double) ')';
      doubleArray0[7] = (double) (short) (-1805);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) ')';
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(intArray0);
      hashCodeBuilder5.hashCode();
      hashCodeBuilder4.append(true);
      assertEquals((-1129077591), (int)hashCodeBuilder4.build());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      float[] floatArray0 = new float[2];
      floatArray0[1] = 1194.71F;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(floatArray0);
      Object object0 = new Object();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      HashCodeBuilder hashCodeBuilder2 = new HashCodeBuilder();
      hashCodeBuilder1.append(floatArray0);
      hashCodeBuilder1.append(';');
      assertEquals(1350616528, (int)hashCodeBuilder1.build());
      
      Class<String> class0 = String.class;
      int int0 = HashCodeBuilder.reflectionHashCode(509, 509, "t~M*[Ncm\"}G)}jT-", true, (Class<? super String>) class0, (String[]) null);
      assertEquals(1777663692, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder.getRegistry();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(0L);
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      hashCodeBuilder1.append(longArray0);
      hashCodeBuilder1.append((short[]) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(2536, 522, object0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      short[] shortArray0 = new short[1];
      hashCodeBuilder0.append(shortArray0);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-2337), (-2337));
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(booleanArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(false);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(2083L);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.appendSuper((-2337));
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(2083L);
      hashCodeBuilder5.append('l');
      hashCodeBuilder3.append(0.0);
      hashCodeBuilder3.append('l');
      assertEquals((-433783982), hashCodeBuilder0.toHashCode());
      assertEquals((-433783982), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = HashCodeBuilder.reflectionHashCode(object0, (Collection<String>) linkedList0);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(285, 285);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((float[]) null);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((-1292.401F));
      int[] intArray0 = new int[7];
      intArray0[0] = 285;
      intArray0[1] = 285;
      hashCodeBuilder0.append((float[]) null);
      intArray0[2] = 285;
      intArray0[3] = 285;
      intArray0[4] = 285;
      intArray0[5] = 285;
      intArray0[6] = 285;
      hashCodeBuilder2.append(intArray0);
      double[] doubleArray0 = new double[3];
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder0.appendSuper(285);
      doubleArray0[0] = (double) 285;
      doubleArray0[1] = (double) 285;
      doubleArray0[2] = (double) (-1292.401F);
      hashCodeBuilder1.append(doubleArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("org.easymock.bytebuddy.build.HashCodeAndEqualsPlugin");
      HashCodeBuilder.reflectionHashCode((Object) "tx", (Collection<String>) linkedList0);
      hashCodeBuilder2.append(doubleArray0);
      hashCodeBuilder3.append(intArray0);
      assertEquals(1146977221, hashCodeBuilder3.toHashCode());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      short[] shortArray0 = new short[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(shortArray0);
      assertEquals(17, (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      float[] floatArray0 = new float[2];
      hashCodeBuilder0.append(floatArray0);
      assertEquals(23273, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append(true);
      short[] shortArray0 = new short[1];
      boolean[] booleanArray0 = new boolean[1];
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1194.71F;
      floatArray0[1] = (-1392.8555F);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(floatArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((byte)32);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(true);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)32;
      shortArray0[1] = (short) (byte)32;
      shortArray0[2] = (short) (byte)32;
      hashCodeBuilder2.append(true);
      shortArray0[3] = (short) (byte)32;
      shortArray0[4] = (short) (byte)32;
      shortArray0[5] = (short) (byte)32;
      shortArray0[6] = (short)1;
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(shortArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)32;
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashCodeBuilder.reflectionHashCode(objectArray0[0], (Collection<String>) linkedList0);
      objectArray0[1] = object0;
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(objectArray0);
      hashCodeBuilder5.append(floatArray0);
      assertEquals(13028796, (int)hashCodeBuilder3.build());
      assertEquals(13028796, hashCodeBuilder4.toHashCode());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object[] objectArray0 = new Object[10];
      hashCodeBuilder0.append(objectArray0);
      assertEquals((-2120005431), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((short)34);
      assertEquals(663, hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Object object0 = new Object();
      HashCodeBuilder.reflectionHashCode(object0, true);
      Object object1 = new Object();
      HashCodeBuilder.reflectionHashCode(object1, false);
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object object2 = new Object();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(object2);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((short) (-17));
      Object[] objectArray0 = new Object[0];
      hashCodeBuilder0.append(objectArray0);
      HashCodeBuilder.isRegistered(object1);
      hashCodeBuilder1.appendSuper((-1394));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      hashCodeBuilder2.append(byteArray0);
      //  // Unstable assertion: assertEquals(163560710, (int)hashCodeBuilder2.build());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-2451), (-2451), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1194.71F;
      floatArray0[1] = (-1392.8555F);
      hashCodeBuilder0.append(floatArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      hashCodeBuilder0.append(true);
      short[] shortArray0 = new short[8];
      hashCodeBuilder0.append(shortArray0);
      assertEquals(1144513765, hashCodeBuilder0.toHashCode());
      
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = HashCodeBuilder.reflectionHashCode((Object) linkedHashSet0, (Collection<String>) null);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object) null);
      hashCodeBuilder0.append((long[]) null);
      //  // Unstable assertion: assertEquals(23273, hashCodeBuilder0.toHashCode());
      
      HashCodeBuilder hashCodeBuilder1 = new HashCodeBuilder();
      hashCodeBuilder1.appendSuper(3727);
      hashCodeBuilder1.append((byte[]) null);
      String[] stringArray0 = new String[0];
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "A`IYB`&FY6q", stringArray0);
      //  // Unstable assertion: assertEquals(1843796649, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      long[] longArray0 = new long[1];
      hashCodeBuilder0.append(longArray0);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      double[] doubleArray0 = new double[3];
      hashCodeBuilder0.append(doubleArray0);
      assertEquals(861101, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int[] intArray0 = new int[9];
      hashCodeBuilder0.append(intArray0);
      assertEquals(1219584725, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.appendSuper((short)59);
      hashCodeBuilder0.append((short)59);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(2196);
      hashCodeBuilder1.append((byte)0);
      hashCodeBuilder1.append((-1134));
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((int[]) null);
      Integer integer0 = hashCodeBuilder2.build();
      assertEquals(685769689, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, 37);
      assertEquals(37, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper((-1412));
      assertEquals((-783), hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "<=LtIuP:Ry_;:':f/", true);
      assertEquals(293752911, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = HashCodeBuilder.isRegistered(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int[] intArray0 = new int[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(intArray0);
      assertEquals(17, hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      long[] longArray0 = new long[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(longArray0);
      assertEquals(17, hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Object object0 = new Object();
      HashCodeBuilder.reflectionHashCode(object0, true);
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-5228.690467));
      Object object1 = new Object();
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(object1);
      int[] intArray0 = new int[6];
      intArray0[0] = 17;
      intArray0[1] = 17;
      intArray0[2] = 17;
      intArray0[3] = 17;
      intArray0[4] = 17;
      intArray0[5] = 17;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(intArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 17;
      longArray0[1] = (long) 17;
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(longArray0);
      hashCodeBuilder4.appendSuper(17);
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(17, (-2575), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Object object0 = new Object();
      int int0 = HashCodeBuilder.reflectionHashCode(37, 37, object0);
      assertEquals(37, int0);
  }
}
