/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 21:48:02 GMT 2025
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import org.apache.commons.lang3.builder.Diff;
import org.apache.commons.lang3.builder.DiffBuilder;
import org.apache.commons.lang3.builder.DiffResult;
import org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle;
import org.apache.commons.lang3.builder.StandardToStringStyle;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DiffBuilder_ESTest extends DiffBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff0, toStringStyle0, false);
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("}T/aWCc1>p'7=ddfB+", 0, 41);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1073741823));
      Integer integer1 = new Integer(3237);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("fieldName", (double) 3237, (double) (-1073741823));
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1004));
      Integer integer1 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("r/>`K", 'q', '|');
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Integer integer0 = new Integer(98);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (byte) (-9), (byte)104);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1011);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, booleanArray0, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      Integer integer0 = new Integer(1);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (short[]) null, (short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(11);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, objectArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(427);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, true);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      Integer integer0 = new Integer(1522);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, intArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer0 = new Integer(3408);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, floatArray0, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, false);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1355);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, charArray0, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      Integer integer0 = new Integer(1);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, byteArray0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer0 = new Integer((-3689));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(144);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (short)2463, (short) (-434));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      Integer integer0 = new Integer(3621);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (DiffResult<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-17));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (Object) integer0, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, true);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (long) 1, (-4570221235920699392L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer0 = new Integer(3408);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, 3408, 3408);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(304);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (float) 304, (float) 304);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer0 = new Integer(2);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (double) 520, 923.068690674);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(230);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, '5', '5');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-1189));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, false);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (byte) (-123), (byte) (-123));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // fieldName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<Integer>((Integer) null, (Integer) null, multilineRecursiveToStringStyle0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // lhs
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DiffBuilder<Integer> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<Integer>((Integer) null, (Integer) null, (ToStringStyle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // lhs
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("i(hx&`h9>vW4O:LXHI", diffResult0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(1355);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, true);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$17", diffResult0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff0, multilineRecursiveToStringStyle0, false);
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("", (Object[]) diff0.EMPTY_ARRAY, (Object[]) diff0.EMPTY_ARRAY);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(1365);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      Object[] objectArray0 = new Object[4];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("ufIj?mhqzo+fd:}4", objectArray0, (Object[]) null);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(1028);
      Integer integer1 = new Integer(1028);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer1, (ToStringStyle) null, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("h(M=^-3WsTsg<^otp", (Object) integer0, (Object) integer1);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(312);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("{argumebnts}", (Object) null, (Object) integer0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer(1011);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (Object) integer0, (Object) integer0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer((-1376));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("`z9P29{e", (Object) integer0, (Object) integer0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer((-1960));
      Integer integer1 = new Integer(1);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      short[] shortArray0 = new short[5];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.junitpioneer.jupiter.StopwatchExtension", shortArray0, shortArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer((-3115));
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, true);
      short[] shortArray0 = new short[9];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$10", shortArray0, shortArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(177);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("StdIoExtension is active but no %s annotation was found.", (short) (-829), (short) (-829));
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer((-1376));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("VVX ", (short)0, (short)0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer((-1960));
      Integer integer1 = new Integer(1);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      long[] longArray0 = new long[8];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.junitpioneer.jupiter.StopwatchExtension", longArray0, longArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer((-1800));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, true);
      long[] longArray0 = new long[5];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("rhs", longArray0, (long[]) null);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(1355);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$17", (long) 1355, (long) 1355);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer(1355);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$17", (long) 1355, (long) 1355);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer((-762));
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      int[] intArray0 = new int[9];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append(" and ", intArray0, intArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer((-1376));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, true);
      int[] intArray0 = new int[7];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$6", intArray0, intArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = new Integer((-1960));
      Integer integer1 = new Integer(1);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append(" parameters", 0, 0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer(10);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<DiffResult<Integer>> diffBuilder1 = new DiffBuilder<DiffResult<Integer>>(diffResult0, diffResult0, multilineRecursiveToStringStyle0);
      DiffBuilder<DiffResult<Integer>> diffBuilder2 = diffBuilder1.append("org.apache.commons.lang3.builder.DiffBuilder$4", 10, 1895);
      assertSame(diffBuilder1, diffBuilder2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer(177);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      float[] floatArray0 = new float[4];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("E", floatArray0, floatArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = new Integer((-1800));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, true);
      float[] floatArray0 = new float[2];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("rhs", floatArray0, floatArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer(1355);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("*t", (float) 1355, (float) 1355);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, true);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffResult<Integer> diffResult1 = diffBuilder0.build();
      DiffBuilder<DiffResult<Integer>> diffBuilder1 = new DiffBuilder<DiffResult<Integer>>(diffResult1, diffResult0, toStringStyle0);
      double[] doubleArray0 = new double[6];
      DiffBuilder<DiffResult<Integer>> diffBuilder2 = diffBuilder1.append("", doubleArray0, doubleArray0);
      assertSame(diffBuilder2, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer(1355);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, true);
      double[] doubleArray0 = new double[4];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("*t", doubleArray0, doubleArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, true);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffResult<Integer> diffResult1 = diffBuilder0.build();
      DiffBuilder<DiffResult<Integer>> diffBuilder1 = new DiffBuilder<DiffResult<Integer>>(diffResult1, diffResult0, toStringStyle0);
      DiffBuilder<DiffResult<Integer>> diffBuilder2 = diffBuilder1.append("", (double) (byte) (-56), (double) (byte) (-56));
      assertSame(diffBuilder2, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer((-1800));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (-667.08868061), 0.0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer integer0 = new Integer((-1960));
      Integer integer1 = new Integer(1);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      char[] charArray0 = new char[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append(" parameters", charArray0, charArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = new Integer((-762));
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<DiffResult<Integer>> diffBuilder1 = new DiffBuilder<DiffResult<Integer>>(diffResult0, diffResult0, toStringStyle0);
      char[] charArray0 = new char[3];
      DiffBuilder<DiffResult<Integer>> diffBuilder2 = diffBuilder1.append("IWz~>4g.9H>*-m", charArray0, charArray0);
      assertSame(diffBuilder2, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer((-762));
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("=6E", 'm', 'm');
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer((-1376));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("r", 'F', 'F');
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff0, toStringStyle0, false);
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("", (byte[]) null, (byte[]) null);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, true);
      byte[] byteArray0 = new byte[5];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("=T_%g%uuS)h", byteArray0, byteArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer((-1960));
      Integer integer1 = new Integer(1);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$13", (byte) (-84), (byte) (-84));
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = new Integer(10);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<DiffResult<Integer>> diffBuilder1 = new DiffBuilder<DiffResult<Integer>>(diffResult0, diffResult0, multilineRecursiveToStringStyle0);
      DiffBuilder<DiffResult<Integer>> diffBuilder2 = diffBuilder1.append("org.apache.commons.lang3.builder.DiffBuilder$4", (byte) (-81), (byte) (-81));
      assertSame(diffBuilder2, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer0 = new Integer((-1940));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("n(M~p", (boolean[]) null, (boolean[]) null);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer((-1800));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, true);
      boolean[] booleanArray0 = new boolean[5];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", booleanArray0, booleanArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, true);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffResult<Integer> diffResult1 = diffBuilder0.build();
      DiffBuilder<DiffResult<Integer>> diffBuilder1 = new DiffBuilder<DiffResult<Integer>>(diffResult1, diffResult0, toStringStyle0);
      DiffBuilder<DiffResult<Integer>> diffBuilder2 = diffBuilder1.append("", false, false);
      assertSame(diffBuilder1, diffBuilder2);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Integer integer0 = new Integer((-1800));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("t", true, true);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = new Integer((-1800));
      Integer integer1 = new Integer((-1800));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0, true);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Integer integer0 = new Integer(2616);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      int[] intArray0 = new int[3];
      diffBuilder0.append("", (int[]) null, intArray0);
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Integer integer0 = new Integer(1355);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$11", 0.0, 1256.51);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("29\"ic(Rf|;uA/T0{m;3", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Integer integer0 = new Integer((-2044));
      Integer integer1 = new Integer(2459);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, (ToStringStyle) null);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", 2459, (-2044));
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer((-546));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, false);
      char[] charArray0 = new char[1];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("\u00F8", charArray0, (char[]) null);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Integer integer0 = new Integer((-762));
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[5];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("P^B)m,49yC/L8L", floatArray0, floatArray1);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("P^B)m,49yC/L8L", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Integer integer0 = new Integer((-1273));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", 0.0F, 271.93076F);
      // Undeclared exception!
      try { 
        diffBuilder1.append("*K#!m2@8n", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Integer integer0 = new Integer(177);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append(" of ", (float) (short)1200, (float) 177);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Integer integer0 = new Integer(78);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      double[] doubleArray0 = new double[5];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("&le;", doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        diffBuilder1.append("org.apache.commons.lang3.builder.DiffBuilder$18", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Integer integer0 = new Integer(60);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      short[] shortArray0 = new short[4];
      diffBuilder0.append("", (short[]) null, shortArray0);
      // Undeclared exception!
      try { 
        diffBuilder0.append("Expected 0 or 1 arguments, but got ", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      Integer integer0 = new Integer(75);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (short) (-2720), (short)4560);
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Integer integer0 = new Integer(1355);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append(" does not define ", (short)21132, (short)1);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Integer integer0 = new Integer(528);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      long[] longArray0 = new long[2];
      diffBuilder0.append("", (long[]) null, longArray0);
      diffResult0.toString((ToStringStyle) multilineRecursiveToStringStyle0);
      assertEquals(1, diffResult0.getNumberOfDiffs());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Integer integer0 = new Integer(1355);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      diffBuilder0.append("org.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider", 0L, (long) 1355);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("NEVER", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Integer integer0 = new Integer(1355);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$17", 4653674168468897792L, 0L);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Integer integer0 = new Integer(95);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, false);
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = new Object[3];
      diffBuilder0.append("0YmQs+^EPqEx", objectArray0, objectArray1);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      Integer integer0 = new Integer(1);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      diffBuilder0.append("", (Object) integer0, (Object) diffResult0);
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Integer integer0 = new Integer(947);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (byte) (-4), (byte) (-84));
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Integer integer0 = new Integer(65);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, false);
      boolean[] booleanArray0 = new boolean[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("s@(H,ShP|'R", booleanArray0, (boolean[]) null);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("c9[", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Integer integer0 = new Integer(67);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", '5', '3');
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Integer integer0 = new Integer((-992643460));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, false);
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[2];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", byteArray0, byteArray1);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Integer integer0 = new Integer(92);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", false, true);
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (float) 1, (float) 1);
      assertSame(diffBuilder0, diffBuilder1);
  }
}
