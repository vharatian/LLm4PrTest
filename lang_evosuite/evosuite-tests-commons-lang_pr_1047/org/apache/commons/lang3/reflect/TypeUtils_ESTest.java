/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 22:05:42 GMT 2025
 */

package org.apache.commons.lang3.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.WildcardType;
import java.util.Map;
import org.apache.commons.lang3.reflect.TypeUtils;
import org.apache.commons.lang3.reflect.Typed;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.Description;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      GenericArrayType genericArrayType1 = TypeUtils.genericArrayType(genericArrayType0);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) genericArrayType1;
      typeArray0[2] = (Type) genericArrayType0;
      TypeUtils.normalizeUpperBounds(typeArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder0.build();
      TypeUtils.getRawType(wildcardType0, (Type) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder0.build();
      boolean boolean0 = TypeUtils.containsTypeVariables(wildcardType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      typeArray0[2] = (Type) wildcardType0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      Type[] typeArray1 = new Type[8];
      typeArray1[2] = (Type) wildcardType0;
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withLowerBounds(typeArray1);
      WildcardType wildcardType1 = typeUtils_WildcardTypeBuilder1.build();
      typeArray0[5] = (Type) wildcardType1;
      Type[] typeArray2 = TypeUtils.normalizeUpperBounds(typeArray0);
      assertEquals(2, typeArray2.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type type0 = TypeUtils.unrollVariables((Map<TypeVariable<?>, Type>) null, (Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      ParameterizedType parameterizedType0 = TypeUtils.parameterizeWithOwner((Type) null, class0, map0);
      assertNotNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) parameterizedType0, (Class<?>) class0);
      ParameterizedType parameterizedType1 = TypeUtils.parameterize(class0, map0);
      assertNotSame(parameterizedType1, parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments(parameterizedType0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      Class<Annotation> class1 = Annotation.class;
      Class<?> class2 = TypeUtils.getRawType(class1, parameterizedType0);
      assertTrue(class2.isInterface());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Annotation[] annotationArray0 = new Annotation[9];
      Class<Annotation> class0 = Annotation.class;
      Description description0 = Description.createTestDescription("org.junitpioneer.jupiter.SystemPropertyExtension", "", annotationArray0);
      Class<?> class1 = description0.getTestClass();
      Class<?> class2 = TypeUtils.getRawType(class1, class0);
      assertFalse(class2.isInterface());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      Type[] typeArray1 = new Type[3];
      typeArray1[0] = (Type) parameterizedType0;
      typeArray1[1] = (Type) parameterizedType0;
      typeArray1[2] = (Type) class0;
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray1);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      Type[] typeArray2 = TypeUtils.getImplicitUpperBounds(wildcardType0);
      assertEquals(0, typeArray2.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.typesSatisfyVariables((Map<TypeVariable<?>, Type>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // typeVariableMap
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.toString((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.parameterizeWithOwner((Type) null, (Class<?>) null, (Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rawClass
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.parameterizeWithOwner((Type) wildcardType0, (Class<?>) class0, (Map<TypeVariable<?>, Type>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // typeVariableMap
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.normalizeUpperBounds((Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bounds
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(typeUtils0.WILDCARD_ALL);
      // Undeclared exception!
      try { 
        TypeUtils.getTypeArguments((Type) genericArrayType0, (Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(typeUtils0.WILDCARD_ALL);
      // Undeclared exception!
      try { 
        TypeUtils.getRawType(genericArrayType0, typeUtils0.WILDCARD_ALL);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getImplicitUpperBounds((WildcardType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // wildcardType
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getImplicitLowerBounds((WildcardType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // wildcardType
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.genericArrayType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // componentType
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.determineTypeArguments(class0, (ParameterizedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // superParameterizedType
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterizeWithOwner((Type) null, class0, typeArray0);
      assertNotNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      Type[] typeArray0 = TypeUtils.getImplicitUpperBounds(wildcardType0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.parameterizeWithOwner((Type) null, class0, typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid number of type parameters specified: expected 0, got 1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        TypeUtils.parameterizeWithOwner((Type) class0, (Class<?>) class0, typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no owner allowed for top-level class java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0);
      assertSame(typeArray1, typeArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      Type[] typeArray0 = new Type[1];
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withLowerBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      Type[] typeArray1 = TypeUtils.getImplicitLowerBounds(wildcardType0);
      assertEquals(1, typeArray1.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = TypeUtils.equals((Type) class0, (Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = TypeUtils.getRawType(class0, typeUtils0.WILDCARD_ALL);
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class1);
      boolean boolean0 = TypeUtils.equals((Type) genericArrayType0, (Type) typeUtils0.WILDCARD_ALL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = TypeUtils.equals((Type) null, (Type) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = TypeUtils.containsTypeVariables((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = TypeUtils.containsTypeVariables(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Typed<Class<Integer>> typed0 = TypeUtils.wrap((Type) typeUtils0.WILDCARD_ALL);
      assertNotNull(typed0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0);
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray1);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      // Undeclared exception!
      try { 
        TypeUtils.toString((Type) wildcardType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Type[] typeArray0 = new Type[2];
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      // Undeclared exception!
      try { 
        TypeUtils.toString((Type) wildcardType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Type[] typeArray0 = TypeUtils.getImplicitLowerBounds(typeUtils0.WILDCARD_ALL);
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      typeUtils_WildcardTypeBuilder0.withLowerBounds(typeArray0);
      assertEquals(1, typeArray0.length);
      
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder0.build();
      String string0 = TypeUtils.toString((Type) wildcardType0);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class class1 = (Class)TypeUtils.unrollVariables((Map<TypeVariable<?>, Type>) null, class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      Class class1 = (Class)TypeUtils.unrollVariables(map0, class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      assertNotNull(map0);
      
      boolean boolean0 = TypeUtils.typesSatisfyVariables(map0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      // Undeclared exception!
      try { 
        TypeUtils.parameterize(class0, typeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid number of type parameters specified: expected 0, got 1
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      boolean boolean0 = TypeUtils.isInstance((Object) null, typeUtils0.WILDCARD_ALL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = TypeUtils.isInstance((Object) null, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = TypeUtils.isInstance((Object) null, (Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Type[] typeArray0 = TypeUtils.getImplicitUpperBounds(typeUtils0.WILDCARD_ALL);
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withLowerBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(wildcardType0);
      boolean boolean0 = TypeUtils.isAssignable(genericArrayType0, wildcardType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      boolean boolean0 = TypeUtils.isAssignable(typeArray0[0], wildcardType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Type[] typeArray0 = new Type[4];
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      boolean boolean0 = TypeUtils.isAssignable(typeUtils0.WILDCARD_ALL, wildcardType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      boolean boolean0 = TypeUtils.isAssignable((Type) null, wildcardType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      boolean boolean0 = TypeUtils.isAssignable(genericArrayType0, parameterizedType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      Type[] typeArray1 = new Type[2];
      typeArray1[1] = (Type) parameterizedType0;
      Type[] typeArray2 = TypeUtils.normalizeUpperBounds(typeArray1);
      assertEquals(1, typeArray2.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Type[] typeArray0 = new Type[2];
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      boolean boolean0 = TypeUtils.isAssignable(wildcardType0, genericArrayType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(parameterizedType0);
      boolean boolean0 = TypeUtils.isAssignable(parameterizedType0, genericArrayType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      GenericArrayType genericArrayType1 = TypeUtils.genericArrayType(genericArrayType0);
      Class<Annotation> class1 = Annotation.class;
      Class<?> class2 = TypeUtils.getRawType(genericArrayType1, class0);
      assertFalse(genericArrayType1.equals((Object)genericArrayType0));
      
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) genericArrayType0;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) genericArrayType0;
      typeArray0[4] = (Type) class2;
      Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0);
      assertEquals(1, typeArray1.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Class<?> class1 = TypeUtils.getRawType(genericArrayType0, class0);
      boolean boolean0 = TypeUtils.isAssignable(class1, genericArrayType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Class<?> class1 = TypeUtils.getRawType(genericArrayType0, genericArrayType0);
      boolean boolean0 = TypeUtils.isAssignable(genericArrayType0, class1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      boolean boolean0 = TypeUtils.isArrayType(typeUtils0.WILDCARD_ALL);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = TypeUtils.isArrayType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      boolean boolean0 = TypeUtils.isArrayType(genericArrayType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      Type[] typeArray0 = TypeUtils.getImplicitLowerBounds(wildcardType0);
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray0);
      WildcardType wildcardType1 = typeUtils_WildcardTypeBuilder1.build();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.getTypeArguments((Type) wildcardType1, (Class<?>) class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // found an unhandled type: null
         //
         verifyException("org.apache.commons.lang3.reflect.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Annotation> class0 = Annotation.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) typeUtils0.WILDCARD_ALL, (Class<?>) class0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Class<?> class1 = TypeUtils.getRawType(genericArrayType0, class0);
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) genericArrayType0, class1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) genericArrayType0, (Class<?>) class0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawType((Type) null, (Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown type: null
         //
         verifyException("org.apache.commons.lang3.reflect.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      Class<?> class1 = TypeUtils.getRawType(parameterizedType0, class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(typeUtils0.WILDCARD_ALL);
      Type type0 = TypeUtils.getArrayComponentType(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Type[] typeArray0 = new Type[7];
      typeArray0[2] = (Type) genericArrayType0;
      Description description0 = Description.createTestDescription(class0, "");
      Class<?> class1 = description0.getTestClass();
      Class<?> class2 = TypeUtils.getRawType(typeArray0[2], class1);
      Class class3 = (Class)TypeUtils.getArrayComponentType(class2);
      assertFalse(class3.isArray());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type type0 = TypeUtils.getArrayComponentType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Type type0 = TypeUtils.getArrayComponentType(typeUtils0.WILDCARD_ALL);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      // Undeclared exception!
      try { 
        TypeUtils.toString((Type) parameterizedType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      WildcardType wildcardType0 = TypeUtils.WILDCARD_ALL;
      Type[] typeArray0 = TypeUtils.getImplicitLowerBounds(wildcardType0);
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      typeUtils_WildcardTypeBuilder0.withUpperBounds(typeArray0);
      WildcardType wildcardType1 = typeUtils_WildcardTypeBuilder0.build();
      boolean boolean0 = TypeUtils.isAssignable(wildcardType1, wildcardType0);
      assertFalse(wildcardType0.equals((Object)wildcardType1));
      assertTrue(boolean0);
      assertFalse(wildcardType1.equals((Object)wildcardType0));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(typeUtils0.WILDCARD_ALL);
      boolean boolean0 = TypeUtils.equals((Type) typeUtils0.WILDCARD_ALL, (Type) genericArrayType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      boolean boolean0 = TypeUtils.equals((Type) parameterizedType0, (Type) class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      Class<Annotation> class1 = Annotation.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.determineTypeArguments(class1, parameterizedType0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      boolean boolean0 = TypeUtils.containsTypeVariables(genericArrayType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      boolean boolean0 = TypeUtils.containsTypeVariables(parameterizedType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      Class<?> class1 = TypeUtils.getRawType(genericArrayType0, genericArrayType0);
      String string0 = TypeUtils.toString((Type) class1);
      assertEquals("java.lang.Integer[]", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) typeUtils0.WILDCARD_ALL;
      typeArray0[1] = (Type) typeUtils0.WILDCARD_ALL;
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder1 = typeUtils_WildcardTypeBuilder0.withLowerBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder1.build();
      String string0 = TypeUtils.toString((Type) wildcardType0);
      assertEquals("? super ? & ?", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Type[] typeArray0 = TypeUtils.getImplicitUpperBounds(typeUtils0.WILDCARD_ALL);
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      typeUtils_WildcardTypeBuilder0.withLowerBounds(typeArray0);
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder0.build();
      String string0 = TypeUtils.toString((Type) wildcardType0);
      assertEquals("? super java.lang.Object", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder0.build();
      boolean boolean0 = TypeUtils.isAssignable(wildcardType0, typeUtils0.WILDCARD_ALL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      boolean boolean0 = TypeUtils.isInstance(typeUtils0, typeUtils0.WILDCARD_ALL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      Class<Annotation> class1 = Annotation.class;
      ParameterizedType parameterizedType1 = TypeUtils.parameterize(class1, typeArray0);
      boolean boolean0 = TypeUtils.isAssignable(parameterizedType0, parameterizedType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      ParameterizedType parameterizedType1 = TypeUtils.parameterize(class0, typeArray0);
      boolean boolean0 = TypeUtils.isAssignable(parameterizedType0, parameterizedType1);
      assertTrue(parameterizedType1.equals((Object)parameterizedType0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      boolean boolean0 = TypeUtils.isAssignable(parameterizedType0, parameterizedType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(typeUtils0.WILDCARD_ALL);
      GenericArrayType genericArrayType1 = TypeUtils.genericArrayType(genericArrayType0);
      boolean boolean0 = TypeUtils.isAssignable(genericArrayType0, genericArrayType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      GenericArrayType genericArrayType1 = TypeUtils.genericArrayType(class0);
      boolean boolean0 = TypeUtils.isAssignable(genericArrayType0, genericArrayType1);
      assertTrue(boolean0);
      assertTrue(genericArrayType1.equals((Object)genericArrayType0));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(typeUtils0.WILDCARD_ALL);
      boolean boolean0 = TypeUtils.isAssignable(genericArrayType0, genericArrayType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TypeUtils.WildcardTypeBuilder typeUtils_WildcardTypeBuilder0 = TypeUtils.wildcardType();
      WildcardType wildcardType0 = typeUtils_WildcardTypeBuilder0.build();
      Type[] typeArray0 = TypeUtils.getImplicitUpperBounds(wildcardType0);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      Type[] typeArray1 = new Type[2];
      typeArray1[0] = (Type) parameterizedType0;
      typeArray1[1] = (Type) parameterizedType0;
      Type[] typeArray2 = TypeUtils.normalizeUpperBounds(typeArray1);
      assertEquals(1, typeArray2.length);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedType parameterizedType0 = TypeUtils.parameterize(class0, typeArray0);
      Map<TypeVariable<?>, Type> map0 = TypeUtils.determineTypeArguments(class0, parameterizedType0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(typeUtils0.WILDCARD_ALL);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) genericArrayType0;
      typeArray0[1] = (Type) genericArrayType0;
      Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0);
      assertEquals(1, typeArray1.length);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.parameterize(class0, (Map<TypeVariable<?>, Type>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // typeVariableMap
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0);
      // Undeclared exception!
      try { 
        TypeUtils.parameterizeWithOwner((Type) class0, (Class<?>) class0, map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no owner allowed for top-level class java.lang.Integer
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getTypeArguments((ParameterizedType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      boolean boolean0 = TypeUtils.isAssignable(typeUtils0.WILDCARD_ALL, typeUtils0.WILDCARD_ALL);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      GenericArrayType genericArrayType0 = TypeUtils.genericArrayType(class0);
      String string0 = TypeUtils.toString((Type) genericArrayType0);
      assertEquals("java.lang.Integer[]", string0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Typed<Integer> typed0 = TypeUtils.wrap(class0);
      assertNotNull(typed0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.parameterize(class0, (Type[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }
}
