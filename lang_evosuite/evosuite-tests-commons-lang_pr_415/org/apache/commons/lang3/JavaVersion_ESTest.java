/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 15:35:11 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.JavaVersion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class JavaVersion_ESTest extends JavaVersion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaVersion.get("org.apache.commons.lang3.JavaVersion");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_RECENT;
      JavaVersion javaVersion1 = JavaVersion.JAVA_1_1;
      boolean boolean0 = javaVersion1.atMost(javaVersion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_9;
      JavaVersion javaVersion1 = JavaVersion.JAVA_1_5;
      boolean boolean0 = javaVersion0.atLeast(javaVersion1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JavaVersion[] javaVersionArray0 = JavaVersion.values();
      assertEquals(16, javaVersionArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.valueOf("JAVA_13");
      assertEquals("13", javaVersion0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaVersion.get((String) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.get("1.5");
      assertEquals(JavaVersion.JAVA_1_5, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaVersion.get("-0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_1_8;
      // Undeclared exception!
      try { 
        javaVersion0.atMost((JavaVersion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.JavaVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_1_8;
      // Undeclared exception!
      try { 
        javaVersion0.atLeast((JavaVersion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.JavaVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavaVersion.getJavaVersion("7");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("O.4");
      assertEquals(JavaVersion.JAVA_RECENT, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavaVersion.getJavaVersion("0");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        JavaVersion.getJavaVersion("1.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("99.0");
      assertEquals(JavaVersion.JAVA_RECENT, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("13");
      assertEquals(JavaVersion.JAVA_13, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("11");
      assertEquals(JavaVersion.JAVA_11, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("10");
      assertEquals(JavaVersion.JAVA_10, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("9");
      assertEquals(JavaVersion.JAVA_9, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("1.8");
      assertEquals(JavaVersion.JAVA_1_8, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("1.7");
      assertEquals(JavaVersion.JAVA_1_7, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("1.6");
      assertEquals(JavaVersion.JAVA_1_6, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("1.4");
      assertEquals(JavaVersion.JAVA_1_4, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("1.3");
      assertEquals(JavaVersion.JAVA_1_3, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("1.2");
      assertEquals(JavaVersion.JAVA_1_2, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("1.1");
      assertEquals(JavaVersion.JAVA_1_1, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("0.9");
      assertEquals(JavaVersion.JAVA_0_9, javaVersion0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_1_5;
      boolean boolean0 = javaVersion0.atMost(javaVersion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_12;
      JavaVersion javaVersion1 = JavaVersion.JAVA_RECENT;
      boolean boolean0 = javaVersion0.atMost(javaVersion1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_1_5;
      boolean boolean0 = javaVersion0.atLeast(javaVersion0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_1_2;
      JavaVersion javaVersion1 = JavaVersion.JAVA_13;
      boolean boolean0 = javaVersion0.atLeast(javaVersion1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.JAVA_11;
      String string0 = javaVersion0.toString();
      assertEquals("11", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JavaVersion javaVersion0 = JavaVersion.getJavaVersion("12");
      assertEquals(JavaVersion.JAVA_12, javaVersion0);
  }
}
