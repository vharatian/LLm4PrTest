/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 08:26:52 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      int int0 = 30246249;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "!JbvGs>9MS:`mB@FiFE", (-1635), 30246249);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add(object0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      
      String string0 = StringUtils.join((List<?>) linkedList0, ':', 17, 17);
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(linkedList0.contains(17));
      assertTrue(linkedList0.contains(object0));
      assertEquals(1, linkedList0.size());
      
      String string1 = StringUtils.removeStart("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      String string2 = StringUtils.join(charArray0, ':', 0, 1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, charArray0.length);
      assertEquals(":", string2);
      assertArrayEquals(new char[] {':', ':', ':'}, charArray0);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isBlank(":");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      String string0 = StringUtils.join(objectArray0, 'L', 3537, 3133);
      assertEquals(5, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", "", 16);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissingIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, charSequenceArray0.length);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(91, int0);
      
      String string3 = StringUtils.swapCase("");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      int int1 = StringUtils.countMatches(charSequenceArray0[2], 'W');
      assertFalse(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string4 = StringUtils.abbreviate("Aborting to protect against StackOverflowError - output of one loop is the input of another", "4]?^wm3H0R", 91);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string5 = StringUtils.chop("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anothe", string5);
      assertNotNull(string5);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      charArray0[4] = 'L';
      String string6 = StringUtils.join(charArray0, 'L', 2687, 16);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals(5, charArray0.length);
      assertEquals("", string6);
      assertArrayEquals(new char[] {'W', 'W', 'L', 'L', 'L'}, charArray0);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("Cnl\"vTd+/Zo%`a", 32, '!');
      assertEquals("!!!!!!!!!!!!!!!!!!Cnl\"vTd+/Zo%`a", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'E');
      assertEquals(0, int0);
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", 84, "Cnl\"vTd+/Zo%`a");
      assertFalse(string4.equals((Object)string1));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring("!!!!!!!!!!!!!!!!!Cnl\"vTd+/Zo%`a", (-143), 0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substring("' contains '", (-934), (-934));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("Cnl\"vTd+/Zo%`a"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean1 = arrayList0.add((String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.contains("Cnl\"vTd+/Zo%`a"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      boolean boolean2 = arrayList0.add("3P6n78w~Fl");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(arrayList0.contains("3P6n78w~Fl"));
      assertFalse(arrayList0.contains("Cnl\"vTd+/Zo%`a"));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      String string7 = StringUtils.join((List<?>) arrayList0, "3|s", 0, 1);
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(arrayList0.contains("3P6n78w~Fl"));
      assertFalse(arrayList0.contains("Cnl\"vTd+/Zo%`a"));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("wK!K4x", " vs ");
      assertEquals("wK!K4x", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("wK!K4x", supplier0);
      assertTrue(string2.equals((Object)string0));
      assertEquals("wK!K4x", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfBlank("kCQ /;d,jr%9B", "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("kCQ /;d,jr%9B", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter("}5BT+Mba_Izgk|Rr", "");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("}5BT+Mba_Izgk|Rr", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.uncapitalize("");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat("", 137);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '$';
      charArray0[1] = 'A';
      charArray0[2] = 'r';
      charArray0[3] = '1';
      charArray0[4] = '4';
      charArray0[5] = 'i';
      charArray0[6] = 't';
      charArray0[7] = 'D';
      int int0 = StringUtils.indexOfAny((CharSequence) "}5BT+Mba_Izgk|Rr", charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(15, int0);
      assertArrayEquals(new char[] {'$', 'A', 'r', '1', '4', 'i', 't', 'D'}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      int int1 = StringUtils.lastIndexOfAny("wK!K4x", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)11;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '&', 2088, 1840700153);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[19];
      charSequenceArray0[0] = (CharSequence) "Z`5&|_|\";li9F?F1k?";
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "Z`5&|_|\";li9F?F1k?", 16, 19);
      assertEquals(19, charSequenceArray0.length);
      assertEquals("Z`5&|_|\";li9F?F1k?Z`5&|_|\";li9F?F1k?", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "Z`5&|_|\";li9F?F1k?Z`5&|_|\";li9F?F1k?", 19);
      assertEquals(19, charSequenceArray0.length);
      assertEquals(19, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'G';
      charArray0[2] = 'd';
      charArray0[3] = '4';
      charArray0[4] = '!';
      charArray0[5] = 'l';
      charArray0[6] = 'T';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Z`5&|_|\";li9F?F1k?Z`5&|_|\";li9F?F1k?", charArray0);
      assertFalse(int1 == int0);
      assertEquals(7, charArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'>', 'G', 'd', '4', '!', 'l', 'T'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, '\u0010', 4, (int) '\u0010');
      assertEquals(17, charSequenceArray0.length);
      assertEquals("\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010", "\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010\u0010");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      String string0 = StringUtils.wrap("M-VU]FC", 'Q');
      assertEquals("QM-VU]FCQ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "QM-VU]FCQ", (CharSequence) "M-VU]FC");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("QM-VU]FCQ", "M-VU]FC");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "M-VU]FC", "M-VU]FC");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("u{G~Tn");
      assertFalse(string1.equals((Object)string0));
      assertEquals("u{G~T", string1);
      assertNotNull(string1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(string0));
      assertEquals(0, linkedList1.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertNotNull(list0);
      assertFalse(linkedList1.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string2 = StringUtils.join(list0, "M-VU]FC", 0, (-2416));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(linkedList1.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'Q';
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'Q';
      longArray0[3] = (long) 'Q';
      longArray0[4] = (long) 'Q';
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 'Q';
      String string3 = StringUtils.join(longArray0, '^', 0, 1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(7, longArray0.length);
      assertEquals("81", string3);
      assertArrayEquals(new long[] {81L, 0L, 81L, 81L, 81L, 0L, 81L}, longArray0);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Illegal range. Equal from and to will produce an empty range.", "@-Aa@92M}O[NJ.n*$*<");
      assertEquals("Illegal range. Equal from and to will produce an empty range", string0);
      assertNotNull(string0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "@-Aa@92M}O[NJ.n*$*<", 160, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(160) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7}xu9nh&];7pq/D";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("7}xu9nh&];7pq/D", stringArray0);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.abbreviate("a2[}z ]@)-@$N2LG4", "]", 9, 9);
      assertEquals("]-@$N2LG4", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("7}xu9nh&];7pq/D", "width is %d", "7}xu9nh&];7pq/D");
      assertFalse(string1.equals((Object)string0));
      assertEquals("7}xu9n9&];7pq/D", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "width is %d", 5, (-1861));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n", Integer.MAX_VALUE);
      assertEquals(0, int0);
      
      String string0 = StringUtils.swapCase("\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      String string0 = StringUtils.repeat("Minimum abbreviation width is %d", 4028);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("V'-}%I+RID{A", 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("V'-}%I+RID{A", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.containsOnly((CharSequence) "V'-}%I+RID{A", string0);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.remove("0MI3@x|Kbh", ']');
      assertEquals("0MI3@x|Kbh", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "0MI3@x|Kbh";
      charSequenceArray0[1] = (CharSequence) "0MI3@x|Kbh";
      charSequenceArray0[2] = (CharSequence) "0MI3@x|Kbh";
      charSequenceArray0[3] = (CharSequence) "0MI3@x|Kbh";
      charSequenceArray0[4] = (CharSequence) "0MI3@x|Kbh";
      String string1 = StringUtils.reverseDelimited("0MI3@x|Kbh", 'h');
      assertFalse(string1.equals((Object)string0));
      assertEquals("0MI3@x|Kb", string1);
      assertNotNull(string1);
      
      charSequenceArray0[5] = (CharSequence) "0MI3@x|Kb";
      charSequenceArray0[6] = (CharSequence) "0MI3@x|Kbh";
      charSequenceArray0[7] = (CharSequence) "0MI3@x|Kbh";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(8, charSequenceArray0.length);
      assertEquals("0MI3@x|Kbh", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "0MI3@x|Kbh", (CharSequence) "0MI3@x|Kbh", 5);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      String string0 = StringUtils.repeat("Minimum abbreviation width is %d", 4028);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("YR9BUsg\"=T1M2@|!", "YR9BUsg\"=T1M2@|!");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "[[[i(gRmXo";
      String string3 = StringUtils.leftPad("[[[i(gRmXo", (-5), 'J');
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("[[[i(gRmXo", string3);
      assertNotNull(string3);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 4028;
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) 4028;
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) 'J';
      longArray0[5] = (long) 'J';
      longArray0[6] = (long) 4028;
      longArray0[7] = (long) 4028;
      longArray0[8] = (long) 'J';
      int int0 = 2710;
      String string4 = StringUtils.join(longArray0, 'J', 2710, 5);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(9, longArray0.length);
      assertEquals("", string4);
      assertArrayEquals(new long[] {4028L, 74L, 4028L, 74L, 74L, 74L, 4028L, 4028L, 74L}, longArray0);
      assertNotNull(string4);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      // Undeclared exception!
      StringUtils.getFuzzyDistance("", string0, locale0);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("\n", 8192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      String string0 = StringUtils.reverse("}HP`NwR");
      assertEquals("RwN`PH}", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = ']';
      charArray0[4] = '';
      charArray0[6] = 'p';
      charArray0[7] = 'R';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "RwN`PH}", charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'', 'I', 'I', ']', '', '\u0000', 'p', 'R'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "M-+'GC", 755);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substring("Index: ", 56, (-429));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 36;
      String string1 = StringUtils.abbreviate("", 49, 36);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.leftPad("Qhzt~Pe/I?0", 1673, "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char char0 = ':';
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) string2, (CharSequence) "M-+'GC");
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("4-LJ',(+qc2^s<.V4", "q");
      assertEquals("c2^s<.V4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.wrap(stringArray0[0], 'm');
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", "\r");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 36, 441);
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad(" ", 8192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.chomp(" ");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      StringUtils.repeat(" ", 8192);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      String string0 = StringUtils.repeat("}HP`Nw'R", "}HP`Nw'R", 2800);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.replaceChars(string0, string0, "F,yh");
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      String string0 = "Object varargs must not be null";
      String string1 = StringUtils.trimToNull("Object varargs must not be null");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("Object varargs must not be null"));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, 'Z', 53, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(53) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7THeout for vintagG @Test must be positive.";
      stringArray0[1] = "7THeout for vintagG @Test must be positive.";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("7THeout for vintagG @Test must be positive.", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 220.0;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'c', 567, 2147483645);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      String string0 = StringUtils.join(locale_CategoryArray0);
      assertEquals(3, locale_CategoryArray0.length);
      assertEquals("FORMAT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("FORMAT", "FORMAT");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      int int0 = Integer.MAX_VALUE;
      String string2 = StringUtils.repeat("", Integer.MAX_VALUE);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char char0 = '-';
      int int1 = 83;
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) locale_CategoryArray0, '-', 83, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[7] = (double) 'Y';
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "", 98, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-372);
      intArray0[1] = 1;
      intArray0[2] = 41;
      intArray0[3] = (-136);
      intArray0[0] = 41;
      intArray0[5] = (-875);
      String string0 = StringUtils.repeat(" must return `CartesianProductTest.Sets`", 8192);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) string0);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.toRootLowerCase("The String must not be empty");
      assertEquals("the string must not be empty", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing(" ", "the string must not be empty", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("the string must not be empty ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The String must not be empty", 98);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((byte[]) null, '3');
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) " ";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) " ";
      charSequenceArray0[7] = (CharSequence) " ";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-3858);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '3', (-1610612734), (-3858));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-354);
      intArray0[1] = 1;
      intArray0[2] = 41;
      intArray0[3] = (-136);
      intArray0[4] = 41;
      intArray0[5] = (-875);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '#', 0, 47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Object varargs must not be null", 31);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "Object varargs must not be null";
      boolean boolean0 = StringUtils.equalsAny("Object varargs must not be null", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '&', 0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = 8192;
      String string1 = StringUtils.leftPad(" ", 8192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      stringArray0[4] = " ";
      stringArray0[5] = " ";
      // Undeclared exception!
      StringUtils.stripAll(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("7", "7", "7");
      assertEquals("7", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("7");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfter("7", "7");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "7", 55);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "OZK3*,6z&mV&=}z-tAQ", (-2335), (-2335));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("OZK3*,6z&mV&=}z-tAQ", "Yg<1nh~X#");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int1 == int0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1601.09757415);
      doubleArray0[1] = (double) (-2335);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2335);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-2335);
      String string0 = StringUtils.join(doubleArray0, '~', 13, (-1));
      assertEquals(7, doubleArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new double[] {(-1601.09757415), (-2335.0), (-1.0), (-1.0), (-2335.0), (-1.0), (-2335.0)}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      int int2 = StringUtils.indexOf((CharSequence) "OZK3*,6z&mV&=}z-tAQ", 42, (-1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, int2);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "Yg<1nh~X#", (CharSequence) "");
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      String string0 = StringUtils.wrap("uZl:?", "uZl:?");
      assertEquals("uZl:?uZl:?uZl:?", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("uZl:?uZl:?uZl:?");
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultString("(#4|");
      assertFalse(string1.equals((Object)string0));
      assertEquals("(#4|", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("(#4|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(g*E(`C%...";
      stringArray0[1] = null;
      stringArray0[2] = "uZl:?uZl:?uZl:?";
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(3, stringArray0.length);
      assertEquals("(g*E(`C%...", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((int[]) null, ')', (-1056), (-1056));
      assertNull(string4);
      
      String string5 = StringUtils.stripToEmpty("");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "uZl:?uZl:?uZl:?");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("uZl:?uZl:?uZl:?");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.stripEnd("(g*E(`C%...", string2);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("(g*E(`C%...", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.mid("(#4|", (-1056), 4);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("(#4|", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      String string0 = StringUtils.chomp("n");
      assertEquals("n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("n");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 13;
      longArray0[2] = (long) 13;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 13;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'K', 13, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd(" ", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add("{");
      assertTrue(boolean0);
      assertTrue(stack0.contains("{"));
      assertEquals(10, stack0.capacity());
      assertEquals("[{]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      
      boolean boolean1 = stack0.add("{");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(stack0.contains("{"));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[{, {]", stack0.toString());
      assertEquals(2, stack0.size());
      
      stack0.setSize(1536);
      assertTrue(stack0.contains("{"));
      assertEquals(1536, stack0.size());
      assertEquals(1536, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(stack0.contains("{"));
      assertEquals(1536, stack0.size());
      assertEquals(1536, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, (String) null);
      assertEquals("{{", string0);
      assertNotNull(string0);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("{"));
      assertEquals(1536, stack0.size());
      assertEquals(1536, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      
      String string1 = StringUtils.chomp("{{");
      assertTrue(string1.equals((Object)string0));
      assertEquals("{{", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      String string0 = StringUtils.center("", 1, "");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]", 101);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]Method ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 3531);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) " ", (CharSequence) " ");
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(" ", charSequence0);
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) " ";
      charSequenceArray0[4] = (CharSequence) " ";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase(" ", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfterLast(" ", " ");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.valueOf(charArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("o)");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("o)", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[4], charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Search and Replace array lengths don't match: ", "C#uFsO@", 127, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 15
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      String string0 = "0<0<0";
      String string1 = StringUtils.substringBeforeLast("0<0<0", "Array element ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("0<0<0", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "0<0<0", (CharSequence) "0<0<0");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Array element ");
      assertTrue(boolean0);
      
      int int1 = StringUtils.countMatches((CharSequence) "0<0<0", (CharSequence) "0<0<0");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      char char0 = '=';
      // Undeclared exception!
      StringUtils.join(floatArray0, '=', (-93784936), (-1));
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("p", "p", "p");
      assertEquals("p", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("p");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "p", "p");
      assertEquals(0, int0);
      
      String string1 = StringUtils.toRootLowerCase("Strings must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("strings must not be null", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'I';
      charArray0[2] = 'B';
      charArray0[3] = 'v';
      charArray0[4] = '?';
      charArray0[5] = 'X';
      charArray0[6] = '#';
      charArray0[7] = ']';
      charArray0[8] = 'M';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "p", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'c', 'I', 'B', 'v', '?', 'X', '#', ']', 'M'}, charArray0);
      
      String string2 = StringUtils.abbreviate("Locale must not be null", "@C|:g-&Luf=UA3Fj>", 48, 53);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 48;
      doubleArray0[1] = (double) '?';
      doubleArray0[2] = (double) 'B';
      doubleArray0[3] = (double) 'B';
      doubleArray0[4] = (double) 'B';
      doubleArray0[5] = (double) 'c';
      doubleArray0[6] = (double) 'M';
      doubleArray0[7] = (double) 'c';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'Y', 0, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "7Tmeout for vintage @Test must be positive.", "Kk$D");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("7Tmeout for vintage @Test must be positive.");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("k*/0#4", "k*/0#4", "Kk$D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      String string0 = StringUtils.repeat("Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }", 1128);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.normalizeSpace(string0);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "!", (CharSequence[]) stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWithAny("!", stringArray0);
      assertEquals(188, stringArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "!", (CharSequence) "!", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = 'b';
      charArray0[2] = 'X';
      charArray0[3] = '2';
      charArray0[4] = ' ';
      charArray0[5] = '!';
      charArray0[6] = 'g';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "!", charArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'V', 'b', 'X', '2', ' ', '!', 'g'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      String string0 = StringUtils.repeat("u@#<WEX(D", 1288);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0, 101);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("'Hly:K5oLuNAb4@d", "g\"7)yU0Qs[", 12);
      assertEquals("'g\"7)yU0Qs[d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("'Hly:K5oLuNAb4@d");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "'g\"7)yU0Qs[d", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = StringUtils.join(charArray0, 'G', 31, 12);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      String string0 = StringUtils.chomp("^UWvG&oBVUP-S&,W5");
      assertEquals("^UWvG&oBVUP-S&,W5", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("HZ-/", 'W');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("r\".r7O,-H\";di7T4#<<", 'L');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Lr\".r7O,-H\";di7T4#<<L", string1);
      assertNotNull(string1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("r\".r7O,-H\";di7T4#<<"));
      assertEquals(0, linkedList0.size());
      
      linkedList0.sort((Comparator<? super String>) null);
      assertFalse(linkedList0.contains("r\".r7O,-H\";di7T4#<<"));
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(linkedList0.contains("r\".r7O,-H\";di7T4#<<"));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      int int0 = StringUtils.ordinalIndexOf("^UWvG&oBVUP-S&,W5", "M-VUFC", 3240);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rightPad("", 8192, '$');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("M-VUFC", "Lr\".r7O,-H\";di7T4#<<L");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("M-VUFC", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat((String) null, "X", 1025);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      String string0 = StringUtils.rotate("hDo0BE%{8BoVd`mli", (-1567));
      assertEquals("0BE%{8BoVd`mlihDo", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Do0BE%{8BoVd`mlih", "hDo0BE%{8BoVd`mli");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      String string0 = StringUtils.unwrap("RThreshold must not be negative", 'R');
      assertEquals("RThreshold must not be negative", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "RThreshold must not be negative", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(", Length: ", ' ');
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) ", Length: ", 32);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      String[] stringArray0 = StringUtils.substringsBetween("org.junitpioneer.jupiter.SystemPropertyExtension", "r", "r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumeric("7Timeout for vintage @Test must be positive.");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "7Timeout for vintage @Test must be positive.", "Cloneable type ");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.upperCase("7Timeout for vintage @Test must be positive.", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      
      String string0 = StringUtils.unwrap("Y #&c_lf@p)\"'j", '\u0087');
      assertEquals("Y #&c_lf@p)\"'j", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("Y #&c_lf@p)\"'j", ':');
      assertTrue(string1.equals((Object)string0));
      assertEquals("Y #&c_lf@p)\"'j", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Y #&c_lf@p)\"'j");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string2 = StringUtils.swapCase("\n");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Y #&c_lf@p)\"'j", "\n", 2, 2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Y\n", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("Y #&c_lf@p)\"'j", "Y #&c_lf@p)\"'j");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("Y #&c_lf@p)\"'j", string4);
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("Y #&c_lf@p)\"'j", " ");
      assertEquals(0.69, double0, 0.01);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) "Y #&c_lf@p)\"'j");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = '7';
      charArray0[2] = ')';
      charArray0[3] = 'e';
      charArray0[4] = 'X';
      charArray0[5] = 'T';
      charArray0[6] = '[';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "7", charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'}', '7', ')', 'e', 'X', 'T', '['}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "7", 3921);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      String string0 = StringUtils.center("{", 1, "{");
      assertEquals("{", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverse("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]");
      assertFalse(string1.equals((Object)string0));
      assertEquals("]d%[ tog tub ,stes retemarap ]d%[ detcepxE .ecno yltcaxe retemarap hcae rof seulav retsiger tsum `s%` dohteM", string1);
      assertNotNull(string1);
      
      char char0 = '5';
      String string2 = StringUtils.wrap("{", '5');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("5{5", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]";
      stringArray0[1] = "1JYBvt2RUSqVkeaP?";
      stringArray0[2] = "{";
      stringArray0[3] = "]d%[ tog tub ,stes retemarap ]d%[ detcepxE .ecno yltcaxe retemarap hcae rof seulav retsiger tsum `s%` dohteM";
      stringArray0[4] = "Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]";
      stringArray0[5] = "{";
      stringArray0[6] = "{";
      String string3 = StringUtils.replaceEach("5{5", stringArray0, stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(7, stringArray0.length);
      assertEquals("5{5", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.abbreviate((String) null, "Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]", 7, 1);
      assertNull(string4);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 7;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) '5';
      longArray0[4] = 1L;
      longArray0[5] = (long) 7;
      longArray0[6] = (long) '5';
      longArray0[7] = 2567L;
      longArray0[8] = (long) 1;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '0', (-14482067), (-729));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -14482067
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" ", "org.apache.commons.lang3.StringUtils");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Ay -]YG", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      String string0 = StringUtils.chomp(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n");
      assertEquals(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      String string0 = StringUtils.abbreviate("+pe1PEXB|", "+pe1PEXB|", 1969, 1969);
      assertEquals("+pe1PEXB|", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("K6s&'m,.P-/gL");
      assertFalse(string1.equals((Object)string0));
      assertEquals("K6s&'m,.P-/gL", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("+pe1PEXB|", "K6s&'m,.P-/gL");
      assertEquals(0.4, double0, 0.01);
      
      String string2 = StringUtils.wrapIfMissing("'7=/qH", " ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" '7=/qH ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase("+pe1PEXB|", "'7=/qH", true);
      assertEquals(4, int0);
      
      String string3 = StringUtils.chomp("+pe1PEXB|");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("+pe1PEXB|", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " '7=/qH ";
      String[] stringArray0 = StringUtils.substringsBetween("Object varargs must not be null", " ", "hzG@bWb0LR");
      assertNull(stringArray0);
      
      String string4 = StringUtils.trimToNull(" ");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      String string0 = StringUtils.trimToNull(")?oC(P=XVrKnD) ");
      assertEquals(")?oC(P=XVrKnD)", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(")?oC(P=XVrKnD) ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ")?oC(P=XVrKnD)", (CharSequence) ")?oC(P=XVrKnD) ");
      assertEquals(1, int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = ")?oC(P=XVrKnD)";
      stringArray0[1] = ")?oC(P=XVrKnD)";
      stringArray0[2] = ")?oC(P=XVrKnD)";
      stringArray0[3] = ")?oC(P=XVrKnD) ";
      stringArray0[4] = ")?oC(P=XVrKnD)";
      stringArray0[5] = ")?oC(P=XVrKnD) ";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertEquals(")?oC(P=XVrKnD)", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("`^b&<WRIR]81", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("`^b&<WRIR]81", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) ")?oC(P=XVrKnD) ", (CharSequence) "`^b&<WRIR]81");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.normalizeSpace(" r$");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("r$", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring((String) null, 0, 1);
      assertNull(string4);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(1));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      boolean boolean1 = arrayDeque0.add("r$");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayDeque0.contains("r$"));
      assertFalse(arrayDeque0.contains(1));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertTrue(arrayDeque0.contains("r$"));
      assertFalse(arrayDeque0.contains(1));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      String string5 = StringUtils.join(iterator0, ")?oC(P=XVrKnD)");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("r$", string5);
      assertNotNull(string5);
      assertTrue(arrayDeque0.contains("r$"));
      assertFalse(arrayDeque0.contains(1));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      int int2 = StringUtils.indexOfDifference((CharSequence) ")?oC(P=XVrKnD)", (CharSequence) ")?oC(P=XVrKnD) ");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(14, int2);
      
      String string6 = StringUtils.substringBeforeLast("n9w", "`^b&<WRIR]81");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("n9w", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)9;
      try { 
        StringUtils.toString(byteArray0, "e6.!dC2/k}:dm");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      String string0 = StringUtils.chomp("Y");
      assertEquals("Y", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate(")&t6", 32);
      assertFalse(string1.equals((Object)string0));
      assertEquals(")&t6", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'T');
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.CharUtils", "Y", 108);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.countMatches((CharSequence) "org.apache.commons.lang3.CharUtils", 'T');
      assertEquals(0, int0);
      
      String string2 = StringUtils.abbreviate("...", "", 108, 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase(")&t6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      String string0 = StringUtils.chop(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^ZNml -\n");
      assertEquals(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^ZNml -", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      int int0 = 4;
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '\'', 4, (int) '\'');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      String string0 = StringUtils.stripAccents("!");
      assertEquals("!", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("!", 5);
      assertTrue(string1.equals((Object)string0));
      assertEquals("!", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.equalsAny("!", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.difference("!", "!");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("", '\\');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replace("i_;$n:9tI'yEF9'|c4", "!", "v)U=.bb0MGI{IpV@0;", 5);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("i_;$n:9tI'yEF9'|c4", string3);
      assertNotNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints("i_;$n:9tI'yEF9'|c4");
      assertEquals(19, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("&E3[yiZ&!bCy I<g{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "x#GdXx[``r-%aM", "x#GdXx[``r-%aM");
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)32;
      String string1 = StringUtils.join(byteArray0, 'M', (int) (byte)5, 6);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, byteArray0.length);
      assertEquals("-5", string1);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-10), (byte) (-109), (byte)5, (byte)15, (byte) (-5), (byte)32}, byteArray0);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "[AH]w0K", (int) (byte) (-10), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad(" ", 8192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.chomp(" ");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      StringUtils.repeat(" ", 4841);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      String string0 = "Y";
      String string1 = StringUtils.chomp("Y");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Y", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("Y");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Y", (CharSequence) "Y");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = "Z`5&|_|\";li9F?F1k?";
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[0] = (CharSequence) "Z`5&|_|\";li9F?F1k?";
      charSequenceArray0[1] = (CharSequence) "Y";
      int int0 = 0;
      int int1 = 16;
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "Z`5&|_|\";li9F?F1k?", 16, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("YS'rlP'$3wxyR_a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringBeforeLast("YS'rlP'$3wxyR_a", "YS'rlP'$3wxyR_a");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("Don't clear/set the same entry more than once.:", "YS'rlP'$3wxyR_a", 65);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 65);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.leftPad("", (-2473));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 36, (-2645));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.defaultIfBlank("", (String) null);
      assertNull(string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.join(objectArray0, '-', 36, 2);
      assertEquals(0, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceFirst(" must return `CartesianProductTest.Sets`", "org.junitpioneer.jupiter.params.LongRange", "\"Lf!");
      assertFalse(string3.equals((Object)string2));
      assertEquals(" must return `CartesianProductTest.Sets`", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.substring("PtLq*CNaCF`VSK", 2558);
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-1), 10);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.chop("\"Lf!");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("\"Lf", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBetween("org.junitpioneer.jupiter.SystemPropertyExtension", "", "");
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2645);
      intArray0[1] = (int) '-';
      intArray0[2] = 10;
      intArray0[3] = (int) '-';
      intArray0[4] = 2;
      intArray0[5] = (-2645);
      intArray0[6] = 2558;
      String string7 = StringUtils.join(intArray0, 'i', 2274, 2274);
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals(7, intArray0.length);
      assertEquals("", string7);
      assertArrayEquals(new int[] {(-2645), 45, 10, 45, 2, (-2645), 2558}, intArray0);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Never disable parameterized test method itself", "Never disable parameterized test method itself", "! ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad(" ", 8174);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("9Td'gTc)o<6a-");
      assertEquals("9td'gtc)o<6a-", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("9Td'gTc)o<6a-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("9Td'gTc)o<6a-", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("+V3`", "9Td'gTc)o<6a-", "9td'gtc)o<6a-");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("+V3`", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("9Td'gTc)o<6a-");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("9Td'gTc)o<6a-", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.capitalize("Minimum abbreviation width is %d");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %d", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 2, 4);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '~';
      charArray0[2] = '@';
      String string5 = StringUtils.join(charArray0, '@', 7, (-1634));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(3, charArray0.length);
      assertEquals("", string5);
      assertArrayEquals(new char[] {'0', '~', '@'}, charArray0);
      assertNotNull(string5);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(2, enumSet0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(2, enumSet0.size());
      
      String string6 = StringUtils.join(iterator0, '{');
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals("AUTOSELECT_FILTERING{IGNORE_EXTENDED_RANGES", string6);
      assertNotNull(string6);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(2, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("%H1>ah#+TeoC=g^ZU@", supplier0);
      assertEquals("%H1>ah#+TeoC=g^ZU@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("%H1>ah#+TeoC=g^ZU@");
      assertFalse(string1.equals((Object)string0));
      assertEquals("%H1>AH#+TEOC=G^ZU@", string1);
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("%H1>AH#+TEOC=G^ZU@");
      assertEquals(18, intArray0.length);
      assertNotNull(intArray0);
      
      String string2 = StringUtils.replaceIgnoreCase("%H1>AH#+TEOC=G^ZU@", "%H1>AH#+TEOC=G^ZU@", "%H1>ah#+TeoC=g^ZU@");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("%H1>ah#+TeoC=g^ZU@", string2);
      assertNotNull(string2);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      
      String string3 = StringUtils.join(iterator0, 'c');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("REJECT_EXTENDED_RANGES", string3);
      assertNotNull(string3);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      
      String string4 = StringUtils.stripStart((String) null, "%H1>AH#+TEOC=G^ZU@");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '~';
      floatArray0[1] = (float) '~';
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) '~';
      floatArray0[4] = (float) '~';
      floatArray0[5] = (float) '~';
      floatArray0[6] = (float) '~';
      floatArray0[7] = (float) '~';
      String string0 = StringUtils.join(floatArray0, '~');
      assertEquals(8, floatArray0.length);
      assertEquals("126.0~126.0~0.0~126.0~126.0~126.0~126.0~126.0", string0);
      assertArrayEquals(new float[] {126.0F, 126.0F, 0.0F, 126.0F, 126.0F, 126.0F, 126.0F, 126.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast((String) null, "");
      assertNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("126.0~126.0~0.0~126.0~126.0~126.0~126.0~126.0", "126.0~126.0~0.0~126.0~126.0~126.0~126.0~126.0", (-128));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.repeat("YC%V#.sbj.^x", " vs Y", (-1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.leftPad("%9WNQ", 0, "%9WNQ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("%9WNQ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("", (-1), "J7t)I@UFKkJNrX");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      String string0 = "#VI.uCG;wo\\I6";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#VI.uCG;woI6", "{4'LV");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.abbreviate("Expected exactly one annotation to provide an ArgumentSource, found %d.", (String) null, (-9));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'G';
      charArray0[2] = '+';
      charArray0[3] = 'd';
      charArray0[4] = 'Z';
      int int0 = StringUtils.indexOfAny((CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.", charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'x', 'G', '+', 'd', 'Z'}, charArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Expected exactly one annotation to provide an ArgumentSource, found %d.", 322, (-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{";
      String string0 = StringUtils.chomp("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{");
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", "e*|\"NkTx]LRN8|&r$j");
      assertFalse(string1.equals((Object)string0));
      assertEquals("e*|\"NkTx]LRN8|&r$j", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap(")R", 'e');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("e)Re", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("Search and Replace array lengths don't match: ", "lQol<3~/j");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("lQol<3~/j", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("H");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("H", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 16, "e*|\"NkTx]LRN8|&r$j");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("&E3OyiZ&9bCy I<g{", "Locale must not be null");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Locale must not be null&E3OyiZ&9bCy I<g{Locale must not be null", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isEmpty(")R");
      assertFalse(boolean0);
      
      String string7 = StringUtils.wrapIfMissing("e)Re", 'e');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals("e)Re", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      String string0 = StringUtils.substringAfter("I>pd9U-zCfgq7", 100);
      assertEquals("9U-zCfgq7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "Fml9qn5b9=%Va&bJ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfter("Fml9qn5b9=%Va&bJ", 41);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Fml9qn5b9=%Va&bJ";
      objectArray0[1] = (Object) "' matches '";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[4] = object2;
      String string1 = StringUtils.join(objectArray0, (String) null, 99, (-407));
      assertEquals(5, objectArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(object1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string2 = StringUtils.join((List<?>) arrayList0, '@', 99, 9);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(arrayList0.contains(9));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 2846);
      assertEquals(0, int0);
      
      String string3 = StringUtils.abbreviate(")R2>X93iI(~<Gh", 2846, 40);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(")R2>X93iI(~<Gh", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string4.equals((Object)string3));
      assertEquals(0, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string0 = StringUtils.unwrap("Y #4c_lfPp)\"'j", '\u0087');
      assertEquals("Y #4c_lfPp)\"'j", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("Y #4c_lfPp)\"'j", ':');
      assertTrue(string1.equals((Object)string0));
      assertEquals("Y #4c_lfPp)\"'j", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Y #4c_lfPp)\"'j";
      charSequenceArray0[1] = (CharSequence) "Y #4c_lfPp)\"'j";
      charSequenceArray0[2] = (CharSequence) "Y #4c_lfPp)\"'j";
      charSequenceArray0[3] = (CharSequence) "Y #4c_lfPp)\"'j";
      charSequenceArray0[4] = (CharSequence) "Y #4c_lfPp)\"'j";
      charSequenceArray0[5] = (CharSequence) "Y #4c_lfPp)\"'j";
      charSequenceArray0[6] = (CharSequence) "Y #4c_lfPp)\"'j";
      boolean boolean0 = StringUtils.endsWithAny("Y #4c_lfPp)\"'j", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(20);
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(20, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(20, byteBuffer0.limit());
      assertEquals(20, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=20 cap=20]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      
      ByteBuffer byteBuffer1 = byteBuffer0.putLong(0L);
      assertSame(byteBuffer0, byteBuffer1);
      assertSame(byteBuffer1, byteBuffer0);
      assertNotNull(byteBuffer1);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=20 cap=20]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(20, byteBuffer0.limit());
      assertEquals(20, byteBuffer0.capacity());
      assertEquals(12, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(8, byteBuffer1.position());
      assertEquals(20, byteBuffer1.capacity());
      assertTrue(byteBuffer1.hasArray());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(20, byteBuffer1.limit());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=20 cap=20]", byteBuffer1.toString());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(12, byteBuffer1.remaining());
      assertFalse(byteBuffer1.isReadOnly());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertSame(byteBuffer0, byteBuffer1);
      assertNotNull(charBuffer0);
      assertEquals(12, charBuffer0.capacity());
      assertEquals(12, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(12, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(12, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(20, byteBuffer0.limit());
      assertEquals(20, byteBuffer0.position());
      assertEquals(20, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=20 lim=20 cap=20]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0[6], charSequenceArray0[2]);
      assertTrue(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.removeStart("Y #4c_lfPp)\"'j", " has no clone method");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Y #4c_lfPp)\"'j", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "9Td'gTc)o<6a-", (CharSequence) "9Td'gTc)o<6a-");
      assertTrue(boolean0);
      
      String string0 = StringUtils.removeStartIgnoreCase("Threshold must not be negative", "9Td'gTc)o<6a-");
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isWhitespace("9Td'gTc)o<6a-");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      int int0 = StringUtils.indexOfAny((CharSequence) "Threshold must not be negative", charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'o'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      String string0 = StringUtils.wrap("}'|9TsBG@pc9inimu", 'W');
      assertEquals("W}'|9TsBG@pc9inimuW", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("W}'|9TsBG@pc9inimuW", 117);
      assertFalse(string1.equals((Object)string0));
      assertEquals("W", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("*Pj@a.p", 42);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("*Pj@a.p", (-2192), (-3625));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "*Pj@a.p";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "*Pj@a.p";
      objectArray0[3] = (Object) "Pj@a.p";
      objectArray0[4] = (Object) "*Pj@a.p";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "Pj@a.p";
      String string2 = StringUtils.joinWith("", objectArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(7, objectArray0.length);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "*Pj@a.p", (CharSequence) "*Pj@a.p", 8);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Pj@a.p";
      charSequenceArray0[1] = (CharSequence) "";
      String string3 = StringUtils.substringBetween("*Pj@a.p", "Pj@a.p");
      assertNull(string3);
      
      charSequenceArray0[2] = (CharSequence) null;
      int int1 = StringUtils.indexOfAny((CharSequence) "Pj@a.p", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = '+';
      charArray0[2] = 'o';
      charArray0[3] = 'E';
      charArray0[4] = 'j';
      charArray0[5] = 'E';
      String string4 = StringUtils.join(charArray0, 'E', 5, (-1456));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(6, charArray0.length);
      assertEquals("", string4);
      assertArrayEquals(new char[] {'n', '+', 'o', 'E', 'j', 'E'}, charArray0);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      boolean boolean0 = linkedList0.add("Minimum abbreviation width is %dW/F)`S^H>WZX\"DW@Gj");
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("Minimum abbreviation width is %dW/F)`S^H>WZX\"DW@Gj"));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add("org.junitpioneer.jupiter.params.DisableIfNameExtension");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains("org.junitpioneer.jupiter.params.DisableIfNameExtension"));
      assertEquals(2, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, ';');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("'.", '\'');
      assertEquals("'.'", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "/hSr(B0Y2y";
      charSequenceArray0[2] = (CharSequence) "/hSr(B0Y2y";
      charSequenceArray0[3] = null;
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      charSequenceArray0[4] = (CharSequence) "\r";
      charSequenceArray0[5] = null;
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("/hSr(B0Y2y", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat("\r", "", 15);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("/hSr(B0Y2y");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("/hsr(b0y2y", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "org.junitpioneer.jupiter.params.Range", (char[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Gr|1ri|g", "AT3|Op}NI0aT,h-', '", 15, (-303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 21
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.prependIfMissing("I>pd9U-zCffgq7", "Threshold must not be negative", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("Threshold must not be negativeI>pd9U-zCffgq7", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "I>pd9U-zCffgq7", (CharSequence) "Threshold must not be negativeI>pd9U-zCffgq7");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.repeat("I>pd9U-zCffgq7", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "eU";
      stringArray0[4] = "Kk$D";
      stringArray0[6] = "Kk$D";
      boolean boolean0 = StringUtils.isWhitespace("C*`9dSu)");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'Y';
      charArray0[2] = 'F';
      charArray0[3] = '}';
      charArray0[4] = 'K';
      int int0 = StringUtils.indexOfAny((CharSequence) "Kk$D", charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'(', 'Y', 'F', '}', 'K'}, charArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "eU", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'(', 'Y', 'F', '}', 'K'}, charArray0);
      
      String string0 = StringUtils.right("7)&", 11);
      assertEquals("7)&", string0);
      assertNotNull(string0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "7)&", charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, charArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'(', 'Y', 'F', '}', 'K'}, charArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'F';
      floatArray0[1] = (float) '(';
      floatArray0[2] = (float) 11;
      floatArray0[3] = (float) 11;
      String string1 = StringUtils.join(floatArray0, '\\', 60, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, floatArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new float[] {70.0F, 40.0F, 11.0F, 11.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("J%MOHLI8tQze'[6P0[", "hZ2", 5);
      assertEquals("J%hZ2", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "hZ2", (CharSequence) "hZ2", 5);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.mid("Pq|0w6Ko]w", 5, (-1285));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle(" vs \r", "Minimum abbreviation width is %d", 5);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" vs \r", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "7Hly:_K5oLuNAb4@@d", (CharSequence) "Pq|0w6Ko]w", 5);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase(" vs \r", "g\"7)yU0Qs[", (CharSequence[]) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" vs \rg\"7)yU0Qs[", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isEmpty("7Hly:_K5oLuNAb4@@d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
      
      String string1 = StringUtils.unwrap((String) null, 'j');
      assertNull(string1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      // Undeclared exception!
      StringUtils.leftPad("", 32767, 'd');
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
          String string0 = StringUtils.trimToNull("%H1>ah#+TeoC=g^ZU@");
          assertEquals("%H1>ah#+TeoC=g^ZU@", string0);
          assertNotNull(string0);
          
          boolean boolean0 = StringUtils.isNumericSpace("%H1>ah#+TeoC=g^ZU@");
          assertFalse(boolean0);
          
          Locale locale0 = Locale.ENGLISH;
          assertNotNull(locale0);
          assertEquals("", locale0.getISO3Country());
          assertEquals("", locale0.getCountry());
          assertEquals("en", locale0.toString());
          assertEquals("eng", locale0.getISO3Language());
          assertEquals("", locale0.getVariant());
          assertEquals("en", locale0.getLanguage());
          
          String string1 = StringUtils.removePattern("%H1>ah#+TeoC=g^ZU@", "%H1>ah#+TeoC=g^ZU@");
          assertTrue(string1.equals((Object)string0));
          assertEquals("%H1>ah#+TeoC=g^ZU@", string1);
          assertNotNull(string1);
          
          String string2 = StringUtils.wrap("%H1>ah#+TeoC=g^ZU@", '9');
          assertFalse(string2.equals((Object)string1));
          assertFalse(string2.equals((Object)string0));
          assertNotNull(string2);
          
          String[] stringArray0 = StringUtils.splitByWholeSeparator("Could not resolve parameter of type %s.", "9%H1>ah#+TeoC=g^ZU@9");
          assertEquals(1, stringArray0.length);
          assertNotNull(stringArray0);
          
          String string3 = StringUtils.join((float[]) null, 'j', 32767, 3319);
          assertNull(string3);
          
          String string4 = StringUtils.wrapIfMissing("org.apache.commons.lang3.RegExUtils", "7");
          assertFalse(string4.equals((Object)string0));
          assertFalse(string4.equals((Object)string2));
          assertFalse(string4.equals((Object)string1));
          assertEquals("7org.apache.commons.lang3.RegExUtils7", string4);
          assertNotNull(string4);
          
          // Undeclared exception!
          StringUtils.leftPad("7", 32767, 'Q');
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace(";@%\"K*\">7?_/SsJ/");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 49;
      longArray0[1] = (long) 49;
      longArray0[2] = (long) 0;
      String string0 = StringUtils.join(longArray0, 'H', 11, (-915));
      assertEquals(3, longArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new long[] {49L, 49L, 0L}, longArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty(";@%\"K*\">7?_/SsJ/");
      assertFalse(string1.equals((Object)string0));
      assertEquals(";@%\"K*\">7?_/SsJ/", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ";@%\"K*\">7?_/SsJ/", (CharSequence) "F~3<+sX+", 16);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getDigits("");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isNumericSpace("F~3<+sX+");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[0];
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "F~3<+sX+", charArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean3);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      String string0 = "r=UC\"-/d|";
      int int0 = 3;
      String string1 = StringUtils.repeat("Y:r&VZ", "r=UC\"-/d|", 3);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y:r&VZr=UC\"-/d|Y:r&VZr=UC\"-/d|Y:r&VZ", string1);
      assertNotNull(string1);
      
      int int1 = (-1025);
      String string2 = StringUtils.leftPad("Y:r&VZr=UC\"-/d|Y:r&VZr=UC\"-/d|Y:r&VZ", (-1025));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Y:r&VZr=UC\"-/d|Y:r&VZr=UC\"-/d|Y:r&VZ", string2);
      assertNotNull(string2);
      
      int int2 = 0;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Y:r&VZr=UC\"-/d|Y:r&VZr=UC\"-/d|Y:r&VZ";
      objectArray0[2] = (Object) "Y:r&VZ";
      objectArray0[3] = (Object) "r=UC\"-/d|";
      objectArray0[4] = (Object) "Y:r&VZr=UC\"-/d|Y:r&VZr=UC\"-/d|Y:r&VZ";
      objectArray0[5] = (Object) "Y:r&VZ";
      objectArray0[6] = (Object) "Y:r&VZr=UC\"-/d|Y:r&VZr=UC\"-/d|Y:r&VZ";
      objectArray0[7] = (Object) "Y:r&VZr=UC\"-/d|Y:r&VZr=UC\"-/d|Y:r&VZ";
      objectArray0[8] = (Object) "Y:r&VZr=UC\"-/d|Y:r&VZr=UC\"-/d|Y:r&VZ";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "org.junitpioneer.jupiter.RetryingTestExtension", 0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)35;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)1254;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)1;
      String string0 = StringUtils.join(shortArray0, '|');
      assertEquals(7, shortArray0.length);
      assertEquals("1|35|-1|1254|2|1|1", string0);
      assertArrayEquals(new short[] {(short)1, (short)35, (short) (-1), (short)1254, (short)2, (short)1, (short)1}, shortArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "uU5X^a/T-uS!");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat("[x}#S!tx+\"$}ab~$j", (int) (short)1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[x}#S!tx+\"$}ab~$j", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("", "", "[x}#S!tx+\"$}ab~$j");
      assertNull(string2);
      
      byte[] byteArray0 = StringUtils.getBytes("uU5X^a/T-uS!", (Charset) null);
      assertEquals(12, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string3 = StringUtils.replaceOnce((String) null, "org.junitpioneer.jupiter.params.LongRange", "[x}#S!tx+\"$}ab~$j");
      assertNull(string3);
      
      int int0 = StringUtils.lastOrdinalIndexOf("1|35|-1|1254|2|1|1", (CharSequence) null, (-1842));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.trimToEmpty((String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace("-h U,yy(QsM][O<PIpJ");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("-h U,yy(QsM][O<PIpJ", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAllUpperCase(".*{[0-9]+}.*");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsWhitespace("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("n");
      assertEquals("n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("n", 1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("n", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", "\n");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '^');
      assertNull(string0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains('^'));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = '^';
      charArray0[3] = 't';
      String string1 = StringUtils.join(charArray0, '6');
      assertEquals(4, charArray0.length);
      assertEquals("G6G6^6t", string1);
      assertArrayEquals(new char[] {'G', 'G', '^', 't'}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("G6G6^6t", 29);
      assertFalse(string2.equals((Object)string1));
      assertEquals("G6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6t", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("G6G6^6t", "G6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6t", "S'e~c&C xug>BPLW");
      assertNull(string3);
      
      int int0 = StringUtils.length("G6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6tG6G6^6t");
      assertEquals(203, int0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (Charset) null);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.trimToEmpty("SEpH^mkq_alK");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("SEpH^mkq_alK", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace((String) null);
      assertNull(string5);
      
      boolean boolean0 = StringUtils.isAllUpperCase("G6G6^6t");
      assertFalse(boolean0);
      
      String string6 = StringUtils.substringAfterLast("p{InCombiningDiacriticalMarks}+", 203);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.deleteWhitespace((String) null);
      assertNull(string7);
      
      String string8 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertEquals(0, byteArray0.length);
      assertEquals("", string8);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("7", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "7", ":bE%f}.z)H3hL%6Nyi<");
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-13);
      byteArray0[2] = (byte) (-128);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'k', (int) (byte)0, 2070);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      String string0 = StringUtils.wrap("A?i?CBQTt<", '');
      assertEquals("A?i?CBQTt<", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A?i?CBQTt<";
      String string1 = StringUtils.replaceEach("JeBqZ0WcVe/i|", stringArray0, (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("JeBqZ0WcVe/i|", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[1];
      String string1 = StringUtils.join(longArray0, 'p');
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, longArray0.length);
      assertEquals("0", string1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("E{", "pm@u]*ES3yl{xk", 1405);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("E{", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "0", (CharSequence) "");
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isNumeric("pm@u]*ES3yl{xk");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "0", (CharSequence) "E{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.rotate("0", 948);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("0", (int) 'p');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", string4);
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "'&");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "9Td'gTc)o<6a-", (CharSequence) "9Td'gTc)o<6a-");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("9Td'gTc)o<6a-", "9Td'gTc)o<6a-", false);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("ion width with offset is %d").when(supplier0).get();
      String string0 = StringUtils.getIfEmpty((String) null, supplier0);
      assertEquals("ion width with offset is %d", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.compareIgnoreCase("org.junitpioneer.jupiter.DefaultLocaleExtension", "\r", false);
      assertFalse(int1 == int0);
      assertEquals(98, int1);
      
      String string1 = StringUtils.leftPad("\r", 1101, "<nz<nz");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "<nz<nz", (CharSequence) "<nz<nz", (-735));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string2 = StringUtils.stripStart(":2UU\"m LF0@9]", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("Cannot clear and set the following entries at the same time: ", 1107, (-735));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      long[] longArray0 = new long[0];
      String string4 = StringUtils.join(longArray0, 'k', 0, (-2136));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(0, longArray0.length);
      assertEquals("", string4);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, ';');
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "t3Kwonu", (CharSequence) "", (-2955));
      assertEquals(0, int0);
      
      String string1 = StringUtils.rotate("", (-2955));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("[nN[IEO*xASG!!'&4/", 2163);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.substringAfterLast("ZLW ", "");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      char[] charArray0 = new char[8];
      charArray0[1] = '<';
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      String string0 = StringUtils.substringBetween("", "a");
      assertNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("<nz<nzThreshold must not be negativeD [<g0R[", "p^de", 9);
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("<nzp^deR[", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("()` not found in ", (String) null);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("()` not found in ", string2);
      assertNotNull(string2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence1 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertFalse(charSequence1.equals((Object)string2));
      assertFalse(charSequence1.equals((Object)string1));
      assertEquals("", charSequence1);
      assertNotNull(charSequence1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp("Pcm('_g", "Pcm('_g");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("Pcm('_g", ".");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Pcm('_g", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.right("8}:j", 321);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("8}:j", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("Timeout for vintage @Test must be positive.", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Timeout for vintage @Test must be positive.", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isMixedCase(".");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 10, 988);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      String string0 = StringUtils.substringBetween("!", "&E[yZ&!bCy I<g{", "&E[yZ&!bCy I<g{");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      String string0 = "r=UC\"-/d|";
      int int0 = 3;
      String string1 = StringUtils.repeat("Y:r&VZ", "r=UC\"-/d|", 3);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y:r&VZr=UC\"-/d|Y:r&VZr=UC\"-/d|Y:r&VZ", string1);
      assertNotNull(string1);
      
      int int1 = (-1025);
      String string2 = StringUtils.substringAfter("Y:r&VZr=UC\"-/d|Y:r&VZr=UC\"-/d|Y:r&VZ", (-1025));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int2 = 0;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "r=UC\"-/d|";
      objectArray0[2] = (Object) "Y:r&VZ";
      objectArray0[3] = (Object) "r=UC\"-/d|";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "Y:r&VZ";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "Y:r&VZr=UC\"-/d|Y:r&VZr=UC\"-/d|Y:r&VZ";
      objectArray0[8] = (Object) "Y:r&VZr=UC\"-/d|Y:r&VZr=UC\"-/d|Y:r&VZ";
      String string3 = "org.junitpioneer.jupiter.RetryingTestExtension";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "org.junitpioneer.jupiter.RetryingTestExtension", 0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("do+u!-wfGH8S<WF");
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((char[]) null, 'O');
      assertNull(string0);
      
      String string1 = StringUtils.difference((String) null, (String) null);
      assertNull(string1);
      
      String string2 = "...";
      String string3 = StringUtils.substringAfterLast("clone", "OQ");
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd("px\"?>Sd\"g", "px\"?>Sd\"g");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("do+u!-wfGH8S<WF"));
      assertEquals(0, priorityQueue0.size());
      
      PriorityQueue<String> priorityQueue1 = new PriorityQueue<String>();
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.contains("do+u!-wfGH8S<WF"));
      assertEquals(0, priorityQueue1.size());
      
      boolean boolean1 = priorityQueue1.add("do+u!-wfGH8S<WF");
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertTrue(boolean1);
      assertTrue(priorityQueue1.contains("do+u!-wfGH8S<WF"));
      assertFalse(priorityQueue1.contains("px\"?>Sd\"g"));
      assertEquals(1, priorityQueue1.size());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayDeque<Locale.LanguageRange> arrayDeque0 = new ArrayDeque<Locale.LanguageRange>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(arrayDeque0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, linkedList1.size());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("do+u!-wfGH8S<WF"));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) vector0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(list0);
      assertFalse(vector0.contains("do+u!-wfGH8S<WF"));
      assertFalse(list0.contains("do+u!-wfGH8S<WF"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, linkedList1.size());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join(list0, 'd', (-368), 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -368
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{";
      String string0 = StringUtils.chomp("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{");
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.reverse("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{oj6Ks=\"m$TNYkyq.iEP[\n8@Ak_k.7'K#", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEach("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", stringArray1, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertEquals(25, int0);
      
      String string4 = StringUtils.unwrap("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'G');
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int1 = StringUtils.ordinalIndexOf("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 37);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "{oj6Ks=\"m$TNYkyq.iEP[n8@Ak_k.7'K#", (CharSequence) "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{");
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      String string5 = StringUtils.chop("{}");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("{", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, ';');
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string1 = StringUtils.right("t3Kwonu", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("u", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "t3Kwonu", (CharSequence) "u");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      String string0 = StringUtils.chomp("Y");
      assertEquals("Y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short)32;
      shortArray0[2] = (short)108;
      shortArray0[4] = (short)35;
      shortArray0[5] = (short)1254;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)2625;
      String string0 = StringUtils.join(shortArray0, '+');
      assertEquals(8, shortArray0.length);
      assertEquals("32+32+108+0+35+1254+2+2625", string0);
      assertArrayEquals(new short[] {(short)32, (short)32, (short)108, (short)0, (short)35, (short)1254, (short)2, (short)2625}, shortArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "32+32+108+0+35+1254+2+2625", "32+32+108+0+35+1254+2+2625");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substring("32+32+108+0+35+1254+2+2625", (-3114));
      assertTrue(string1.equals((Object)string0));
      assertEquals("32+32+108+0+35+1254+2+2625", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("32+32+108+0+35+1254+2+2625", "32+32+108+0+35+1254+2+2625");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "[x}#S!tx+\"$}ab~$j", (int) (short)35);
      assertEquals(3, int0);
      
      String string2 = StringUtils.chomp("5yw;up{InCombiningDiacriticalMarks}+", "5yw;up{InCombiningDiacriticalMarks}+");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("5yw;up{InCombiningDiacriticalMarks}+", "7");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("keDq[6OjyV", '+');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.substringAfter("5yw;up{InCombiningDiacriticalMarks}+", (int) (short)2);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("32+32+108+0+35+1254+2+2625", (int) (short)108);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("                                                                                  32+32+108+0+35+1254+2+2625", string4);
      assertNotNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("keDq[6OjyV"));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("zg", "32+32+108+0+35+1254+2+2625", (-1051));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 27
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      String string0 = StringUtils.stripToNull("[XKq:+%lW/f:k jHb");
      assertEquals("[XKq:+%lW/f:k jHb", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("Fml9qn5b9=%Va&bJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Fml9qn5b9=%Va&bJ", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      charSequenceArray0[0] = (CharSequence) "Fml9qn5b9=%Va&bJ";
      String string2 = StringUtils.deleteWhitespace("[XKq:+%lW/f:k jHb");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[XKq:+%lW/f:kjHb", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '\'', 16, 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("*4r}P", "(Hok#3e@}.l:Co=1j0X+wr\u0002gaAzMCj0X+wr\u0002gaAzMCj0X+wr\u0002gaAzMhZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = 23;
      String string0 = "SXMou'i";
      int int1 = (-1026);
      String string1 = StringUtils.substringAfter("' matches '", (-1026));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "' matches '";
      int int2 = (-477);
      int int3 = 16;
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "' matches '", 0, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      String string0 = StringUtils.difference("t3K8onu", "t3K8onu");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "t3K8onu", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      String string0 = StringUtils.replace("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are empty.", "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are empty.", "TbY&32wK;?");
      assertEquals("TbY&32wK;?", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "TbY&32wK;?";
      charSequenceArray0[1] = (CharSequence) "TbY&32wK;?";
      charSequenceArray0[2] = (CharSequence) "TbY&32wK;?";
      charSequenceArray0[3] = (CharSequence) "TbY&32wK;?";
      charSequenceArray0[4] = (CharSequence) "TbY&32wK;?";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("TbY&32wK;?", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("7", "7", "7");
      assertEquals("7", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n\n", "J6<xkZSE(}f", (-204));
      assertFalse(string1.equals((Object)string0));
      assertEquals("4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n\n", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Pcm('_g", (CharSequence) "4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n\n");
      assertEquals(41, int0);
      
      boolean boolean0 = StringUtils.isNumeric("Pcm('_g");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n\n", (CharSequence) "4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n4}}\n\n");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.rotate("L~TV,", (-204));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(",L~TV", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("'&", 41);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&'&", "'&");
      assertEquals(0.67, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Predicate<Locale.Category> predicate0 = Predicate.isEqual((Object) "");
      assertNotNull(predicate0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      assertNotNull(predicate1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      boolean boolean1 = predicate1.test(locale_Category0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Predicate<Locale.Category> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      Predicate<Locale.Category> predicate3 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertNotSame(predicate3, predicate2);
      assertNotNull(predicate3);
      
      Predicate<Locale.Category> predicate4 = predicate0.negate();
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertNotNull(predicate4);
      
      boolean boolean2 = stack0.removeIf(predicate0);
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(stack0.contains(locale_Category0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      String string1 = StringUtils.join((List<?>) stack0, '*', (-2315), (-2315));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(stack0.contains(locale_Category0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.left((String) null, (-1));
      assertNull(string1);
      
      String string2 = StringUtils.CR;
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("x");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("x", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("}HP`NwR");
      assertEquals("}HP`NwR", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)57;
      String string1 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, byteArray0.length);
      assertEquals("b9", string1);
      assertArrayEquals(new byte[] {(byte)98, (byte)57}, byteArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      char char0 = 'F';
      String string0 = StringUtils.join((List<?>) null, 'F', (-1), (-1));
      assertNull(string0);
      
      String string1 = StringUtils.getDigits("null/empty items");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("", "%o{");
      assertFalse(string2.equals((Object)string1));
      assertEquals("%o{", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "%o{", (CharSequence) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      String string0 = "%v#_a9`2";
      char char0 = 'H';
      String string1 = StringUtils.wrap("%v#_a9`2", 'H');
      assertFalse(string1.equals((Object)string0));
      assertEquals("H%v#_a9`2H", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "H%v#_a9`2H", (CharSequence) "%v#_a9`2");
      assertEquals(1, int0);
      
      String string2 = "A%@C";
      int int1 = 0;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("%v#_a9`2", "A%@C", 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = StringUtils.unwrap("!", '\u0000');
      assertEquals("!", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString("'");
      assertFalse(string1.equals((Object)string0));
      assertEquals("'", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)65;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '&', 15, (int) (byte)94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.StringUtils", "ks}+", "ks}+", 51);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[1] = (CharSequence) "ks}+";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(3, charSequenceArray0.length);
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      assertNotNull(charSequence0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'L';
      charArray0[1] = '9';
      charArray0[2] = 'y';
      charArray0[3] = '{';
      charArray0[4] = '#';
      charArray0[5] = '\\';
      charArray0[6] = '9';
      charArray0[7] = 'O';
      charArray0[8] = 'j';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.StringUtils", charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'L', '9', 'y', '{', '#', '\\', '9', 'O', 'j'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      String string0 = StringUtils.chomp("Y");
      assertEquals("Y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("Y");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Y", (CharSequence) "Y");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Y";
      charSequenceArray0[2] = (CharSequence) "Y";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Y";
      String string1 = StringUtils.substringBeforeLast("Y", "Y");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[2], "", 26);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "", 0);
      assertTrue(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string2 = StringUtils.center("", 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("", (-2048));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      String string0 = StringUtils.repeat("Strings must not be null", "org.apache.commons.lang3.StringUtils", 1419);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("@Defau@tLocale can only be used with language tag if language, country, and variant are n2t set", "org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals("@Defau@tLocale can only be used with language tag if language, country, and variant are n2t set", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing(string0, "maxWith cannot be negative");
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance(string0, string2);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.abbreviate("*7~Pp'IHk<Axi", "?", 17);
      assertEquals("*7~Pp'IHk<Axi", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "*7~Pp'IHk<Axi";
      String string1 = StringUtils.removeStart("*7~Pp'IHk<Axi", "*7~Pp'IHk<Axi");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.repeat("", 810);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("?");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfAny("*7~Pp'IHk<Axi", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(13, int1);
      
      String string3 = StringUtils.trimToEmpty("");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "*7~Pp'IHk<Axi";
      stringArray0[4] = "";
      stringArray0[5] = "*7~Pp'IHk<Axi";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(6, stringArray0.length);
      assertEquals("*7~Pp'IHk<Axi", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isEmpty("*7~Pp'IHk<Axi");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray1 = new CharSequence[4];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = '(';
      charArray0[2] = 'r';
      charArray0[3] = 'l';
      String string5 = StringUtils.valueOf(charArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(4, charArray0.length);
      assertEquals("%(rl", string5);
      assertArrayEquals(new char[] {'%', '(', 'r', 'l'}, charArray0);
      assertNotNull(string5);
      
      charSequenceArray1[0] = (CharSequence) "%(rl";
      charSequenceArray1[1] = (CharSequence) "*7~Pp'IHk<Axi";
      charSequenceArray1[2] = (CharSequence) "";
      charSequenceArray1[3] = (CharSequence) "";
      boolean boolean3 = StringUtils.isAllBlank(charSequenceArray1);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(4, charSequenceArray1.length);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      int int0 = (-1022);
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1022));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = 32;
      int int3 = StringUtils.indexOf((CharSequence) null, 32, 4);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      String string0 = null;
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      String string0 = StringUtils.chomp("Y");
      assertEquals("Y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("Y");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Y", (CharSequence) "Y");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.center("Y", 1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Y", string1);
      assertNotNull(string1);
      
      String string2 = "\\p{InCombiningDiacriticalMarks}+";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "t=uKMzY}\"su8P?";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Y";
      stringArray1[1] = "Y";
      stringArray1[2] = "Y";
      stringArray1[3] = "Y";
      stringArray1[4] = "t=uKMzY}\"su8P?";
      stringArray1[5] = "Y";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("p{InCombiningDiacriticalMarks}+", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 3 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object1;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[2] = object3;
      objectArray0[3] = object0;
      objectArray0[4] = object2;
      String string0 = StringUtils.join(objectArray0, 'z');
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@3af41d60zzjava.lang.Object@1cdde9d4zjava.lang.Object@1ca0486azjava.lang.Object@121ba086";
      charSequenceArray0[1] = (CharSequence) null;
      String string1 = StringUtils.appendIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertNull(string1);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "java.lang.Object@3af41d60zzjava.lang.Object@1cdde9d4zjava.lang.Object@1ca0486azjava.lang.Object@121ba086";
      charSequenceArray0[4] = (CharSequence) "java.lang.Object@3af41d60zzjava.lang.Object@1cdde9d4zjava.lang.Object@1ca0486azjava.lang.Object@121ba086";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase(")knx{", (String) null, false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[5], "YlVrBm&YT$DWdbW'");
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace(")knx{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.substringBetween("YlVrBm&YT$DWdbW'", "00M", "java.lang.Object@3af41d60zzjava.lang.Object@1cdde9d4zjava.lang.Object@1ca0486azjava.lang.Object@121ba086");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      String string0 = "Strings must not be null";
      String string1 = StringUtils.deleteWhitespace("Strings must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Stringsmustnotbenull", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = 'C';
      charArray0[3] = '^';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Stringsmustnotbenull", charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'^', '^', 'C', '^'}, charArray0);
      
      String string2 = "\\p{InCombiningDiacriticalMarks}+";
      String string3 = StringUtils.center("p{InCombiningDiacriticalMarks}+", (-1353), 'C');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("Arguments cannot both be null");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("llun eb htob tonnac stnemugrA", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.reverse("{}");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("}{", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceAll("p{InCombiningDiacriticalMarks}+", "@CartesianProductTest not found", "=");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("p{InCombiningDiacriticalMarks}+", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "t7\"L.Y:Search and Replace array lengths don't match: ", "lk");
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Arguments cannot both be null", (CharSequence) "Strings must not be null", (-3777));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("N@}jGJB?cS n||/", "[`", 9);
      assertEquals("N@}j[`||/", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\"k%_y~]gkK");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"k%_y~]gkK", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!";
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "!", (CharSequence) "!");
      assertEquals("!", charSequence0);
      assertNotNull(charSequence0);
      
      String string0 = StringUtils.removeEnd("pde", "a");
      assertFalse(string0.equals((Object)charSequence0));
      assertEquals("pde", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("<nz<nzThreshold must not be negativeD [<g0R[", "pde", 9);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("<nzpde0R[", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("()` not found in ", (String) null);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("()` not found in ", string2);
      assertNotNull(string2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence1 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertNull(charSequence1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      String string0 = StringUtils.wrap("YS'rlP'$3wxyR_a", "");
      assertEquals("YS'rlP'$3wxyR_a", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("", '\u001E');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('\u001E', 256);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E\u001E", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("", (-1843), 'Y');
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\u001E';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      String string4 = StringUtils.join(charArray0, 'Y');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(4, charArray0.length);
      assertEquals("\u001EY-Y-Y-", string4);
      assertArrayEquals(new char[] {'\u001E', '-', '-', '-'}, charArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.difference((String) null, "@.M)^jRiJ[Rc4/{-Yz");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("@.M)^jRiJ[Rc4/{-Yz", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad("YS'rlP'$3wxyR_a", 12, "YS'rlP'$3wxyR_a");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("YS'rlP'$3wxyR_a", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.removeEnd(".", "");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals(".", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.substring("", (-1843));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      assertNotNull(string8);
      
      boolean boolean0 = StringUtils.containsWhitespace("YS'rlP'$3wxyR_a");
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      byte[] byteArray0 = StringUtils.getBytes("", charset0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      String string9 = StringUtils.chop("t7\"L.Y:");
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertEquals("t7\"L.Y", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Iterator<?>) null, '8');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "9Td'gTc)o<6a-", (CharSequence) "9Td'gTc)o<6a-");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("9Td'gTc)o<6a-", "9Td'gTc)o<6a-", false);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("ion width with offset is %d").when(supplier0).get();
      String string0 = StringUtils.getIfEmpty((String) null, supplier0);
      assertEquals("ion width with offset is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeFirst("orE.apache.commons.lang3.ArrayUtils", "ion width with offset is %d");
      assertFalse(string1.equals((Object)string0));
      assertEquals("orE.apache.commons.lang3.ArrayUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((char[]) null, 'Q');
      assertNull(string2);
      
      String string3 = StringUtils.difference("", "Se|");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Se|", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("ion width with offset is %d", 90, "ion width with offset is %d");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("ion width with offset is %dion width with offset is %dion width with offset is %dion width", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Se|", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOf((CharSequence) "Se|", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.toRootLowerCase((String) null);
      assertNull(string6);
      
      boolean boolean2 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "&E3[yiZ&!bCy I<g{");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2295.9226F;
      floatArray0[1] = 0.0F;
      String string0 = StringUtils.join(floatArray0, 'w');
      assertEquals(5, floatArray0.length);
      assertEquals("2295.9226w0.0w0.0w0.0w0.0", string0);
      assertArrayEquals(new float[] {2295.9226F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("ST5eWFN|?,I\"O1dyJ+FY#)0P0", 3076);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0ST5eWFN|?,I\"O1dyJ+FY#)0P", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast(" ", "l<b{lyk-mX");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.ordinalIndexOf("2295.9226w0.0w0.0w0.0w0.0", " vs Y", 3076);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.repeat(" ", (String) null, 1419);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) string3, 1419);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals(1418, int1);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      String string0 = StringUtils.repeat(";", 10);
      assertEquals(";;;;;;;;;;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      String string0 = StringUtils.stripToNull("2>6W<z");
      assertEquals("2>6W<z", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("The Array must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("The Array must not be null", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p`8dX?S;e", 'a');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("The Array must not be null", (String) null, 656);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.rotate("7AV8?sK[p{&", (-170));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("sK[p{&7AV8?", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("7AV8?sK[p{&", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.substring("Could not resolve parameter of type %s.", 2141, 1132);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("2>6W<z", "[n#pMc=Y{d|2", 886, 886);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("2>6W<z", string4);
      assertNotNull(string4);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      String string5 = StringUtils.join((List<?>) stack0, ':', 886, (-960));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Could not resolve parameter of type %s.", "BG8=(D>JTo,+1uaU_X");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[1];
      String string1 = StringUtils.join(longArray0, 'p');
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, longArray0.length);
      assertEquals("0", string1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("0", "0", "&E3OyiZ&9bCy I<g{", (int) 'p');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("&E3OyiZ&9bCy I<g{", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("FS!llCcEOl", 'p');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("pFS!llCcEOlp", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("&E3OyiZ&9bCy I<g{", "&E3OyiZ&9bCy I<g{");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.chomp("");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.mid("Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA", 3081, (-1313));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string7 = StringUtils.trimToNull("0");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("0", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "0", charArray0);
      assertFalse(int1 == int0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'p', 'p'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      String string0 = StringUtils.center("F", 8, "[OW");
      assertEquals("[OWF[OW[", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.deleteWhitespace("StdIo_System_Out");
      assertEquals("StdIo_System_Out", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "StdIo_System_Out", charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'T', 'T', 'T', 'T', 'T'}, charArray0);
      
      String string1 = StringUtils.leftPad("StdIo_System_Out", 29, "];G 4Es%y1^!a");
      assertFalse(string1.equals((Object)string0));
      assertEquals("];G 4Es%y1^!aStdIo_System_Out", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "];G 4Es%y1^!a", 116);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid("!C/I>3j<g1tM,T", 29, (-821));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-2023));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.toRootUpperCase("\n");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\n", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("', has a length less than 2");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("', has a length less than 2", string5);
      assertNotNull(string5);
      
      double double0 = StringUtils.getJaroWinklerDistance("StdIo_System_Out", "', has a length less than 2");
      assertEquals(0.38, double0, 0.01);
      
      String string6 = StringUtils.toRootUpperCase("\n");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("\n", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.containsWhitespace("StdIo_System_Out");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.repeat("Search and Replace array lengths don't match: ", 85);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      String string0 = StringUtils.rightPad("'_ZB_p]%", 14);
      assertEquals("'_ZB_p]%      ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "'_ZB_p]%      ", (CharSequence) "'_ZB_p]%");
      assertEquals(8, int0);
      
      String string1 = StringUtils.leftPad("'_ZB_p]%      ", 8);
      assertTrue(string1.equals((Object)string0));
      assertEquals("'_ZB_p]%      ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.countMatches((CharSequence) "'_ZB_p]%      ", '@');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.capitalize("\ntfe(%@g*crPK");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\ntfe(%@g*crPK", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("\ntfe(%@g*crPK");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("tfe(%@g*crPK", string3);
      assertNotNull(string3);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("'_ZB_p]%      "));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains("'_ZB_p]%      "));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, '@');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(arrayList0.contains("'_ZB_p]%      "));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string5 = StringUtils.substringAfterLast("'_ZB_p]%      ", "tfe(%@g*crPK");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      int int2 = StringUtils.indexOfAny((CharSequence) "'_ZB_p]%", charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'@'}, charArray0);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "\ntfe(%@g*crPK", 8);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string6 = StringUtils.substringAfter(";14B~r;7?G-", 426);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      String string0 = StringUtils.abbreviate("maxWith cannot be negative", "];G 4Es%y1^!a", 115, 46);
      assertEquals("maxWith cannot be negative", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split((String) null, "DefaultLocale");
      assertNull(stringArray0);
      
      String string1 = StringUtils.leftPad("org.junitpioneer.jupiter.CartesianProductTestExtension", 16, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtension", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) null, '%');
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "QhBUO", 127);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.center("Y8w0>fpyamA--{Kij697q,ajkH", 10);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Y8w0>fpyamA--{Kij697q,ajkH", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.swapCase((String) null);
      assertNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Y8w0>fpyamA--{Kij697q,ajkH", (CharSequence) "lLx$%nrk8");
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)54;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      String string5 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(2, byteArray0.length);
      assertEquals("\n6", string5);
      assertArrayEquals(new byte[] {(byte)10, (byte)54}, byteArray0);
      assertNotNull(string5);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      String string0 = StringUtils.abbreviate("a2[}z ]@)-@$N2LG4", "!", 15, 15);
      assertEquals("!}z ]@)-@$N2LG4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!";
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "!", (CharSequence) "!");
      assertEquals("!", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("!", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat("", "", 15);
      assertFalse(string0.equals((Object)charSequence0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals(8, charArray0.length);
      assertEquals("<\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertArrayEquals(new char[] {'<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("org.junitpioneer.jupiter.params.Range");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("org.junitpioneer.jupiter.params.range", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "!", (char[]) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.abbreviate("a2[}z ]@)-@$N2LG4", "'", 15, 15);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("'}z ]@)-@$N2LG4", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category2;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category1;
      String string0 = StringUtils.join(locale_CategoryArray0);
      assertEquals(3, locale_CategoryArray0.length);
      assertEquals("FORMATDISPLAYFORMAT", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("FORMATDISPLAYFORMAT");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "FORMATDISPLAYFORMAT";
      String string1 = StringUtils.removeStartIgnoreCase("Z*7[\"3fK~J", "Z*7[\"3fK~J");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "FORMATDISPLAYFORMAT";
      charSequenceArray0[3] = (CharSequence) "FORMATDISPLAYFORMAT";
      charSequenceArray0[4] = (CharSequence) "FORMATDISPLAYFORMAT";
      String string2 = "mA--{Kij";
      String string3 = StringUtils.reverse("mA--{Kij");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("jiK{--Am", string3);
      assertNotNull(string3);
      
      charSequenceArray0[5] = (CharSequence) "jiK{--Am";
      int int0 = StringUtils.lastIndexOfAny("FORMATDISPLAYFORMAT", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(19, int0);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "Minimum abbreviation width with offset is %d", true);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.chomp((String) null);
      assertNull(string4);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("FORMATDISPLAYFORMAT"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      // Undeclared exception!
      try { 
        stack0.listIterator((-1342));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1342
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "AkpOB", true);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("AkpOB"));
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      // Undeclared exception!
      try { 
        stack0.listIterator(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      String string0 = StringUtils.stripToNull("2>6W<z");
      assertEquals("2>6W<z", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("The Array must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("The Array must not be null", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.join(charArray0, '8');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("2>6W<z", "2>6W<z", "\r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\r", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "2>6W<z");
      assertFalse(boolean0);
      
      String string4 = StringUtils.chomp(")G_`-g8=W.gMUF");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(")G_`-g8=W.gMUF", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", 10, 10);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.truncate(")G_`-g8=W.gMUF", 12, 10);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("UF", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substring("t,@N", (-204), 10);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("t,@N", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("YS'rlP'$3wxyR_a", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("\r", 'A');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\r");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("\r", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      
      boolean boolean0 = StringUtils.isAlphaSpace(charBuffer0);
      assertFalse(boolean0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("\r", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      
      String string2 = StringUtils.left("q9tg9~xNW;0d'g~H06{M", (-344));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.CR;
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("\r", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", "\r");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("\r");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 1166);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.defaultIfEmpty((String) null, ":oH{");
      assertFalse(string1.equals((Object)string0));
      assertEquals(":oH{", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-2777), (-2777));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "YY7HX5";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string2 = StringUtils.substring("", 13, (-1592));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("2$#H-", "", 2225, (-1701));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("2$#H-", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("Gw80cM9?OU:f", supplier0);
      assertEquals("Gw80cM9?OU:f", string0);
      assertNotNull(string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string1 = StringUtils.removeEnd("\r", "\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("Search and Replace array lengths don't match: ", "\r", 779);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("j8l^", "\r");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("j8l^", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "j8l^";
      String string4 = StringUtils.removeStart("\n", "Search and Replace array lengths don't match: ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\n", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = 'R';
      charArray0[2] = 'V';
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'V';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 'e';
      doubleArray0[4] = (double) 'R';
      doubleArray0[5] = (double) 'R';
      doubleArray0[6] = (double) 'e';
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = 940.0;
      String string5 = StringUtils.join(doubleArray0, 'e');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals(9, doubleArray0.length);
      assertEquals("86.0e-1.0e-1.0e101.0e82.0e82.0e101.0e-1.0e940.0", string5);
      assertArrayEquals(new double[] {86.0, (-1.0), (-1.0), 101.0, 82.0, 82.0, 101.0, (-1.0), 940.0}, doubleArray0, 0.01);
      assertNotNull(string5);
      
      charSequenceArray0[2] = (CharSequence) "86.0e-1.0e-1.0e101.0e82.0e82.0e101.0e-1.0e940.0";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      charArray0[3] = 'g';
      charArray0[4] = '&';
      charArray0[5] = '9';
      charArray0[6] = 'K';
      charArray0[7] = '#';
      charArray0[8] = 'd';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'e', 'R', 'V', 'g', '&', '9', 'K', '#', 'd'}, charArray0);
      
      int int1 = StringUtils.ordinalIndexOf(" vs ", "", 3396);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n", 0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList1.add("e");
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean0);
      assertTrue(linkedList1.contains("e"));
      assertEquals(1, linkedList1.size());
      
      String string0 = StringUtils.join((Iterable<?>) null, 'p');
      assertNull(string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, '`');
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      String string0 = "%o{";
      String string1 = StringUtils.swapCase("%o{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("%O{", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "@GW]6";
      stringArray0[3] = "%O{";
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "@GW]6";
      String[] stringArray2 = StringUtils.stripAll(stringArray0, " must return `CartesianProductTest.Sets`");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray2.length);
      assertNotNull(stringArray2);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = StringUtils.getBytes("\ntfe(%@g*crPK", charset0);
      assertEquals(13, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      int int0 = StringUtils.lastOrdinalIndexOf("%O{", "%o{", (-114));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trimToEmpty("Never disable parameterized test method itself");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Never disable parameterized test method itself", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace(", Length: ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(", Length:", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("@GW]6");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("@GW]6", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(", Length:", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("fUL+oma(", "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("fUL+oma(", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("fUL+oma(");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[9];
      char char0 = 'R';
      charArray0[0] = 'R';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, charArray0.length);
      assertEquals("R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertArrayEquals(new char[] {'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "fUL+oma(";
      stringArray0[1] = "fUL+oma(";
      stringArray0[2] = "fUL+oma(";
      stringArray0[3] = "R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000";
      String string2 = StringUtils.replaceEachRepeatedly("jG&5p+VWVao9lp#", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("jG&5p+VWVao9lp#", string2);
      assertNotNull(string2);
      
      int int0 = 2;
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "fUL+oma(", (CharSequence) "fUL+oma(", 2);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.compareIgnoreCase("fUL+oma(", " vs ", false);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(70, int2);
      
      String string3 = StringUtils.chomp("R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("fUL+oma(", 2, 2);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("L+", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(4, stringArray0.length);
      assertEquals("fUL+oma(", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("w7gv z@/f{kLFVP<", "L+", 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[0] = (CharSequence) "Z`5&|_|\";li9F?F1k?";
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "Z`5&|_|\";li9F?F1k?", 16, 16);
      assertEquals(18, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "", 16);
      assertEquals(18, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "9Td'gTc)o<6a-", (CharSequence) "9Td'gTc)o<6a-");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("9Td'gTc)o<6a-", "9Td'gTc)o<6a-", false);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("ion width with offset is %d").when(supplier0).get();
      String string0 = StringUtils.getIfEmpty((String) null, supplier0);
      assertEquals("ion width with offset is %d", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.countMatches((CharSequence) null, 'q');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.substringBefore((String) null, "L!V{JS;+[y");
      assertNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("u08|ROEhFV<", "u08|ROEhFV<");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.ordinalIndexOf("u08|ROEhFV<", "9Td'gTc)o<6a-", 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) " vs Y", (CharSequence) "", 0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
      
      String string1 = "', '";
      String string2 = StringUtils.substringAfter((String) null, "', '");
      assertNull(string2);
      
      String string3 = StringUtils.normalizeSpace((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "', '";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "', '";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("', '", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      
      char char0 = 'h';
      String string4 = StringUtils.leftPad((String) null, (-5358), 'h');
      assertNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, (String) null, (-5358));
      assertNull(stringArray1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, (CharSequence[]) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAllUpperCase(charSequenceArray0[2]);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "', '", 0, 92);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.difference("Locale must not be null", (String) null);
      assertFalse(string5.equals((Object)string1));
      assertEquals("Locale must not be null", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      String string0 = StringUtils.chop("t3K8onu");
      assertEquals("t3K8on", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("t3K8onu", "t3K8onu");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      String string0 = StringUtils.abbreviate("+pe1PEXB|", "", 1969, 1969);
      assertEquals("+pe1PEXB|", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("K6s&'m,.P-/gL");
      assertFalse(string1.equals((Object)string0));
      assertEquals("K6s&'m,.P-/gL", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("+pe1PEXB|", "K6s&'m,.P-/gL");
      assertEquals(0.4, double0, 0.01);
      
      String string2 = StringUtils.wrapIfMissing("'7=/qH", " ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" '7=/qH ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween((String) null, "emQI('` c%?", "n&U.E LUDqgcC{,ucD@");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "'7=/qH";
      charSequenceArray0[2] = (CharSequence) "'7=/qH";
      String string4 = StringUtils.leftPad("", 3636, "a=X@]co:/Jm8\n");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      charSequenceArray0[3] = (CharSequence) string4;
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.overlay((String) null, (String) null, 121, 3636);
      assertNull(string5);
      
      charSequenceArray0[5] = (CharSequence) null;
      String string6 = StringUtils.defaultString("Object varargs must not be null", (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Object varargs must not be null", string6);
      assertNotNull(string6);
      
      charSequenceArray0[6] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[7] = (CharSequence) "+pe1PEXB|";
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      String[] stringArray0 = new String[21];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(21, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals(21, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      String string0 = StringUtils.difference("fUL+oma(", "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, charArray0.length);
      assertEquals("R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertArrayEquals(new char[] {'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[1] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[2] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[3] = "R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000";
      String string2 = StringUtils.replaceEachRepeatedly("jG&5p+VWVao9lp#", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("jG&5p+VWVao9lp#", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("Minimum abbreviation width with offset is %d", "NI");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("org.junitpioneer.vintage.TimeoutExtension", "wQZ`>YZ", (-1965));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("org.junitpioneer.vintage.TimeoutExtension", "BuD");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.joinWith("org.junitpioneer.vintage.TimeoutExtension", stringArray0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals(4, stringArray0.length);
      assertEquals("org.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionR\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.ordinalIndexOf("j8l^", "org.junitpioneer.vintage.TimeoutExtension", 229);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", (CharSequence) "Minimum abbreviation width with offset is %d", 6);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("Z`5&|_|\";li9F?F1k?");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<p>]NnCk0", (CharSequence) "Z`5&|_|\";li9F?F1k?", 15);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("<p>]NnCk0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", (CharSequence) "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string1 = StringUtils.join(objectArray0, "");
      assertTrue(string1.equals((Object)string0));
      assertEquals(3, objectArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("", '#');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>('#');
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(""));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      String string3 = StringUtils.reverse("");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring("", 84, (-2104));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (-710));
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string6 = StringUtils.substringBefore("", "&:A9V;/2.TxcepM=):");
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string7 = StringUtils.substringAfterLast(" ", "&a ");
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'q');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string8 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      String string0 = StringUtils.unwrap("5ND.IL|P", "5ND.IL|P");
      assertEquals("5ND.IL|P", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "5ND.IL|P";
      stringArray0[2] = "5ND.IL|P";
      stringArray0[3] = "5ND.IL|P";
      String string1 = StringUtils.replaceEach("<#D'NH)3XlOT)", (String[]) null, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("<#D'NH)3XlOT)", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "5ND.IL|P";
      charSequenceArray0[1] = (CharSequence) "5ND.IL|P";
      charSequenceArray0[2] = (CharSequence) "Ocw=\"d";
      charSequenceArray0[3] = (CharSequence) stringArray0[1];
      charSequenceArray0[4] = (CharSequence) "5ND.IL|P";
      charSequenceArray0[5] = (CharSequence) "5ND.IL|P";
      charSequenceArray0[6] = (CharSequence) "5ND.IL|P";
      int int0 = StringUtils.lastIndexOfAny("<#D'NH)3XlOT)", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("\r\r", "<#D'NH)3XlOT)");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("5ND.IL|P", (-1), (-1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsNone(charSequenceArray0[2], (char[]) null);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.rotate("tR>PoeOzz", 9);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("tR>PoeOzz", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("or any enclosing class", "or any enclosing class");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) '#';
      doubleArray0[4] = (double) (-1);
      String string1 = StringUtils.join(doubleArray0, 'p');
      assertEquals(5, doubleArray0.length);
      assertEquals("1.0p-1.0p-1.0p35.0p-1.0", string1);
      assertArrayEquals(new double[] {1.0, (-1.0), (-1.0), 35.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "or any enclosing class", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.leftPad((String) null, (-1), "org.junitpioneer.jupiter.params.DisableIfNameExtension");
      assertNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'p', 'p', 'p'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "dRCJg QW4`Qw", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      vector0.setSize(1485);
      assertFalse(vector0.contains(1485));
      assertFalse(vector0.isEmpty());
      assertEquals(1485, vector0.size());
      assertEquals(1485, vector0.capacity());
      
      String string0 = StringUtils.join((List<?>) vector0, '7', 20, 1485);
      assertNotNull(string0);
      assertFalse(vector0.contains(20));
      assertFalse(vector0.isEmpty());
      assertEquals(1485, vector0.size());
      assertEquals(1485, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.chomp("(3]5Sk=M5?WG^ must return `CartesianProductTest.Sets`");
      assertEquals("(3]5Sk=M5?WG^ must return `CartesianProductTest.Sets`", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("(3]5Sk=M5?WG^ must return `CartesianProductTest.Sets`");
      assertTrue(string1.equals((Object)string0));
      assertEquals("(3]5Sk=M5?WG^ must return `CartesianProductTest.Sets`", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("(3]5Sk=M5?WG^ must return `CartesianProductTest.Sets`", "i6 ?_i@ok-");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("(3]5Sk=M5?WG^ must return `CartesianProductTest.Sets`", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("(3]5Sk=M5?WG^ must return `CartesianProductTest.Sets`", "(3]5Sk=M5?WG^ must return `CartesianProductTest.Sets`");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints("(3]5Sk=M5?WG^ must return `CartesianProductTest.Sets`");
      assertEquals(53, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.replaceIgnoreCase(",@h", (String) null, "(3]5Sk=M5?WG^ must return `CartesianProductTest.Sets`");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(",@h", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "l+x,/", 10);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.join((char[]) null, 'g', (-1), 10);
      assertNull(string5);
      
      String string6 = StringUtils.repeat((String) null, 9982);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("5yw;up{InCombiningDiacriticalMarks}+");
      assertEquals("5yw;up{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, charArray0.length);
      assertEquals("r", string1);
      assertArrayEquals(new char[] {'r'}, charArray0);
      assertNotNull(string1);
      
      String string2 = "M0";
      String string3 = StringUtils.rotate("M0", 2316);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("M0", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = null;
      int int0 = 65536;
      // Undeclared exception!
      StringUtils.leftPad("Don't clear/set the same entry more than once.", 65536, "Don't clear/set the same entry more than once.");
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      String string0 = StringUtils.remove("5ND.IL|P", 't');
      assertEquals("5ND.IL|P", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("5ND.IL|P", "5ND.IL|P", "5ND.IL|P");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "5ND.IL|P";
      charSequenceArray0[1] = (CharSequence) "w{Rb>)peZWL";
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.endsWithAny("5ND.IL|P", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace(charSequenceArray0[1]);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.left("...", 4);
      assertFalse(string2.equals((Object)string0));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("];A-{(>IYgwEA", 111, ", ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(", , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ];A-{(>IYgwEA", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) null, "5ND.IL|P");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isWhitespace("");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string4 = StringUtils.center("...", 111, ", ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(", , , , , , , , , , , , , , , , , , , , , , , , , , , ..., , , , , , , , , , , , , , , , , , , , , , , , , , , ", string4);
      assertNotNull(string4);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string5 = StringUtils.join((Iterable<?>) serviceLoader0, ']');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "", "7IB\"-DdPtVla");
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("7Tmeout for vintage @Test must be positive.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("o8,z&f)B;N35Pw&-O6z", '^');
      assertEquals("^o8,z&f)B;N35Pw&-O6z^", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((int[]) null, '^', 65, 65);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      String string0 = StringUtils.difference("fUL+oma(", "FyV~ux_X");
      assertEquals("FyV~ux_X", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("FyV~ux_X");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("FyV~ux_X");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, charArray0.length);
      assertEquals("R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertArrayEquals(new char[] {'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("FyV~ux_X", "\"B", " must return `CartesianProductTest.Sets`");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("FyV~ux_X", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isNumeric("FyV~ux_X");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      boolean boolean3 = StringUtils.equalsAnyIgnoreCase("FyV~ux_X", (CharSequence[]) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string3 = StringUtils.substring("Timeout for vintage @Test must be positive.", 2712, 2712);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("...", "\"0TTTH#aXH-", 2712, 1553);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((int[]) null, 'R', 1553, 1553);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("%>ah#+TeoC=aig^ZU@", supplier0);
      assertEquals("%>ah#+TeoC=aig^ZU@", string0);
      assertNotNull(string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string1 = StringUtils.removeEnd("\r", "\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("Search and Replace array lengths don't match: ", "\r", 779);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("j8l^", "\r");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("j8l^", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.compare("j8l^", "%>ah#+TeoC=aig^ZU@", true);
      assertEquals(69, int0);
      
      String string4 = StringUtils.rotate("IAm+8R*mdL", (-1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Am+8R*mdLI", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("%>ah#+TeoC=aig^ZU@", "%>ah#+TeoC=aig^ZU@");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.ordinalIndexOf("%>ah#+TeoC=aig^ZU@", "Am+8R*mdLI", 779);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "IAm+8R*mdL", 80);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(10, int2);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("r=UC\"-/d|", "`U~");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "`U~", (CharSequence) "`U~");
      assertEquals(1, int0);
      
      String string0 = StringUtils.substringBefore("&E3[yiZ&!bCy I<g{G?3Q(7#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", "}UUU}UUU}U}UUU}Don't clear/set the same entry more than once.");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      int int1 = StringUtils.compareIgnoreCase("`U~", "org.junitpioneer.jupiter.RetryingTestExtension", false);
      assertFalse(int1 == int0);
      assertEquals((-15), int1);
      
      String string1 = StringUtils.chomp(")D;IYxXHX");
      assertFalse(string1.equals((Object)string0));
      assertEquals(")D;IYxXHX", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isWhitespace("r=UC\"-/d|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.strip((String) null, "`U~");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "Never disable parameterized test method itself", "Never disable parameterized test method itself");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      String string0 = StringUtils.defaultString("5yw;u");
      assertEquals("5yw;u", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("\n", "tfe(%@g*crPK");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("()` not found in ", (-1109), 'c');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("()` not found in ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.reverse("StdIoExtension is active but no %s annotation was found.");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals(".dnuof saw noitatonna s% on tub evitca si noisnetxEoIdtS", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceAll("StdIoExtension is active but no %s annotation was found.", "StdIoExtension is active but no %s annotation was found.", "ooFn;J");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("ooFn;J", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "ooFn;J", "5yw;u");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "StdIoExtension is active but no %s annotation was found.", (CharSequence) "ooFn;J", 3319);
      assertEquals(53, int0);
      
      String string7 = StringUtils.wrap(";Xu\">[od4#O1M+E5{WYQK{8.iV'bQ*tY8S~", 'W');
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("W;Xu\">[od4#O1M+E5{WYQK{8.iV'bQ*tY8S~W", string7);
      assertNotNull(string7);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("\n");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string8 = StringUtils.join((float[]) null, '*', (-1109), (-1109));
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      String string0 = StringUtils.leftPad("Locale must not be null", 12, "v|]Q\"k,R6>h!i*x%P:");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Locale must not be null", (CharSequence) "Locale must not be null");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("Locale must not be null", 321, "-aBE)");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Locale must not be null-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aB", string1);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("Locale must not be null", supplier0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart("Locale must not be null", "");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Locale must not be null", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "-aBE)", (CharSequence) "Locale must not be null-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aBE)-aB");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Locale must not be null", "fUL+oma(");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("54", 'G');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.endsWithAny("54", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1);
      
      String string4 = StringUtils.repeat('F', (-248));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "Locale must not be null", 47);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.unwrap("v HS>A*J@", "GMT");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("v HS>A*J@", string5);
      assertNotNull(string5);
      
      int[] intArray0 = StringUtils.toCodePoints("GMT");
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {71, 77, 84}, intArray0);
      assertNotNull(intArray0);
      
      String string6 = StringUtils.wrapIfMissing("", " #(3<]>fY.*Bfhd8\"kZ");
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.isAlpha("Locale must not be null");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string7 = StringUtils.substringBefore("The type must not be null", "la");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("The type must not be null", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string0 = StringUtils.replaceEachRepeatedly("Locale must not be null", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Locale must not be null", (CharSequence) null, 2);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad("FS!llCcEOl", (-19), "Locale must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("FS!llCcEOl", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compareIgnoreCase(stringArray0[0], "org.junitpioneer.jupiter.params.DoubleRange", false);
      assertFalse(int1 == int0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, int1);
      
      String string2 = StringUtils.chomp("NeCM;m%#q%p.'%.");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("NeCM;m%#q%p.'%.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid("lUzZtt7G|}\"d:G&", 1, 1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("l", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("NeCM;m%#q%p.'%.", "lUzZtt7G|}\"d:G&");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("lUzZtt7G|}\"d:G&NeCM;m%#q%p.'%.lUzZtt7G|}\"d:G&", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.countMatches((CharSequence) "lUzZtt7G|}\"d:G&NeCM;m%#q%p.'%.lUzZtt7G|}\"d:G&", (CharSequence) "FS!llCcEOl");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string5 = StringUtils.removeStartIgnoreCase("lUzZtt7G|}\"d:G&", "FS!llCcEOl");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("lUzZtt7G|}\"d:G&", string5);
      assertNotNull(string5);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-19);
      doubleArray0[3] = (double) (-19);
      doubleArray0[4] = (double) (-19);
      doubleArray0[5] = (double) (-19);
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) (-19);
      String string6 = StringUtils.replaceOnce(stringArray0[0], ", '", "FS!llCcEOl");
      assertEquals(1, stringArray0.length);
      assertNull(string6);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "NeCM;m%#q%p.'%.", (CharSequence) null);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      String string7 = StringUtils.trimToNull("NeCM;m%#q%p.'%.");
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("NeCM;m%#q%p.'%.", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceChars("org.apache.commons.lang3.StringUtils", "gXf5w(/nmz4Io", "org.apache.commons.lang3.StringUtils");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertEquals("oro.apache.cohhocs.laco3.StricoUtils", string8);
      assertNotNull(string8);
      
      int int4 = StringUtils.lastIndexOfAny("NeCM;m%#q%p.'%.", stringArray0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      String string0 = "RFS!llCcEOl";
      String string1 = StringUtils.chomp("RFS!llCcEOl");
      assertTrue(string1.equals((Object)string0));
      assertEquals("RFS!llCcEOl", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("fUL+oma(");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "RFS!llCcEOl", (CharSequence) "RFS!llCcEOl");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.removeEnd("fUL+oma(", "RFS!llCcEOl");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("fUL+oma(", string2);
      assertNotNull(string2);
      
      String string3 = null;
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      StringUtils.repeat(" vs ", "YS'rlP'$3wxyR_a", Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      String string0 = StringUtils.chomp("\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[0] = "";
      String string1 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("T'-QuCPszU1/", "T'-QuCPszU1/", false);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.chomp("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("_}N7IB\"-DdPtV", "K>YE>");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("_}N7IB\"-DdPtV", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "", charSequenceArray0[5]);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int2);
      
      String string4 = StringUtils.chomp("\n");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd(stringArray0[3], "_}N7IB\"-DdPtV");
      assertEquals(4, stringArray0.length);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "%");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotEmpty("%");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string1 = StringUtils.wrapIfMissing(";bdQL;: TnXx", 'i');
      assertEquals("i;bdQL;: TnXxi", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceAll("i;bdQL;: TnXxi", "", "");
      assertTrue(string2.equals((Object)string1));
      assertEquals("i;bdQL;: TnXxi", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("%");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string3 = StringUtils.unwrap("i;bdQL;: TnXxi", 'E');
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("i;bdQL;: TnXxi", string3);
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.startsWith("i;bdQL;: TnXxi", "i;bdQL;: TnXxi");
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      boolean boolean5 = StringUtils.containsAny((CharSequence) "i;bdQL;: TnXxi", (CharSequence) null);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      
      String string4 = StringUtils.replaceFirst("", "i;bdQL;: TnXxi", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter((String) null, (-3283));
      assertNull(string5);
      
      boolean boolean6 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6);
      
      String string6 = StringUtils.replaceChars("Locale must not be null", "i;bdQL;: TnXxi", (String) null);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("ocalemustoteull", string6);
      assertNotNull(string6);
      
      boolean boolean7 = StringUtils.endsWithIgnoreCase(";bdQL;: TnXx", (CharSequence) null);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "i;bdQL;: TnXxi", (int) 'i', 0);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "i;bdQL;: TnXxi";
      boolean boolean8 = StringUtils.isEmpty("i;bdQL;: TnXxi");
      assertFalse(boolean8 == boolean4);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean1);
      assertFalse(boolean8);
      
      String string7 = StringUtils.stripToEmpty("Locale must not be null");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("Locale must not be null", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chomp("offset cannot be negative", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("...", '*');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("offset cannot be negative", "...", 1132);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.rotate("...", 1132);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("offset cannot be negative", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.substring("...", 2141, (-744));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("...", "", 5560, 12);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2141;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (-744);
      floatArray0[3] = (float) (-744);
      floatArray0[4] = (float) 2141;
      floatArray0[5] = (float) 12;
      String string5 = StringUtils.join(floatArray0, '*', (-1), (-744));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(6, floatArray0.length);
      assertEquals("", string5);
      assertArrayEquals(new float[] {2141.0F, (-1.0F), (-744.0F), (-744.0F), 2141.0F, 12.0F}, floatArray0, 0.01F);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("(ObDok{[IyA", "(ObDok{[IyA", "_C");
      assertEquals("_C", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "_C";
      charSequenceArray0[1] = (CharSequence) "(ObDok{[IyA";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("_C", "_C");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substring((String) null, 150);
      assertNull(string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, '^');
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("_C", (String) null, 2599);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, 'U', (-1897), (-1897));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      String string0 = StringUtils.defaultString("5yw;u");
      assertEquals("5yw;u", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("\n", "tfe(%@g*crPK");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("()` not found in ", (-1109), 'c');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("()` not found in ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.reverse("StdIoExtension is active but no %s annotation was found.");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals(".dnuof saw noitatonna s% on tub evitca si noisnetxEoIdtS", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceAll("StdIoExtension is active but no %s annotation was found.", "StdIoExtension is active but no %s annotation was found.", "ooFn;J");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("ooFn;J", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string7 = StringUtils.join((List<?>) null, 'c', (-5477), 2147483645);
      assertNull(string7);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "tfe(%@g*crPK";
      charSequenceArray0[2] = (CharSequence) ".dnuof saw noitatonna s% on tub evitca si noisnetxEoIdtS";
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "5yw;u";
      charSequenceArray0[5] = (CharSequence) "()` not found in ";
      charSequenceArray0[6] = (CharSequence) "StdIoExtension is active but no %s annotation was found.";
      charSequenceArray0[7] = (CharSequence) "\n";
      charSequenceArray0[8] = (CharSequence) ".dnuof saw noitatonna s% on tub evitca si noisnetxEoIdtS";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("[XKq:+%lW/f:k jHb", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string8 = StringUtils.replaceIgnoreCase("^MTR{", "()` not found in ", "5yw;u");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertEquals("^MTR{", string8);
      assertNotNull(string8);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[6], "c");
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0.67, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("%>ah#+TeoC=aig^ZU@", supplier0);
      assertEquals("%>ah#+TeoC=aig^ZU@", string0);
      assertNotNull(string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string1 = StringUtils.removeEnd("\r", "\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("Search and Replace array lengths don't match: ", "\r", 779);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("j8l^", "\r");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("j8l^", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "j8l^";
      String string4 = StringUtils.joinWith("Object varargs must not be null", objectArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(1, objectArray0.length);
      assertEquals("j8l^", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.ordinalIndexOf(" vs ", "", 3396);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "j8l^", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "7Tmeout for vintage @Test must be positive.", "Threshold must not be negative");
      assertEquals(1, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Threshold must not be negative", (CharSequence) "7Tmeout for vintage @Test must be positive.", 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string0 = StringUtils.replaceEachRepeatedly("Locale must not be null", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Locale must not be null", (CharSequence) null, 2);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad("FS!llCcEOl", (-19), "Locale must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("FS!llCcEOl", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compareIgnoreCase(stringArray0[0], "org.junitpioneer.jupiter.params.DoubleRange", false);
      assertFalse(int1 == int0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, int1);
      
      String string2 = StringUtils.chomp("NeCM;m%#q%p.'%.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("NeCM;m%#q%p.'%.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid("lUzZtt7G|}\"d:G&", (-32768), 1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("NeCM;m%#q%p.'%.", "lUzZtt7G|}\"d:G&");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("lUzZtt7G|}\"d:G&NeCM;m%#q%p.'%.lUzZtt7G|}\"d:G&", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.countMatches((CharSequence) "lUzZtt7G|}\"d:G&NeCM;m%#q%p.'%.lUzZtt7G|}\"d:G&", (CharSequence) "FS!llCcEOl");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string5 = StringUtils.removeStartIgnoreCase("lUzZtt7G|}\"d:G&", "FS!llCcEOl");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("lUzZtt7G|}\"d:G&", string5);
      assertNotNull(string5);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-32768);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-32768);
      doubleArray0[3] = (double) (-19);
      doubleArray0[4] = (double) (-19);
      doubleArray0[5] = (double) (-19);
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) (-32768);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '{', (-838), 30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -838
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("dm}AbOgF5ug7I");
      assertFalse(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("dm}AbOgF5ug7I");
      assertEquals("dm}AbOgF5ug7I", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "dm}AbOgF5ug7I", false);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string1 = StringUtils.replace("dm}AbOgF5ug7I", (String) null, (String) null, 1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("dm}AbOgF5ug7I", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isWhitespace("dm}AbOgF5ug7I");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.RetryingTestExtension");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(12, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.mid("org.junitpioneer.jupiter.RetryingTestExtension", 2, 3);
      assertEquals("g.j", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "g.j", (CharSequence[]) stringArray0);
      assertEquals(12, stringArray0.length);
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("g.j");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("7:^,oB+G9", "org.junitpioneer.jupiter.RetryingTestExtension", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(12, stringArray0.length);
      assertEquals("7:^,oB+G9org.junitpioneer.jupiter.RetryingTestExtension", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, ':');
      assertNull(string0);
      
      int int0 = StringUtils.compare("soY:qa", "soY:qa");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      String string0 = "|\\";
      String string1 = StringUtils.stripStart("|", "Q/i.u<e");
      assertFalse(string1.equals((Object)string0));
      assertEquals("|", string1);
      assertNotNull(string1);
      
      String string2 = "Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA...";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfBlank("Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA...", supplier0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA...", string3);
      assertNotNull(string3);
      
      String string4 = null;
      String string5 = StringUtils.replacePattern((String) null, "Illegal range. Equal from and to will produce an empty range.", (String) null);
      assertNull(string5);
      
      String string6 = StringUtils.uncapitalize((String) null);
      assertNull(string6);
      
      boolean boolean0 = StringUtils.isMixedCase("|");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "|", (-1581), 125);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA...", Integer.MAX_VALUE);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("|", "org.junitpioneer.jupiter.params.DoubleRange", (-644), (-644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 44
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      String string0 = StringUtils.lowerCase("su(,.NMZUZDq1G}n{");
      assertEquals("su(,.nmzuzdq1g}n{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "su(,.nmzuzdq1g}n{", 693, 1025);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.deleteWhitespace("su(,.NMZUZDq1G}n{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("su(,.NMZUZDq1G}n{", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("su(,.NMZUZDq1G}n{", "jY");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("jY", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("su(,.nmzuzdq1g}n{");
      assertFalse(boolean0);
      
      String string3 = StringUtils.trimToEmpty("su(,.NMZUZDq1G}n{");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("su(,.NMZUZDq1G}n{", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((List<?>) null, "No instructions to disable", 256, 256);
      assertNull(string4);
      
      String string5 = StringUtils.truncate("QMG~L0^NPwLG2wZFN", 1025);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("QMG~L0^NPwLG2wZFN", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.mid("jY", (-669), 256);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("jY", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.deleteWhitespace("fp");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertEquals("fp", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.left("JoV1/?GHFAjNS28$", 256);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertEquals("JoV1/?GHFAjNS28$", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.stripEnd("JoV1/?GHFAjNS28$", "jY");
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string8));
      assertEquals("JoV1/?GHFAjNS28$", string9);
      assertNotNull(string9);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'h';
      charArray0[2] = 'O';
      charArray0[3] = ';';
      charArray0[4] = 'm';
      charArray0[5] = 'n';
      charArray0[6] = '*';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "su(,.NMZUZDq1G}n{", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'>', 'h', 'O', ';', 'm', 'n', '*'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, "i'H\"Yz[", 5, (-2656));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      String string0 = StringUtils.join(objectArray0, 'v');
      assertEquals(3, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "java.lang.Object@2772fb53vjava.lang.Object@df486e5vjava.lang.Object@540c6327", (CharSequence) "java.lang.Object@2772fb53vjava.lang.Object@df486e5vjava.lang.Object@540c6327", 49);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substring("%O{", 1100, 458);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string2);
      
      short[] shortArray0 = new short[0];
      String string3 = StringUtils.join(shortArray0, 'w');
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, shortArray0.length);
      assertEquals("", string3);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceFirst("D]ri", "", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("D]ri", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.right("Q74%<beE", 8);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Q74%<beE", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.strip(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha(" ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap(" ", "@5");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase(" ");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", "g+mfv9\"");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.mid(" ", 1885, 256);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", "@5");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.abbreviate("g+mfv9\"", 1885);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("g+mfv9\"", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isNotBlank(" ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.center("yxQV~", 1885, (String) null);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.normalizeSpace("Q4V3tjsL?9:zLMV");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("Q4V3tjsL?9:zLMV", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.wrap("", "p 3Y^@O)F]XX.B");
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.isAlpha(" ");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.center(">b9ji[=s}~wOwd}", (-1314), "d4nVTu`*uuen$R3^|.h");
      assertEquals(">b9ji[=s}~wOwd}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate(">b9ji[=s}~wOwd}", (int) (byte)0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase(">b9ji[=s}~wOwd}", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("B1uD", "<6CVqf", (int) (byte)0);
      assertTrue(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("=", "d4nVTu`*uuen$R3^|.h");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("=", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "=", (CharSequence) "", 3);
      assertEquals(1, int0);
      
      String string4 = StringUtils.mid("", (byte)98, (-1314));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)charSequence0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("B1uD", (-1314), '#');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("B1uD", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "=", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "7";
      boolean boolean0 = StringUtils.startsWithAny("7", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("'.", 3, "'.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("'.'", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithAny("...", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("y}O", 'T');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ty}OT", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "'.'", (String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "y}O";
      stringArray0[1] = "Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA...";
      stringArray0[2] = "...";
      stringArray0[3] = "";
      stringArray0[4] = "'.";
      stringArray0[5] = "'.'";
      stringArray0[6] = "";
      stringArray0[7] = "Ty}OT";
      stringArray0[8] = "Ty}OT";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.upperCase("FmMY(XtMA^");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("FMMY(XTMA^", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", (-1079));
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[1];
      String string0 = StringUtils.join(shortArray0, 'O');
      assertEquals(1, shortArray0.length);
      assertEquals("0", string0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "9b_MI^@Sy&", (String) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat("0", (-2781));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("vF>YP-Q|[a", "\n", "0");
      assertNull(string2);
      
      int int1 = StringUtils.lastOrdinalIndexOf(".*{[0-9]+}.*", "", (-1079));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = StringUtils.getJaroWinklerDistance("\n", "");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.SPACE;
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart((String) null, "offset cannot be negative...");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 53;
      intArray0[1] = (int) '<';
      String string0 = StringUtils.join(intArray0, 'j');
      assertEquals(2, intArray0.length);
      assertEquals("53j60", string0);
      assertArrayEquals(new int[] {53, 60}, intArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("hZ1", 53);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Z1h", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("hZ1", "j_Uz,),^1G~", 53);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("hZ1", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("53j60", "hZ1");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("53j60", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.ordinalIndexOf("53j60", "...", 119);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "ion width with offset is %d", (CharSequence) "BuD", 227);
      assertFalse(int1 == int0);
      assertEquals(27, int1);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      String string0 = StringUtils.rightPad("-", 956, "Minimum abbreviation width is %d");
      assertEquals("-Minimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width ", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "-Minimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width ", (CharSequence) "Minimum abbreviation width is %d", 956);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      String string0 = StringUtils.lowerCase(">b9ji[=s}~wOwd}");
      assertEquals(">b9ji[=s}~wowd}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace(">b9ji[=s}~wowd}");
      assertTrue(string1.equals((Object)string0));
      assertEquals(">b9ji[=s}~wowd}", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("', is neither of type Map.Entry nor an Array", (int) (short)0, "w@{),RQ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      assertNotNull(string2);
      
      String string3 = "Timeout for vintage @Test must be positive.";
      String[] stringArray0 = StringUtils.substringsBetween("o1KRe$lAOb5^w%|_~O", "hg\" <", "Timeout for vintage @Test must be positive.");
      assertNull(stringArray0);
      
      char char0 = '9';
      String string4 = StringUtils.wrap("%", '9');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("9%9", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '9';
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 3319;
      floatArray0[4] = (float) 3319;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) (short)0;
      int int0 = 1;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '9', 1, 910);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("p{InCombiningDiacriticalMarks}+", supplier0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("p{InCombiningDiacriticalMarks}+", (-32768));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("S..", 1044);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("blank_blank_blank_2014", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap(string2, '`');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "blank_blank_blank_2014";
      stringArray0[1] = string4;
      stringArray0[2] = "j*{^;Mrn'K-AWc^#U=";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string4);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.mid("", 45, (-178));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "j*{^;Mrn'K-AWc^#U=", (-32768), (-2912));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-401);
      shortArray0[1] = (short)32742;
      shortArray0[2] = (short)321;
      shortArray0[3] = (short) (-143);
      shortArray0[4] = (short)122;
      shortArray0[5] = (short)64;
      String string6 = StringUtils.join(shortArray0, 'h', (-21), (-1428));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals(6, shortArray0.length);
      assertEquals("", string6);
      assertArrayEquals(new short[] {(short) (-401), (short)32742, (short)321, (short) (-143), (short)122, (short)64}, shortArray0);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.left("2295.9226~126.0~0.0 ", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("2295.9226~126.0~0.0 ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.trimToEmpty("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string1 = StringUtils.join(objectArray0, "");
      assertTrue(string1.equals((Object)string0));
      assertEquals(3, objectArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("", '#');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>('#');
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains('#'));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      String string3 = StringUtils.substringAfterLast("", 2491);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)118;
      String string4 = StringUtils.join(byteArray0, '#');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(4, byteArray0.length);
      assertEquals("-119#-119#-89#118", string4);
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte) (-89), (byte)118}, byteArray0);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string5 = StringUtils.substringAfterLast("", "comparator");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad("", 2493, "");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.remove((String) null, 'x');
      assertNull(string7);
      
      String string8 = StringUtils.uncapitalize(" doesn't match any regular expression.");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertEquals(" doesn't match any regular expression.", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("YS'rlP'$3wxyR_a", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.center("\r", 14, "YS'rlP'$3wxyR_a");
      assertEquals("YS'rlP\rYS'rlP'", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("YS'rlP\rYS'rlP'");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ys'rlp\rys'rlp'", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceAll("Rdh:*?\"LsQMyE", "OZK3*,6z&mV&=}z-tAQ", "YS'rlP'$3wxyR_a");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Rdh:*?\"LsQMyE", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("F");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("F", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("\r", "Cannot clone Cloneable type ", "lLx");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("Strings must not be null", (int) (short)0, "o5E|OoQl!^!");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Strings must not be null", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.SPACE;
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replace("bbo0A", "Cannot clone Cloneable type ", "F");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals("bbo0A", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.truncate("s_6lV*J", 9, 20);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      assertNotNull(string8);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", " ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "ys'rlp\rys'rlp'", (CharSequence) "\r");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string9 = StringUtils.replaceOnceIgnoreCase("YS'rlP'$3wxyR_a", (String) null, "YS'rlP'$3wxyR_a");
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertEquals("YS'rlP'$3wxyR_a", string9);
      assertNotNull(string9);
      
      boolean boolean2 = StringUtils.containsWhitespace("YS'rlP'$3wxyR_a");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[3] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[4] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[5] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      String string0 = StringUtils.wrapIfMissing("Search and Replace array lengths don't match: ", "2>6W<z");
      assertEquals("2>6W<zSearch and Replace array lengths don't match: 2>6W<z", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "2>6W<zSearch and Replace array lengths don't match: 2>6W<z";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "2>6W<zSearch and Replace array lengths don't match: 2>6W<z";
      String string1 = StringUtils.prependIfMissing("jV<p|i:s", "2>6W<zSearch and Replace array lengths don't match: 2>6W<z", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, charSequenceArray0.length);
      assertEquals("2>6W<zSearch and Replace array lengths don't match: 2>6W<zjV<p|i:s", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.removeStart("2>6W<zSearch and Replace array lengths don't match: 2>6W<zjV<p|i:s", "2>6W<zSearch and Replace array lengths don't match: 2>6W<z");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("jV<p|i:s", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[1], "jV<p|i:s", 12);
      assertFalse(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf(charSequenceArray0[1], (-1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.join((char[]) null, 'H', 322, 0);
      assertNull(string3);
      
      int int3 = StringUtils.indexOf((CharSequence) "jV<p|i:s", (CharSequence) "jV<p|i:s");
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      String string0 = StringUtils.wrap("M-VU]FC", 'Q');
      assertEquals("QM-VU]FCQ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("QM-VU]FCQ", 'Q');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.StringUtils", 'm');
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast("j Ke{5 & Z#r\u0005&H)r?", "j Ke{5 & Z#r\u0005&H)r?");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("j Ke{5 & Z#r\u0005&H)r?"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      String string0 = StringUtils.abbreviate(";@%\"K*\">7?_/SsJ/", (String) null, (-1476));
      assertEquals(";@%\"K*\">7?_/SsJ/", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("J2sb ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("J2sb", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase(";@%\"K*\">7?_/SsJ/");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(";@%\"k*\">7?_/sSj/", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "J2sb";
      String string3 = StringUtils.replaceOnceIgnoreCase("\n", "J2sb", "%k#q^\"\\Qs\"");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2212);
      intArray0[1] = (-2212);
      String string4 = StringUtils.join(intArray0, 'f');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(2, intArray0.length);
      assertEquals("-2212f-2212", string4);
      assertArrayEquals(new int[] {(-2212), (-2212)}, intArray0);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("-2212f-2212", "\n");
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((Iterator<?>) null, "{H3[#+]`|:~G;t_<y");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'J', 88, (-1946));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("cr`r)2", "");
      assertEquals("cr`r)2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty(" ");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("#`fWOlxuF=", "#`fWOlxuF=");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(11, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.split("", ";@%\"K*\">7?_/SsJ/", 579);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string0 = StringUtils.replaceFirst((String) null, " ", "`?E$\"\"o}6~6^s");
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(11, stringArray1.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.leftPad("vvGEV/J", (-2408), '&');
      assertEquals("vvGEV/J", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.RetryingTestExtension");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(12, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("org.junitpioneer.jupiter.RetryingTestExtension", 3, "org.junitpioneer.jupiter.RetryingTestExtension");
      assertEquals("org.junitpioneer.jupiter.RetryingTestExtension", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "org.junitpioneer.jupiter.RetryingTestExtension", (CharSequence[]) stringArray0);
      assertEquals(12, stringArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("org.junitpioneer.jupiter.RetryingTestExtension");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.replace("org.junitpioneer.jupiter.RetryingTestExtension", "org.junitpioneer.jupiter.RetryingTestExtension", "org.junitpioneer.jupiter.RetryingTestExtension", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.RetryingTestExtension", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.RetryingTestExtension", (CharSequence) "org.junitpioneer.jupiter.RetryingTestExtension", 559);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("w1I/hRc{C", "atch: ", "...", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("w1I/hRc{C", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("w1I/hRc{C", "w1I/hRc{C", false);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.rotate("w1I/hRc{C", 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("w1I/hRc{C", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((int[]) null, '4');
      assertNull(string3);
      
      String string4 = StringUtils.rotate("w1I/hRc{C", 8);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("1I/hRc{Cw", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("w1I/hRc{C");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.removeEndIgnoreCase("Fml9qn5b9=%Va&bJFml9qn5b9=%Va&bJ", "2thLV87Er:|=#%Ms.]");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Fml9qn5b9=%Va&bJFml9qn5b9=%Va&bJ", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllUpperCase("30hD/ez9Y|Cjs<V(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("YS'rlP'$3wxyR_a", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substring("la", (-2335));
      assertEquals("la", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "YS'rlP'$3wxyR_a", (CharSequence) "la", (-2335));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripStart("YS'rlP'$3wxyR_a", "la");
      assertFalse(string1.equals((Object)string0));
      assertEquals("YS'rlP'$3wxyR_a", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "la";
      charSequenceArray0[1] = (CharSequence) "YS'rlP'$3wxyR_a";
      charSequenceArray0[2] = (CharSequence) "YS'rlP'$3wxyR_a";
      String string2 = StringUtils.center(".", 1, "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.substringsBetween("YS'rlP'$3wxyR_a", ".", ".");
      assertNull(stringArray1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "la", (CharSequence) "YS'rlP'$3wxyR_a", 3319);
      assertFalse(int1 == int0);
      assertEquals(13, int1);
      
      String string3 = StringUtils.wrap("\r", '9');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("9\r9", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("la");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 13;
      floatArray0[1] = (float) 3319;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 13;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 13;
      floatArray0[6] = (float) (-2335);
      floatArray0[7] = (float) (-2335);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '9', 1, 256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      String string0 = StringUtils.replaceChars("&-IL[bbHEJEZJJz9", "&-IL[bbHEJEZJJz9", "&-IL[bbHEJEZJJz9");
      assertEquals("&-IL[bbHEJEZJJz9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, 16, "&-IL[bbHEJEZJJz9");
      assertNull(string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("(ObDok{[IyA", "(ObDok{[IyA", "_C");
      assertEquals("_C", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "_C";
      charSequenceArray0[1] = (CharSequence) "(ObDok{[IyA";
      String string1 = StringUtils.leftPad((String) null, 0, "offset cannot be negative");
      assertNull(string1);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 's');
      assertFalse(string2.equals((Object)string0));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("_Cs(ObDok{[IyAsssss", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("_C", "_C", 0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.center("Search and Replace array lengths don't match: ", 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("oN?P*TT#'z$6f%,Lb", 35, 31);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.swapCase("fEtp@k!H");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("FeTP@K!h", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], charSequenceArray0[1]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf(" ", " ", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1093.506067;
      doubleArray0[2] = (-3950.46745071518);
      doubleArray0[3] = (-958.6383956);
      doubleArray0[4] = (-446.68);
      String string0 = StringUtils.join(doubleArray0, 'U', 17, 17);
      assertEquals(5, doubleArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new double[] {0.0, 1093.506067, (-3950.46745071518), (-958.6383956), (-446.68)}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string3 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(5, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip("", "");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 102);
      assertNull(stringArray1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'U');
      assertEquals(0, int0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, "", 0, 17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 17
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" must return `CartesianProductTest.Sets`\r");
      assertEquals("must return `CartesianProductTest.Sets`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "fFzdM&.SOo(nd3", 'O');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("YS'rlP'$3wxyR_a", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substring("la", (-2335));
      assertEquals("la", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("YS'rlP'$3wxyR_a", "la");
      assertFalse(string1.equals((Object)string0));
      assertEquals("YS'rlP'$3wxyR_a", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("YS'rlP'$3wxyR_a");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string2 = StringUtils.defaultIfEmpty("OZK3*,6z&mV&=}z-tAQ", "(&U:RJox:*0L<");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("OZK3*,6z&mV&=}z-tAQ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "OZK3*,6z&mV&=}z-tAQ", 18, 1472);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBefore(" must return `CartesianProductTest.Sets`", "FyR<yc(H5g|H2");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" must return `CartesianProductTest.Sets`", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "la", (CharSequence) "\r", (-2335));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.leftPad("LPd&}U#C1uZ 1", (-1670), "'.");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("LPd&}U#C1uZ 1", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.compareIgnoreCase("X,WHrpVI GA+bdFxZ", " vs ", true);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(88, int2);
      
      String string5 = StringUtils.chomp("vWx/i");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("vWx/i", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.capitalize((String) null);
      assertNull(string6);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "'.", 7, (-1));
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{";
      String string0 = StringUtils.chomp("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{");
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.wrapIfMissing("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEach("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", stringArray1, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertEquals(25, int0);
      
      int int1 = StringUtils.compareIgnoreCase("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", "m#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{m", true);
      assertFalse(int1 == int0);
      assertEquals((-74), int1);
      
      String string4 = StringUtils.chomp("m#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{m");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("/;a <b2'dj>Z=5b", "T\"l4zPr$6");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("/;a <b2'dj>Z=5b", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToEmpty("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      
      int int2 = StringUtils.getFuzzyDistance("T\"l4zPr$6", "m#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{m", locale0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      
      String string7 = StringUtils.remove("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", '9');
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertNotNull(string7);
      
      int int3 = StringUtils.compareIgnoreCase("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", (String) null);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      
      String string8 = StringUtils.stripToEmpty("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertEquals("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      String string0 = StringUtils.difference("@DefaultLocale can only be used with language tag if language, country, and variant aru not set", "@DefaultLocale can only be used with language tag if language, country, and variant aru not set");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("@DefaultLocale can only be used with language tag if language, country, and variant aru not set");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "=,wMspC)Z nne");
      assertNull(stringArray0);
      
      String string1 = StringUtils.substring("{' matches '{", 150);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("", "Search and Replace array lengths don't match: 2>6W<z");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      String string3 = StringUtils.chomp("Minimum abbreviation width is %d");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripEnd(" is not in the range '0' - '9'", "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" is not in the range '0' - '9'", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '_');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("(ObDok{[IyA", "(ObDok{[IyA", "_C");
      assertEquals("_C", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "_C";
      String string1 = StringUtils.substringAfter("%S9>&vW%z5", "_C");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center((String) null, 16, 'o');
      assertNull(string2);
      
      String string3 = StringUtils.reverse("\u0000}}");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("}}\u0000", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("a,.\"'Z&HX;j~n}");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("}n~j;XH&Z'\".,a", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.getDigits("");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string6 = StringUtils.replaceIgnoreCase((String) null, "Strings must not be null", "\u0000}}");
      assertNull(string6);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[0], "`12.Ic1rpXXw{-`5");
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "5yw;up{InCombiningDiacriticalMarks}+";
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = "a,.\"'Z&HX;j~n}";
      stringArray0[4] = "Strings must not be null";
      stringArray0[5] = "";
      stringArray0[6] = "org.apache.commons.lang3.StringUtils";
      stringArray0[7] = "org.apache.commons.lang3.StringUtils";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are empty.Z  : .P");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray1);
      
      String string7 = StringUtils.reverseDelimited((String) null, 'o');
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("Strings must not be null");
      assertEquals("Stringsmustnotbenull", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("Stringsmustnotbenull", (-356));
      assertTrue(string1.equals((Object)string0));
      assertEquals("Stringsmustnotbenull", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlpha("Stringsmustnotbenull");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.leftPad(" ", (-3623), "Stringsmustnotbenull");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) " ", (-1268));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Stringsmustnotbenull", 110, (-2005));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.substringBefore("S;|p'ZbAAj", "j,%\"Q`_6s=xu");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("S;|p'ZbAAj", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "j,%\"Q`_6s=xu", (CharSequence) null, 2241);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.leftPad("Stringsmustnotbenull", 2241, "}D1_DIqihzmmG`&h-");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int3 = StringUtils.compareIgnoreCase("LPd&}U#C1uZ 1", "S;|p'ZbAAj", false);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-7), int3);
      
      String string5 = StringUtils.chomp(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(string4));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(vector0);
      assertNotNull(linkedHashSet0);
      assertFalse(vector0.contains(string4));
      assertFalse(linkedHashSet0.contains(string4));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String string6 = StringUtils.join((Iterable<?>) linkedHashSet0, ']');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(vector0.contains(string4));
      assertFalse(linkedHashSet0.contains(string4));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '2', (-3819), (-3819));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("No instructions to disable");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("No instructions to disable");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      String string0 = StringUtils.wrap("' matches '", '{');
      assertEquals("{' matches '{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "{' matches '{", (CharSequence) "{' matches '{");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("{' matches '{");
      assertTrue(string1.equals((Object)string0));
      assertEquals("{' matches '{", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{Z`!ZuW2_", "{' matches '{");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      String string2 = StringUtils.substringAfterLast("{' matches '{", (int) '{');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "{' matches '{", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string3 = StringUtils.join(byteArray0, '{');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, byteArray0.length);
      assertEquals("", string3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.substringAfterLast("?", "?");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("Re", "' matches '");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("R", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("' matches '", (-1), 'F');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("' matches '", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "R", (CharSequence) "Re", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      String string0 = StringUtils.chomp("Y");
      assertEquals("Y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("Y");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Y", (CharSequence) "Y");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Y";
      charSequenceArray0[2] = (CharSequence) "Y";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Y";
      String string1 = StringUtils.defaultString("", "Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      String string2 = StringUtils.right("org.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesi", 128);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesi", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "org.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesi", "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replacePattern("1.VqMwLV0=uOr", "Y", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("1.VqMwLV0=uOr", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      String string0 = StringUtils.wrap("YS'rlP'$3wxyR_a", "");
      assertEquals("YS'rlP'$3wxyR_a", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("", '\u001E');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 1216, 1216);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("YS'rlP'$3wxyR_a");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) "YS'rlP'$3wxyR_a";
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.removeEnd(" ", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[5] = (CharSequence) " vs ";
      boolean boolean1 = StringUtils.startsWithIgnoreCase(" vs ", "YS'rlP'$3wxyR_a");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.abbreviateMiddle("YS'rlP'$3wxyR_a", "BuD", (-1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("YS'rlP'$3wxyR_a", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[10];
      charArray0[0] = '\u001E';
      charArray0[1] = '\u001E';
      String string4 = StringUtils.substringBeforeLast("", "is %d");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.joinWith("\r", objectArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(13, objectArray0.length);
      assertEquals("YS'rlP'$3wxyR_a\r\r\r\r\r\r\r\r\r\r\r\r", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[1], "YS'rlP'$3wxyR_a\r\r\r\r\r\r\r\r\r\r\r\r", 93);
      assertTrue(int1 == int0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "YS'rlP'$3wxyR_a", (CharSequence) "", 93);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(15, int2);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("Strings must not be null");
      assertEquals("Stringsmustnotbenull", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("Stringsmustnotbenull", (-356));
      assertTrue(string1.equals((Object)string0));
      assertEquals("Stringsmustnotbenull", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlpha("Stringsmustnotbenull");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.center("Stringsmustnotbenull", (-1268), "k7]nu,");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Stringsmustnotbenull", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isNumeric(":E];g7u");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.wrap((String) null, "Strings must not be null");
      assertNull(string3);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "Stringsmustnotbenull", (CharSequence) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string4 = StringUtils.prependIfMissing((String) null, "", (CharSequence[]) null);
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("Strings must not be null", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "Never disable parameterized test method itself", "QS!");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      int int0 = StringUtils.getFuzzyDistance("Never disable parameterized test method itself", "Never disable parameterized test method itself", locale0);
      assertEquals(136, int0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      String string0 = StringUtils.abbreviate("O$vA*`z2[NUE{3", "", 136, 136);
      assertEquals("O$vA*`z2[NUE{3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{";
      String string0 = StringUtils.chomp("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{");
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.reverse("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{oj6Ks=\"m$TNYkyq.iEP[\n8@Ak_k.7'K#", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEach("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", stringArray1, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("Threshold must not be negative", "", 3097, (-1227));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Threshold must not be negative", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty(" ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace(" ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = 'g';
      charArray0[2] = '9';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("9g9", string0);
      assertArrayEquals(new char[] {'9', 'g', '9'}, charArray0);
      assertNotNull(string0);
      
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = " ";
      stringArray1[1] = " ";
      stringArray1[2] = " ";
      stringArray1[3] = "9g9";
      stringArray1[4] = " ";
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 3);
      assertEquals(0, int0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains('9'));
      
      NavigableSet<Object> navigableSet0 = treeSet0.descendingSet();
      assertNotNull(navigableSet0);
      assertFalse(navigableSet0.contains('9'));
      assertFalse(treeSet0.contains('9'));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains('9'));
      
      String string1 = StringUtils.join(iterator0, " ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(treeSet0.contains('9'));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 164);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertNull(string2);
      
      boolean boolean2 = StringUtils.equalsAny("9g9", (CharSequence[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.abbreviate("u_?5", "", (-2542));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("u_?5", string3);
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      String string0 = StringUtils.remove("E5brS3ebR", 's');
      assertEquals("E5brS3ebR", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      String string0 = StringUtils.defaultString("5yw;u");
      assertEquals("5yw;u", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("\n", "tfe(%@g*crPK");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = '3';
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrapIfMissing("\n", '3');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("3\n3", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[0], "\n");
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\n";
      stringArray0[1] = "\n";
      stringArray0[2] = "5yw;u";
      stringArray0[3] = "\n";
      stringArray0[5] = "\n";
      stringArray0[6] = "5yw;u";
      stringArray0[7] = "\n";
      stringArray0[8] = "tfe(%@g*crPK";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "./");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.upperCase((String) null);
      assertNull(string4);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)98;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '3', 33, 2953);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      String string0 = StringUtils.chomp("Y");
      assertEquals("Y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("Y");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Y", (CharSequence) "Y");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.abbreviate("", 122, 4756);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("", "");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[2] = 'i';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Y", charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'i', '\u0000', 'i'}, charArray0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(locale0));
      assertEquals(0, linkedList0.size());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)0;
      String string3 = StringUtils.join(byteArray0, 'i', 13, 0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals(4, byteArray0.length);
      assertEquals("", string3);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-11), (byte)11, (byte)0}, byteArray0);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("", "Y", (int) (byte) (-11));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      String string0 = "org.junitpioneer.jupiter.SystemPropertyExtension";
      char char0 = 'x';
      char char1 = 'R';
      String string1 = StringUtils.replaceChars("org.junitpioneer.jupiter.SystemPropertyExtension", 'x', 'R');
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.SystemPropertyERtension", string1);
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.SystemPropertyERtension";
      charSequenceArray0[3] = null;
      String string2 = StringUtils.swapCase("org.junitpioneer.jupiter.SystemPropertyERtension");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ORG.JUNITPIONEER.JUPITER.sYSTEMpROPERTYerTENSION", string2);
      assertNotNull(string2);
      
      charSequenceArray0[4] = (CharSequence) "ORG.JUNITPIONEER.JUPITER.sYSTEMpROPERTYerTENSION";
      charSequenceArray0[5] = null;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "ORG.JUNITPIONEER.JUPITER.sYSTEMpROPERTYerTENSION", charSequenceArray0[5], Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 3236, (String) null);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("", "wI|E`TZP}\"C*lht7\" ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) null, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "&E3[yiZ&!bCy I<g{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{";
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = 'K';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'6', 'K'}, charArray0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "gT(:+$|-";
      stringArray0[5] = "gT(:+$|-";
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.SystemPropertyExtensionorg.junitpioneer.jupiter.SystemPropertyExtension", "org.junitpioneer.jupiter.SystemPropertyExtensionorg.junitpioneer.jupiter.SystemPropertyExtension", 13);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(13, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      int int0 = (-1476);
      String string0 = "";
      String string1 = null;
      String string2 = StringUtils.abbreviateMiddle((String) null, "Z!I0f{P2#", 33);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "Z!I0f{P2#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      String string0 = StringUtils.chop("`");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", "org.junitpioneer.jupiter.^arams.ByteRaSg}", 4620);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("L", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("", "L", "");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replace("?", "&E3[yiZ&!bCy I<g{", "/hSr(B0Y2y", 3);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("?", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("?", "");
      assertTrue(boolean0);
      
      String string5 = StringUtils.substringBetween("org.junitpioneer.jupiter.^arams.ByteRaSg}", "a[!x-6o*M.Rp-;?Buz}");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category0, locale_Category0);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      
      boolean boolean0 = enumSet0.add(locale_Category0);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertFalse(boolean0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, '[');
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertEquals("DISPLAY", string0);
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet1 = EnumSet.range(locale_Category2, locale_Category0);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertEquals(1, enumSet1.size());
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "DISPLAY", (CharSequence) "DISPLAY", 5);
      assertEquals(0, int0);
      
      String string1 = StringUtils.leftPad("", 0, '[');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "DISPLAY";
      stringArray0[1] = "";
      stringArray0[2] = "DISPLAY";
      stringArray0[3] = "";
      boolean boolean1 = enumSet0.addAll(enumSet1);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(boolean1 == boolean0);
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category2);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertFalse(boolean1);
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      
      stringArray0[4] = "DISPLAY";
      stringArray0[5] = "...";
      stringArray0[6] = "DISPLAY";
      stringArray0[7] = "W{";
      stringArray0[8] = "";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(9, stringArray0.length);
      assertEquals("DISPLAY", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      String string0 = StringUtils.substring("@mKf9Zj2R-OOA:Z", (-205), 54);
      assertEquals("@mKf9Zj2R-OOA:Z", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("org.apache.commons.lang3.CharSequenceUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{Z`!ZuW2_", "or any enclosing class");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.removeEnd("org.apache.commons.lang3.CharSequenceUtils", "Di9vpz");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("{Z`!ZuW2_", (-1610612734));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("{Z`!ZuW2_", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("or any enclosing class");
      assertTrue(boolean0);
      
      String string4 = StringUtils.truncate((String) null, 54, 54);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      String string0 = StringUtils.rightPad("e.+Q^Du~m-o", (-2454), (String) null);
      assertEquals("e.+Q^Du~m-o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("e.+Q^Du~m-o", "e.+Q^Du~m-o", (CharSequence[]) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("e.+Q^Du~m-o", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2454);
      longArray0[1] = (long) (-2454);
      longArray0[2] = (long) (-2454);
      String string2 = StringUtils.join(longArray0, 'w');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, longArray0.length);
      assertEquals("-2454w-2454w-2454", string2);
      assertArrayEquals(new long[] {(-2454L), (-2454L), (-2454L)}, longArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace((String) null, (String) null, ";V(%dZbahS2z$M47#", (-2454));
      assertNull(string3);
      
      String string4 = StringUtils.wrap("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]", 'S');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("SMethod `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]S", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.remove((String) null, "e.+Q^Du~m-o");
      assertNull(string5);
      
      String string6 = StringUtils.normalizeSpace("SMethod `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]S");
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("SMethod `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]S", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[1];
      String string1 = StringUtils.join(longArray0, '!');
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, longArray0.length);
      assertEquals("0", string1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) "&E3[yiZ&!bCy I<g{";
      boolean boolean0 = StringUtils.endsWithAny("FS!llCcEOl", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("@CartesianProductTest not found", 'c');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("c@CartesianProductTest not foundc", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) " ", "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "@CartesianProductTest not found");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.upperCase("");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "@CartesianProductTest not found", (CharSequence) "", 3081);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      String string0 = StringUtils.wrap("YS'rlP'$3wxyR_a", "");
      assertEquals("YS'rlP'$3wxyR_a", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("", '\u001E');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 1216, 1216);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("YS'rlP'$3wxyR_a");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) "YS'rlP'$3wxyR_a";
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.removeEnd(" ", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[5] = (CharSequence) " vs ";
      String string3 = StringUtils.abbreviateMiddle("YS'rlP'$3wxyR_a", "BuD", (-1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("YS'rlP'$3wxyR_a", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\u001E';
      charArray0[1] = '\u001E';
      String string4 = StringUtils.substringBeforeLast("", "j8l^");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.joinWith("\r", objectArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(13, objectArray0.length);
      assertEquals("YS'rlP'$3wxyR_a\r\r\r\r\r\r\r\r\r\r\r\r", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[1], "YS'rlP'$3wxyR_a\r\r\r\r\r\r\r\r\r\r\r\r", 93);
      assertTrue(int1 == int0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "YS'rlP'$3wxyR_a", (CharSequence) "", 93);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(15, int2);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      String string0 = StringUtils.substringAfter("n", (-1430));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "n", (CharSequence) "", 2982);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = 3;
      String string1 = StringUtils.rightPad("'.", 3, "'.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("'.'", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("", 744);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "...";
      stringArray0[1] = null;
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertEquals("...", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("74zYNiRNrTslU", 16);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" 74zYNiRNrTslU  ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertEquals("...", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBeforeLast(stringArray0[1], "v7b");
      assertEquals(2, stringArray0.length);
      assertNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern(" vs ", "**!;D", "74zYNiRNrTslU");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // **!;D
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      String string0 = StringUtils.chomp("\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...");
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((float[]) null, 'j');
      assertNull(string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "...", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.repeat('j', 0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootUpperCase("...");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("...", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      StringWriter stringWriter0 = new StringWriter(3457);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('j');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("j", stringWriter0.toString());
      assertEquals("j", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringBuffer0);
      assertEquals("j", stringWriter0.toString());
      assertEquals("j", stringWriter1.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("j", stringBuffer0.toString());
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.center("", 571, "Don't clear/set the same entry more than once.");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't cleDon't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clea", string4);
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't cleDon't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clea", supplier0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't cleDon't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clea", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.capitalize("...");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertEquals("...", string6);
      assertNotNull(string6);
      
      int int2 = StringUtils.countMatches((CharSequence) "Don't clear/set the same entry more than once.", (CharSequence) stringBuffer0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(0, int2);
      assertEquals("j", stringWriter0.toString());
      assertEquals("j", stringWriter1.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("j", stringBuffer0.toString());
      
      boolean boolean1 = StringUtils.isNumericSpace("Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't cleDon't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clea");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '1');
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "fe(%@g*crPK", (CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("/(N", "/(N");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 53);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("Y #&c_lf@p)\"'j");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny("Y #&c_lf@p)\"'j", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{";
      // Undeclared exception!
      try { 
        StringUtils.repeat("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      String string0 = StringUtils.remove("5ND.IL|P", 't');
      assertEquals("5ND.IL|P", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("5ND.IL|P", "5ND.IL|P", "5ND.IL|P");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "5ND.IL|P";
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'t', 't', 't', 't'}, charArray0);
      
      String string2 = StringUtils.replaceOnce("5ND.IL|P", "w{Rb>)peZWL", "5ND.IL|P");
      assertTrue(string2.equals((Object)string0));
      assertEquals("5ND.IL|P", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("5ND.IL|P", 't');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("t5ND.IL|Pt", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("5ND.IL|P", 'a');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("a5ND.IL|Pa", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.unwrap("&E3[yiZ&!bCy I<g{", 't');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("&E3[yiZ&!bCy I<g{", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.compare("Object varargs must not be null", "hf&pu!\ni*YAqP", false);
      assertEquals((-25), int0);
      
      int int1 = StringUtils.compareIgnoreCase("-~0 G ", "Object varargs must not be null", false);
      assertFalse(int1 == int0);
      assertEquals((-66), int1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, " vs ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.left("&E3[yiZ&!bCy I<g{", 714);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("&E3[yiZ&!bCy I<g{", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty(" ");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("n4B\"", "nP4Ri.<fp");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.substring("PPr2V", (-2335));
      assertEquals("PPr2V", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("OZK3*,6z&mV&=}z-tAQ", " ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("OZK3*,6z&mV&=}z-tAQ", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("PPr2V");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string2 = StringUtils.truncate("FyR<yc(H5g|H2", 13);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("FyR<yc(H5g|H2", string2);
      assertNotNull(string2);
      
      Locale locale1 = Locale.JAPAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.substringAfter("n4B\"", "2>6W<zSearch and Replace array lengths don't match: ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      String string0 = StringUtils.abbreviate("do+u!-wfGH8S<WF", 56);
      assertEquals("do+u!-wfGH8S<WF", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "do+u!-wfGH8S<WF", (CharSequence) "do+u!-wfGH8S<WF");
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp("VEs", "do+u!-wfGH8S<WF");
      assertFalse(string1.equals((Object)string0));
      assertEquals("VEs", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA", 2312, 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA", 2312);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.toRootUpperCase("W@+Ya^J^w''");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("W@+YA^J^W''", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("VEs");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("VEs", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.toRootUpperCase("No instructions to disable");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("NO INSTRUCTIONS TO DISABLE", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.containsWhitespace("Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty(" ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace(" ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.substring("T=,i[", (-2335));
      assertEquals("T=,i[", string0);
      assertNotNull(string0);
      
      boolean boolean2 = StringUtils.isAlpha(" ");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.center("C;4=m|=RkQftCM?\"", 467, "<Jwy%2RoCZ/!sQE8=t");
      assertFalse(string1.equals((Object)string0));
      assertEquals("<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCC;4=m|=RkQftCM?\"<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("C;4=m|=RkQftCM?\"", (String) null, 837, 837);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("C;4=m|=RkQftCM?\"", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.endsWithIgnoreCase((CharSequence) null, "C;4=m|=RkQftCM?\"");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string3 = StringUtils.replaceEachRepeatedly("C;4=m|=RkQftCM?\"", stringArray0, stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("C;4=m|=RkQftCM?\"", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty(" ", "<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCC;4=m|=RkQftCM?\"<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ/!sQE8=t<Jwy%2RoCZ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "T=,i[");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean4 = StringUtils.equals((CharSequence) " ", (CharSequence) "~~T%CyzC;dbfj/gt~7;`6%fm|*5XGJ~~T%CyzC;dbfj/gt~7;`6%fm|*5XGJ~~T%CyzC;dbfj/gt~7;`6%fm|*5XGJgt~7;`6%fm|*5XGJ");
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isBlank(" ");
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5);
      
      String string5 = StringUtils.uncapitalize("C;4=m|=RkQftCM?\"");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("c;4=m|=RkQftCM?\"", string5);
      assertNotNull(string5);
      
      boolean boolean6 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", (String) null, 98);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.abbreviate("", 3, 3);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("", " vs ");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      charArray0[1] = 'u';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'i', 'u', 'i', 'i'}, charArray0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(locale0));
      assertEquals(0, linkedList0.size());
      
      Locale locale1 = Locale.lookup(vector0, linkedList0);
      assertNull(locale1);
      assertFalse(linkedList0.contains(locale0));
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, linkedList0.size());
      
      String string3 = StringUtils.removeEnd("Pee/F#QhYQ9JeCMc", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Pee/F#QhYQ9JeCMc", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) " vs ", charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'i', 'u', 'i', 'i'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("2", "2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("C}", "C}", "C}");
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "2", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      String string0 = StringUtils.difference("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter((String) null, "{' matches '{");
      assertNull(string1);
      
      String string2 = StringUtils.center("()` not found in ", 16, '&');
      assertFalse(string2.equals((Object)string0));
      assertEquals("()` not found in ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse("#2%&Tt2`Xw{<$+[|");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("|[+$<{wX`2tT&%2#", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "#2%&Tt2`Xw{<$+[|");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "%O{";
      stringArray0[2] = "()` not found in ";
      stringArray0[3] = "()` not found in ";
      stringArray0[4] = "#2%&Tt2`Xw{<$+[|";
      stringArray0[5] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray0[6] = "\\lquL.twFp'";
      stringArray0[7] = " ";
      stringArray0[8] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "()` not found in ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.substring("4eP@|%1J#gji4W", 16);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "\\lquL.twFp'");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.uncapitalize(string1);
      assertNull(string6);
      
      boolean boolean2 = StringUtils.isAlphaSpace("()` not found in ");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      char char0 = 'm';
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.wrapIfMissing("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.ordinalIndexOf("m#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{m", "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 5);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", (CharSequence) "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.removeEnd("ive", "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ive", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "m#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{m", (CharSequence) "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Qu;|a$fgrjgUv_zAw", (String) null, 8, 8);
      assertEquals("Qu;|a$fgrjgUv_zAw", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("Qu;|a$fgrjgUv_zAw", "Qu;|a$fgrjgUv_zAw");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad("2^i:uZ$~>vO'Wj2", 8, "offset cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("2^i:uZ$~>vO'Wj2", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 's');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("maxWith cannot be negative", "Qu;|a$fgrjgUv_zAw", 10);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.center("Search and Replace array lengths don't match: ", 10);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("mLZH,", 8, (-696));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.swapCase("");
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "offset cannot be negative", (CharSequence) "Qu;|a$fgrjgUv_zAw");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[1];
      char char0 = '!';
      String string1 = StringUtils.join(longArray0, '!');
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, longArray0.length);
      assertEquals("0", string1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.truncate("", 3081);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap(" ", '!');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("! !", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("", "&E3[yiZ&!bCy I<g{");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("A)P6pqi/?=%9[Rn", "", 3081);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("A)P6pqi/?=%9[Rn", string5);
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[13];
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(13, charSequenceArray0.length);
      assertNull(charSequence0);
      
      charSequenceArray0[0] = null;
      String string6 = StringUtils.right((String) null, 3081);
      assertNull(string6);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "A)P6pqi/?=%9[Rn";
      charSequenceArray0[3] = (CharSequence) "";
      String string7 = StringUtils.appendIfMissing("OZK3*,6z&mV&=}z-tAQ", "FS!llCcEOl", charSequenceArray0);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertEquals(13, charSequenceArray0.length);
      assertEquals("OZK3*,6z&mV&=}z-tAQ", string7);
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "", 91, 3081);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" vs ", " vs ", (-312), (-312));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      String string0 = StringUtils.rightPad("'.", 3, "5ND.IL|P");
      assertEquals("'.5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("p{InCombiningDiacriticalMarks}+", 3);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s}+p{InCombiningDiacriticalMark", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "s}+p{InCombiningDiacriticalMark";
      stringArray0[1] = "'.5";
      stringArray0[2] = "5ND.IL|P";
      stringArray0[3] = "Strings must not be null";
      stringArray0[4] = "5ND.IL|P";
      stringArray0[5] = "'.5";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertEquals("s}+p{InCombiningDiacriticalMark", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("h\"K", 1414);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals(6, stringArray0.length);
      assertEquals("s}+p{InCombiningDiacriticalMark", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((byte[]) null, '<', (-128), 1414);
      assertNull(string5);
      
      String[] stringArray1 = StringUtils.split("5ND.IL|P", string3, (-3386));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", "jG_[", (-3386), (-3386));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      String string0 = StringUtils.remove("", ']');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      String string0 = StringUtils.swapCase("%o{");
      assertEquals("%O{", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%o{", "%O{");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringAfter("%o{", 23);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("' matches '", '%');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("' matches '", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      String string3 = StringUtils.join(byteArray0, '%');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, byteArray0.length);
      assertEquals("-119", string3);
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("' matches '");
      assertFalse(boolean0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains((byte) (-119)));
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains((byte) (-119)));
      
      boolean boolean1 = treeSet0.add("' matches '");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(treeSet0.contains("' matches '"));
      assertFalse(treeSet0.contains("%O{"));
      
      boolean boolean2 = treeSet0.add("%o{");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(treeSet0.contains("' matches '"));
      assertFalse(treeSet0.contains("%O{"));
      
      Iterator<Object> iterator1 = treeSet0.descendingIterator();
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      assertTrue(treeSet0.contains("' matches '"));
      assertFalse(treeSet0.contains("%O{"));
      
      String string4 = StringUtils.join(iterator1, "iQMVY6t");
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("%o{iQMVY6t' matches '", string4);
      assertNotNull(string4);
      assertTrue(treeSet0.contains("' matches '"));
      assertFalse(treeSet0.contains("%O{"));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "' matches '", (CharSequence) "", 16);
      assertEquals(11, int0);
      
      String string5 = StringUtils.abbreviate("Strings must not be null", (int) (byte) (-119), 2583);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Strings must not be null", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.compareIgnoreCase("-Sn", "Strings must not be null", false);
      assertFalse(int1 == int0);
      assertEquals((-70), int1);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'E', 82, 1285);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 82
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("e.+Q^Du~m-o");
      assertFalse(boolean0);
      
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA";
      String string1 = StringUtils.right("g", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("g", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("org.junitpioneer.jupiter.DefaultTimeZoneExtension", "g");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string2);
      assertNotNull(string2);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 33;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-2454);
      floatArray0[3] = (float) 1;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '>', (-1455), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1455
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      String string0 = StringUtils.defaultString("5yw;u");
      assertEquals("5yw;u", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("\n", "tfe(%@g*crPK");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '&';
      charArray0[3] = '4';
      int int0 = StringUtils.indexOfAny((CharSequence) "5yw;u", charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'4', '4', '&', '4'}, charArray0);
      
      String string3 = StringUtils.getDigits("");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("5yw;u", "&J;*g6S.BM");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("5yw;u", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trim((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.removeStart("p{InCombiningDiacriticalMarks}+", "5yw;u");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("p{InCombiningDiacriticalMarks}+", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.defaultString("org.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesi", " ");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesi", string7);
      assertNotNull(string7);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      String string8 = StringUtils.right("", (-1112));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertEquals("", string8);
      assertNotNull(string8);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "org.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesi", "5yw;u");
      assertFalse(int1 == int0);
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "7Tmeout for vintage @Test must be positive.", "X)HKG2*L/`Ev");
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      String string0 = StringUtils.unwrap("Don't clear/set the same entry more than once.", "Don't clear/set the same entry more than once.");
      assertEquals("Don't clear/set the same entry more than once.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("Ocw=\"d", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ocw=\"d", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Don't clear/set the same entry more than once.";
      stringArray0[1] = "Don't clear/set the same entry more than once.";
      stringArray0[2] = "Don't clear/set the same entry more than once.";
      stringArray0[3] = "Don't clear/set the same entry more than once.";
      String string2 = StringUtils.removeStart("offset cannot be negative", "Don't clear/set the same entry more than once.");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("<#D'NH)3XlOT)", "", false);
      assertEquals(13, int0);
      
      String string3 = StringUtils.rotate("<#D'NH)3XlOT)", 13);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("<#D'NH)3XlOT)", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((int[]) null, '4');
      assertNull(string4);
      
      String string5 = StringUtils.rotate("<#D'NH)3XlOT)", 13);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("<#D'NH)3XlOT)", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.split("Don't clear/set the same entry more than once.");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string6 = StringUtils.wrapIfMissing("FS!llCcEOl", '4');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("4FS!llCcEOl4", string6);
      assertNotNull(string6);
      
      double double0 = StringUtils.getJaroWinklerDistance("FS!llCcEOl", "Don't clear/set the same entry more than once.");
      assertEquals(0.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      String string0 = StringUtils.remove("LulLJt=M`R(r", 'H');
      assertEquals("LulLJt=M`R(r", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("LulLJt=M`R(r", "t3K8onu");
      assertEquals(0.32, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      String string0 = StringUtils.join(objectArray0, 'v');
      assertEquals(3, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "java.lang.Object@39859d59vjava.lang.Object@516bfbevjava.lang.Object@2b53c9f3", (CharSequence) "java.lang.Object@39859d59vjava.lang.Object@516bfbevjava.lang.Object@2b53c9f3", 49);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substring("%O{", 1100, 458);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.left("java.lang.Object@39859d59vjava.lang.Object@516bfbevjava.lang.Object@2b53c9f3", 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("", 1100, "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      boolean boolean1 = StringUtils.containsOnly((CharSequence) string3, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      String string0 = StringUtils.removeStart("fUL+oma(", "org.j3nitpioneer.vintage.TimeoutExtension");
      assertEquals("fUL+oma(", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("fUL+oma(");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("org.j3nitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, charArray0.length);
      assertEquals("R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertArrayEquals(new char[] {'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "fUL+oma(";
      stringArray0[1] = "fUL+oma(";
      stringArray0[2] = "fUL+oma(";
      stringArray0[3] = "R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000";
      String string2 = StringUtils.replaceEachRepeatedly("jG&5p+VWVao9lp#", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("jG&5p+VWVao9lp#", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "fUL+oma(", (CharSequence) "fUL+oma(", 2);
      assertEquals(0, int0);
      
      String string3 = StringUtils.leftPad("org.j3nitpioneer.vintage.TimeoutExtension", 504, "org.junitpioneer.jupiter.Cartesiorg.junitpioneer.jupiter.CartesianProductTestExtension");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.Cartesiorg.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesiorg.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesiorg.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesiorg.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesiorg.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesioorg.j3nitpioneer.vintage.TimeoutExtension", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.compareIgnoreCase("fUL+oma(", " vs ", false);
      assertFalse(int1 == int0);
      assertEquals(70, int1);
      
      String string4 = StringUtils.chomp("6ZU-K1|:b{P:>lU:1J");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("6ZU-K1|:b{P:>lU:1J", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("fUL+oma(", 2, 2);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("L+", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.countMatches((CharSequence) "", (CharSequence) "fUL+oma(");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string6 = StringUtils.removeStartIgnoreCase((String) null, "od$j&CE>");
      assertNull(string6);
      
      boolean boolean2 = StringUtils.startsWithAny("od$j&CE>", stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", "oBRu26FL%H0/?!");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Ku0K,bF,", (CharSequence) "la");
      assertEquals("Ku0K,bF,", charSequence0);
      assertNotNull(charSequence0);
      
      String string0 = StringUtils.unwrap("FY#)00", "FY#)00");
      assertFalse(string0.equals((Object)charSequence0));
      assertEquals("FY#)00", string0);
      assertNotNull(string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("la");
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(string0));
      assertTrue(linkedList0.contains("la"));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add("Ku0K,bF,");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(linkedList0.contains(string0));
      assertTrue(linkedList0.contains("la"));
      assertEquals(2, linkedList0.size());
      
      String string1 = StringUtils.join((Iterable<?>) linkedList0, 't');
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("latKu0K,bF,", string1);
      assertNotNull(string1);
      assertFalse(linkedList0.contains(string0));
      assertTrue(linkedList0.contains("la"));
      assertEquals(2, linkedList0.size());
      
      String string2 = StringUtils.wrapIfMissing("h2", '?');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("?h2?", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(2, enumSet0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(2, enumSet0.size());
      
      String string0 = StringUtils.join(iterator0, 'k');
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals("AUTOSELECT_FILTERINGkMAP_EXTENDED_RANGES", string0);
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(2, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      String string0 = StringUtils.unwrap("Don't clear/set the same entry more than once.", "Don't clear/set the same entry more than once.");
      assertEquals("Don't clear/set the same entry more than once.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("Ocw=\"d", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ocw=\"d", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Don't clear/set the same entry more than once.";
      stringArray0[1] = "Don't clear/set the same entry more than once.";
      stringArray0[2] = "Don't clear/set the same entry more than once.";
      stringArray0[3] = "Don't clear/set the same entry more than once.";
      String string2 = StringUtils.replaceEach("<#D'NH)3XlOT)", (String[]) null, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4, stringArray0.length);
      assertEquals("<#D'NH)3XlOT)", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Don't clear/set the same entry more than once.";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Ocw=\"d";
      charSequenceArray0[3] = (CharSequence) "Don't clear/set the same entry more than once.";
      charSequenceArray0[4] = (CharSequence) "Don't clear/set the same entry more than once.";
      charSequenceArray0[5] = (CharSequence) "5ND.IL|P";
      charSequenceArray0[6] = (CharSequence) "Ocw=\"d";
      int int0 = StringUtils.lastIndexOfAny("<#D'NH)3XlOT)", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(13, int0);
      
      int int1 = StringUtils.compareIgnoreCase("Don't clear/set the same entry more than once.", "Don't clear/set the same entry more than once.", false);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.chomp("zM7");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("zM7", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripEnd("&]C", "[z`W");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("&]C", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty("[z`W");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("[z`W", string5);
      assertNotNull(string5);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      int int2 = StringUtils.getFuzzyDistance(charSequenceArray0[1], "<#D'NH)3XlOT)", locale0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int2);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      String string6 = StringUtils.remove("Comparator should not be null.", 'b');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("Comparator should not e null.", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "&E3[yiZ&!bCy I<g{");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceChars("=}\u0007O:NY-XCB", 'A', '');
      assertEquals("=}\u0007O:NY-XCB", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("&E3[yiZ&!bCy I<g{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("&E3[yiZ&!bCy I<g{", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("maxWVth cynnot be negative", "Illegal range. Equal from and to will produce an empty range.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("maxWVth cynnot be negative", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      String string3 = StringUtils.valueOf(charArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(3, charArray0.length);
      assertEquals("AA", string3);
      assertArrayEquals(new char[] {'', 'A', 'A'}, charArray0);
      assertNotNull(string3);
      
      int int0 = StringUtils.compareIgnoreCase("&E3[yiZ&!bCy I<g{", "&E3[yiZ&!bCy I<g{", true);
      assertEquals(0, int0);
      
      String string4 = StringUtils.substring("6@<sGY #&c_lf@p)\"'j", 0, 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "6@<sGY #&c_lf@p)\"'j", 3075);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, '!');
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("", " ", "&E3[yiZ&!bCy I<g{", (int) '!');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("DEOWz q,k:ysWp%", 7);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("DEOW...", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("DEOW...", (String) null, (-984));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", " ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.endsWithAny("", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.stripToNull((String) null);
      assertNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) " ", 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      String string0 = StringUtils.unwrap("L+", 'V');
      assertEquals("L+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "L+", (CharSequence) "L+");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...", 33);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      charSequenceArray0[3] = (CharSequence) "...";
      boolean boolean0 = StringUtils.isAlphanumericSpace(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.right("Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA", (-139));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("...", "Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isMixedCase("org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfBlank(" doesn't match any regular expression.", supplier0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" doesn't match any regular expression.", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.capitalize(" must return `CartesianProductTest.Sets`");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" must return `CartesianProductTest.Sets`", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("...", 28);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("....................................................................................", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "...", (CharSequence) " doesn't match any regular expression.");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("Strings must not be null");
      assertEquals("Stringsmustnotbenull", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Stringsmustnotbenull", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'T'}, charArray0);
      
      String string1 = StringUtils.leftPad("Strings must not be null", 29, "org.junitpioneer.jupiter.params.ByteRange");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.jStrings must not be null", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.jStrings must not be null", 2127);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Stringsmustnotbenull", 29, 5890);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substringBefore("5yw;u", "org.junitpioneer.jupiter.params.ByteRange");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("5yw;u", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "org.jStrings must not be null", (CharSequence) "org.jStrings must not be null", 4);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Strings must not be null";
      stringArray0[1] = "5yw;u";
      stringArray0[2] = " vs Y";
      stringArray0[3] = "8/e_JD{'N:~Qo";
      stringArray0[4] = "5yw;u";
      stringArray0[5] = "org.jStrings must not be null";
      stringArray0[6] = "org.junitpioneer.jupiter.params.ByteRange";
      stringArray0[7] = "5yw;u";
      stringArray0[8] = "5yw;u";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(9, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("Strings must not be null", (-39), (-1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int3 = StringUtils.indexOf((CharSequence) "Strings must not be null", (-1));
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      String string5 = StringUtils.toRootUpperCase((String) null);
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("5yw;u", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("[XKq:+%lW/f:k jHb", "[XKq:+%lW/f:k jHb", "[XKq:+%lW/f:k jHb");
      assertEquals("[XKq:+%lW/f:k jHb", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "[XKq:+%lW/f:k jHb";
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[1] = object2;
      objectArray0[2] = object1;
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "[XKq:+%lW/f:k jHb";
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "[XKq:+%lW/f:k jHb";
      objectArray0[7] = (Object) "[XKq:+%lW/f:k jHb";
      objectArray0[8] = object0;
      String string1 = StringUtils.join(objectArray0, 'x');
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, objectArray0.length);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "[XKq:+%lW/f:k jHb", (CharSequence) "[XKq:+%lW/f:k jHb", 49);
      assertEquals(0, int0);
      
      String string2 = StringUtils.substring("[XKq:+%lW/f:k jHb", 64, 2000);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.left("D\"3kC2x7~5pta5{hVJ", 1100);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("D\"3kC2x7~5pta5{hVJ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("Fml9qn5b9=%Va&bJ", 0, "Threshold must not be negative");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Fml9qn5b9=%Va&bJ", string4);
      assertNotNull(string4);
      
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "R");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("", "");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("", 16, '&');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("&&&&&&&&&&&&&&&&", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("org.junitpioneer.jupiter.params.FloatRange");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("egnaRtaolF.smarap.retipuj.reenoiptinuj.gro", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.reverse("");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substring("k3j%L.:qdyQ", 59, (-1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 2);
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("&&&&&&&&&&&&&&&&", "egnaRtaolF.smarap.retipuj.reenoiptinuj.gro");
      assertEquals(0.0, double0, 0.01);
      
      String string7 = StringUtils.substringBefore("", " ");
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'&', '&', '&', '&'}, charArray0);
      
      String string8 = StringUtils.substringAfterLast("pc-}", "5yw;u");
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      String string0 = StringUtils.difference("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter((String) null, "{' matches '{");
      assertNull(string1);
      
      String string2 = StringUtils.center("()` not found in ", 16, '&');
      assertFalse(string2.equals((Object)string0));
      assertEquals("()` not found in ", string2);
      assertNotNull(string2);
      
      String string3 = "#2%&Tt2`Xw{<\\$+[|";
      String string4 = StringUtils.reverse("#2%&Tt2`Xw{<$+[|");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("|[+$<{wX`2tT&%2#", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.reverse("()` not found in ");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(" ni dnuof ton `)(", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll(" ni dnuof ton `)(", "[XKq:+%lW/f:k jHb", "p{InCombiningDiacriticalMarks}+");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // [XKq:+%lW/f:k jHb
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "c", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = 1.0F;
      floatArray0[2] = 2005.09F;
      floatArray0[3] = 2005.09F;
      floatArray0[4] = 872.011F;
      String string1 = StringUtils.join(floatArray0, 'O');
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, floatArray0.length);
      assertEquals("0.0O1.0O2005.09O2005.09O872.011", string1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 2005.09F, 2005.09F, 872.011F}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("C4! N^8", "", "\"", 16);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("C4! N^8", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("C4! N^8", "R:BuD...", "");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("C4! N^8", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("", 65, "0.0O1.0O2005.09O2005.09O872.011");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("0.0O1.0O2005.09O2005.09O872.01100.0O1.0O2005.09O2005.09O872.0110.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.SPACE;
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals(" ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replacePattern("-0", "C4! N^8", "");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("-0", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.abbreviate((String) null, "-0", 4, 379);
      assertNull(string7);
      
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      assertNotNull(treeSet0);
      
      TreeSet<Locale.Category> treeSet1 = new TreeSet<Locale.Category>((SortedSet<Locale.Category>) treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      
      String string8 = StringUtils.join((Iterable<?>) treeSet1, 'D');
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertNotSame(treeSet1, treeSet0);
      assertNotSame(treeSet0, treeSet1);
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      String string0 = StringUtils.stripStart("RiOp5Mj(?y/^b7", "RiOp5Mj(?y/^b7");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "RiOp5Mj(?y/^b7";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAsciiPrintable(charSequenceArray0[2]);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String string1 = StringUtils.stripToEmpty((String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('5', 51);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("555555555555555555555555555555555555555555555555555", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right((String) null, 51);
      assertNull(string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "RiOp5Mj(?y/^b7");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\r";
      stringArray0[1] = null;
      stringArray0[2] = "RiOp5Mj(?y/^b7";
      stringArray0[3] = null;
      stringArray0[4] = "";
      stringArray0[5] = ".*{[0-9]+}.*";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(9, stringArray0.length);
      assertEquals("RiOp5Mj(?y/^b7", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.length("RiOp5Mj(?y/^b7");
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      int int2 = StringUtils.compare("", "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = StringUtils.countMatches((CharSequence) string3, (CharSequence) ".*{[0-9]+}.*");
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.strip(string3);
      assertNull(string5);
      
      int int4 = StringUtils.indexOf((CharSequence) null, 55);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      String string0 = StringUtils.unwrap("^", "^");
      assertEquals("^", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((byte[]) null, '<', 2, (-206));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.lowerCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.removeStart("", "...");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "", '>');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = "(nj!)3t@P.o'UZl64";
      String string4 = StringUtils.substring("(nj!)3t@P.o'UZl64", (-32768));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("(nj!)3t@P.o'UZl64", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBefore("", "ive");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNumericSpace("(nj!)3t@P.o'UZl64");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.substringAfterLast("(nj!)3t@P.o'UZl64", (String) null);
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.rightPad((String) null, 640, "");
      assertNull(string7);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        locale0.getDisplayLanguage((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'F');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      String string0 = StringUtils.difference("fUL+oma(", "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("tfe(%@g*crPK");
      assertFalse(string1.equals((Object)string0));
      assertEquals("tfe(%@g*crPK", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("tfe(%@g*crPK");
      assertFalse(boolean0);
      
      String string2 = StringUtils.unwrap("&BS$/CoObU:\"seO|", "fUL+oma(");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("&BS$/CoObU:\"seO|", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("tfe(%@g*crPK", " w$\"*',U(&ruFT");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("tfe(%@g*crPK", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = '{';
      charArray0[5] = '{';
      charArray0[6] = 'Q';
      charArray0[7] = '{';
      charArray0[8] = '{';
      String string4 = StringUtils.join(charArray0, 'L', 0, 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(9, charArray0.length);
      assertEquals("", string4);
      assertArrayEquals(new char[] {'{', '{', '{', '{', '{', '{', 'Q', '{', '{'}, charArray0);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      String string0 = " ";
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty(" ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace(" ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charArray0.length);
      assertEquals("RR", string1);
      assertArrayEquals(new char[] {'R', 'R'}, charArray0);
      assertNotNull(string1);
      
      String string2 = "jG&5p+VWVao9lp#";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      String string0 = StringUtils.rightPad("e.+Q^Du~m-o", (-2454), (String) null);
      assertEquals("e.+Q^Du~m-o", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '';
      longArray0[1] = (long) (-2454);
      String string1 = StringUtils.join(longArray0, '%', 17, 17);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, longArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new long[] {127L, (-2454L)}, longArray0);
      assertNotNull(string1);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("Q+{;ubY$p)*");
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(string0));
      assertTrue(linkedList0.contains("Q+{;ubY$p)*"));
      assertEquals(1, linkedList0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>(linkedList0);
      assertNotNull(treeSet0);
      assertFalse(linkedList0.contains(string0));
      assertTrue(linkedList0.contains("Q+{;ubY$p)*"));
      assertFalse(treeSet0.contains(string0));
      assertTrue(treeSet0.contains("Q+{;ubY$p)*"));
      assertEquals(1, linkedList0.size());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("Q+{;ubY$p)*"));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      String string2 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.equalsAny("ak)>x[{3byX$g5Pri%", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.abbreviate((String) null, "e.+Q^Du~m-o", (-1689));
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      String string0 = StringUtils.remove("5ND.IL|P", 't');
      assertEquals("5ND.IL|P", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("5ND.IL|P", "5ND.IL|P", "5ND.IL|P");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "5ND.IL|P";
      charSequenceArray0[1] = (CharSequence) "w{Rb>)peZWL";
      charSequenceArray0[2] = (CharSequence) null;
      String string2 = StringUtils.substring("w{Rb>)peZWL", 37);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("", "*Gq7ew;qkt*");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      String string4 = StringUtils.defaultIfEmpty("", "w{Rb>)peZWL");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("w{Rb>)peZWL", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "5ND.IL|P";
      stringArray0[1] = "5ND.IL|P";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      String string0 = StringUtils.abbreviate(";@%\"K*\">7?_/SsJ/", (String) null, (-1476));
      assertEquals(";@%\"K*\">7?_/SsJ/", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast((String) null, (-1476));
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.containsAny((CharSequence) ";@%\"K*\">7?_/SsJ/", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      String string2 = StringUtils.join(byteArray0, '+');
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, byteArray0.length);
      assertEquals("-119+-119", string2);
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119)}, byteArray0);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("?EZA4/C78dK}F&UYXL");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.rotate(";@%\"K*\">7?_/SsJ/", (-1003));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals(";@%\"K*\">7?_/SsJ/", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAllUpperCase(";@%\"K*\">7?_/SsJ/");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.defaultString((String) null, ";@%\"K*\">7?_/SsJ/");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals(";@%\"K*\">7?_/SsJ/", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) ";@%\"K*\">7?_/SsJ/", (CharSequence) "-119+-119", 1591);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) ";@%\"K*\">7?_/SsJ/", 46);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 1650);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "r?XkewNpi", (String) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat((String) null, (String) null, (-1124));
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = '|';
      charArray0[2] = '\'';
      charArray0[3] = '.';
      charArray0[4] = '7';
      charArray0[5] = 'x';
      charArray0[6] = '9';
      charArray0[7] = 'U';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("5|'.7x9U", string0);
      assertArrayEquals(new char[] {'5', '|', '\'', '.', '7', 'x', '9', 'U'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly(stringArray0[0], stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string1);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains('x'));
      
      String string2 = StringUtils.substringAfterLast("Locale must not be null", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string1, (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, '{');
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{Z`!ZuW2_", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '#';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) '{';
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) '{';
      doubleArray0[5] = (double) '{';
      doubleArray0[6] = (double) '{';
      String string2 = StringUtils.join(doubleArray0, '{');
      assertEquals(7, doubleArray0.length);
      assertEquals("35.0{-1.0{123.0{-1.0{123.0{123.0{123.0", string2);
      assertArrayEquals(new double[] {35.0, (-1.0), 123.0, (-1.0), 123.0, 123.0, 123.0}, doubleArray0, 0.01);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad((String) null, (-1), "' matches '");
      assertNull(string3);
      
      String string4 = StringUtils.center((String) null, (-2156), 'U');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" has no clone method", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "[OW", (CharSequence) "[OW", (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("5yw;u");
      assertFalse(string1.equals((Object)string0));
      assertEquals("5yw;u", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("\n", "tfe(%@g*crPK");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("\n", 'f');
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("\n", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip(",&jQpcP|9A}^xoM4j");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(",&jQpcP|9A}^xoM4j", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlpha("EuW~BrCd-fW15(Opc:#");
      assertFalse(boolean0);
      
      String string6 = StringUtils.center("lLx", 97, "mO&t&`l?*=?cFDU");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("mO&t&`l?*=?cFDUmO&t&`l?*=?cFDUmO&t&`l?*=?cFDUmOlLxmO&t&`l?*=?cFDUmO&t&`l?*=?cFDUmO&t&`l?*=?cFDUmO", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.overlay("", "mO&t&`l?*=?cFDU", (-858), 5);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("mO&t&`l?*=?cFDU", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("mO&t&`l?*=?cFDU", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string8 = StringUtils.removeStartIgnoreCase((String) null, "mO&t&`l?*=?cFDU");
      assertNull(string8);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "EuW~BrCd-fW15(Opc:#", (CharSequence) "mO&t&`l?*=?cFDU");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "5yw;u");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string9 = StringUtils.center("FY-W_->", 50, 'f');
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertEquals("fffffffffffffffffffffFY-W_->ffffffffffffffffffffff", string9);
      assertNotNull(string9);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "5yw;u", (CharSequence) "fffffffffffffffffffffFY-W_->ffffffffffffffffffffff", (-2627));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "Ay `A+D";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "Ay `A+D";
      String string0 = StringUtils.replaceEach("Ay `A+D", stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("Ay `A+D", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object1));
      assertNotNull(object6);
      
      String string0 = StringUtils.wrapIfMissing("2>6W<z", "2>6W<z");
      assertEquals("2>6W<z", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("2>6W<z", 269, "BuD");
      assertFalse(string1.equals((Object)string0));
      assertEquals("BuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBu2>6W<z", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "_u@vs.jVijgFmM|B";
      charSequenceArray0[1] = (CharSequence) "2>6W<z";
      charSequenceArray0[2] = (CharSequence) "2>6W<z";
      String string2 = StringUtils.right("Wa", 28);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Wa", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("_u@vs.jVijgFmM|B", "UZUZ}Z}", 269);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_u@vs.jVijgFmM|B", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull((String) null);
      assertNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Wa", (CharSequence) null, 28);
      assertEquals((-1), int0);
      
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) "Wa";
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object1));
      assertNotNull(object7);
      
      objectArray1[1] = object7;
      objectArray1[2] = object1;
      objectArray1[3] = object0;
      objectArray1[4] = object6;
      String string5 = StringUtils.joinWith("UZUZ}Z}", objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(5, objectArray1.length);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("hZ2", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "hZ2", (CharSequence) null, 2);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("YS'rlP'$3wxyR_a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.left("YS'rlP'$3wxyR_a", 2127);
      assertEquals("YS'rlP'$3wxyR_a", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "YS'rlP'$3wxyR_a", "\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("YS'rlP'$3wxyR_a");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      String string0 = StringUtils.center(">b9ji[=s}~wOwd}", (-1314), "d4nVTu`*uuen$R3^|.h");
      assertEquals(">b9ji[=s}~wOwd}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase(">b9ji[=s}~wOwd}");
      assertFalse(string1.equals((Object)string0));
      assertEquals(">b9ji[=s}~wowd}", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceAll("org.junitpioneer.jupiter.params.ShortRange", "d4nVTu`*uuen$R3^|.h", ">b9ji[=s}~wOwd}");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.params.>b9ji[=s}~wOwd}ortRange", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace(">b9ji[=s}~wowd}");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(">b9ji[=s}~wowd}", string3);
      assertNotNull(string3);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      String string4 = StringUtils.toRootUpperCase("M");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("M", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter("org.junitpioneer.jupiter.params.LongRange", "org.junitpioneer.jupiter.params.LongRange");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNotEmpty(">b9ji[=s}~wOwd}");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Y3zu=NS2+:<RGRvcB%", ">b9ji[=s}~wOwd}");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.right("~iGFXH", 347);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("~iGFXH", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.abbreviate("", "org.junitpioneer.jupiter.params.>b9ji[=s}~wOwd}ortRange", (-1660));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      String string0 = StringUtils.strip("=");
      assertEquals("=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("=");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "=", (CharSequence) "=");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.stripEnd("=", "=");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string2 = StringUtils.lowerCase("ch", locale0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ch", string2);
      assertNotNull(string2);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string3 = StringUtils.leftPad("=", 14, "Timeout for vintage @Test must be positive.");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Timeout for v=", string3);
      assertNotNull(string3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string1));
      assertEquals(0, linkedList0.size());
      
      boolean boolean3 = linkedList0.add("P");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertFalse(linkedList0.contains(string1));
      assertTrue(linkedList0.contains("P"));
      assertEquals(1, linkedList0.size());
      
      String string4 = StringUtils.join((Iterable<?>) linkedList0, '?');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("P", string4);
      assertNotNull(string4);
      assertFalse(linkedList0.contains(string1));
      assertTrue(linkedList0.contains("P"));
      assertEquals(1, linkedList0.size());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "=", 52);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      
      String string0 = StringUtils.join(iterator0, 'O');
      assertEquals("EXTENDED_FILTERING", string0);
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">b9ji[=s}~wOwd}";
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '|';
      boolean boolean0 = StringUtils.isWhitespace(">b9ji[=s}~wOwd}");
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove("A)P6pqi/?=%9[Rn?yiF", '|');
      assertEquals("A)P6pqi/?=%9[Rn?yiF", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("A)P6pqi/?=%9[Rn?yiF", ">b9ji[=s}~wOwd}");
      assertFalse(string1.equals((Object)string0));
      assertEquals(">b9ji[=s}~wOwd}A)P6pqi/?=%9[Rn?yiF>b9ji[=s}~wOwd}", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals(">b9ji[=s}~wOwd}", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("Minimum abbreviation width with offset is %d", "A)P6pqi/?=%9[Rn?yiF");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(1, stringArray0.length);
      assertEquals(">b9ji[=s}~wOwd}", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "A)P6pqi/?=%9[Rn?yiF", charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray1);
      
      String string5 = StringUtils.stripEnd("Minimum abbreviation width with offset is %d", "");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", 3273, 3273);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      String string0 = StringUtils.swapCase("%o{");
      assertEquals("%O{", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%o{", "%O{");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringAfter("%o{", 23);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("' matches '", '%');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("' matches '", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      String string3 = StringUtils.join(byteArray0, '%');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, byteArray0.length);
      assertEquals("-119", string3);
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("' matches '");
      assertFalse(boolean0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("%o{"));
      
      boolean boolean1 = treeSet0.add("%o{");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(treeSet0.contains("%o{"));
      assertFalse(treeSet0.contains("' matches '"));
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertTrue(treeSet0.contains("%o{"));
      assertFalse(treeSet0.contains("' matches '"));
      
      String string4 = StringUtils.join(iterator0, "iQMVY6t");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("%o{", string4);
      assertNotNull(string4);
      assertTrue(treeSet0.contains("%o{"));
      assertFalse(treeSet0.contains("' matches '"));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "' matches '", (CharSequence) "", 16);
      assertEquals(11, int0);
      
      String string5 = StringUtils.abbreviate("Strings must not be null", (int) (byte) (-119), 2583);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Strings must not be null", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.compareIgnoreCase("-Sn", "Strings must not be null", false);
      assertFalse(int1 == int0);
      assertEquals((-70), int1);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      String string0 = StringUtils.remove("Minimum abbreviation width is %d", "dyJ+FY#)0P0");
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfterLast("Minimum abbreviation width is %d", 858);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeIgnoreCase("Minimum abbreviation width is %d", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeFirst("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = '}';
      String string4 = StringUtils.join(charArray0, 'U');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(2, charArray0.length);
      assertEquals("}U}", string4);
      assertArrayEquals(new char[] {'}', '}'}, charArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("DefaultLocale", "Minimum abbreviation width is %d");
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Minimum abbreviation width is %d", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad("Minimum abbreviation width is %d", 0, "ThreGhold must nt be negativeD [g0R[");
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertEquals("Minimum abbreviation width is %d", string6);
      assertNotNull(string6);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      String string7 = StringUtils.lowerCase("\"ON,pZ&4ZR4i~NAl)}", locale0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("\"on,pz&4zr4i~nal)}", string7);
      assertNotNull(string7);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.joinWith("Threshold must not be negative", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      String string0 = StringUtils.trimToNull("7=lN~{IY/Wp]ub");
      assertEquals("7=lN~{IY/Wp]ub", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase(";+-19PwY]bZwFT^v<");
      assertFalse(string1.equals((Object)string0));
      assertEquals(";+-19PWY]BZWFT^V<", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length("7=lN~{IY/Wp]ub");
      assertEquals(14, int0);
      
      int int1 = StringUtils.compareIgnoreCase("7=lN~{IY/Wp]ub", "QC  ", true);
      assertFalse(int1 == int0);
      assertEquals((-58), int1);
      
      int[] intArray0 = StringUtils.toCodePoints(";+-19PWY]BZWFT^V<");
      assertEquals(17, intArray0.length);
      assertNotNull(intArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "QC  ";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOf((CharSequence) "7=lN~{IY/Wp]ub", charSequenceArray0[0], (-58));
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int3);
      
      String string2 = StringUtils.stripStart(";+-19PwY]bZwFT^v<", "QC  ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(";+-19PwY]bZwFT^v<", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int4 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ";+-19PwY]bZwFT^v<", (CharSequence) ";+-19PWY]BZWFT^V<", Integer.MAX_VALUE);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals(0, int4);
      
      String string3 = StringUtils.swapCase(";+-19PwY]bZwFT^v<");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(";+-19pWy]BzWft^V<", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad(";+-19PWY]BZWFT^V<", (-1759), ";+-19PwY]bZwFT^v<");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(";+-19PWY]BZWFT^V<", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.exception.CloneFailedException", "+I, MWI%OPYXm#", (-58));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.substringAfterLast("org.apache.commons.lang3.exception.CloneFailedException", (String) null);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBeforeLast("7=lN~{IY/Wp]ub", ">b9ji[=s}~wOwd}");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("7=lN~{IY/Wp]ub", string6);
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are empty.", "7=lN~{IY/Wp]ub", "org.apache.commons.lang3.StringUtils");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 4
         // 7=lN~{IY/Wp]ub
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("}w#Y#9A%/GJKt|");
      assertFalse(string1.equals((Object)string0));
      assertEquals("}w#Y#9A%/GJKt|", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "No instructions to disable");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("}w#Y#9A%/GJKt|", "9M");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("}w#Y#9A%/GJKt|", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("oBRu26FL%H0/?!", 'f');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("oBRu26FL%H0/?!", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween("p{In", "", "");
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int[] intArray0 = StringUtils.toCodePoints("113y0~523[*FMHdr@z");
      assertEquals(19, intArray0.length);
      assertNotNull(intArray0);
      
      String string6 = StringUtils.replaceIgnoreCase("}w#Y#9A%/GJKt|", "@DefaultLocale can only be used with language tag if language, country, and variant are not set", "Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("}w#Y#9A%/GJKt|", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "}w#Y#9A%/GJKt|", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.defaultString("Minimum abbreviation width with offset is %d");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Minimum abbreviation width with offset is %d", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.isMixedCase("Minimum abbreviation width with offset is %d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("YS'rlP'$3wxyR_a", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substring("la", (-2335));
      assertEquals("la", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("YS'rlP'$3wxyR_a", "la");
      assertFalse(string1.equals((Object)string0));
      assertEquals("YS'rlP'$3wxyR_a", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("DefaultTimeZone", "Minimum abbreviation width with offset is %d");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("DefaultTimeZone", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isBlank("la");
      assertFalse(boolean0);
      
      String string3 = StringUtils.truncate("hZ2", 108, 322);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('|');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("|", stringWriter0.toString());
      assertEquals("|", stringWriter1.toString());
      
      String string4 = StringUtils.removeEndIgnoreCase("hZ2", " must be static");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("hZ2", string4);
      assertNotNull(string4);
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "hZ2");
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringWriter2);
      assertEquals("|hZ2", stringWriter0.toString());
      assertEquals("|hZ2", stringWriter1.toString());
      assertEquals("|hZ2", stringWriter2.toString());
      
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringBuffer0);
      assertEquals("|hZ2", stringWriter0.toString());
      assertEquals("|hZ2", stringWriter1.toString());
      assertEquals("|hZ2", stringWriter2.toString());
      assertEquals("|hZ2", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) stringBuffer0, (CharSequence) "YS'rlP'$3wxyR_a");
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertEquals(15, int0);
      assertEquals("|hZ2", stringWriter0.toString());
      assertEquals("|hZ2", stringWriter1.toString());
      assertEquals("|hZ2", stringWriter2.toString());
      assertEquals("|hZ2", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      
      String string5 = StringUtils.stripEnd("|2&+_kRa4]", "DefaultTimeZone");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("|2&+_kRa4]", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.ordinalIndexOf("hZ2", "hZ2", 114);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.stripToNull("");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category2;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category1;
      String string0 = StringUtils.join(locale_CategoryArray0);
      assertEquals(3, locale_CategoryArray0.length);
      assertEquals("FORMATDISPLAYFORMAT", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("FORMATDISPLAYFORMAT");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      String string1 = StringUtils.join(charArray0, 'L');
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charArray0.length);
      assertEquals("lLl", string1);
      assertArrayEquals(new char[] {'l', 'l'}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("lLl", 29);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("lLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLl", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween((String) null, "y_Qa)e8zFPlGr", "Locale must not be null");
      assertNull(string3);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      byte[] byteArray0 = StringUtils.getBytes("FORMATDISPLAYFORMAT", (Charset) null);
      assertEquals(19, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.trimToEmpty((String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace("lLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLl");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("lLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLllLl", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAllUpperCase("FORMATDISPLAYFORMAT");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.substringAfterLast("y_Qa)e8zFPlGr", (-1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.deleteWhitespace("y_Qa)e8zFPlGr");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("y_Qa)e8zFPlGr", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("UzYb&0mIz.G;% ];0");
      assertFalse(boolean0);
      
      String string0 = StringUtils.capitalize("UzYb&0mIz.G;% ];0");
      assertEquals("UzYb&0mIz.G;% ];0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "9Td'gTc)o<6a-", (CharSequence) "9Td'gTc)o<6a-");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("9Td'gTc)o<6a-", "9Td'gTc)o<6a-", false);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("ion width with offset is %d").when(supplier0).get();
      String string0 = StringUtils.getIfEmpty((String) null, supplier0);
      assertEquals("ion width with offset is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("q>PhEXT9j4/18");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Q>PHEXT9J4/18", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("ion width with offset is %d");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      String string2 = StringUtils.defaultIfEmpty("ion width with offset is %d", "ion width with offset is %d");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ion width with offset is %d", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "H,H; 6zZ]N";
      stringArray0[1] = ":)~y:)~y";
      stringArray0[2] = "5yw;up{InCombiningDiacriticalMarks}+";
      stringArray0[3] = "Q>PHEXT9J4/18";
      stringArray0[4] = "q>PhEXT9j4/18";
      stringArray0[5] = "...";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`cBS]x`t4 `U%9o");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean2 = StringUtils.equals((CharSequence) ":)~y:)~y", (CharSequence) "ion width with offset is %d");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "VY)rx@p,*&HfD>YV ");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray2.length);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray2);
      
      boolean boolean3 = StringUtils.isWhitespace("9Td'gTc)o<6a-");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string3 = StringUtils.swapCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.getDigits("`cBS]x`t4 `U%9o");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("49", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      String string0 = StringUtils.center(">b9ji[=s}~wOwd}", (-1314), "d4nVTu`*uuen$R3^|.h");
      assertEquals(">b9ji[=s}~wOwd}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase(">b9ji[=s}~wOwd}");
      assertFalse(string1.equals((Object)string0));
      assertEquals(">b9ji[=s}~wowd}", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceAll("org.junitpioneer.jupiter.params.ShortRange", "d4nVTu`*uuen$R3^|.h", ">b9ji[=s}~wOwd}");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.params.>b9ji[=s}~wOwd}ortRange", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace(">b9ji[=s}~wowd}");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(">b9ji[=s}~wowd}", string3);
      assertNotNull(string3);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      String string4 = StringUtils.replaceIgnoreCase(">b9ji[=s}~wOwd}", "\n", " f*");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(">b9ji[=s}~wOwd}", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center(">b9ji[=s}~wowd}", (int) (short)0, "Strings must not be null");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(">b9ji[=s}~wowd}", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.SPACE;
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      String string7 = null;
      String string8 = StringUtils.replace("zJXHhJ4", (String) null, ">b9ji[=s}~wOwd}");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertEquals("zJXHhJ4", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.truncate("zJXHhJ4", (int) (short)0, 2490);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string8));
      assertEquals("zJXHhJ4", string9);
      assertNotNull(string9);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, 32, 851);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{", "{");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("(ObDok{[IyA", "(ObDok{[IyA", "_C");
      assertEquals("_C", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "_C";
      charSequenceArray0[1] = (CharSequence) "(ObDok{[IyA";
      String string1 = StringUtils.abbreviate("z--", "1lNAr1", 92, 92);
      assertFalse(string1.equals((Object)string0));
      assertEquals("z--", string1);
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "z--";
      charSequenceArray0[3] = (CharSequence) "_C";
      charSequenceArray0[4] = (CharSequence) "_C";
      charSequenceArray0[5] = (CharSequence) "(ObDok{[IyA";
      charSequenceArray0[6] = (CharSequence) "_C";
      int int0 = StringUtils.lastIndexOfAny("_C", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "z--";
      stringArray0[1] = "z--";
      stringArray0[2] = "(ObDok{[IyA";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(3, stringArray0.length);
      assertEquals("z--", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.repeat('o', 92);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "(ObDok{[IyA", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'o', 'o', 'o'}, charArray0);
      
      boolean boolean2 = StringUtils.isBlank("z--");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)46;
      // Undeclared exception!
      try { 
        Charset.forName("{' matches '{");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // {' matches '{
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chomp("offset cannot be negative", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("offset cannot be negative", 'n');
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("...", "offset cannot be negative", (int) 'n');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)223;
      String string4 = StringUtils.wrapIfMissing((String) null, '!');
      assertNull(string4);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "-wPH~O71", "-wPH~O71");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "hP#[b%;i^,tw");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.upperCase(";:3%u}$3uk~At");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(";:3%U}$3UK~AT", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      String string0 = StringUtils.chomp("Y");
      assertEquals("Y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("Y");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Y", (CharSequence) "Y");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("Y");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.join((Iterator<?>) null, 't');
      assertNull(string1);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "Y", (CharSequence) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      double double0 = StringUtils.getJaroWinklerDistance("Y", "Y");
      assertEquals(1.0, double0, 0.01);
      
      int[] intArray0 = StringUtils.toCodePoints("Y");
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {89}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      String string0 = StringUtils.remove("5ND.IL|P", 't');
      assertEquals("5ND.IL|P", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("5ND.IL|P", "5ND.IL|P", "5ND.IL|P");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "5ND.IL|P";
      charSequenceArray0[1] = (CharSequence) "w{Rb>)peZWL";
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.endsWithAny("5ND.IL|P", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty(charSequenceArray0[2], supplier0);
      assertEquals(4, charSequenceArray0.length);
      assertNull(charSequence0);
      
      String string2 = StringUtils.appendIfMissing("", (CharSequence) null, charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceAll((String) null, "5ND.IL|P", "YtC~`bdh<Ze7;(");
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[1], 2877);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf(charSequence0, (-1));
      assertTrue(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains('t'));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertFalse(arrayList0.contains('t'));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string4 = StringUtils.join(iterator0, 't');
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(arrayList0.contains("5ND.IL|P"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      String string0 = StringUtils.wrap("YS'rlP'$3wxyR_a", "");
      assertEquals("YS'rlP'$3wxyR_a", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("", '\u001E');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 1216, 1216);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("YS'rlP'$3wxyR_a");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) "YS'rlP'$3wxyR_a";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"Teb{>:TnD=8`+Z,";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = null;
      String string2 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.stripStart(" ", (String) null);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      String string4 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals(0, byteArray0.length);
      assertEquals("", string4);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string4);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertTrue(int1 == int0);
      assertEquals(4, stringArray0.length);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", "\r", true);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(96, int2);
      
      String string5 = StringUtils.chomp("|n-pnbtXO%Wf$D[cEm");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("|n-pnbtXO%Wf$D[cEm", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.capitalize(" ");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      int int3 = StringUtils.indexOf((CharSequence) string2, (-2233), 553);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(4, stringArray0.length);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      String string0 = StringUtils.strip("7", "7");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "7", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "7");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      String[] stringArray0 = new String[19];
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertEquals(19, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      String string0 = StringUtils.remove("5ND.IL|P", 't');
      assertEquals("5ND.IL|P", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      String string1 = StringUtils.wrapIfMissing("", "5ND.IL|P");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("", 242, "Cannot store ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot s", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("Sdi{", "pg?6)s/RA>", false);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      String string3 = StringUtils.chomp("M {2Lv0v,sw)pIl9g,");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("M {2Lv0v,sw)pIl9g,", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replacePattern("Cannot store ", "5ND.IL|P", "Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot store Cannot s");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Cannot store ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.right("'+ydPj_FmN^0+", 0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string6);
      
      String string7 = StringUtils.stripEnd("P3SQUvh4(PvDqL", "Qoi})!8f^%LSf");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals("P3SQUvh4(PvDq", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp("zfy_^.i+!4S%y+z5KX", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("zfy_^.i+!4S%y+z5KX", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.forLanguageTag("org.apache.commons.lang3.StringUtils");
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      
      Set<Character> set0 = locale1.getExtensionKeys();
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(set0);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string2 = StringUtils.lowerCase("nfssV*+ww", locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(locale0, locale1);
      assertEquals("nfssv*+ww", string2);
      assertNotNull(string2);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String string3 = StringUtils.leftPad("D$JxP-/l", 14, "'^,%o");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("'^,%o'D$JxP-/l", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Iterable<?>) set0, 'X');
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(locale1, locale0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(set0.contains('X'));
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "zfy_^.i+!4S%y+z5KX", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.substringsBetween("`>6Spa?4Ep", "4}}", "nfssv*+ww");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("4}}", "Strings must not be null");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)67;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'R', (-1), (int) (byte)65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Whlaw_qqL:0 ''");
      assertEquals("Whlaw_qqL:0 ''", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap(":", "Don't clear/set the same entry more than once.");
      assertFalse(string1.equals((Object)string0));
      assertEquals(":", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("Don't clear/set the same entry more than once.", ":");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Don't clear/set the same entry more than once.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("Whlaw_qqL:0 ''", 'M');
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Whlaw_qqL:0 ''", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("a^GO#~qHn");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("a^GO#~qHn", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlpha("Whlaw_qqL:0 ''");
      assertFalse(boolean0);
      
      String string5 = StringUtils.center((String) null, (-1610612734), "offset cannot be negative");
      assertNull(string5);
      
      String string6 = StringUtils.overlay("6@<sG", "6@<sG", (-1610612734), (-1610612734));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("6@<sG6@<sG", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("Don't clear/set the same entry more than once.", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.removeStartIgnoreCase("5)g)K$H", ":");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("5)g)K$H", string7);
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.contains((CharSequence) null, (CharSequence) "5)g)K$H");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "5)g)K$H");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "tfe(%@g*crPK");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string8 = StringUtils.defaultString("Whlaw_qqL:0 ''");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertEquals("Whlaw_qqL:0 ''", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.trimToNull("l@w}bQ#.");
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertEquals("l@w}bQ#.", string9);
      assertNotNull(string9);
      
      int int2 = StringUtils.compareIgnoreCase("6@<sG6@<sG", "Don't clear/set the same entry more than once.");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-46), int2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-46);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '&', (-1), 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Whlaw_qqL:0 ''");
      assertEquals("Whlaw_qqL:0 ''", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap(":", "Don't clear/set the same entry more than once.");
      assertFalse(string1.equals((Object)string0));
      assertEquals(":", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("p{In", 'Y');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("p{In", string2);
      assertNotNull(string2);
      
      float[] floatArray0 = new float[0];
      String string3 = StringUtils.join(floatArray0, '.');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, floatArray0.length);
      assertEquals("", string3);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":";
      stringArray0[1] = "Whlaw_qqL:0 ''";
      stringArray0[2] = ":";
      stringArray0[3] = "PYvf\"a*VST2Uw|76h";
      stringArray0[4] = ":";
      stringArray0[5] = "Minimum abbreviation width with offset is %d";
      stringArray0[6] = "Whlaw_qqL:0 ''";
      stringArray0[7] = "Whlaw_qqL:0 ''";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(8, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("", 365);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                             ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substring("org.junitpioneer.jupiter.Cartesiorg.junitpioneer.jupiter.CartesianProductTestExtension", 148);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      String string0 = StringUtils.abbreviate(";@%\"K*\">7?_/SsJ/", (String) null, (-1476));
      assertEquals(";@%\"K*\">7?_/SsJ/", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("J2sb ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("J2sb", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase(";@%\"K*\">7?_/SsJ/");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(";@%\"k*\">7?_/sSj/", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat(";@%\"k*\">7?_/sSj/", (String) null, (-2212));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) ";@%\"K*\">7?_/SsJ/";
      charSequenceArray0[1] = (CharSequence) "";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Minimum abbreviation width with offset is %d", ";@%\"K*\">7?_/SsJ/");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("W[KD 8# vs ", (String) null, "J2sb");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("W[KD 8# vs ", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", ";@%\"K*\">7?_/SsJ/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      String string0 = null;
      String string1 = "Iq&]WS>]7&`n";
      Locale locale0 = new Locale("Iq&]WS>]7&`n");
      assertNotNull(locale0);
      assertEquals("iq&]ws>]7&`n", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("iq&]ws>]7&`n", locale0.toString());
      
      String string2 = StringUtils.upperCase((String) null, locale0);
      assertNull(string2);
      assertEquals("iq&]ws>]7&`n", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("iq&]ws>]7&`n", locale0.toString());
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, 122, (-1862));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Qu;|a$fgrjgUv_zAw", (String) null, 8, 20);
      assertEquals("Qu;|a$fgrjgUv_zAw", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Qu;|a$fgrjgUv_zAw");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad("2^i:uZ$~>vO'Wj2", 20, "offset cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offse2^i:uZ$~>vO'Wj2", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 's');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(10, stringArray0.length);
      assertEquals("Qus;s|sas$sfgrjgsUvs_szsAw", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("maxWith cannot be negative", "Qu;|a$fgrjgUv_zAw", 10);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.center("Search and Replace array lengths don't match: ", 10);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("mLZH,", 8, (-696));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.swapCase("Qus;s|sas$sfgrjgsUvs_szsAw");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("qUS;S|SAS$SFGRJGSuVS_SZSaW", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "offset cannot be negative", (CharSequence) "Qu;|a$fgrjgUv_zAw");
      assertEquals((-1), int0);
      
      String string6 = StringUtils.wrap("3", '}');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("}3}", string6);
      assertNotNull(string6);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte)45;
      String string7 = StringUtils.join(byteArray0, 'Q', (int) (byte)18, (int) (byte) (-36));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals(9, byteArray0.length);
      assertEquals("", string7);
      assertArrayEquals(new byte[] {(byte)5, (byte)75, (byte) (-72), (byte)46, (byte) (-36), (byte)72, (byte) (-18), (byte)18, (byte)45}, byteArray0);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.appendIfMissingIgnoreCase("7", "7", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("7", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "7", (CharSequence) "7");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      String string0 = ", Length: ";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(", Length: ", ' ');
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(string0));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add(", Length: ");
      assertTrue(boolean0);
      assertTrue(stack0.contains(string0));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[, Length: ]", stack0.toString());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(stack0.contains(string0));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[, Length: ]", stack0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      stack0.replaceAll(unaryOperator0);
      assertTrue(stack0.contains(string0));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[, Length: ]", stack0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, "=nDW(LI7@c=9s");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = "Strings must not be null";
      String string1 = StringUtils.join(objectArray0, "Strings must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, objectArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(""));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean2 = linkedHashSet0.add(charSequenceArray0[0]);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2);
      assertTrue(linkedHashSet0.contains(""));
      assertFalse(linkedHashSet0.contains("Strings must not be null"));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean3 = linkedHashSet0.add(object1);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertNotSame(object1, object0);
      assertTrue(boolean3);
      assertTrue(linkedHashSet0.contains(object1));
      assertFalse(linkedHashSet0.contains(object0));
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      boolean boolean4 = linkedHashSet0.add(object0);
      assertFalse(object0.equals((Object)object1));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertNotSame(object0, object1);
      assertTrue(boolean4);
      assertTrue(linkedHashSet0.contains(object1));
      assertFalse(linkedHashSet0.contains("Strings must not be null"));
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      boolean boolean5 = linkedList0.containsAll(linkedHashSet0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5);
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedHashSet0.contains(object1));
      assertFalse(linkedHashSet0.contains("Strings must not be null"));
      assertEquals(0, linkedList0.size());
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      boolean boolean6 = linkedList0.add("bv~-I:");
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6);
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedList0.contains("bv~-I:"));
      assertEquals(1, linkedList0.size());
      
      String string2 = "b.AEv";
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, "b.AEv");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.wrap("8SJ+.?-x8N'eeXMiH", "8SJ+.?-x8N'eeXMiH");
      assertEquals("8SJ+.?-x8N'eeXMiH8SJ+.?-x8N'eeXMiH8SJ+.?-x8N'eeXMiH", string0);
      assertNotNull(string0);
      
      char char0 = '\u001E';
      String string1 = StringUtils.reverseDelimited("8SJ+.?-x8N'eeXMiH8SJ+.?-x8N'eeXMiH8SJ+.?-x8N'eeXMiH", '\u001E');
      assertTrue(string1.equals((Object)string0));
      assertEquals("8SJ+.?-x8N'eeXMiH8SJ+.?-x8N'eeXMiH8SJ+.?-x8N'eeXMiH", string1);
      assertNotNull(string1);
      
      int int0 = 1216;
      String string2 = StringUtils.deleteWhitespace("");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = (-946);
      int int2 = StringUtils.lastIndexOf((CharSequence) "", 1216, (-946));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string3 = StringUtils.removeEnd("", " vs ");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, '\u001E', (-1), 1193);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("&E3[yiZ&!bCy I<g{", "XloMtN2_S%q*Avo", "w{Rb>)peZWL");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("hZ2", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("&E3[yiZ&!bCy I<g{", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)2;
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'Z';
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, charArray0.length);
      assertEquals("sZ", string2);
      assertArrayEquals(new char[] {'s', 'Z'}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace((String) null);
      assertNull(string3);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'Z';
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) 's';
      floatArray0[3] = (float) (short)2;
      String string4 = StringUtils.join(floatArray0, 's', 3198, (-767));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(4, floatArray0.length);
      assertEquals("", string4);
      assertArrayEquals(new float[] {90.0F, 2.0F, 115.0F, 2.0F}, floatArray0, 0.01F);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "hZ2", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'s', 'Z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      String string0 = StringUtils.remove("5ND.IL|P", 't');
      assertEquals("5ND.IL|P", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("5ND.IL|P", "5ND.IL|P", "5ND.IL|P");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "5ND.IL|P";
      charSequenceArray0[1] = (CharSequence) "w{Rb>)peZWL";
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.endsWithAny("5ND.IL|P", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "w{Rb>)peZWL";
      String string2 = StringUtils.wrapIfMissing("5ND.IL|P", 'T');
      assertFalse(string2.equals((Object)string0));
      assertEquals("T5ND.IL|PT", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) " ", "maxWith cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "J6;c");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.upperCase("Supplied value must be a valid byte literal between -128 and 127: [");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("SUPPLIED VALUE MUST BE A VALID BYTE LITERAL BETWEEN -128 AND 127: [", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\u0000\u0000\u0000\u0000\u0000", charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.mid("x#3G\"", 2, 2);
      assertEquals("3G", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "3G", "x#3G\"");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      String string0 = StringUtils.difference("fUL+oma(", "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, charArray0.length);
      assertEquals("R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertArrayEquals(new char[] {'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[1] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[2] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[3] = "R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000";
      String string2 = StringUtils.replaceEachRepeatedly("jG&5p+VWVao9lp#", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4, stringArray0.length);
      assertEquals("jG&5p+VWVao9lp#", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", (CharSequence) "org.junitpioneer.vintage.TimeoutExtension", 2);
      assertEquals(0, int0);
      
      String string3 = StringUtils.leftPad("org.junitpioneer.vintage.TimeoutExtension", 504, "org.junitpioneer.jupiter.Cartesiorg.junitpioneer.jupiter.CartesianProductTestExtension");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.Cartesiorg.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesiorg.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesiorg.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesiorg.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesiorg.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesioorg.junitpioneer.vintage.TimeoutExtension", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.compareIgnoreCase("fUL+oma(", " vs ", false);
      assertFalse(int1 == int0);
      assertEquals(70, int1);
      
      String string4 = StringUtils.chomp("6ZU-K1|:b{P:>lU:1J");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("6ZU-K1|:b{P:>lU:1J", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("fUL+oma(", 2, 2);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("L+", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.countMatches((CharSequence) "", (CharSequence) "org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string6 = StringUtils.removeStartIgnoreCase((String) null, "od$j&CE>");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = 12;
      String string0 = "vfE";
      // Undeclared exception!
      try { 
        StringUtils.truncate("vfE", (-150), 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      String string0 = "1[";
      String string1 = StringUtils.wrap("1[", 'n');
      assertFalse(string1.equals((Object)string0));
      assertEquals("n1[n", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "n1[n", (CharSequence) "1[");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "1[", (CharSequence) "1[");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("1[");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.remove("1[", 'n');
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("1[", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((float[]) null, '~');
      assertNull(string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "n1[n";
      stringArray0[1] = "";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad((String) null, 208, '~');
      assertNull(string5);
      
      String string6 = "Y(-\",B8&";
      String string7 = StringUtils.substring("Y(-\",B8&", 17);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = "' matches '";
      // Undeclared exception!
      try { 
        StringUtils.truncate("' matches '", (-296376097), (-296376097));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("&E3[yiZ&!bCy I<g{", "XloMtN2_S%q*Avo", "w{Rb>)peZWL");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("hZ2", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("&E3[yiZ&!bCy I<g{", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)2;
      String string2 = StringUtils.wrapIfMissing("Fy2pk^yN!OAW", 'Z');
      assertFalse(string2.equals((Object)string1));
      assertEquals("ZFy2pk^yN!OAWZ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("&E3[yiZ&!bCy I<g{", "'*< EZsWH\"{Xl5a0");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((char[]) null, 'Z', (-1768), 0);
      assertNull(string4);
      
      String string5 = StringUtils.wrap("1Y.:UK+D9d]9", 'Z');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Z1Y.:UK+D9d]9Z", string5);
      assertNotNull(string5);
      
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Vector<Locale.Category> vector1 = new Vector<Locale.Category>(vector0);
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      
      String string6 = StringUtils.join((List<?>) vector1, 'Z', (int) (short)2, (-4120));
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector1.equals((Object)vector0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string7 = StringUtils.getIfBlank("eUtils", supplier0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("eUtils", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'v', 1941, 2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.unwrap(" ", 'f');
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha(" ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.center(" ", 322, "Don't clear/set the same entry more than once.");
      assertFalse(string2.equals((Object)string0));
      assertEquals("Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the sa Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the sam", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the sa Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the sam", "Y #&c");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the sa Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the same entry more than once.Don't clear/set the sam", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap(" ", "@Q");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.remove("...", (String) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("...", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase(" ", "...");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.firstNonEmpty(stringArray0);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals(1, stringArray0.length);
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean3 = StringUtils.isAlpha(" ");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string7 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      String string0 = StringUtils.chomp("', '");
      assertEquals("', '", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("', '");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase(" ", " ", "', '");
      assertTrue(string1.equals((Object)string0));
      assertEquals("', '", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "', '", (CharSequence) "', '");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.removeEnd("4,", " vs ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("4,", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("4,", "4,", 8);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("4,", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("ReportEntry");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("ReportEntry", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "', '";
      String string5 = StringUtils.appendIfMissing("offset cannot be negative", "', '", charSequenceArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(1, charSequenceArray0.length);
      assertEquals("offset cannot be negative', '", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceChars("offset cannot be negative', '", "Vh~bGN<Ibf", "ReportEntry");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("orrset cannot oe negative', '", string6);
      assertNotNull(string6);
      
      byte[] byteArray0 = StringUtils.getBytes("bTL{=VQ", (String) null);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)98, (byte)84, (byte)76, (byte)123, (byte)61, (byte)86, (byte)81}, byteArray0);
      assertNotNull(byteArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1560);
      longArray0[1] = (long) (-1560);
      longArray0[2] = (long) (-1560);
      longArray0[3] = (long) ';';
      longArray0[4] = (long) ';';
      longArray0[5] = (long) 8;
      String string7 = StringUtils.join(longArray0, '4');
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals(6, longArray0.length);
      assertEquals("-15604-15604-156045945948", string7);
      assertArrayEquals(new long[] {(-1560L), (-1560L), (-1560L), 59L, 59L, 8L}, longArray0);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      String string0 = StringUtils.join(byteArray0, '3');
      assertEquals(31, byteArray0.length);
      assertEquals("0303030303030303030303030303030303030303030303030303030303030", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd((String) null, "0303030303030303030303030303030303030303030303030303030303030");
      assertNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "0303030303030303030303030303030303030303030303030303030303030");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "8Aj0", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'l', (-1), 49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      String string0 = StringUtils.chop(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n");
      assertEquals(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -";
      stringArray0[1] = ",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n";
      stringArray0[2] = ",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(3, stringArray0.length);
      assertEquals(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      String string0 = StringUtils.rightPad("E@!4k>xEaO;PV \"Ck", (-899), "E@!4k>xEaO;PV \"Ck");
      assertEquals("E@!4k>xEaO;PV \"Ck", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate((String) null, Integer.MIN_VALUE);
      assertNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "E@!4k>xEaO;PV \"Ck";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string2.equals((Object)string0));
      assertEquals(3, stringArray0.length);
      assertEquals("E@!4k>xEaO;PV \"Ck", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("E@!4k>xEaO;PV \"Ck", 4);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("E@!4k>xEaO;PV \"Ck", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals(3, stringArray0.length);
      assertEquals("E@!4k>xEaO;PV \"Ck", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      objectArray0[4] = object1;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[5] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertNotNull(object5);
      
      String string0 = StringUtils.leftPad("2>6W<z", 269, "_u@vs.jVijgFmM|B");
      assertEquals("_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.j2>6W<z", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("vKv@L}d8$@b`M~l", "", false);
      assertEquals(15, int0);
      
      String string1 = StringUtils.chomp("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("_u@vs.jVijgFmM|B", 269, 2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "_u@vs.jVijgFmM|B", (CharSequence) "2>6W<z");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate("", (String) null, 12, 25);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase((String) null, "j&D1#4)P,152<E");
      assertNull(string1);
      
      String string2 = StringUtils.wrap("{' matches '{", 'p');
      assertEquals("p{' matches '{p", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("p{' matches '{p", "Search and Replace array lengths don't match: ");
      assertTrue(string3.equals((Object)string2));
      assertEquals("p{' matches '{p", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isBlank("hZ2");
      assertFalse(boolean0);
      
      String string4 = StringUtils.truncate("_/LH&bMZaQb>", 108, 0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "p{' matches '{p", (CharSequence) "hZ2");
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      String string5 = StringUtils.stripEnd((String) null, "XB-70lOxK&MM6YNt&9i");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      String string0 = StringUtils.swapCase("%o{");
      assertEquals("%O{", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%o{", "%O{");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringAfter("%o{", 23);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("1[", "1[");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("%O{", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("%o{", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isAlpha("1[");
      assertFalse(boolean0);
      
      String string3 = StringUtils.defaultIfEmpty("", "eI_gQCS");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("eI_gQCS", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.substringsBetween("", " vs ", "");
      assertNull(stringArray2);
      
      String[] stringArray3 = StringUtils.stripAll((String[]) null, "org.junitpioneer.jupiter.RetryingTestExtension");
      assertNull(stringArray3);
      
      String string4 = StringUtils.abbreviate("$ <nnS2Z:l8EX+ ", (String) null, 23);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("$ <nnS2Z:l8EX+ ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter("$ <nnS2Z:l8EX+ ", "7M'VJ#xwrRdZ`lp _q");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "gT(:+$|-";
      stringArray0[3] = "gT(:+$|-";
      stringArray0[4] = "Cannot store ";
      stringArray0[5] = "gT(:+$|-";
      stringArray0[6] = "gT(:+$|-";
      String string0 = StringUtils.replaceEach("gT(:+$|-", stringArray0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("gT(:+$|-", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny(stringArray0[2], stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("|n-pnbtXO%Wf$D[cEm", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String[] stringArray1 = StringUtils.substringsBetween("X", stringArray0[0], "Cannot store ");
      assertEquals(9, stringArray0.length);
      assertNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "gT(:+$|-", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("comparator.!0$j&2OB", "comparator.!0$j&2OB", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      String string0 = StringUtils.center(">b9ji[=s}~wOwd}", (-1314), "d4nVTu`*uuen$R3^|.h");
      assertEquals(">b9ji[=s}~wOwd}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase(">b9ji[=s}~wOwd}");
      assertFalse(string1.equals((Object)string0));
      assertEquals(">b9ji[=s}~wowd}", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceAll("org.junitpioneer.jupiter.params.ShortRange", "d4nVTu`*uuen$R3^|.h", ">b9ji[=s}~wOwd}");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.>b9ji[=s}~wOwd}ortRange", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace(">b9ji[=s}~wowd}");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals(">b9ji[=s}~wowd}", string3);
      assertNotNull(string3);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      String string4 = StringUtils.replaceIgnoreCase(">b9ji[=s}~wOwd}", "\n", " f*");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals(">b9ji[=s}~wOwd}", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center(">b9ji[=s}~wowd}", (int) (short)0, "Strings must not be null");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(">b9ji[=s}~wowd}", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.SPACE;
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replace("zJXHhJ4", (String) null, ">b9ji[=s}~wOwd}");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("zJXHhJ4", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.truncate(">b9ji[=s}~wowd}", 13);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertEquals(">b9ji[=s}~wow", string8);
      assertNotNull(string8);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string9 = StringUtils.getIfBlank("p{In", supplier0);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertEquals("p{In", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      String string0 = "'oGg~7Wxb[;4oeZQ0O";
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("'oGg~7Wxb[;4oeZQ0O", "'oGg~7Wxb[;4oeZQ0O");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 17
         // 'oGg~7Wxb[;4oeZQ0O
         //                  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) ",BWOGE71g(tI eD`", ",BWOGE71g(tI eD`");
      assertEquals(0, int0);
      
      String string0 = StringUtils.rotate("Fml9qn5b9=%Va&bJ", 0);
      assertEquals("Fml9qn5b9=%Va&bJ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("Fml9qn5b9=%Va&bJ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      String string0 = StringUtils.stripToNull("org.juni");
      assertEquals("org.juni", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterator<?>) null, "8L^8IGRmt7");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">b9ji[=s}~wOwd}";
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(">b9ji[=s}~wOwd}"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add("d*J(f");
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.contains(">b9ji[=s}~wOwd}"));
      assertTrue(linkedHashSet0.contains("d*J(f"));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, " ");
      assertEquals("d*J(f", string0);
      assertNotNull(string0);
      assertFalse(linkedHashSet0.contains(">b9ji[=s}~wOwd}"));
      assertTrue(linkedHashSet0.contains("d*J(f"));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals(">b9ji[=s}~wOwd}", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ">b9ji[=s}~wOwd}", Integer.MIN_VALUE);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '7';
      String string2 = StringUtils.join(floatArray0, '7', Integer.MIN_VALUE, 100);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, floatArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new float[] {55.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("d*J(f");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOfAny("d*J(f", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.wrap("6@<sGY #&c_lf@p)\"'j", "6@<sGY #&c_lf@p)\"'j");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("6@<sGY #&c_lf@p)\"'j6@<sGY #&c_lf@p)\"'j6@<sGY #&c_lf@p)\"'j", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split((String) null, "g\"7)yU0Qs[", Integer.MIN_VALUE);
      assertNull(stringArray1);
      
      String string4 = StringUtils.substringAfter("6@<sGY #&c_lf@p)\"'j", "3U;crI!V&a2~Ke=m5n]#JN~M=  1#H!");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.right("6@<sGY #&c_lf@p)\"'j", 0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join(floatArray0, '7', Integer.MIN_VALUE, 2257);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertEquals(1, floatArray0.length);
      assertEquals("", string6);
      assertArrayEquals(new float[] {55.0F}, floatArray0, 0.01F);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringBeforeLast("", "dDSOy;:{(&gv6<Zp3");
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) "", 2112);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string8 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string8);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "dDSOy;:{(&gv6<Zp3");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-1414), 'f');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "YS'rlP'$3wxyR_a");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "YS'rlP'$3wxyR_a", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("", 0, '&');
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("StdIo_System_Out");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("tuO_metsyS_oIdtS", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.reverse("Search and Replace array lengths don't match: ");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(" :hctam t'nod shtgnel yarra ecalpeR dna hcraeS", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceAll((String) null, "nt=~Eop2+-JT7r`", "");
      assertNull(string6);
      
      String string7 = StringUtils.leftPad((String) null, 25);
      assertNull(string7);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string8 = StringUtils.repeat("", "zQQlxT", (-1));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.rotate("", 18);
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string3));
      assertEquals("", string9);
      assertNotNull(string9);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "blank_blank_blank_2014";
      stringArray0[1] = "";
      stringArray0[2] = "nt=~Eop2+-JT7r`";
      stringArray0[3] = "";
      String string10 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertEquals(4, stringArray0.length);
      assertEquals("blank_blank_blank_2014", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Never disable parameterized test method itself", "q*j|Hkn");
      assertEquals("Never disable parameterized test method itself", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      String string0 = StringUtils.chop("khEX2MeNB1\"v_BNPd7B");
      assertEquals("khEX2MeNB1\"v_BNPd7", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'W';
      charArray0[2] = 'K';
      String string1 = StringUtils.unwrap("khEX2MeNB1\"v_BNPd7B", 'W');
      assertFalse(string1.equals((Object)string0));
      assertEquals("khEX2MeNB1\"v_BNPd7B", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip(",&jQpcP|9A}^xoM4j");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(",&jQpcP|9A}^xoM4j", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlpha("khEX2MeNB1\"v_BNPd7B");
      assertFalse(boolean0);
      
      String string3 = StringUtils.center("Supplied value must be a valid byte literal between -32768 and 32767: [", 97, "5n?'!WHsAAKNNSSE#.");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("5n?'!WHsAAKNNSupplied value must be a valid byte literal between -32768 and 32767: [5n?'!WHsAAKNN", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.overlay("792", "", 'W', (-927));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("5n?'!WHsAAKNNSSE#.", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.removeStartIgnoreCase("mQ4v@7", "tfe(%@g*crPK");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "tfe(%@g*crPK", (CharSequence) "tfe(%@g*crPK");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "792", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("T$dxIk,", "792", (-1691));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfBlank(",&jQpcP|9A}^xoM4j", supplier0);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals(",&jQpcP|9A}^xoM4j", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...");
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp("offset cannot be negative", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      Locale locale0 = new Locale("!w5_| }?{", "offset cannot be negative");
      assertNotNull(locale0);
      assertEquals("OFFSET CANNOT BE NEGATIVE", locale0.getCountry());
      assertEquals("!w5_| }?{_OFFSET CANNOT BE NEGATIVE", locale0.toString());
      assertEquals("!w5_| }?{", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.forLanguageTag("offset cannot be negative");
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      
      Set<Character> set0 = locale1.getExtensionKeys();
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(set0);
      assertFalse(set0.contains('X'));
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string2 = StringUtils.lowerCase("uM1JUu", locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(locale1, locale0);
      assertEquals("um1juu", string2);
      assertNotNull(string2);
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      
      String string3 = StringUtils.leftPad("{dqzJK5{\"#n\";K", 14, "{dqzJK5{\"#n\";K");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("{dqzJK5{\"#n\";K", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Iterable<?>) set0, 'X');
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(locale1, locale0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(set0.contains('X'));
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "...", 52);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, 7);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Minimum abbreviation width is %d";
      stringArray0[1] = "Minimum abbreviation width is %d";
      stringArray0[2] = "Minimum abbreviation width is %d";
      stringArray0[3] = "\n";
      stringArray0[4] = null;
      stringArray0[5] = "3jw_{nS-H r./N)_,|_";
      stringArray0[6] = null;
      String string2 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.stripStart("3jw_{nS-H r./N)_,|_", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertEquals("3jw_{nS-H r./N)_,|_", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny("3jw_{nS-H r./N)_,|_", stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("u`xXuT]6pR9N[", "|n-pnbtXO%Wf$D[cEm", true);
      assertFalse(int1 == int0);
      assertEquals((-7), int1);
      
      String string4 = StringUtils.chomp("u`xXuT]6pR9N[");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("u`xXuT]6pR9N[", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.capitalize(string1);
      assertNull(string5);
      
      int int2 = StringUtils.indexOf((CharSequence) null, 0, 76);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Y.iY}y");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("Y");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("#`fWOlxuF=", "6zhH^");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.replaceIgnoreCase("dyJ+FY#)0P0", (String) null, "w1I/hRc{C", 32);
      assertEquals("dyJ+FY#)0P0", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("I/]", "#`fWOlxuF=", true);
      assertEquals(38, int0);
      
      String string1 = StringUtils.rotate("I/]", 80);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/]I", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((int[]) null, '3');
      assertNull(string2);
      
      String string3 = StringUtils.rotate("2295.9226w0.0w0.0w0.0w0.0", (-718));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("0.0w0.02295.9226w0.0w0.0w", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.split("/]I");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.stripStart((String) null, "UyD[vpE>");
      assertNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("ha+");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("ha+", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.substringBefore("FS!llCcEOl", "FS!llCcEOl");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      String string2 = StringUtils.join(objectArray0, "Never disable parameterized test method itself", 3002, 502);
      assertTrue(string2.equals((Object)string1));
      assertEquals(6, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("' contains '", 502, 64);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("' contains '", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny("' contains '", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("NFjD+9?h", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsAny("Kk$D", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Locale must not be null");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("Locale must not be null", stringArray0);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("Locale must not be null", 'e');
      assertEquals("eLocale must not be nulle", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "\r", ":;gX4yO");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "2>6W<zSearch and Replace array lengths don't match: 2>6W<z2>6W<zSearch and Replace array lengths don't match: 2>6W<zjV<p|i:s");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.unwrap("eLocale must not be nulle", "eLocale must not be nulle");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("eLocale must not be nulle", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      String string0 = StringUtils.abbreviate("ak)>x[{3byX$g5Pri%", "ak)>x[{3byX$g5Pri%", (-659), 1549);
      assertEquals("ak)>x[{3byX$g5Pri%", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ak)>x[{3byX$g5Pri%", (CharSequence) "ak)>x[{3byX$g5Pri%", 13);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("ak)>x[{3byX$g5Pri%", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.join(byteArray0, 'H', 1549, 10);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, byteArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("ak)>x[{3byX$g5Pri%");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("ak)>x[{3byX$g5Pri%", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", ",S4@rp>[Df");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.removeStart("=m5n]#JN~M=  1#H!", "3U;crI!V&a2~Ke");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("=m5n]#JN~M=  1#H!", string3);
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean3);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 13;
      floatArray0[3] = (float) (-659);
      floatArray0[4] = (float) 10;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 13;
      floatArray0[7] = (float) 13;
      String string4 = StringUtils.join(floatArray0, '|');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(8, floatArray0.length);
      assertEquals("10.0|0.0|13.0|-659.0|10.0|0.0|13.0|13.0", string4);
      assertArrayEquals(new float[] {10.0F, 0.0F, 13.0F, (-659.0F), 10.0F, 0.0F, 13.0F, 13.0F}, floatArray0, 0.01F);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      String string0 = StringUtils.unwrap("}HP`NwR", '0');
      assertEquals("}HP`NwR", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("org.junitpioneer.jupiter.StdIoExtension", "T=Dh", 12, 12);
      assertFalse(string1.equals((Object)string0));
      assertEquals("T=DhneerT=Dh", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("@StdIo defined no input, so System.in is still in place and nojStdIn parameter can bX provided. If you want to define empty input, useu`@StdIo(\"\")`.", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      short[] shortArray0 = new short[1];
      String string0 = StringUtils.join(shortArray0, '>');
      assertEquals(1, shortArray0.length);
      assertEquals("0", string0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '>';
      floatArray0[1] = (float) '>';
      floatArray0[2] = (float) '>';
      floatArray0[3] = (float) '>';
      floatArray0[4] = (float) '>';
      floatArray0[5] = (float) '>';
      floatArray0[6] = (float) '>';
      floatArray0[7] = (float) '>';
      floatArray0[8] = (float) '>';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '6', 32767, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      String string0 = StringUtils.abbreviate(";@%\"K*\">7?_/SsJ/", (String) null, (-1476));
      assertEquals(";@%\"K*\">7?_/SsJ/", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("J2sb ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("J2sb", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase(";@%\"K*\">7?_/SsJ/");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(";@%\"k*\">7?_/sSj/", string2);
      assertNotNull(string2);
      
      int int0 = (-2212);
      String string3 = StringUtils.repeat(";@%\"k*\">7?_/sSj/", (String) null, (-2212));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) ";@%\"K*\">7?_/SsJ/";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) ";@%\"K*\">7?_/SsJ/";
      charSequenceArray0[4] = (CharSequence) ";@%\"k*\">7?_/sSj/";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.unwrap("", 'K');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2212);
      floatArray0[1] = (float) 'K';
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '7', Integer.MIN_VALUE, (-2212));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("R:BuD...", "R:BuD...");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.wrap("Minimum abbreviation width with offset is %d", 'Z');
      assertEquals("ZMinimum abbreviation width with offset is %dZ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("Minimum abbreviation width with offset is %d");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)6;
      String string1 = StringUtils.join(byteArray0, 'X', 19, 10);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, byteArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)97, (byte)29, (byte)6}, byteArray0);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean1);
      
      int int0 = StringUtils.countMatches((CharSequence) "ZMinimum abbreviation width with offset is %dZ", '-');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[15];
      floatArray0[0] = 2295.9226F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-696.0F);
      floatArray0[3] = 3636.721F;
      floatArray0[4] = (-2264.56F);
      String string0 = StringUtils.join(floatArray0, 'j');
      assertEquals(15, floatArray0.length);
      assertEquals("2295.9226j0.0j-696.0j3636.721j-2264.56j0.0j0.0j0.0j0.0j0.0j0.0j0.0j0.0j0.0j0.0", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "&E3[yiZ&!bCy I<g{", (CharSequence) "2295.9226j0.0j-696.0j3636.721j-2264.56j0.0j0.0j0.0j0.0j0.0j0.0j0.0j0.0j0.0j0.0");
      assertEquals(0, int0);
      
      String string1 = StringUtils.toRootUpperCase("&E3[yiZ&!bCy I<g{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("&E3[YIZ&!BCY I<G{", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("&E3[YIZ&!BCY I<G{", "&E3[yiZ&!bCy I<g{");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.mid("&E3[YIZ&!BCY I<G{", 0, (-844));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("&E3[YIZ&!BCY I<G{", "");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.abbreviate("2295.9226j0.0j-696.0j3636.721j-2264.56j0.0j0.0j0.0j0.0j0.0j0.0j0.0j0.0j0.0j0.0", (int) 'j');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("2295.9226j0.0j-696.0j3636.721j-2264.56j0.0j0.0j0.0j0.0j0.0j0.0j0.0j0.0j0.0j0.0", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.center((String) null, (int) 'j', "");
      assertNull(string4);
      
      String string5 = StringUtils.normalizeSpace("");
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'm');
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      String string0 = StringUtils.wrap("' matches '", '{');
      assertEquals("{' matches '{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "{' matches '{", (CharSequence) "{' matches '{");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("{' matches '{");
      assertTrue(string1.equals((Object)string0));
      assertEquals("{' matches '{", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{Z`!ZuW2_", "{' matches '{");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '#';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) '{';
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) '{';
      doubleArray0[5] = (double) '{';
      doubleArray0[6] = (double) '{';
      String string2 = StringUtils.substringAfterLast("{' matches '{", (int) '{');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "{' matches '{", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string3 = StringUtils.join(byteArray0, '{');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, byteArray0.length);
      assertEquals("", string3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.substringAfterLast("?", "?");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("The String must not be empty", (int) (byte) (-119), "Minimum abbreviation width with offset is %d");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("The String must not be empty", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, '!');
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      String string2 = StringUtils.removeStart("/YDCiGuz", "6@<sGY #&c_lf@p)\"'j");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("/YDCiGuz", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '!';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      charArray0[6] = '!';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "' contains '", charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'\'', '\'', '!', 'i', 'i', 'i', '!'}, charArray0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(locale0));
      assertEquals(0, linkedList0.size());
      
      Locale locale1 = Locale.lookup(vector0, linkedList0);
      assertNull(locale1);
      assertFalse(linkedList0.contains(locale0));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, linkedList0.size());
      
      Locale locale2 = Locale.FRANCE;
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      
      String string3 = locale2.getScript();
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(locale2, locale0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      
      String string4 = StringUtils.lowerCase(" ", locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(locale2, locale0);
      assertEquals(" ", string4);
      assertNotNull(string4);
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("FS!llCcEOl");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.substringBetween("a-A+ e1iz3^W!>et[", "a-A+ e1iz3^W!>et[", "Don't clear/set the same entry more than once.");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("ZHIMvQd2J,9T");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "9Td'gTc)o<6a-", (CharSequence) "9Td'gTc)o<6a-");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("9Td'gTc)o<6a-", "9Td'gTc)o<6a-", false);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("ion width with offset is %d").when(supplier0).get();
      String string0 = StringUtils.getIfEmpty((String) null, supplier0);
      assertEquals("ion width with offset is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("q>PhEXT9j4/18");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Q>PHEXT9J4/18", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("...", "Q>PHEXT9J4/18");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("...", "q>PhEXT9j4/18");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      String string3 = StringUtils.join(charArray0, '7', 1274, 347);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(3, charArray0.length);
      assertEquals("", string3);
      assertArrayEquals(new char[] {'7', '7', '7'}, charArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap("", '7');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("9Td'gTc)o<6a-");
      assertEquals("9td'gtc)o<6a-", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "9td'gtc)o<6a-", (CharSequence) "9Td'gTc)o<6a-");
      assertEquals(2, int0);
      
      String string1 = StringUtils.substring("9td'gtc)o<6a-", 2, 2);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("9td'gtc)o<6a-", "");
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "9td'gtc)o<6a-", charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("9td'gtc)o<6a-");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "9Td'gTc)o<6a-";
      stringArray0[1] = "E@!4k>xEaO;PV \"Ck";
      stringArray0[2] = "9Td'gTc)o<6a-";
      stringArray0[3] = "E@!4k>xEaO;PV \"Ck";
      stringArray0[4] = "9td'gtc)o<6a-";
      stringArray0[5] = "9td'gtc)o<6a-";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(6, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">b9ji[=s}~wOwd}";
      boolean boolean0 = StringUtils.contains((CharSequence) ">b9ji[=s}~wOwd}", (CharSequence) ">b9ji[=s}~wOwd}");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase(">b9ji[=s}~wOwd}", ">b9ji[=s}~wOwd}", true);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.toRootUpperCase("%>ah#+TeoC=aig^ZU@");
      assertEquals("%>AH#+TEOC=AIG^ZU@", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '!';
      charArray0[1] = '=';
      charArray0[2] = 'c';
      charArray0[3] = '3';
      charArray0[4] = ']';
      charArray0[5] = '*';
      charArray0[6] = 'x';
      charArray0[7] = '&';
      charArray0[8] = '&';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'!', '=', 'c', '3', ']', '*', 'x', '&', '&'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals("!=c3]*x&&", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.remaining());
      
      String string1 = StringUtils.capitalize("Rp\"1paGeLeHMvQ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Rp\"1paGeLeHMvQ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("KOn|;vf", ">b9ji[=s}~wOwd}", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertEquals("KOn|;vf>b9ji[=s}~wOwd}", string2);
      assertNotNull(string2);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertEquals(">b9ji[=s}~wOwd}", charSequence0);
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Rp\"1paGeLeHMvQ", 0, 181);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = 'G';
      String string0 = StringUtils.substringAfter(":D2YNb8v", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("zQQlxT", 'G');
      assertFalse(string1.equals((Object)string0));
      assertEquals("zQQlxT", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "offset cannot be negative...", (CharSequence) "", 1);
      assertEquals(1, int0);
      
      String string2 = StringUtils.abbreviate("", 321, 11);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("EkOh0Jbxq^", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("EkOh0Jbxq^", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "EkOh0Jbxq^", charArray0);
      assertFalse(int1 == int0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'>', 'G'}, charArray0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(locale0));
      assertEquals(0, linkedList0.size());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Locale locale1 = Locale.lookup(stack0, linkedList0);
      assertNull(locale1);
      assertFalse(linkedList0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Locale locale2 = Locale.ROOT;
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(locale2));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Locale locale3 = Locale.lookup(linkedList1, arrayList0);
      assertNull(locale3);
      assertFalse(arrayList0.contains(locale2));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList1.size());
      
      String string4 = StringUtils.lowerCase("", locale2);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(">e+ rNjpG");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.lastIndexOfAny("", stringArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(7, stringArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      String string0 = StringUtils.stripToNull("\r");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.prependIfMissing("CF{:tq7 qjS", "CF{:tq7 qjS", stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals("CF{:tq7 qjS", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "x#3\"", (CharSequence[]) stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrap("x#3\"", "CF{:tq7 qjS");
      assertFalse(string1.equals((Object)string0));
      assertEquals("CF{:tq7 qjSx#3\"CF{:tq7 qjS", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("x#3\"", (-1), (-293));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat('`', (-293));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("&E3[yiZ&!bCy I<g{", "XloMtN2_S%q*Avo", "w{Rb>)peZWL");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("hZ2", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("&E3[yiZ&!bCy I<g{", string1);
      assertNotNull(string1);
      
      short short0 = (short)2;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)2;
      char char0 = 'Z';
      String string2 = StringUtils.replaceFirst("Fy2pk^yN!OAW", "DeaultULoale", "<Z>Ia-sQ{");
      assertFalse(string2.equals((Object)string1));
      assertEquals("Fy2pk^yN!OAW", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("&E3[yiZ&!bCy I<g{", "'*< EZsWH\"{Xl5a0");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.right("eI_gQCS", 3054);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("eI_gQCS", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("(E*IOn<T8teTB4(E*IOn<T8teTB4", "eI_gQCS", 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      String string0 = "1[";
      String string1 = StringUtils.wrap("1[", 'w');
      assertFalse(string1.equals((Object)string0));
      assertEquals("w1[w", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "w1[w", (CharSequence) "1[");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "1[", (CharSequence) "1[");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = '9';
      charArray0[2] = '=';
      charArray0[3] = '9';
      charArray0[4] = 'x';
      charArray0[5] = 'g';
      charArray0[6] = '9';
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(7, charArray0.length);
      assertEquals("x9=9xg9", string2);
      assertArrayEquals(new char[] {'x', '9', '=', '9', 'x', 'g', '9'}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "1[", (CharSequence) "", 1760);
      assertEquals(2, int0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("w1[w"));
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("w1[w"));
      
      String string4 = StringUtils.join(iterator0, "org.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesi");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(treeSet0.contains("w1[w"));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "x9=9xg9", (CharSequence) "x9=9xg9", (-1956));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("w1[w", 8192, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("bt");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "bt";
      String string0 = StringUtils.remove("object", "");
      assertEquals("object", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "object";
      int int0 = StringUtils.lastIndexOfAny("bt", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      String string0 = StringUtils.mid("5n?'!WHsAAKNNSSE#.", 27, 27);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "5n?'!WHsAAKNNSSE#.";
      charSequenceArray0[2] = (CharSequence) "5n?'!WHsAAKNNSSE#.";
      charSequenceArray0[3] = (CharSequence) "5n?'!WHsAAKNNSSE#.";
      charSequenceArray0[4] = (CharSequence) "5n?'!WHsAAKNNSSE#.";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "5n?'!WHsAAKNNSSE#.";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "5n?'!WHsAAKNNSSE#.";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviate("Co7Ts4)/", "5n?'!WHsAAKNNSSE#.", 27);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Co7Ts4)/", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase(charSequenceArray0[8]);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.right("Minimum abbreviation width with offset is %d", 27);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ion width with offset is %d", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Co7Ts4)/";
      stringArray0[1] = "e";
      stringArray0[2] = "Co7Ts4)/";
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals(3, stringArray0.length);
      assertEquals("Co7Ts4)/", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("bC`xbmtstkgW*Q!", 1, "Co7Ts4)/");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("bC`xbmtstkgW*Q!", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("org.junitpioneer.jupiter.params.IntRange", "ion width with offset is %d", 2362);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.getDigits("uH55~ft^>S_G1$Gc");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("551", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Whlaw_qqL:0 ''");
      assertEquals("Whlaw_qqL:0 ''", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("", "Don't cear/set the same entry more than once.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("", "BLUeVJDDm@<(");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("Whlaw_qqL:0 ''", 91, "ozd*7\"m34<z6v#M");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ozd*7\"m34<z6v#Mozd*7\"m34<z6v#Mozd*7\"m34<z6v#Mozd*7\"m34<z6v#Mozd*7\"m34<z6v#MozWhlaw_qqL:0 ''", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny("", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("S?`=+ie>a", "", true);
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      String string4 = StringUtils.chomp("u$!6n< },EozE#0");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("u$!6n< },EozE#0", string4);
      assertNotNull(string4);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = arrayList0.add(locale_Category0);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(locale_Category0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      String string5 = StringUtils.join((List<?>) arrayList0, "u$!6n< },EozE#0", 9, 9);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(arrayList0.contains(locale_Category0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      boolean boolean1 = StringUtils.isEmpty("BLUeVJDDm@<(");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfBlank("S?`=+ie>a", supplier0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("S?`=+ie>a", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("A");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.apache.commons.lang3.StringUtils");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      String string0 = StringUtils.chomp("L+");
      assertEquals("L+", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("L+", "L+", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      String string0 = "', '";
      String string1 = StringUtils.abbreviate("', '", 32767);
      assertTrue(string1.equals((Object)string0));
      assertEquals("', '", string1);
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("', '");
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {39, 44, 32, 39}, intArray0);
      assertNotNull(intArray0);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      String string2 = "\" should have a parent context.";
      String string3 = StringUtils.substringBetween("\" should have a parent context.", "', '", "StdIoExtension is active but neither System.out or System.in are getting redirected.");
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("', '", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      String string0 = "_C";
      String string1 = StringUtils.replaceOnce("(ObDok{[IyA", "(ObDok{[IyA", "_C");
      assertTrue(string1.equals((Object)string0));
      assertEquals("_C", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "_C";
      charSequenceArray0[1] = (CharSequence) "(ObDok{[IyA";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("_C", "_C");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substring((String) null, 150);
      assertNull(string2);
      
      String string3 = StringUtils.substringBefore("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isBlank(charSequenceArray0[0]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      String string4 = StringUtils.trimToEmpty("5ND.IL|P#V N&A");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("5ND.IL|P#V N&A", string4);
      assertNotNull(string4);
      
      Locale locale1 = Locale.JAPANESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja", locale1.toString());
      
      String string5 = StringUtils.wrapIfMissing("", "_C");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultString("_C");
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("_C", string6);
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "_C", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      String string0 = StringUtils.capitalize("7Ls@~BoJY,NMcA");
      assertEquals("7Ls@~BoJY,NMcA", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("7Ls@~BoJY,NMcA", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      String string0 = StringUtils.chomp("Y");
      assertEquals("Y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("Y");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Y", (CharSequence) "Y");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = 8;
      String string1 = StringUtils.removeEnd(" vs ", "Y");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle(" vs ", "Y", 8);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(" vs ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("RU%X@L%seX-vLU7");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("RU%X@L%seX-vLU7", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string4 = StringUtils.appendIfMissing("bvA|_u}8lPG5#a", "RU%X@L%seX-vLU7", charSequenceArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("bvA|_u}8lPG5#aRU%X@L%seX-vLU7", string4);
      assertNotNull(string4);
      
      int int1 = (-1560);
      String string5 = StringUtils.replaceChars("BuD", " vs ", "bvA|_u}8lPG5#aRU%X@L%seX-vLU7");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("BuD", string5);
      assertNotNull(string5);
      
      try { 
        StringUtils.getBytes("PyCcjK", "BuD");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase(" ", "maxWith cannot bnegative", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals(" maxWith cannot bnegative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      String string0 = StringUtils.difference("t3K8onu", "t3K8onu");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "t3K8onu", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      String string0 = StringUtils.stripToNull("[XKq:+%lW/f:k jHb");
      assertEquals("[XKq:+%lW/f:k jHb", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("Fml9qn5b9=%Va&bJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Fml9qn5b9=%Va&bJ", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Fml9qn5b9=%Va&bJ";
      charSequenceArray0[1] = (CharSequence) "Fml9qn5b9=%Va&bJ";
      charSequenceArray0[2] = (CharSequence) "Fml9qn5b9=%Va&bJ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '}';
      String string2 = StringUtils.join(charArray0, '}');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, charArray0.length);
      assertEquals("4}}", string2);
      assertArrayEquals(new char[] {'4', '}'}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference((String) null, ")_`-g8=W.gMUF");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(")_`-g8=W.gMUF", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("...", (-1), "px\"?>Sd\"g");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEnd("R:BuD", "...");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("R:BuD", string5);
      assertNotNull(string5);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(")_`-g8=W.gMUF"));
      assertEquals(0, priorityQueue0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>(priorityQueue0);
      assertNotNull(treeSet0);
      assertFalse(priorityQueue0.contains(")_`-g8=W.gMUF"));
      assertFalse(treeSet0.contains(")_`-g8=W.gMUF"));
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("...");
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains(")_`-g8=W.gMUF"));
      assertTrue(priorityQueue0.contains("..."));
      assertEquals(1, priorityQueue0.size());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) priorityQueue0);
      assertNotNull(list0);
      assertFalse(list0.contains(")_`-g8=W.gMUF"));
      assertFalse(priorityQueue0.contains(")_`-g8=W.gMUF"));
      assertTrue(priorityQueue0.contains("..."));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, priorityQueue0.size());
      
      String string6 = StringUtils.join(list0, 'd', 32, 11);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(list0.contains(")_`-g8=W.gMUF"));
      assertFalse(priorityQueue0.contains(")_`-g8=W.gMUF"));
      assertTrue(priorityQueue0.contains("..."));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, priorityQueue0.size());
      
      int int1 = StringUtils.indexOfAny((CharSequence) "[XKq:+%lW/f:k jHb", "T&w$4mj3H");
      assertFalse(int1 == int0);
      assertEquals(14, int1);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      String string0 = StringUtils.reverse("I&");
      assertEquals("&I", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = '?';
      String string1 = StringUtils.substringBefore((String) null, "I&");
      assertNull(string1);
      
      String string2 = StringUtils.trim("&I");
      assertTrue(string2.equals((Object)string0));
      assertEquals("&I", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "&I", (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("I&");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      StringUtils.rightPad("Up", 65536, (String) null);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad(" ", 8207, " ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      String string0 = StringUtils.swapCase("%o{");
      assertEquals("%O{", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%o{", "%O{");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringAfter("%o{", 23);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("' matches '", '%');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("' matches '", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      String string3 = StringUtils.join(byteArray0, '%');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, byteArray0.length);
      assertEquals("-119", string3);
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("' matches '");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringAfterLast("' matches '", "?");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      StringUtils.rightPad("", 65536, (String) null);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("lh4:m", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      String string1 = StringUtils.lowerCase("", locale0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      String string2 = StringUtils.replaceChars("offset cannot be negative", '!', 'i');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("FS!llCcEOl");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("FS!llCcEOl", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("offset cannot be negative", 11);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("offset c...", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains("offset cannot be negative"));
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      charSequenceArray0[0] = (CharSequence) "FS!llCcEOl";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "offset c...";
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string5 = StringUtils.getDigits("offset cannot be negative");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      StringUtils.center("2>6W<zSearch and Replace array lengths don't match: 2>6W<z2>6W<zSearch and Replace array lengths don't match: 2>6W<zjV<p|i:sh7w>bhlm'|n23r2R>'", 32767, "2>6W<zSearch and Replace array lengths don't match: 2>6W<z2>6W<zSearch and Replace array lengths don't match: 2>6W<zjV<p|i:sh7w>bhlm'|n23r2R>'");
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBeforeLast(" ", "offset cannot be negative");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("9ZS");
      assertFalse(string1.equals((Object)string0));
      assertEquals("9", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("offset cannot be negative", "Z]o=fbH&G[T", true);
      assertEquals(21, int0);
      
      int int1 = StringUtils.compare((String) null, (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = 'X';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Z]o=fbH&G[T", charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'_', 'X'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      String string0 = StringUtils.abbreviate("hZ2", 1116);
      assertEquals("hZ2", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("hZ2");
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {104, 90, 50}, intArray0);
      assertNotNull(intArray0);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      int int0 = StringUtils.getFuzzyDistance("hZ2", "hZ2", locale0);
      assertEquals(7, int0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      String string1 = StringUtils.replaceOnce("hZ2", "hZ2", "hZ2");
      assertTrue(string1.equals((Object)string0));
      assertEquals("hZ2", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.length("hZ2");
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      String string2 = StringUtils.removeStart("Y #&c_lf@p)\"'j", "6@<sG");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Y #&c_lf@p)\"'j", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.countMatches((CharSequence) "Y #&c_lf@p)\"'j", '>');
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '7', 8, 347);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...");
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp("offset cannot be negative", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("...", "offset cannot be negative");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      charSequenceArray0[3] = (CharSequence) "...";
      int int1 = StringUtils.lastIndexOfAny("offset cannot be negative", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("offset cannot be negative", "...");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.defaultIfEmpty("dS5tVt:0jIf?", "dS5tVt:0jIf?");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("dS5tVt:0jIf?", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween("...", "...", " vs ");
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "...");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string5);
      
      int int2 = StringUtils.compare((String) null, " vs ");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.rotate("2>6W<zSearch and Replace array lengths don't match: 2>6W<z2>6W<zSearch and Replace array lengths don't match: 2>6W<zjV<p|i:sh7w>bhlm'|n23r2R>'", 32);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("2>6W<zjV<p|i:sh7w>bhlm'|n23r2R>'2>6W<zSearch and Replace array lengths don't match: 2>6W<z2>6W<zSearch and Replace array lengths don't match: ", string6);
      assertNotNull(string6);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = ';';
      charArray0[2] = '5';
      charArray0[3] = '7';
      charArray0[4] = '6';
      charArray0[5] = '+';
      charArray0[6] = 'N';
      charArray0[7] = '{';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'A', (-1), 38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "&E3[yiZ&!bCy I<g{");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2295.9226F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-696.0F);
      floatArray0[3] = 3636.721F;
      floatArray0[4] = (-2264.56F);
      String string0 = StringUtils.join(floatArray0, 'j');
      assertEquals(5, floatArray0.length);
      assertEquals("2295.9226j0.0j-696.0j3636.721j-2264.56", string0);
      assertArrayEquals(new float[] {2295.9226F, 0.0F, (-696.0F), 3636.721F, (-2264.56F)}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "&E3[yiZ&!bCy I<g{", (CharSequence) "2295.9226j0.0j-696.0j3636.721j-2264.56");
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat('V', 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "&E3[yiZ&!bCy I<g{");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('c');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("c", stringWriter0.toString());
      assertEquals("c", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringBuffer0);
      assertEquals("c", stringWriter0.toString());
      assertEquals("c", stringWriter1.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("c", stringBuffer0.toString());
      
      boolean boolean0 = StringUtils.isAlpha(stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertTrue(boolean0);
      assertEquals("c", stringWriter0.toString());
      assertEquals("c", stringWriter1.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("c", stringBuffer0.toString());
      
      String string3 = StringUtils.center("2295.9226j0.0j-696.0j3636.721j-2264.56", 0, "&E3[yiZ&!bCy I<g{");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("2295.9226j0.0j-696.0j3636.721j-2264.56", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'V';
      // Undeclared exception!
      try { 
        stringWriter1.write(charArray0, 4470, 2061);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...");
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp("offset cannot be negative", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("|4]K#9@4%y[S", "...", 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("r&PM[_l", "r&PM[_l");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("QD`&{6Cl&)i1#*TU>Y", "offset cannot be negative", "Search and Replace array lengths don't match: ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("QD`&{6Cl&)i1#*TU>Y", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("...", "Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, '!');
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("", " ", "&E3[yiZ&!bCy I<g{", (int) '!');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap(" ", '!');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("! !", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("", "&E3[yiZ&!bCy I<g{");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '!';
      String string5 = StringUtils.valueOf(charArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(2, charArray0.length);
      assertEquals("!!", string5);
      assertArrayEquals(new char[] {'!', '!'}, charArray0);
      assertNotNull(string5);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      String string6 = StringUtils.join(byteArray0, '!');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals(2, byteArray0.length);
      assertEquals("51!51", string6);
      assertArrayEquals(new byte[] {(byte)51, (byte)51}, byteArray0);
      assertNotNull(string6);
      
      String string7 = StringUtils.chop("! !");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("! ", string7);
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Minimum abbreviation width is %d", (int) (byte)51, (-1746));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      String string0 = StringUtils.wrap("' matches '", '{');
      assertEquals("{' matches '{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "{' matches '{", (CharSequence) "{' matches '{");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("{' matches '{");
      assertTrue(string1.equals((Object)string0));
      assertEquals("{' matches '{", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{Z`!ZuW2_", "{' matches '{");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '#';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) '{';
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) '{';
      doubleArray0[5] = (double) '{';
      doubleArray0[6] = (double) '{';
      String string2 = StringUtils.substringAfterLast("{' matches '{", (int) '{');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "{' matches '{", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.leftPad("+IkC53t\"oI", 38, "%O{");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("%O{%O{%O{%O{%O{%O{%O{+IkC53t\"oI", string3);
      assertNotNull(string3);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1881;
      shortArray0[1] = (short)1634;
      shortArray0[2] = (short) (-55);
      shortArray0[3] = (short)223;
      shortArray0[4] = (short)97;
      shortArray0[5] = (short)81;
      String string4 = StringUtils.join(shortArray0, 'R');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(6, shortArray0.length);
      assertEquals("1881R1634R-55R223R97R81", string4);
      assertArrayEquals(new short[] {(short)1881, (short)1634, (short) (-55), (short)223, (short)97, (short)81}, shortArray0);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      String string0 = StringUtils.wrap("' mches '", '{');
      assertEquals("{' mches '{", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("{' mches '{", (int) '{');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) (-2454);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2454);
      doubleArray0[1] = (double) '';
      doubleArray0[2] = (double) (-2454L);
      doubleArray0[3] = (double) '';
      doubleArray0[4] = (double) (-2454L);
      String string1 = StringUtils.join(doubleArray0, '%');
      assertEquals(5, doubleArray0.length);
      assertEquals("-2454.0%127.0%-2454.0%127.0%-2454.0", string1);
      assertArrayEquals(new double[] {(-2454.0), 127.0, (-2454.0), 127.0, (-2454.0)}, doubleArray0, 0.01);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "e.+Q^Du~m-o";
      charSequenceArray0[1] = (CharSequence) "-2454.0%127.0%-2454.0%127.0%-2454.0";
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase((String) null, "j&D1#4)P,152<E");
      assertNull(string1);
      
      String string2 = StringUtils.wrap("{' matches '{", 'p');
      assertEquals("p{' matches '{p", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("p{' matches '{p", "Search and Replace array lengths don't match: ");
      assertTrue(string3.equals((Object)string2));
      assertEquals("p{' matches '{p", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeIgnoreCase("hZ2", "d>Uym;=bS_BZ!q");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("hZ2", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isBlank("hZ2");
      assertFalse(boolean0);
      
      String string5 = StringUtils.uncapitalize("g@nIHr9ipz/W");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("g@nIHr9ipz/W", string5);
      assertNotNull(string5);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      String string6 = StringUtils.removeEnd("org.apache.commons.lang3.StringUtils", "hZ2");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("org.apache.commons.lang3.StringUtils", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.EMPTY;
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean2 = StringUtils.containsWhitespace("{' matches '{");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      String string0 = StringUtils.capitalize("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]");
      assertEquals("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "' matches '", 95, 95);
      assertEquals((-1), int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA", supplier0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("tfe(%@g*crPK");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Tfe(%@g*crPK", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA", "}p2((", "\r");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Aborting to rotect against StackOverflowError - outut of one loo is the inut of another7Ls@~BoJY,NMcA", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.defaultString("8a26t]", "Cn_!)@c4");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("8a26t]", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.overlay("Minimum abbreviation width with offset is %d", "...", '{', 3288);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is %d...", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(15, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      String string0 = StringUtils.chop("khEX2MeNB1\"v_BNPd7B");
      assertEquals("khEX2MeNB1\"v_BNPd7", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      String string1 = StringUtils.repeat('a', 109);
      assertFalse(string1.equals((Object)string0));
      assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("khEX2MeNB1\"v_BNPd7B", 109, 'a');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("khEX2MeNB1\"v_BNPd7Baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join(charArray0, '-');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4, charArray0.length);
      assertEquals("\u0000-\u0000-\u0000-\u0000", string3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("khEX2MeNB1\"v_BNPd7Baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "khEX2MeNB1\"v_BNPd7B");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("p{InCombiningDiacriticalMarks}+", 12, "khEX2MeNB1\"v_BNPd7Baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removeEnd("g\"7)yU0Qs[", "khEX2MeNB1\"v_BNPd7B");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("g\"7)yU0Qs[", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substring("...", 12);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = StringUtils.containsWhitespace("g\"7)yU0Qs[");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      String string0 = StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedException", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      String string0 = StringUtils.removeStart("o(Qd3", (String) null);
      assertEquals("o(Qd3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      String string0 = StringUtils.lowerCase("UY>");
      assertEquals("uy>", string0);
      assertNotNull(string0);
      
      Locale locale0 = new Locale("uy>", "UY>");
      assertNotNull(locale0);
      assertEquals("uy>", locale0.getISO3Language());
      assertEquals("uy>", locale0.getLanguage());
      assertEquals("UY>", locale0.getCountry());
      assertEquals("uy>_UY>", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.getFuzzyDistance("UY>", "\n", locale0);
      assertEquals(0, int0);
      assertEquals("uy>", locale0.getISO3Language());
      assertEquals("uy>", locale0.getLanguage());
      assertEquals("UY>", locale0.getCountry());
      assertEquals("uy>_UY>", locale0.toString());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.apache.commons.lang3.StringUtils", "\r", (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      try { 
        StringUtils.getBytes("\r", "\r");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      Object[] objectArray0 = new Object[6];
      String string1 = StringUtils.replace("", "", "FS!llCcEOl");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      byte byte0 = (byte) (-115);
      // Undeclared exception!
      try { 
        Charset.forName("#y%wGT:[+qm5o%");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // #y%wGT:[+qm5o%
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      String string0 = "+'?(&*}hoo\\O;YB%";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+'?(&*}hooO;YB%", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = "J?j%Xy4{";
      String string2 = StringUtils.replaceIgnoreCase(" ", "+'?(&*}hooO;YB%", "J?j%Xy4{", 4);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("+'?(&*}hooO;YB%", (String) null, false);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceEachRepeatedly("J?j%Xy4{", stringArray0, stringArray0);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("J?j%Xy4{", string3);
      assertNotNull(string3);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("+'?(&*}hooO;YB%"));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      // Undeclared exception!
      try { 
        stack0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("YS'rlP'$3wxyR_a", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "YS'rlP'$3wxyR_a", (CharSequence) "\r");
      assertEquals("YS'rlP'$3wxyR_a", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("YS'rlP'$3wxyR_a", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat("Y:r&VZ", "", 3);
      assertFalse(string0.equals((Object)charSequence0));
      assertEquals("Y:r&VZY:r&VZY:r&VZ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("\r", (String) null);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "YS'rlP'$3wxyR_a", (CharSequence) null, (int) (byte)98);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.mid("\r", 29, 852);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("", 116, 't');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Y:r&VZ", (CharSequence) "\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = ':';
      charArray0[7] = ':';
      charArray0[8] = ':';
      String string0 = StringUtils.join(charArray0, ':');
      assertEquals(9, charArray0.length);
      assertEquals(":::::::::::::::::", string0);
      assertArrayEquals(new char[] {':', ':', ':', ':', ':', ':', ':', ':', ':'}, charArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare(":::::::::::::::::", (String) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      String string0 = StringUtils.wrap("1[", 'w');
      assertEquals("w1[w", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "w1[w", (CharSequence) "1[");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "1[", (CharSequence) "1[");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("1[");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.remove("1[", 'w');
      assertFalse(string1.equals((Object)string0));
      assertEquals("1[", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((float[]) null, '~');
      assertNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "w1[w";
      stringArray0[1] = "";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, 208);
      assertNull(string4);
      
      String string5 = StringUtils.substring("Y(-\",B8&", 17);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-496), 'B');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultString("~xmE@M@tP?%fi");
      assertEquals("~xmE@M@tP?%fi", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = "#~zf?h5(!";
      stringArray0[4] = "#~zf?h5(!";
      stringArray0[5] = "#~zf?h5(!";
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("#~zf?h5(!", "#~zf?h5(!", "#~zf?h5(!");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 10
         // #~zf?h5(!
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...");
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp("offset cannot be negative", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("...", "offset cannot be negative");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      charSequenceArray0[3] = (CharSequence) "...";
      int int1 = StringUtils.lastIndexOfAny("offset cannot be negative", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("offset cannot be negative", "...");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.defaultIfEmpty("dS5tVt:0jIf?", "dS5tVt:0jIf?");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("dS5tVt:0jIf?", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween("...", "...", " vs ");
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "...");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.abbreviate("dS5tVt:0jIf?", "Could not resolve parameter of type %s.", 100);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("dS5tVt:0jIf?", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...", 33);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      charSequenceArray0[3] = (CharSequence) "...";
      boolean boolean0 = StringUtils.isAlphanumericSpace(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.right("Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA", (-139));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("...", "Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isMixedCase("org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfBlank(" doesn't match any regular expression.", supplier0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" doesn't match any regular expression.", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.capitalize(" must return `CartesianProductTest.Sets`");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" must return `CartesianProductTest.Sets`", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.countMatches(charSequenceArray0[1], (CharSequence) "...");
      assertFalse(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("7", "7", "7");
      assertEquals("7", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("7");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "7", "7");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter("7", "G $9DDX:R@FZdB [L#");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      String string1 = StringUtils.join(doubleArray0, 'K');
      assertEquals(0, doubleArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("or any enclosing class", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertEquals("or any enclosing class", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((long[]) null, ',', 0, 4601);
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing(" ", 'T');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("T T", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "clone");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "Could not resolve parameter of type %s.";
      stringArray0[4] = "\n";
      stringArray0[5] = "";
      stringArray0[6] = "\n";
      stringArray0[7] = "clone";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.upperCase("");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      String string0 = StringUtils.rotate("", 243);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("", "");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("", 16, '&');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("&&&&&&&&&&&&&&&&", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("org.junitpioneer.jupiter.params.FloatRange");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("egnaRtaolF.smarap.retipuj.reenoiptinuj.gro", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.reverse("");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceAll("", (String) null, "CartesianProductTest can not have a non-empty display name");
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isMixedCase("org.junitpioneer.jupiter.params.FloatRange");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null, 'c');
      assertNull(stringArray0);
      
      String string7 = StringUtils.join((Object[]) null, "{:aZ>$G");
      assertNull(string7);
      
      String string8 = StringUtils.leftPad("ZdhJ)BZ", 321);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertEquals("                                                                                                                                                                                                                                                                                                                          ZdhJ)BZ", string8);
      assertNotNull(string8);
      
      char[] charArray0 = new char[0];
      String string9 = StringUtils.join(charArray0, 'g');
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      assertEquals(0, charArray0.length);
      assertEquals("", string9);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string9);
      
      String string10 = StringUtils.appendIfMissing("org.junitpioneer.vintage.TimeoutExtension", "", (CharSequence[]) null);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string10);
      assertNotNull(string10);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string11 = StringUtils.left("", 0);
      assertTrue(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string10));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string9));
      assertTrue(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertTrue(string11.equals((Object)string2));
      assertEquals("", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "\n");
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      String string0 = StringUtils.lowerCase("/hSr(B0Y2y");
      assertEquals("/hsr(b0y2y", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("do+u!-wfGH8S<WF", "hZ2", 56);
      assertFalse(string1.equals((Object)string0));
      assertEquals("do+u!-wfGH8S<WF", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "do+u!-wfGH8S<WF", (CharSequence) "hZ2");
      assertEquals(15, int0);
      
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) 15;
      floatArray0[1] = (float) '7';
      floatArray0[2] = (float) 56;
      floatArray0[3] = (float) '7';
      floatArray0[4] = (float) 15;
      String string2 = StringUtils.join(floatArray0, '7');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(10, floatArray0.length);
      assertEquals("15.0755.0756.0755.0715.070.070.070.070.070.0", string2);
      assertArrayEquals(new float[] {15.0F, 55.0F, 56.0F, 55.0F, 15.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "15.0755.0756.0755.0715.070.070.070.070.070.0";
      stringArray0[1] = "VEs";
      stringArray0[2] = "hZ2";
      stringArray0[3] = "15.0755.0756.0755.0715.070.070.070.070.070.0";
      stringArray0[4] = "do+u!-wfGH8S<WF";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("C~q1yJ:Y3LK=s]{/Qh", 0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("C~q1yJ:Y3LK=s]{/Qh", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring("The character ", 44);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      String string0 = StringUtils.rightPad("e.+Q^Du~m-o", (-2454), (String) null);
      assertEquals("e.+Q^Du~m-o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("e.+Q^Du~m-o", "e.+Q^Du~m-o", (CharSequence[]) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("e.+Q^Du~m-o", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("e.+Q^Du~m-o", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeAll("e.+Q^Du~m-o", "Threshold must not be negative");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("e.+Q^Du~m-o", string2);
      assertNotNull(string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "e.+Q^Du~m-o", (CharSequence) "e.+Q^Du~m-o");
      assertTrue(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string2));
      assertEquals("e.+Q^Du~m-o", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("e.+Q^Du~m-o", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.repeat("Threshold must not be negative", "vPylW5Gp", 72);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("e.+Q^Du~m-o", "Strings must not be null");
      assertTrue(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("e.+Q^Du~m-o", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "Threshold must not be negative", 3);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.mid((String) null, 1751, (-3964));
      assertNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string3, (CharSequence) "vPylW5Gp");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(int1 == int0);
      assertEquals(2760, int1);
      
      String string6 = StringUtils.leftPad("5ND.IL|Pw1{+W*Q;ZJ", (-3964), '=');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("5ND.IL|Pw1{+W*Q;ZJ", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      String string0 = StringUtils.remove("5ND.IL|P", 't');
      assertEquals("5ND.IL|P", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("w{Rb>)peZWL", 't');
      assertFalse(string1.equals((Object)string0));
      assertEquals("w{Rb>)peZWL", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "5ND.IL|P";
      charSequenceArray0[1] = (CharSequence) "w{Rb>)peZWL";
      charSequenceArray0[2] = (CharSequence) "w{Rb>)peZWL";
      boolean boolean0 = StringUtils.endsWithAny("5ND.IL|P", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "w{Rb>)peZWL";
      stringArray0[1] = "5ND.IL|P";
      stringArray0[2] = "5ND.IL|P";
      stringArray0[3] = "5ND.IL|P";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("w{Rb>)peZWL", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      String string3 = StringUtils.join(shortArray0, 'j');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, shortArray0.length);
      assertEquals("2", string3);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceFirst("(ta>T!#", "5yw;uoffset cannot be negative", "w{Rb>)peZWL");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("(ta>T!#", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter("2", "(ta>T!#");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.right("%O{", 2);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("O{", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals(4, stringArray0.length);
      assertEquals("w{Rb>)peZWL", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.stripEnd("5ND.IL|P", "5ND.IL|P");
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      assertNotNull(string8);
      
      int int0 = StringUtils.compare("...", "w{Rb>)peZWL");
      assertEquals((-73), int0);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 4, 6);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter((String) null, "");
      assertNull(string2);
      
      String string3 = "org.junitpioneer.jupiter.params.Range";
      String string4 = StringUtils.removeEnd((String) null, "org.junitpioneer.jupiter.params.Range");
      assertNull(string4);
      
      String string5 = StringUtils.unwrap("DFeH$", 'f');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("DFeH$", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.strip((String) null);
      assertNull(string6);
      
      int int1 = (-844);
      String string7 = StringUtils.mid((String) null, (-844), 4);
      assertNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("T");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2295.9226F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-696.0F);
      floatArray0[3] = 3636.721F;
      floatArray0[4] = (-2264.56F);
      String string0 = StringUtils.join(floatArray0, 'j');
      assertEquals(5, floatArray0.length);
      assertEquals("2295.9226j0.0j-696.0j3636.721j-2264.56", string0);
      assertArrayEquals(new float[] {2295.9226F, 0.0F, (-696.0F), 3636.721F, (-2264.56F)}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "&E3[yiZ&!bCy I<g{", (CharSequence) "2295.9226j0.0j-696.0j3636.721j-2264.56");
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat('V', 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "&E3[yiZ&!bCy I<g{");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('c');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("c", stringWriter0.toString());
      assertEquals("c", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringBuffer0);
      assertEquals("c", stringWriter0.toString());
      assertEquals("c", stringWriter1.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("c", stringBuffer0.toString());
      
      boolean boolean0 = StringUtils.isAlpha(stringBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertTrue(boolean0);
      assertEquals("c", stringWriter0.toString());
      assertEquals("c", stringWriter1.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("c", stringBuffer0.toString());
      
      String string3 = StringUtils.center("2295.9226j0.0j-696.0j3636.721j-2264.56", 0, "hZ2");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("2295.9226j0.0j-696.0j3636.721j-2264.56", string3);
      assertNotNull(string3);
      
      String string4 = "Never disable parameterized test method itself";
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'V';
      // Undeclared exception!
      try { 
        stringWriter1.write(charArray0, 4470, 2061);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '!', 1344, 1344);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      String string0 = "%>ah#+TeoC=aig^ZU@";
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '^';
      longArray0[1] = (long) '';
      longArray0[2] = (long) '';
      longArray0[3] = 2111L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '^', 0, 2368);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Whlaw_qqL:0 ''");
      assertEquals("Whlaw_qqL:0 ''", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("", "Don't clear/set the same entry more than once.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      String string2 = StringUtils.removeAll("", "Eqe");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(locale0));
      assertEquals(0, linkedList0.size());
      
      Locale locale1 = Locale.lookup(vector0, linkedList0);
      assertNull(locale1);
      assertFalse(linkedList0.contains(locale0));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, '[');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'q');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      String string0 = StringUtils.chop("khEX2MeNB1\"v_BNPd7B");
      assertEquals("khEX2MeNB1\"v_BNPd7", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      String string1 = StringUtils.removeStartIgnoreCase("[t2SJt_`gC", " ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("[t2SJt_`gC", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("fRoVj\"M:%m{hy/&-;", '[');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[fRoVj\"M:%m{hy/&-;[", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("", "...");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("", "", "fRoVj\"M:%m{hy/&-;");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("L>", ">KL?eOMXqOu", "\\)waW@+Ya^J^w''CF{:tq7 qjS");
      assertEquals("L>", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ">KL?eOMXqOu";
      charSequenceArray0[1] = (CharSequence) ">KL?eOMXqOu";
      charSequenceArray0[2] = (CharSequence) "L>";
      charSequenceArray0[3] = (CharSequence) "L>";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny("L>", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.replaceAll("L>", "L>", "L>");
      assertTrue(string1.equals((Object)string0));
      assertEquals("L>", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.joinWith("L>", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, charSequenceArray0.length);
      assertEquals(">KL?eOMXqOuL>>KL?eOMXqOuL>L>L>L>", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("MeJ'UCfIx\"Ry", "[rq|~F/n3[KvL`_", (-528));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substring(">KL?eOMXqOu", (-528), (-528));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("f\"&o}63~N#;%%");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("f\"&o}63~N#;%%", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToNull("Search");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Search", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      int int0 = StringUtils.getFuzzyDistance("Threshold must not be negative", "Threshold must not be negative", locale0);
      assertEquals(88, int0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      String string0 = StringUtils.chop("khEX2MeNB1\"v_BNPd7B");
      assertEquals("khEX2MeNB1\"v_BNPd7", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'W';
      charArray0[2] = 'K';
      charArray0[3] = '4';
      int int0 = StringUtils.indexOfAny((CharSequence) "khEX2MeNB1\"v_BNPd7", charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'[', 'W', 'K', '4'}, charArray0);
      
      String string1 = StringUtils.getDigits("khEX2MeNB1\"v_BNPd7");
      assertFalse(string1.equals((Object)string0));
      assertEquals("217", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("W@+Ya^J^w''", "217");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("W@+Ya^J^w''", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trim("W@+Ya^J^w''");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("W@+Ya^J^w''", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("D [<g0R[", "Threshold must not be negative");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("D [<g0R[", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("D [<g0R[", "ETqB>~z_4JPO98\"$Q8]");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("D [<g0R[", string5);
      assertNotNull(string5);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2161;
      shortArray0[1] = (short)52;
      shortArray0[2] = (short)67;
      shortArray0[3] = (short)52;
      String string6 = StringUtils.join(shortArray0, '[', 1124, (-1897));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals(4, shortArray0.length);
      assertEquals("", string6);
      assertArrayEquals(new short[] {(short)2161, (short)52, (short)67, (short)52}, shortArray0);
      assertNotNull(string6);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      int int1 = StringUtils.getFuzzyDistance("khEX2MeNB1\"v_BNPd7", "Threshold must not be negative", locale0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)2161;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'K', 23, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      String string0 = StringUtils.defaultString("5yw;u");
      assertEquals("5yw;u", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("\n", "tfe(%@g*crPK");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[1] = '&';
      charArray0[3] = '4';
      int int0 = StringUtils.indexOfAny((CharSequence) "5yw;u", charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'4', '&', '\u0000', '4'}, charArray0);
      
      String string3 = StringUtils.getDigits("r");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("5yw;u", "", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      
      int int0 = StringUtils.getFuzzyDistance("7", "7", locale0);
      assertEquals(1, int0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      String string0 = StringUtils.stripEnd("', '", "', '");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", 255);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.chomp("", "', '");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)516;
      shortArray0[1] = (short) (-763);
      shortArray0[2] = (short)427;
      shortArray0[3] = (short) (-361);
      shortArray0[4] = (short)1163;
      String string2 = StringUtils.join(shortArray0, 'l', (int) (short)516, 321);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(5, shortArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new short[] {(short)516, (short) (-763), (short)427, (short) (-361), (short)1163}, shortArray0);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("', '", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(", Length: ", ' ');
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) ' ';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, ' ', 32, 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      String string0 = "&E3[yiZ&!bCy I<g{";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2295.9226F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-696.0F);
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("\n", "\n");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.substring("&E3[yiZ&!bCy I<g{", 516);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("\n", "~XUMH5W{:");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      String string3 = StringUtils.rightPad("", (-1356), "Minimum abbreviation width is %d");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1356);
      intArray0[1] = 516;
      intArray0[2] = (-1356);
      intArray0[3] = (-1356);
      intArray0[4] = 516;
      intArray0[5] = 516;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '?', (-1356), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1356
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, 10);
      assertNull(string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)389;
      shortArray0[1] = (short) (-1220);
      shortArray0[2] = (short)0;
      String string2 = StringUtils.join(shortArray0, '_');
      assertEquals(3, shortArray0.length);
      assertEquals("389_-1220_0", string2);
      assertArrayEquals(new short[] {(short)389, (short) (-1220), (short)0}, shortArray0);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlpha("389_-1220_0");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join(shortArray0, '_');
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals(3, shortArray0.length);
      assertEquals("389_-1220_0", string4);
      assertArrayEquals(new short[] {(short)389, (short) (-1220), (short)0}, shortArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.remove((String) null, 'o');
      assertNull(string5);
      
      String string6 = StringUtils.trimToEmpty("389_-1220_0");
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertEquals("389_-1220_0", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string7);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (int) (short) (-1220));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2295.9226F;
      String string0 = StringUtils.replaceOnceIgnoreCase("u}0?&.29p\"!Ow;}iS", " ", (String) null);
      assertEquals("u}0?&.29p\"!Ow;}iS", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("u}0?&.29p\"!Ow;}iS", (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Iterator<?>) null, " ");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 1114111);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 1617, 1617);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("9Td'gTc)o<6a-");
      assertEquals("9td'gtc)o<6a-", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.capitalize("9Td'gTc)o<6a-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("9Td'gTc)o<6a-", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9Td'gTc)o<6a-";
      stringArray0[1] = "9td'gtc)o<6a-";
      stringArray0[2] = "org.apache.commons.lang3.ObjectUtils$Null";
      stringArray0[3] = "9Td'gTc)o<6a-";
      stringArray0[4] = "9Td'gTc)o<6a-";
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "org.apache.commons.lang3.ObjectUtils$Null";
      stringArray1[1] = "9Td'gTc)o<6a-";
      stringArray1[2] = "9td'gtc)o<6a-";
      stringArray1[3] = "org.apache.commons.lang3.ObjectUtils$Null";
      stringArray1[4] = "9Td'gTc)o<6a-";
      stringArray1[5] = "9Td'gTc)o<6a-";
      stringArray1[6] = "9Td'gTc)o<6a-";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("org.apache.commons.lang3.ObjectUtils$Null", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 5 vs 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("h7Y:26\":5aWL=mUS\"");
      assertEquals("h7Y:26\":5aWL=mUS\"", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "h7Y:26\":5aWL=mUS\"", (CharSequence) "h7Y:26\":5aWL=mUS\"");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("h7Y:26\":5aWL=mUS\"");
      assertTrue(string1.equals((Object)string0));
      assertEquals("h7Y:26\":5aWL=mUS\"", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("Y?{Ng|jlpo@O", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Y?{Ng|jlpo@O", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("org.apache.commons.lang3.CharUtils", 'f');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.CharUtils", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip("9q?:3h");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("9q?:3h", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string6 = StringUtils.center("Y?{Ng|jlpo@O", 160, "|TjZd1{o\"Jz}%w");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("|TjZd1{o\"Jz}%w|TjZd1{o\"Jz}%w|TjZd1{o\"Jz}%w|TjZd1{o\"Jz}%w|TjZd1{o\"Jz}%w|TjZY?{Ng|jlpo@O|TjZd1{o\"Jz}%w|TjZd1{o\"Jz}%w|TjZd1{o\"Jz}%w|TjZd1{o\"Jz}%w|TjZd1{o\"Jz}%w|TjZ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.overlay("bAzm0DS", "113y0~523[*FMHdr@z", (-1166), 0);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertEquals("113y0~523[*FMHdr@zbAzm0DS", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("9q?:3h", "\n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.removeStartIgnoreCase("...", "EuW~BrCd-fW15(Opc:#");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertEquals("...", string8);
      assertNotNull(string8);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("nW", "Minimum abbreviation width is %d", "QS!");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isMixedCase("nW");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      String string0 = StringUtils.difference("t3K8onu", "t3K8onu");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "t3K8onu", (CharSequence) "");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replacePattern("...", "...", "...");
      assertTrue(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'X';
      String string2 = StringUtils.rotate("...", 449);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      String string0 = StringUtils.upperCase("7");
      assertEquals("7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("", "");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("", 16, '&');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("&&&&&&&&&&&&&&&&", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.reverse("");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceAll("", (String) null, "CartesianProductTest can not have a non-empty display name");
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("Fy^v_7r4=pS5,qzz4a", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)120;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "";
      stringArray0[6] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Could not resolve parameter of type %s.");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray1);
      
      String string7 = StringUtils.upperCase("[z!=Ey\fBM3&Doj&JV");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("[Z!=EY\fBM3&DOJ&JV", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("9?org.gunitioneer.jupiter.params.LongRange", "9?org.gunitioneer.jupiter.params.LongRange", "Threshold must not be negative");
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase((String) null, "", (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("LJn(g", "", "_%Fr{0W;JlL,r@I6");
      assertFalse(string4.equals((Object)string3));
      assertEquals("LJn(g", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsWhitespace((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "_%Fr{0W;JlL,r@I6";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.ordinalIndexOf("", (CharSequence) null, 50);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string5 = StringUtils.join(floatArray0, 'P');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(1, floatArray0.length);
      assertEquals("0.0", string5);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad("org.junitpioneer.jupiter.SystemPropertyExtension", (-2680));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("org.junitpioneer.jupiter.SystemPropertyExtension", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-4615);
      intArray0[3] = 2964;
      intArray0[4] = 0;
      String string0 = StringUtils.join(intArray0, 'H');
      assertEquals(6, intArray0.length);
      assertEquals("0H0H-4615H2964H0H0", string0);
      assertArrayEquals(new int[] {0, 0, (-4615), 2964, 0, 0}, intArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll((String) null, (String) null);
      assertNull(string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = '4';
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ">e.UD";
      objectArray0[1] = (Object) ">e.UD";
      objectArray0[2] = (Object) null;
      String string2 = StringUtils.join(objectArray0, ">e.UD");
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, objectArray0.length);
      assertEquals(">e.UD>e.UD>e.UD>e.UD", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chop((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      String string0 = StringUtils.capitalize("ocale must not be null");
      assertEquals("Ocale must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "M-+'GC", (CharSequence[]) stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "M-+'GC", (char[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      String string0 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      String string1 = StringUtils.join(doubleArray0, '7');
      assertEquals(0, doubleArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("or any enclosing class", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertEquals("or any enclosing class", string2);
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      String string3 = StringUtils.join(objectArray0, '@');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(4, objectArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, (-1));
      assertNull(string4);
      
      String string5 = StringUtils.replaceChars("or any enclosing class", (String) null, (String) null);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("or any enclosing class", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceFirst("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("%>ah#+TeoC=aig^ZU@", supplier0);
      assertEquals("%>ah#+TeoC=aig^ZU@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("%>ah#+TeoC=aig^ZU@");
      assertFalse(string1.equals((Object)string0));
      assertEquals("%>AH#+TEOC=AIG^ZU@", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("tfe(%@g*crPK");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Tfe(%@g*crPK", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("+V3`", (String) null, ".*{[0-9]+}.*");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("+V3`", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.defaultString("&+@", "j$p6Y'TSG");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("&+@", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      String string0 = StringUtils.replaceChars("GMT", "GMT", "GMT");
      assertEquals("GMT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("GMT", 4797, 4797);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "GMT", 2, 2);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 17;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = 0L;
      longArray0[4] = (long) 17;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '', 17, 21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object4));
      assertNotNull(object6);
      
      String string0 = StringUtils.wrapIfMissing("Search and Replace array lengths don't match: ", "2>6W<z");
      assertEquals("2>6W<zSearch and Replace array lengths don't match: 2>6W<z", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "2>6W<zSearch and Replace array lengths don't match: 2>6W<z";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "2>6W<zSearch and Replace array lengths don't match: 2>6W<z";
      String string1 = StringUtils.prependIfMissing("jV<p|i:s", "2>6W<zSearch and Replace array lengths don't match: 2>6W<z", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, charSequenceArray0.length);
      assertEquals("2>6W<zSearch and Replace array lengths don't match: 2>6W<zjV<p|i:s", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.removeStart("2>6W<zSearch and Replace array lengths don't match: 2>6W<zjV<p|i:s", "2>6W<zSearch and Replace array lengths don't match: 2>6W<z");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("jV<p|i:s", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[1], "jV<p|i:s", 12);
      assertFalse(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf(charSequenceArray0[1], (-1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      String[] stringArray0 = new String[21];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(21, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "q";
      boolean boolean0 = StringUtils.endsWithAny("q", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      String string0 = StringUtils.difference("fUL+oma(", "fUL+oma(");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("fUL+oma(");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat('7', 109);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, charArray0.length);
      assertEquals("7777", string2);
      assertArrayEquals(new char[] {'7', '7', '7', '7'}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.join(charArray0, '-');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(4, charArray0.length);
      assertEquals("7-7-7-7", string3);
      assertArrayEquals(new char[] {'7', '7', '7', '7'}, charArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777", (int) '7', " `#qIa4:9>lfFps$O");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removeEnd("R:BuD...", "R:BuD...");
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(4, charArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'7', '7', '7', '7'}, charArray0);
      
      boolean boolean3 = StringUtils.containsWhitespace("");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int0 = StringUtils.length("7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777");
      assertEquals(109, int0);
      
      String string7 = StringUtils.join((short[]) null, '-');
      assertNull(string7);
      
      String string8 = StringUtils.join((double[]) null, '[');
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      String string0 = StringUtils.substringBetween(";xgp;4;k", (String) null, "=^n");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("5lY|=F!A_RE%&VI", 'b');
      assertEquals("b5lY|=F!A_RE%&VIb", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "=^n");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";xgp;4;k";
      stringArray0[1] = "=^n";
      stringArray0[3] = "J6;c";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "=^n");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.upperCase("5lY|=F!A_RE%&VI");
      assertFalse(string2.equals((Object)string1));
      assertEquals("5LY|=F!A_RE%&VI", string2);
      assertNotNull(string2);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'J', (-128), 90);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -128
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      String string0 = StringUtils.repeat("Minimm abbreviation width with offset is %d", (String) null, (-265));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("Strings must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("strings must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string3 = StringUtils.trimToEmpty("\n");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      String string0 = StringUtils.remove("5ND.IL|P", 't');
      assertEquals("5ND.IL|P", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("w{Rb>)peZWL", 't');
      assertFalse(string1.equals((Object)string0));
      assertEquals("w{Rb>)peZWL", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "5ND.IL|P";
      charSequenceArray0[1] = (CharSequence) "w{Rb>)peZWL";
      charSequenceArray0[2] = (CharSequence) "w{Rb>)peZWL";
      charSequenceArray0[3] = (CharSequence) "w{Rb>)peZWL";
      boolean boolean0 = StringUtils.endsWithAny("5ND.IL|P", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "w{Rb>)peZWL";
      stringArray0[1] = "5ND.IL|P";
      stringArray0[2] = "5ND.IL|P";
      stringArray0[3] = "5ND.IL|P";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(4, stringArray0.length);
      assertEquals("w{Rb>)peZWL", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      String string3 = StringUtils.join(shortArray0, 'j');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, shortArray0.length);
      assertEquals("2", string3);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "(ta>T!#");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.replaceFirst("(ta>T!#", "5yw;uoffset cannot be negative", "w{Rb>)peZWL");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("(ta>T!#", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter("2", "(ta>T!#");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat("%qdz0i}DsVRW", (String) null, 98);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      String string0 = StringUtils.stripEnd("F8;Q0w", "F8;Q0w");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd(" vs ", "&E3[yiZ&!bCy I<g{");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("LbU;)djQ'1UF34", 'J');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'J';
      doubleArray0[1] = (double) 'J';
      doubleArray0[2] = 0.7;
      doubleArray0[3] = (double) 'J';
      doubleArray0[4] = (double) 'J';
      String string2 = StringUtils.join(doubleArray0, 'J', 55, 55);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, doubleArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new double[] {74.0, 74.0, 0.7, 74.0, 74.0}, doubleArray0, 0.01);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits(" vs ");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("", "&E3[yiZ&!bCy I<g{");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trim("");
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removeStart("", "&E3[yiZ&!bCy I<g{");
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.defaultString("&E3[yiZ&!bCy I<g{", "");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertEquals("&E3[yiZ&!bCy I<g{", string7);
      assertNotNull(string7);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)52;
      shortArray0[1] = (short) (-75);
      shortArray0[2] = (short)2161;
      shortArray0[3] = (short)32;
      shortArray0[4] = (short)14;
      shortArray0[5] = (short)67;
      shortArray0[6] = (short)160;
      shortArray0[7] = (short) (-2673);
      shortArray0[8] = (short)465;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'B', (int) (short)465, (int) (short)2161);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 465
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.removeIgnoreCase(")@\"", ")@\"");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.unwrap("", "pA");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "\n";
      int[] intArray0 = new int[4];
      intArray0[0] = 893;
      intArray0[1] = 54;
      intArray0[2] = 4692;
      intArray0[3] = 991;
      String string3 = StringUtils.join(intArray0, '$');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4, intArray0.length);
      assertEquals("893$54$4692$991", string3);
      assertArrayEquals(new int[] {893, 54, 4692, 991}, intArray0);
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "893$54$4692$991";
      String string4 = StringUtils.join(intArray0, '$', 1147, (-3933));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals(4, intArray0.length);
      assertEquals("", string4);
      assertArrayEquals(new int[] {893, 54, 4692, 991}, intArray0);
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.center("?8+:i>", (-1779), "Minimum abbreviation width is %d");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("?8+:i>", string5);
      assertNotNull(string5);
      
      charSequenceArray0[5] = (CharSequence) "?8+:i>";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte) (-46);
      String string6 = StringUtils.join(byteArray0, '$');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals(7, byteArray0.length);
      assertEquals("16$36$-88$63$13$38$-46", string6);
      assertArrayEquals(new byte[] {(byte)16, (byte)36, (byte) (-88), (byte)63, (byte)13, (byte)38, (byte) (-46)}, byteArray0);
      assertNotNull(string6);
      
      charSequenceArray0[6] = (CharSequence) "16$36$-88$63$13$38$-46";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("FS!llCcEOl", "FS!llCcEOl");
      assertFalse(string1.equals((Object)string0));
      assertEquals("FS!llCcEOl", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "FS!llCcEOl", (CharSequence) "FS!llCcEOl", 8);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("t(l?i)z winzbUQ-H,'", "FS!llCcEOl");
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "", 1867, 88);
      assertFalse(string3.equals((Object)string1));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("FS!llCcEOl", (-1008), 3002);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("FS!llCcEOl", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.trimToNull("FS!llCcEOl");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("FS!llCcEOl", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "FS!llCcEOl", (CharSequence) "FS!llCcEOl");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      assertNotNull(list0);
      assertFalse(linkedList0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string6 = StringUtils.join((List<?>) arrayList0, ',', 51, (-1201));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">b9ji[=s}~wOwd}";
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(">b9ji[=s}~wOwd}"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add("d*J(f");
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains("d*J(f"));
      assertFalse(linkedHashSet0.contains(">b9ji[=s}~wOwd}"));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      String string0 = StringUtils.removeEnd((String) null, "2>6W<zSearch and Replace array lengths don't match: ");
      assertNull(string0);
      
      String string1 = StringUtils.unwrap((String) null, 'f');
      assertNull(string1);
      
      String string2 = StringUtils.strip((String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.center("d*J(f", 49, "DFeH$");
      assertEquals("DFeH$DFeH$DFeH$DFeH$DFd*J(fDFeH$DFeH$DFeH$DFeH$DF", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp((String) null, "DFeH$DFeH$DFeH$DFeH$DFd*J(fDFeH$DFeH$DFeH$DFeH$DF");
      assertNull(string4);
      
      String string5 = StringUtils.unwrap("5ND.IL|Pw1{+W*Q;ZJ", "`f-");
      assertFalse(string5.equals((Object)string3));
      assertEquals("5ND.IL|Pw1{+W*Q;ZJ", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase((CharSequence) null, "4,k 2%j|wMe1L");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string6 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals(1, stringArray0.length);
      assertEquals(">b9ji[=s}~wOwd}", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      String[] stringArray0 = new String[2];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-773.1203F);
      floatArray0[1] = (float) ';';
      floatArray0[2] = 779.0F;
      floatArray0[3] = (-17.0F);
      String string0 = StringUtils.join(floatArray0, ';');
      assertEquals(4, floatArray0.length);
      assertEquals("-773.1203;59.0;779.0;-17.0", string0);
      assertArrayEquals(new float[] {(-773.1203F), 59.0F, 779.0F, (-17.0F)}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("", ">b9ji[=s}~wOwd}", "", (-1492));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.StringUtils", "OB=;.<KZTsmJM$@", "org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("No instructions to disableNo instructions to disable", (-318), "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("No instructions to disableNo instructions to disable", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replace("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Expected exactly onQ annotation to provide an ArgumentSource, found %d.", "");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      String string6 = StringUtils.truncate("Q5sG^\"", 116);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("Q5sG^\"", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) ">b9ji[=s}~wOwd}", 116);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Q5sG^\"", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.substringsBetween("No instructions to disableNo instructions to disable", "OB=;.<KZTsmJM$@", "%19");
      assertNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Q5sG^\"", (CharSequence) "org.apache.commons.lang3.StringUtils", (-43));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      String string0 = "&E3[yiZ&!bCy I<g{";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2295.9226F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-696.0F);
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("\n", "\n");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.substring("&E3[yiZ&!bCy I<g{", 516);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "";
      String string3 = StringUtils.substringBefore("\n", "~XUMH5W{:");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      Locale locale1 = Locale.FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("&E3[yiZ&!bCy I<g{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: &E3[yiZ&!bCy I<g{
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      String string0 = StringUtils.chomp("Y");
      assertEquals("Y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("Y");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Y", (CharSequence) "Y");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Y";
      charSequenceArray0[2] = (CharSequence) "Y";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Y";
      String string1 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("CF{:tq7 qjS", "x#3\"");
      assertEquals("CF{:tq7 qjS", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "CF{:tq7 qjS", (CharSequence) "x_D8", (-979));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.getDigits("Locale must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("WoGI/?5@w*;BNX", "5yw;uoffset cannot be negative");
      assertFalse(int1 == int0);
      assertEquals(34, int1);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      String string0 = StringUtils.unwrap("", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", 32, "org.junitpioneer.jupiter.CartesianProductTestExtension");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.Cartesi", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "G5TAcKs('*0.\"");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.replaceFirst("G5TAcKs('*0.\"", "", "qCqn");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("qCqnG5TAcKs('*0.\"", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (-875));
      assertFalse(boolean0);
      
      String string3 = StringUtils.substring("", (-875), 32);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("org.junitpioneer.jupiter.CartesianProductTestExtension", 32, 1673);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtension", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.CartesianProductTestExtension");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.CartesianProductTestExtension", "org.junitpioneer.jupiter.Cartesi");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesi", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "qCqn");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "hZ2";
      charSequenceArray0[1] = (CharSequence) "hZ2";
      charSequenceArray0[2] = (CharSequence) "@GW]6";
      charSequenceArray0[3] = (CharSequence) "&E3[yiZ&!bCy I<g{";
      charSequenceArray0[4] = (CharSequence) "&E3[yiZ&!bCy I<g{";
      charSequenceArray0[5] = (CharSequence) "&E3[yiZ&!bCy I<g{";
      charSequenceArray0[6] = (CharSequence) "hZ2";
      charSequenceArray0[7] = (CharSequence) "&E3[yiZ&!bCy I<g{";
      String string0 = StringUtils.prependIfMissing("@GW]6", "@GW]6", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("@GW]6", string0);
      assertNotNull(string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains("&E3[yiZ&!bCy I<g{"));
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("&E3[yiZ&!bCy I<g{"));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      TreeSet<String> treeSet0 = new TreeSet<String>(vector0);
      assertNotNull(treeSet0);
      assertFalse(vector0.contains("&E3[yiZ&!bCy I<g{"));
      assertFalse(treeSet0.contains("&E3[yiZ&!bCy I<g{"));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      TreeSet<String> treeSet1 = new TreeSet<String>(vector0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      assertFalse(vector0.contains("&E3[yiZ&!bCy I<g{"));
      assertFalse(treeSet1.contains("&E3[yiZ&!bCy I<g{"));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Object object0 = treeSet0.clone();
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertNotSame(treeSet0, treeSet1);
      assertNotNull(object0);
      assertFalse(vector0.contains("&E3[yiZ&!bCy I<g{"));
      assertFalse(treeSet0.contains("&E3[yiZ&!bCy I<g{"));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      NavigableSet<String> navigableSet0 = treeSet1.subSet("/R\"8UNUg1GA#+,z}Dj", false, "NX:62-%QF'V 4q", false);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotSame(treeSet1, treeSet0);
      assertNotNull(navigableSet0);
      assertFalse(navigableSet0.contains("@GW]6"));
      assertFalse(vector0.contains("@GW]6"));
      assertFalse(treeSet1.contains("@GW]6"));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0);
      assertNotNull(list0);
      assertFalse(list0.contains("@GW]6"));
      assertFalse(set0.contains("@GW]6"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) list0);
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(list0.contains("@GW]6"));
      assertFalse(list1.contains("@GW]6"));
      assertFalse(set0.contains("@GW]6"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      String string1 = StringUtils.join(list0, 'S', 71, 71);
      assertTrue(list0.equals((Object)list1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(list0, list1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(list0.contains(string1));
      assertFalse(set0.contains(string1));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      int int0 = StringUtils.compareIgnoreCase("/R\"8UNUg1GA#+,z}Dj", (String) null, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.substring("", (-1308));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string2 = StringUtils.normalizeSpace("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org.junitpioneer.jupiter.params.DoubleRange", "{' matches '{");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      String string1 = StringUtils.join(objectArray0, '0');
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.Object@5b13ee8b0";
      stringArray0[1] = "java.lang.Object@5b13ee8b0";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "java.lang.Object@5b13ee8b0");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("java.lang.Object@5b13ee8b0").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isMixedCase("java.lang.Object@5b13ee8b0");
      assertTrue(boolean0);
      
      String string2 = StringUtils.left("O'&", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)34;
      shortArray0[1] = (short)15;
      shortArray0[2] = (short)28;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)33;
      shortArray0[5] = (short)2760;
      shortArray0[6] = (short)322;
      shortArray0[7] = (short)8192;
      shortArray0[8] = (short)30;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'g', (int) (short) (-1), 725);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty(" ");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("#`fWOlxuF=", "#`fWOlxuF=");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(11, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.replaceIgnoreCase("J?j%Xy4{", "w1I/hRc{C", "#`fWOlxuF=", 160);
      assertEquals("J?j%Xy4{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("D#PdOg~QKCn/8", "#`fWOlxuF=", true);
      assertEquals(33, int0);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.truncate("i~3N<", 97);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("i~3N<", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      
      String string3 = StringUtils.upperCase("%s %s", locale0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("%S %S", string3);
      assertNotNull(string3);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      
      int int1 = StringUtils.countMatches((CharSequence) "w1I/hRc{C", 'R');
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) ",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n", '(');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, '!');
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      String string2 = StringUtils.replaceIgnoreCase((String) null, "", "\n");
      assertNull(string2);
      
      String string3 = StringUtils.center("\n", (-1407), "...");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replace((String) null, "Minimum abbreviation width with offset is %d", (String) null);
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string6 = StringUtils.truncate("F", 397);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("F", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "F";
      charSequenceArray1[2] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(3, charSequenceArray1.length);
      assertTrue(boolean1);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      
      String string7 = StringUtils.upperCase("null/empty items", locale0);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("NULL/EMPTY ITEMS", string7);
      assertNotNull(string7);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      
      int int0 = StringUtils.countMatches((CharSequence) "NULL/EMPTY ITEMS", '!');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" is not in the range '0' - '9'7CartesianProductTest can only take exactly one type of arguments source");
      assertEquals("is not in the range '0' - '9'7CartesianProductTest can only take exactly one type of arguments source", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("is not in the range '0' - '9'7CartesianProductTest can only take exactly one type of arguments source", "\" should have a parent context.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\" should have a parent context.is not in the range '0' - '9'7CartesianProductTest can only take exactly one type of arguments source\" should have a parent context.", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object0));
      assertNotNull(object6);
      
      String string0 = StringUtils.wrapIfMissing("Search and Replace array lengths don't match: ", "2>6W<z");
      assertEquals("2>6W<zSearch and Replace array lengths don't match: 2>6W<z", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 269, "BuD");
      assertFalse(string1.equals((Object)string0));
      assertEquals("BuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBSearch and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "_u@vs.jVijgFmM|B";
      charSequenceArray0[1] = (CharSequence) "2>6W<zSearch and Replace array lengths don't match: 2>6W<z";
      charSequenceArray0[2] = (CharSequence) "2>6W<z";
      int int0 = StringUtils.lastIndexOfAny("Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("vKv@L}d8$@b`M~l", "M {2Lv0v,sw)pIl9g,", false);
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      String string2 = StringUtils.chomp("BuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBSearch and Replace array lengths don't match: ");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("BuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBuDBSearch and Replace array lengths don't match: ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("lUE");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("LUE", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.right("2>6W<zSearch and Replace array lengths don't match: 2>6W<z", (-1747));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[0];
      String string5 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string5);
      
      String string6 = StringUtils.stripEnd("M {2Lv0v,sw)pIl9g,", (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("M {2Lv0v,sw)pIl9g,", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("!", "!", "!");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "!", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertEquals(188, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("do+u!-wfGH8SH<WF", "", 56);
      assertEquals("do+u!-wfGH8SH<WF", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "do+u!-wfGH8SH<WF", "do+u!-wfGH8SH<WF");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("", "");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("", 16, '&');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("&&&&&&&&&&&&&&&&", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.reverse("");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceAll("", (String) null, "CartesianProductTest can not have a non-empty display name");
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("Fy^v_7r4=pS5,qzz4a", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "&&&&&&&&&&&&&&&&";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = "CartesianProductTest can not have a non-empty display name";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray1.length);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray1);
      
      String string7 = StringUtils.abbreviateMiddle("", "", (-158));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.equalsAny("Fy^v_7r4=pS5,qzz4a", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "6]Fml9Qn5b9=%Va&bJThreshold must not bj negative>;5+fMJot", (CharSequence[]) stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      boolean boolean0 = StringUtils.startsWithAny("1lNAr1", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "1lNAr1", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      String string0 = StringUtils.difference("Minimum abbreviation width with offset is %d", (String) null);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("58[>-9sGB'", "58[>-9sGB'");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("58[>-9sGB'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("a", "a");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("d}AbOgF5ug7I", "d}AbOgF5ug7I");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String[] stringArray0 = new String[8];
      boolean boolean0 = StringUtils.isAlphanumeric(stringArray0[4]);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '^');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("%>ah#+TeoC=aig^ZU@", supplier0);
      assertEquals("%>ah#+TeoC=aig^ZU@", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("%>ah#+TeoC=aig^ZU@");
      assertFalse(string2.equals((Object)string1));
      assertEquals("%>AH#+TEOC=AIG^ZU@", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNotEmpty((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("SN+G", "%e");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substring("OZK3*,6z&mV&=}z-tAQ", (-2335));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("OZK3*,6z&mV&=}z-tAQ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBefore(";", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isNumericSpace(";");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      
      String string5 = StringUtils.defaultIfEmpty("x_D8", "");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("x_D8", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "$'cX}!");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "%>ah#+TeoC=aig^ZU@");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAllBlank(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(boolean4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "x_D8", (CharSequence) "OZK3*,6z&mV&=}z-tAQ", 55);
      assertFalse(int1 == int0);
      assertEquals(19, int1);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      String string0 = StringUtils.wrap("YS'rlP'$3wxyR_a", "");
      assertEquals("YS'rlP'$3wxyR_a", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("", '\u001E');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 1216, 1216);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("YS'rlP'$3wxyR_a");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "\n", 45);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) "YS'rlP'$3wxyR_a";
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.removeEnd(" ", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[5] = (CharSequence) " vs ";
      String string3 = StringUtils.abbreviateMiddle("YS'rlP'$3wxyR_a", "BuD", (-1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("YS'rlP'$3wxyR_a", string3);
      assertNotNull(string3);
      
      charSequenceArray0[6] = (CharSequence) "YS'rlP'$3wxyR_a";
      charSequenceArray0[7] = (CharSequence) "YS'rlP'$3wxyR_a";
      charSequenceArray0[8] = (CharSequence) "\r";
      String string4 = StringUtils.appendIfMissing(" vs ", "", charSequenceArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(9, charSequenceArray0.length);
      assertEquals(" vs ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join(objectArray0, " ", 8, (-1560));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(13, objectArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "YS'rlP'$3wxyR_a");
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '\u001E';
      longArray0[1] = (long) '\u001E';
      longArray0[2] = (long) (-1);
      String string6 = StringUtils.join(longArray0, '\u001E');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals(3, longArray0.length);
      assertEquals("30\u001E30\u001E-1", string6);
      assertArrayEquals(new long[] {30L, 30L, (-1L)}, longArray0);
      assertNotNull(string6);
      
      String string7 = StringUtils.defaultIfBlank("", "5yw;u");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals("5yw;u", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org.junitpioneer.jupiter.params.DoubleRange", "{' matches '{");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String string1 = StringUtils.join(objectArray0, '0');
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertEquals("0", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "0");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.left("O'&", 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)charSequence0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)34;
      shortArray0[1] = (short)34;
      shortArray0[2] = (short)28;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)33;
      String string3 = StringUtils.replace("0", (String) null, (String) null);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("0", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1);
      
      String string4 = StringUtils.truncate("0", (int) (short)28);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("0", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip("HLt} R ze@", "");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("HLt} R ze@", string5);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("!#@]07_pq406", "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("M-VU]FC", "M-VU]FC");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceFirst("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "M-VU]FC");
      assertEquals("M-VU]FC", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("M-VU]FC", "qCqn", stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("M-VU]FC", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'>', 'G'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(">G", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      String string0 = StringUtils.capitalize("Q;&F.>PB>.{DY>&3");
      assertEquals("Q;&F.>PB>.{DY>&3", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "Q;&F.>PB>.{DY>&3";
      String string1 = StringUtils.appendIfMissingIgnoreCase("Q;&F.>PB>.{DY>&3", charBuffer0, charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(3, charSequenceArray0.length);
      assertEquals(2, charArray0.length);
      assertEquals("Q;&F.>PB>.{DY>&3", string1);
      assertArrayEquals(new char[] {'>', 'G'}, charArray0);
      assertNotNull(string1);
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(">G", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      charSequenceArray0[2] = (CharSequence) "Q;&F.>PB>.{DY>&3";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertEquals(">G", charSequence0.toString());
      assertEquals(2, charSequence0.length());
      
      int int0 = StringUtils.lastIndexOf(charSequence0, 46, 1);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      assertEquals(">G", charSequence0.toString());
      assertEquals(2, charSequence0.length());
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.appendIfMissingIgnoreCase("maxWith cannot bnegative", "Timeout fr vintage @Test must be positive.", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("maxWith cannot bnegativeTimeout fr vintage @Test must be positive.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("Timeout fr vintage @Test must be positive.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("timeout fr vintage @Test must be positive.", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Fml9qn5b9=%Va&bJ");
      assertEquals("Fml9qn5b9=%Va&bJ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "Fml9qn5b9=%Va&bJ", 49);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.left((String) null, (-1));
      assertNull(string1);
      
      String string2 = StringUtils.CR;
      assertFalse(string2.equals((Object)string0));
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isWhitespace("Fml9qn5b9=%Va&bJ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = "";
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      byte byte0 = (byte) (-110);
      byte byte1 = (byte)85;
      byte byte2 = (byte) (-115);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("Kk$D");
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp("WY5yVWI6q");
      assertEquals("WY5yVWI6q", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("Kk$D", 4841);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Kk$D"));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "WY5yVWI6q", (CharSequence) string1);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("", "", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }");
      assertFalse(string1.equals((Object)string0));
      assertEquals("report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("x_D8", 322);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("x_D8", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) "report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }");
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertEquals("report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }", charSequence0);
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat("", "", 3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("$7,0(", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("$7,0(", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "x_D8", 322);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.mid("", (byte)0, 37);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "R:BuD...");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      String string0 = StringUtils.unwrap("maxWith cannot be negative", "7");
      assertEquals("maxWith cannot be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      String string0 = StringUtils.rightPad("e.+Q^Du~m-o", (-2454), (String) null);
      assertEquals("e.+Q^Du~m-o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("e.+Q^Du~m-o", "e.+Q^Du~m-o", (CharSequence[]) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("e.+Q^Du~m-o", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("e.+Q^Du~m-o", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeAll("e.+Q^Du~m-o", "Threshold must not be negative");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("e.+Q^Du~m-o", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.rightPad("e.+Q^Du~m-o", (-2454), "ED_G&~f+KF%");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("e.+Q^Du~m-o", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.uncapitalize("e.+Q^Du~m-o");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("e.+Q^Du~m-o", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("Threshold must not be negative", "K1Np", "f[b7O`X<xYT}aa@=+");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Threshold must not be negative", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.containsWhitespace("e.+Q^Du~m-o");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "_%Fr{0W;JlL,r@I6", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf("Threshold must not be negative", "", 50);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "K1Np", (String) null);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.swapCase("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.rightPad("", 26, "_%Fr{0W;JlL,r@I6");
      assertFalse(string3.equals((Object)string1));
      assertEquals("_%Fr{0W;JlL,r@I6_%Fr{0W;Jl", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((float[]) null, 'G');
      assertNull(string4);
      
      String string5 = StringUtils.replaceChars("#", "", "_%Fr{0W;JlL,r@I6");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("#", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.containsWhitespace((CharSequence) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string6 = StringUtils.substringBetween("ive", (String) null);
      assertNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      String string0 = StringUtils.replaceChars("a", "", "");
      assertEquals("a", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      String string0 = StringUtils.chop("khEX2MeNB1\"v_BNPd7B");
      assertEquals("khEX2MeNB1\"v_BNPd7", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'W';
      String[] stringArray0 = StringUtils.stripAll((String[]) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("khEX2MeNB1\"v_BNPd7B", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.startsWith((CharSequence) null, "khEX2MeNB1\"v_BNPd7");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.rightPad("DZ5/)", 1208, "khEX2MeNB1\"v_BNPd7");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((float[]) null, '[');
      assertNull(string3);
      
      String string4 = StringUtils.trimToEmpty((String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("a])Pb5Y6(dS,/@", "DZ5/)");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "khEX2MeNB1\"v_BNPd7B", charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'[', 'W', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase((String) null, "org.junitpioneer.jupiter.CartesianProductTestExtension", (CharSequence[]) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 32;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '%', 17, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 1345);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      String string0 = StringUtils.removeStart("NOj2", " must be static");
      assertEquals("NOj2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      String string0 = StringUtils.substringAfter("M-VUFC", 54);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("M-VUFC", 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("C", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase("C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      String string0 = StringUtils.removeStart("R", "R");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      String string0 = StringUtils.swapCase("%o{");
      assertEquals("%O{", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "%o{";
      charSequenceArray0[1] = (CharSequence) "%O{";
      String string1 = StringUtils.prependIfMissing("@GW]6", "%o{", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("%o{@GW]6", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "@GW]6";
      stringArray0[3] = "%O{";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      TreeSet<String> treeSet0 = new TreeSet<String>(set0);
      assertNotNull(treeSet0);
      assertFalse(set0.contains(string1));
      assertFalse(treeSet0.contains(string1));
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      TreeSet<String> treeSet1 = new TreeSet<String>((Collection<? extends String>) treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      assertFalse(set0.contains(string1));
      assertFalse(treeSet0.contains(string1));
      assertFalse(treeSet1.contains(string1));
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      Object object0 = treeSet0.clone();
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertNotSame(treeSet0, treeSet1);
      assertNotNull(object0);
      assertFalse(set0.contains(string1));
      assertFalse(treeSet0.contains(string1));
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      NavigableSet<String> navigableSet0 = treeSet0.subSet("/R\"8UNUg1GA#+,z}Dj", false, "tfe(%@g*crPK", false);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertNotSame(treeSet0, treeSet1);
      assertNotNull(navigableSet0);
      assertFalse(set0.contains("tfe(%@g*crPK"));
      assertFalse(treeSet0.contains("tfe(%@g*crPK"));
      assertFalse(navigableSet0.contains("tfe(%@g*crPK"));
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(navigableSet0.isEmpty());
      assertEquals(1, navigableSet0.size());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) navigableSet0);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertNotSame(treeSet0, treeSet1);
      assertNotNull(list0);
      assertFalse(set0.contains("tfe(%@g*crPK"));
      assertFalse(treeSet0.contains("tfe(%@g*crPK"));
      assertFalse(navigableSet0.contains("tfe(%@g*crPK"));
      assertFalse(list0.contains("tfe(%@g*crPK"));
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(navigableSet0.isEmpty());
      assertEquals(1, navigableSet0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string2 = StringUtils.join((List<?>) stack0, 'S', 71, 71);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      int int0 = StringUtils.compareIgnoreCase(";c//GPw.#TXX6H", "lLx$%nrk8", false);
      assertEquals((-49), int0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("fc0?6JyvkWD", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("fc0?6JyvkWD", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("", " ");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase("fc0?6JyvkWD");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("fc0?6jyvkwd", string3);
      assertNotNull(string3);
      
      String string4 = "()` not found in ";
      String string5 = StringUtils.replaceAll("", "()` not found in ", ".1i'*Sn");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.normalizeSpace("fc0?6jyvkwd");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("fc0?6jyvkwd", string6);
      assertNotNull(string6);
      
      short[] shortArray0 = new short[1];
      short short0 = (short)0;
      shortArray0[0] = (short)0;
      int int0 = 122;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'h', 0, 122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Minimum abbreviation width is %d!0k^/rq", (String) null);
      assertEquals("Minimum abbreviation width is %d!0k^/rq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.CharUtils", 'J');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 55;
      String string0 = StringUtils.join(doubleArray0, '0', (-1097), (-1097));
      assertEquals(1, doubleArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new double[] {55.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("org.apache.commons.lang3.CharUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals("3", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("&E3[yiZ&!bCy I<g{", "C]qELb7ynxv~I?ho");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("&E3[yiZ&!bCy I<g{", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trim("C]qELb7ynxv~I?ho");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("C]qELb7ynxv~I?ho", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("[<g0R[", "D ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("[<g0R[", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((short[]) null, 'B', (int) (short)32, (int) (short)465);
      assertNull(string5);
      
      String string6 = StringUtils.replaceOnceIgnoreCase("org.apache.commons.lang3.CharUtils", "e%&^AVj", (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.CharUtils", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, 8192);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      String string0 = StringUtils.leftPad(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n,gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n", 6, ",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n,gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n");
      assertEquals(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n,gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      String[] stringArray0 = new String[21];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(21, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(21, stringArray0.length);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      String string0 = StringUtils.difference("fUL+oma(", "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, charArray0.length);
      assertEquals("R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertArrayEquals(new char[] {'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[1] = "org.junitpioneer.vintage.TimeoutExtension";
      String string2 = StringUtils.join(charArray0, 'R');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(9, charArray0.length);
      assertEquals("RR\u0000R\u0000R\u0000R\u0000R\u0000R\u0000R\u0000R\u0000", string2);
      assertArrayEquals(new char[] {'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("org.junitpioneer.vintage.TimeoutExtension", "GQFV4+bD");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("GQFV4+bD", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", 24, "E_=Om{syJ9E+nHN");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000E_=Om{syJ9E+nHN", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEnd("R:BuD...", (String) null);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("R:BuD...", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "R:BuD...", charArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(9, charArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      String string1 = StringUtils.lowerCase("", locale0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      String string2 = StringUtils.replaceChars("offset cannot be negative", '!', 'i');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("FS!llCcEOl");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("FS!llCcEOl", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("offset cannot be negative", 11);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("offset c...", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "FS!llCcEOl";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "offset c...";
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string5 = StringUtils.getDigits("offset cannot be negative");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.compare("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "ive", true);
      assertEquals((-41), int0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      String string0 = StringUtils.abbreviate("dRCJg QW4`Qw", 11);
      assertEquals("dRCJg QW...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString(" must be static");
      assertEquals(" must be static", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat(" must be static", 0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd(" must be static", (String) null);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" must be static", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("GHmfg%gbUj\"%", 'f');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("GHmfg%gbUj\"%", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip("bA&|D");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("bA&|D", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlpha("EuW~BrCd-fW15(Opc:#");
      assertFalse(boolean0);
      
      String string6 = StringUtils.center("\r", 97, "Search and Replace array lengths don't match: ");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("Search and Replace array lengths don't match: Se\rSearch and Replace array lengths don't match: Se", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.overlay("bZ", "j`,o$*(AJSP_", 0, 97);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertEquals("j`,o$*(AJSP_", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("bZ", " must be static");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.removeStartIgnoreCase("y3`bu^)ujjT/nhoDEV~", (String) null);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertEquals("y3`bu^)ujjT/nhoDEV~", string8);
      assertNotNull(string8);
      
      int int1 = StringUtils.lastOrdinalIndexOf("j`,o$*(AJSP_", "", (-81));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string9 = StringUtils.trim((String) null);
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      String string0 = StringUtils.chomp("{aBI-),+d&};zc", "r");
      assertEquals("{aBI-),+d&};zc", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "{aBI-),+d&};zc", (CharSequence) "{aBI-),+d&};zc", 757);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("{aBI-),+d&};zc");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 757;
      floatArray0[1] = (float) 757;
      floatArray0[2] = (float) 757;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 757;
      floatArray0[5] = (float) '+';
      floatArray0[6] = (float) '+';
      String string1 = StringUtils.join(floatArray0, 'R', 757, 757);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, floatArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new float[] {757.0F, 757.0F, 757.0F, 0.0F, 757.0F, 43.0F, 43.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.substringsBetween("org.junitpioneer.jupiter.SystemPropertyExtension", "r", "r");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("CWnHO[Gq2d$t*d,", "z", 181);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Never disable parameterized test method itself", "R", "R");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org.junitpioneer.jupiter.params.DoubleRange", "{' matches '{");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      String string1 = StringUtils.join(objectArray0, '0');
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.Object@e1797a50";
      stringArray0[1] = "java.lang.Object@e1797a50";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "java.lang.Object@e1797a50");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.left("O'&", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)34;
      shortArray0[1] = (short)15;
      shortArray0[2] = (short)28;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)33;
      shortArray0[5] = (short)2760;
      shortArray0[6] = (short)322;
      shortArray0[7] = (short)8192;
      shortArray0[8] = (short)30;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'g', (int) (short) (-1), 725);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.prependIfMissingIgnoreCase(" ", " ", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      assertNull(string1);
      
      String string2 = StringUtils.joinWith("n\"$Dti88Y", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 4, 4);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase(" ", " ", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int2 = StringUtils.indexOf((CharSequence) " ", (-1286), (-1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOf((CharSequence) " ", (-1));
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(" ", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceEachRepeatedly("oOx)mKnowmgxk.i$AC2", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertEquals("oOx)mKnowmgxk.i$AC2", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("oOx)mKnowmgxk.i$AC2");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("oOx)mKnowmgxk.i$AC2", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween(" ", " ", " ");
      assertNull(stringArray1);
      
      String string4 = StringUtils.substringBeforeLast("V", "z<I[;2&FQre0");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("V", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("oOx)mKnowmgxk.i$AC2", (-335), '[');
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals("oOx)mKnowmgxk.i$AC2", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.remove("oOx)mKnowmgxk.i$AC2", '[');
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertEquals("oOx)mKnowmgxk.i$AC2", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("6W_", '[');
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertEquals("[6W_[", string7);
      assertNotNull(string7);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, " ");
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray2, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string8 = StringUtils.join((double[]) null, '[', 21, 2);
      assertNull(string8);
      
      String string9 = StringUtils.unwrap("", " ");
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertEquals("", string9);
      assertNotNull(string9);
      
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>(2645);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean1 = linkedHashSet0.add(locale_Category0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedHashSet0.contains(locale_Category0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      String string10 = StringUtils.join((Iterable<?>) linkedHashSet0, ';');
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertEquals("DISPLAY", string10);
      assertNotNull(string10);
      assertTrue(linkedHashSet0.contains(locale_Category0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)11;
      shortArray0[1] = (short)345;
      shortArray0[2] = (short)104;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)2028;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short)1862;
      shortArray0[7] = (short)32;
      shortArray0[8] = (short)13;
      String string11 = StringUtils.join(shortArray0, '[', (int) (short) (-1), (-335));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string3));
      assertTrue(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string1));
      assertEquals(9, shortArray0.length);
      assertEquals("", string11);
      assertArrayEquals(new short[] {(short)11, (short)345, (short)104, (short) (-1), (short)2028, (short)16, (short)1862, (short)32, (short)13}, shortArray0);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Whlaw_qqL:0 ''");
      assertEquals("Whlaw_qqL:0 ''", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("", "Don't clear/set the same entry more than once.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 890.1F;
      floatArray0[2] = (-2442.9F);
      String string2 = StringUtils.join(floatArray0, '7');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, floatArray0.length);
      assertEquals("0.07890.17-2442.9", string2);
      assertArrayEquals(new float[] {0.0F, 890.1F, (-2442.9F)}, floatArray0, 0.01F);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0.07890.17-2442.9";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("0.07890.17-2442.9", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("", 2182);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("Whlaw_qqL:0 ''", supplier0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals("Whlaw_qqL:0 ''", string5);
      assertNotNull(string5);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 890.1F;
      doubleArray0[1] = (double) 890.1F;
      doubleArray0[2] = (double) (-2442.9F);
      doubleArray0[3] = (double) (-2442.9F);
      doubleArray0[4] = (double) 890.1F;
      String string6 = StringUtils.join(doubleArray0, '|', 2182, 1411);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertEquals(5, doubleArray0.length);
      assertEquals("", string6);
      assertArrayEquals(new double[] {890.0999755859375, 890.0999755859375, (-2442.89990234375), (-2442.89990234375), 890.0999755859375}, doubleArray0, 0.01);
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceAll("Whlaw_qqL:0 ''", string4, ";.y8(TV~PUEhty");
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string6));
      assertEquals("Whlaw_qqL:0 ''", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String string0 = StringUtils.chomp("'oGg~7Wxb[;4oeZQ0O");
      assertEquals("'oGg~7Wxb[;4oeZQ0O", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, 'N', 'N');
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-2741));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Threshold must not be negative", "EDMKs QiJO'3}oL^aN");
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("&E3[yiZ&!bCy I<g{", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "&eUb/StmE:2&", (CharSequence) "&eUb/StmE:2&");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.unwrap((String) null, "");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string3);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      assertNotNull(byteBuffer0);
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-35);
      String string4 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals(3, byteArray0.length);
      assertEquals("\uFFFD\r\uFFFD", string4);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)13, (byte) (-35)}, byteArray0);
      assertNotNull(string4);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "7Tmeout for vintage @Test must be positive.", "7Tmeout for vintage @Test must be positive.");
      assertEquals(0, int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      float[] floatArray0 = new float[5];
      floatArray0[1] = 1.0F;
      floatArray0[2] = 2005.09F;
      floatArray0[3] = 1379.1989F;
      floatArray0[4] = 872.011F;
      String string1 = StringUtils.join(floatArray0, 'O');
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, floatArray0.length);
      assertEquals("0.0O1.0O2005.09O1379.1989O872.011", string1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 2005.09F, 1379.1989F, 872.011F}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("C4! N^8", "", "\"", 16);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("C4! N^8", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("C4! N^8", "R:BuD...", "");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("C4! N^8", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("", 65, "0.0O1.0O2005.09O1379.1989O872.011");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("0.0O1.0O2005.09O1379.1989O872.010.0O1.0O2005.09O1379.1989O872.011", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.SPACE;
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals(" ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replace((String) null, "0.0O1.0O2005.09O1379.1989O872.010.0O1.0O2005.09O1379.1989O872.011", (String) null);
      assertNull(string6);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String string7 = StringUtils.truncate("'jvqZgiT7cj", 65);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("'jvqZgiT7cj", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.strip("HLt} R ze@", "No instructions to disableNo instructions to disable");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertEquals("HLt} R ze@", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      String string0 = StringUtils.leftPad("~K|l", (-819));
      assertEquals("~K|l", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "~K|l", (-1099), 1316);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfter("offset cannot be negative", (-1099));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.chop("maxWith cannot be negative");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("maxWith cannot be negativ", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "maxWith cannot be negative";
      stringArray0[1] = "maxWith cannot be negative";
      stringArray0[2] = "~K|l";
      stringArray0[3] = "~K|l";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("maxWith cannot be negative", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.join((Iterable<?>) null, 'P');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      String string0 = StringUtils.remove("Minimum abbreviation width is %d", "dyJ+FY#)0P0");
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfterLast("Minimum abbreviation width is %d", 858);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeIgnoreCase("Minimum abbreviation width is %d", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeFirst("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 858;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 858;
      doubleArray0[6] = (double) (-1);
      String string4 = StringUtils.join(doubleArray0, 'c');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(7, doubleArray0.length);
      assertEquals("-1.0c-1.0c0.0c858.0c-1.0c858.0c-1.0", string4);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 858.0, (-1.0), 858.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((float[]) null, 'c');
      assertNull(string5);
      
      int int1 = StringUtils.length("Minimum abbreviation width is %d");
      assertFalse(int1 == int0);
      assertEquals(32, int1);
      
      String string6 = StringUtils.removeEnd("", "");
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfterLast("Minimum abbreviation width is %d", (String) null);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Locale locale0 = new Locale("", "");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      Locale locale1 = Locale.forLanguageTag("...");
      assertTrue(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertTrue(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertNotNull(set0);
      assertFalse(set0.contains('c'));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string8 = StringUtils.lowerCase("KqB]>d.ScU8QT9FV^97", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertNotSame(locale0, locale1);
      assertEquals("kqb]>d.scu8qt9fv^97", string8);
      assertNotNull(string8);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      String string9 = StringUtils.leftPad("", 2, "");
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertEquals("  ", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.join((Iterable<?>) set0, 'c');
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string6));
      assertNotSame(locale0, locale1);
      assertEquals("", string10);
      assertNotNull(string10);
      assertFalse(set0.contains('c'));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width is %d", 52);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      String string0 = StringUtils.join((Iterable<?>) stack0, 's');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfterLast("4 t_M(O:]SKdf;)", "RW?N?s^5tUtXM");
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = StringUtils.substring("4 t_M(O:]SKdf;)", 0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("4 t_M(O:]SKdf;)", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      Locale.setDefault(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String string3 = locale0.getDisplayVariant((Locale) null);
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string4 = StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", "{' matches '{");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isBlank("StdIoExtension is active but neither System.out or System.in are getting redirected.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Eh$M^xc,tRUUM[!Cq", "Eh$M^xc,tRUUM[!Cq", "Eh$M^xc,tRUUM[!Cq");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      String string0 = StringUtils.chomp("RzYb&0mIz.G;p ];0");
      assertEquals("RzYb&0mIz.G;p ];0", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "~";
      charSequenceArray0[1] = (CharSequence) "RzYb&0mIz.G;p ];0";
      int int0 = StringUtils.lastIndexOfAny("&E3[yiZ&!bCy I<g{G?3Q(7#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isEmpty(charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("M-VUFC", "M-VUFC", "kcKs");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...", 33);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      charSequenceArray0[3] = (CharSequence) "...";
      int int1 = StringUtils.lastIndexOfAny("...", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("...", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultIfEmpty("hZ2", "hZ2");
      assertFalse(string1.equals((Object)string0));
      assertEquals("hZ2", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.substringsBetween("hZ2", "offset cannot be negative", "hZ2");
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll((String[]) null, "hZ2");
      assertNull(stringArray2);
      
      String string2 = StringUtils.abbreviate("N]L}@pZ/,I{VAV", "...", 33);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("N]L}@pZ/,I{VAV", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '^');
      assertNull(string0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains('^'));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertNotNull(linkedHashSet1);
      assertFalse(linkedHashSet1.contains('^'));
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet1, (String) null);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(linkedHashSet1.contains('^'));
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-2219));
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = linkedHashSet1.add(object0);
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertTrue(boolean1);
      assertFalse(linkedHashSet1.contains((-2219)));
      assertTrue(linkedHashSet1.contains(object0));
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      
      String string3 = StringUtils.join((float[]) null, '\'');
      assertNull(string3);
      
      String string4 = StringUtils.toRootLowerCase("\ntfe(%@g*crPK");
      assertFalse(string4.equals((Object)string1));
      assertEquals("\ntfe(%@g*crpk", string4);
      assertNotNull(string4);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Integer.MIN_VALUE;
      doubleArray0[1] = (double) Integer.MIN_VALUE;
      doubleArray0[2] = (double) (-2219);
      doubleArray0[3] = (double) '\'';
      doubleArray0[4] = (double) '\'';
      String string5 = StringUtils.join(doubleArray0, 'L');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(5, doubleArray0.length);
      assertEquals("-2.147483648E9L-2.147483648E9L-2219.0L39.0L39.0", string5);
      assertArrayEquals(new double[] {(-2.147483648E9), (-2.147483648E9), (-2219.0), 39.0, 39.0}, doubleArray0, 0.01);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceChars(",8$P'1JQ", "7f}lW?Q/6", (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals(",8$P'1J", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isAsciiPrintable(",8$P'1J");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "Exactly one type of input must be provided in the @");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      String string0 = StringUtils.difference("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize("{' matches '{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{' matches '{", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("{' matches '{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = ']';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'a';
      charArray0[5] = 'T';
      charArray0[6] = 'Z';
      String string2 = StringUtils.stripEnd("{' matches '{", "'4Jx");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("{' matches '{", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAllUpperCase("{' matches '{");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int0 = StringUtils.indexOf((CharSequence) "{' matches '{", (CharSequence) "{' matches '{", 119);
      assertEquals((-1), int0);
      
      boolean boolean4 = StringUtils.isEmpty("{' matches '{");
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = StringUtils.getBytes("{' matches '{", charset0);
      assertEquals(13, byteArray0.length);
      assertNotNull(byteArray0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      String string0 = StringUtils.unwrap("P", 'd');
      assertEquals("P", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      String string0 = StringUtils.substringBetween("maxWith cannot be negative", "maxWith cannot be negative");
      assertNull(string0);
      
      String string1 = StringUtils.stripAccents("maxWith cannot be negative");
      assertEquals("maxWith cannot be negative", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("maxWith cannot be negative", (CharSequence) null, 4147);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-4615);
      intArray0[3] = 2964;
      intArray0[4] = 0;
      intArray0[5] = 0;
      String string0 = StringUtils.join(intArray0, '5');
      assertEquals(6, intArray0.length);
      assertEquals("0505-4615529645050", string0);
      assertArrayEquals(new int[] {0, 0, (-4615), 2964, 0, 0}, intArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.unwrap(">e.UD", '4');
      assertFalse(string2.equals((Object)string0));
      assertEquals(">e.UD", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "0505-4615529645050", (CharSequence) ">e.UD", 2964);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.abbreviate(">e.UD", 613, 613);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(">e.UD", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnce("e\u0001f!!= +Xfu!%N$", "q{;WIajD@4lz ", "0505-4615529645050");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("e\u0001f!!= +Xfu!%N$", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", "%Kj9h[", "%Kj9h[");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceAll("`4W", "q2P&9OVr,43FI6T", "q2P&9OVr,43FI6T");
      assertFalse(string1.equals((Object)string0));
      assertEquals("`4W", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "%Kj9h[", (-4069));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)18;
      String string2 = StringUtils.join(byteArray0, 'P');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, byteArray0.length);
      assertEquals("2P0P97P107P78P39P98P18", string2);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)97, (byte)107, (byte)78, (byte)39, (byte)98, (byte)18}, byteArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("", "", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("", 0, "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 348.0F;
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      String string2 = StringUtils.trimToEmpty("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse(":j2=as3sB5@a");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("offset cannot be negative");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("evitagen eb tonnac tesffo", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceAll("[}IEp/jq:3mni<\"7", "x\" Dt'.$*$ZJy", "");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("[}IEp/jq:3mni<\"7", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("a@5Bs3sa=2j:", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string6 = StringUtils.repeat("Locale must not be null", "W3It", 0);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceOnce("", "Illegal range. There's no way to get from %s to %s with a step of %s.", "");
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      String[] stringArray0 = new String[21];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(21, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "d*J(f", (CharSequence) null, (-1997));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[1];
      String string1 = StringUtils.join(longArray0, 'p');
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, longArray0.length);
      assertEquals("0", string1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("0", "0", "&E3OyiZ&9bCy I<g{", (int) 'p');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("&E3OyiZ&9bCy I<g{", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("FS!llCcEOl", 'p');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("pFS!llCcEOlp", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("&E3OyiZ&9bCy I<g{", "&E3OyiZ&9bCy I<g{");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string1));
      assertEquals(0, linkedList0.size());
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>(linkedList0);
      assertNotNull(treeSet0);
      assertFalse(linkedList0.contains(string1));
      assertFalse(treeSet0.contains("0"));
      assertEquals(0, linkedList0.size());
      
      String string5 = StringUtils.join((Iterable<?>) treeSet0, ')');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(linkedList0.contains(string1));
      assertFalse(treeSet0.contains("0"));
      assertEquals(0, linkedList0.size());
      
      String string6 = StringUtils.wrapIfMissing("pFS!llCcEOlp", 'p');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("pFS!llCcEOlp", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      String string0 = StringUtils.stripEnd("j5?O&pI-%", "{&xt");
      assertEquals("j5?O&pI-%", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("j5?O&pI-%", 6);
      assertFalse(string1.equals((Object)string0));
      assertEquals("j5?O&p", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length("j5?O&p");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">b9ji[=s}~wOwd}";
      stringArray0[1] = "d*J(f";
      int[] intArray0 = new int[6];
      intArray0[0] = (-2645);
      intArray0[1] = 116;
      intArray0[2] = 1858;
      intArray0[3] = (-2645);
      intArray0[4] = 0;
      intArray0[5] = (-3027);
      String string0 = StringUtils.join(intArray0, '9');
      assertEquals(6, intArray0.length);
      assertEquals("-26459116918589-2645909-3027", string0);
      assertArrayEquals(new int[] {(-2645), 116, 1858, (-2645), 0, (-3027)}, intArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("x_D8", 116);
      assertFalse(string1.equals((Object)string0));
      assertEquals("x_D8", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("2o}>anHmP*qG ;)J`");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.wrapIfMissing(">b9ji[=s}~wOwd}", ',');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(",>b9ji[=s}~wOwd},", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("-26459116918589-2645909-3027");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) ",>b9ji[=s}~wOwd},", (CharSequence) "x_D8", 116);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "-26459116918589-2645909-3027", (CharSequence) ">b9ji[=s}~wOwd}");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.abbreviate(",>b9ji[=s}~wOwd},", 2355);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(",>b9ji[=s}~wOwd},", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("", "113y0~523[*FMHdr@z");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("", 'f');
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBefore("", "");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      String string6 = StringUtils.defaultIfEmpty("", "");
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "hZ2");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray1);
      
      String string7 = StringUtils.join((Iterable<?>) null, " vs ");
      assertNull(string7);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOf((CharSequence) " vs ", (CharSequence) "hZ2", (-1580));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("", "113y0~523[*FMHdr@z");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("", 'f');
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip("");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBefore("\n", "");
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      
      String string7 = StringUtils.defaultIfEmpty("", "");
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "$'cX}!";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "hZ2");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray1);
      
      String string8 = StringUtils.join((Iterable<?>) null, " vs ");
      assertNull(string8);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", 0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = StringUtils.indexOf((CharSequence) " vs ", (CharSequence) "hZ2", (-1580));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      
      String string0 = StringUtils.wrapIfMissing("Y #&c_lf@p)\"'j", "Y #&c_lf@p)\"'j");
      assertEquals("Y #&c_lf@p)\"'j", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Y #&c_lf@p)\"'j", "Y #&c_lf@p)\"'j");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("[@`gJI5^_`lz?O;");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[@`gJI5^_`lz?O;", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("XhDxBVMC|fNm\"~sQjUY", "[@`gJI5^_`lz?O;", (-326), 2211);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("[@`gJI5^_`lz?O;", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Y #&c_lf@p)\"'j", (CharSequence) "[@`gJI5^_`lz?O;", 936);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '^');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("%>ah#+TeoC=aig^ZU@", supplier0);
      assertEquals("%>ah#+TeoC=aig^ZU@", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("%>ah#+TeoC=aig^ZU@");
      assertFalse(string2.equals((Object)string1));
      assertEquals("%>AH#+TEOC=AIG^ZU@", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNotEmpty((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("SN+G", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substring("OZK3*,6z&mV&=}z-tAQ", (-2335));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("OZK3*,6z&mV&=}z-tAQ", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlpha("\r");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.center("&E3[yiZ&!bCy I<g{", (-3362), (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("&E3[yiZ&!bCy I<g{", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.overlay("%>AH#+TEOC=AIG^ZU@", "maxWith cannot be negative", (-3362), (-2335));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("maxWith cannot be negative%>AH#+TEOC=AIG^ZU@", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.endsWithIgnoreCase("%>AH#+TEOC=AIG^ZU@", "%>AH#+TEOC=AIG^ZU@");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiPer.RetryingTestExtension");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(14, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '^');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("%>ah#+TeoC=aig^ZU@", supplier0);
      assertEquals("%>ah#+TeoC=aig^ZU@", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("%>ah#+TeoC=aig^ZU@");
      assertFalse(string2.equals((Object)string1));
      assertEquals("%>AH#+TEOC=AIG^ZU@", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNotEmpty((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("SN+G", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substring("OZK3*,6z&mV&=}z-tAQ", (-2335));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("OZK3*,6z&mV&=}z-tAQ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBefore(";", "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isNumericSpace(";");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string5 = StringUtils.defaultIfEmpty("x_D8", "");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("x_D8", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "$'cX}!");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "%>ah#+TeoC=aig^ZU@");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAllBlank(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      String string0 = StringUtils.center("{", 8, "(rs+");
      assertEquals("(rs{(rs+", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Whlaw_qqL:0 ''");
      assertEquals("Whlaw_qqL:0 ''", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("Whlaw_qqL:0 ''");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Whlaw_qqL:0 ''", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 890.1F;
      floatArray0[2] = (-2442.9F);
      String string2 = StringUtils.join(floatArray0, '7');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, floatArray0.length);
      assertEquals("0.07890.17-2442.9", string2);
      assertArrayEquals(new float[] {0.0F, 890.1F, (-2442.9F)}, floatArray0, 0.01F);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[1];
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("", 0);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring("{' matches '{", 83);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      String string0 = StringUtils.chop("khEX2MeNB1\"v_BNPd7B");
      assertEquals("khEX2MeNB1\"v_BNPd7", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      String string1 = StringUtils.removeStartIgnoreCase("[t2SJt_`gC", " ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("[t2SJt_`gC", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("fRoVj\"M:%m{hy/&-;", '[');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[fRoVj\"M:%m{hy/&-;[", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("", "...");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) null, "...", 17, 53);
      assertNull(string4);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      String string5 = StringUtils.valueOf(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals("", string5);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultIfBlank("khEX2MeNB1\"v_BNPd7", "Search and Replace array lengths don't match: ");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("khEX2MeNB1\"v_BNPd7", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "[t2SJt_`gC", (CharSequence) " ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "[fRoVj\"M:%m{hy/&-;[", (CharSequence) "khEX2MeNB1\"v_BNPd7");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("", "113y0~523[*FMHdr@z");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("", 'f');
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip("");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlpha("EuW~BrCd-fW15(Opc:#");
      assertFalse(boolean0);
      
      String string6 = StringUtils.center("", 48, "");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("                                                ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.overlay("                                                ", "IdPr<", 5, 48);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertEquals("     IdPr<", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", " vs ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.removeStartIgnoreCase("", "A9+XzmOj|v@");
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertEquals("", string8);
      assertNotNull(string8);
      
      int int1 = StringUtils.lastOrdinalIndexOf("IdPr<", "", 48);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("", "113y0~523[*FMHdr@z");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlpha("EuW~BrCd-fW15(Opc:#");
      assertFalse(boolean0);
      
      String string5 = StringUtils.center("", 48, "");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("                                                ", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", " vs ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.removeStartIgnoreCase("", "A9+XzmOj|v@");
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastOrdinalIndexOf("IdPr<", "", 48);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "", 2637);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'o', 48, 256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("'.", 3, "'.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("'.'", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("", 744);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "...";
      stringArray0[1] = null;
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertEquals("...", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("74zYNiRNrTslU", 16);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" 74zYNiRNrTslU  ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("...", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((byte[]) null, '>', 15, 1);
      assertNull(string6);
      
      String[] stringArray1 = StringUtils.split("...", "1<TmnV|", (-3386));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 1640L;
      longArray0[2] = 0L;
      longArray0[3] = 1382L;
      longArray0[4] = 0L;
      longArray0[5] = 1L;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1382L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 0L;
      String string0 = StringUtils.join(doubleArray0, ':');
      assertEquals(5, doubleArray0.length);
      assertEquals("0.0:0.0:1382.0:1.0:0.0", string0);
      assertArrayEquals(new double[] {0.0, 0.0, 1382.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "0.0:0.0:1382.0:1.0:0.0", (CharSequence) "0.0:0.0:1382.0:1.0:0.0");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf("0.0:0.0:1382.0:1.0:0.0", "0.0:0.0:1382.0:1.0:0.0", 10);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 1382L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      String string1 = StringUtils.join(objectArray0, 'P');
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, objectArray0.length);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)77;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'd', (int) (byte)77, 675);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 77
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("'Hly:K5oLuNAb4@d", "'Hly:K5oLuNAb4@d", 9);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("!", "!", 1196);
      assertEquals("!", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...", 33);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      charSequenceArray0[3] = (CharSequence) "...";
      int int1 = StringUtils.lastIndexOfAny("...", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("...", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("hZ2", "...", 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.rightPad("er.CartesianProductTestExtension", 33, "gbpLsS`");
      assertFalse(string1.equals((Object)string0));
      assertEquals("er.CartesianProductTestExtensiong", string1);
      assertNotNull(string1);
      
      int int2 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "er.CartesianProductTestExtensiong");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(32, int2);
      
      boolean boolean0 = StringUtils.isMixedCase(charSequenceArray0[1]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.abbreviateMiddle(">@(MRjXT@c\u0000*<b@", "er.CartesianProductTestExtension", 108);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      String string0 = StringUtils.wrap("YS'rlP'$3wxyR_a", "");
      assertEquals("YS'rlP'$3wxyR_a", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("", '\u001E');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 1216, 1216);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("YS'rlP'$3wxyR_a");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) "YS'rlP'$3wxyR_a";
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.removeEnd(" ", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[5] = (CharSequence) " vs ";
      String string3 = StringUtils.abbreviateMiddle("YS'rlP'$3wxyR_a", "BuD", (-1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("YS'rlP'$3wxyR_a", string3);
      assertNotNull(string3);
      
      charSequenceArray0[6] = (CharSequence) "YS'rlP'$3wxyR_a";
      charSequenceArray0[7] = (CharSequence) "YS'rlP'$3wxyR_a";
      charSequenceArray0[8] = (CharSequence) "\r";
      String string4 = StringUtils.appendIfMissing(" vs ", "", charSequenceArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(9, charSequenceArray0.length);
      assertEquals(" vs ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join(objectArray0, " ", 8, (-1560));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(13, objectArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "YS'rlP'$3wxyR_a");
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '\u001E';
      longArray0[1] = (long) '\u001E';
      longArray0[2] = (long) (-1);
      String string6 = StringUtils.join(longArray0, '\u001E');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals(3, longArray0.length);
      assertEquals("30\u001E30\u001E-1", string6);
      assertArrayEquals(new long[] {30L, 30L, (-1L)}, longArray0);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      String string0 = StringUtils.chop("khEX2MeNB1\"v_BNPd7B");
      assertEquals("khEX2MeNB1\"v_BNPd7", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      String string1 = StringUtils.removeStartIgnoreCase("[t2SJt_`gC", " ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("[t2SJt_`gC", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      String string2 = StringUtils.lowerCase("offset cannot be negative", locale0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      String string3 = StringUtils.replaceChars("ive", '[', '`');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ive", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("khEX2MeNB1\"v_BNPd7");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("khEX2MeNB1\"v_BNPd7", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("ive", 19);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("ive", string5);
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "khEX2MeNB1\"v_BNPd7B";
      charSequenceArray0[1] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[2] = (CharSequence) "ive";
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[4] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[5] = (CharSequence) "[t2SJt_`gC";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "khEX2MeNB1\"v_BNPd7";
      charSequenceArray0[8] = (CharSequence) "ive";
      boolean boolean0 = StringUtils.equalsAny("ive", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string6 = StringUtils.getDigits("khEX2MeNB1\"v_BNPd7B");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("217", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.compare((String) null, "zy/C]F`0:F.0", true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      String string0 = StringUtils.getDigits("bgx5K?j&S8E");
      assertEquals("58", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.wrap(stringArray0[0], 's');
      assertEquals(1, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category2;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category1;
      String string0 = StringUtils.join(locale_CategoryArray0);
      assertEquals(3, locale_CategoryArray0.length);
      assertEquals("FORMATDISPLAYFORMAT", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("FORMATDISPLAYFORMAT");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      String string1 = StringUtils.join(charArray0, 'L');
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charArray0.length);
      assertEquals("lLl", string1);
      assertArrayEquals(new char[] {'l', 'l'}, charArray0);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("lLl", "lLl");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "lLl", 169);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.chomp("lLl", "$%nrk8");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("lLl", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("lLl", "F");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("lLl", 'l');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.stripAccents("lLl");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("lLl", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("lLl", 0);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("lLl", string4);
      assertNotNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains('l'));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("lLl", "F", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category2;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category1;
      String string0 = StringUtils.join(locale_CategoryArray0);
      assertEquals(3, locale_CategoryArray0.length);
      assertEquals("FORMATDISPLAYFORMAT", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("FORMATDISPLAYFORMAT");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'x';
      String string1 = StringUtils.join(charArray0, 'L');
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charArray0.length);
      assertEquals("lLx", string1);
      assertArrayEquals(new char[] {'l', 'x'}, charArray0);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("lLx", "lLx");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "lLx", 169);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.chomp("lLx", "$%nrk8");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("lLx", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("lLx", "F");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("lLx", 'x');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.stripAccents("lLx");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("lLx", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("lLx", 0);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("lLx", string4);
      assertNotNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains('x'));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "waVH", 256, 1128);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1128
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "R PBnh?V+b&k3", (-1), 1994);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-107L);
      longArray0[1] = (-1L);
      longArray0[2] = 1610L;
      longArray0[3] = 1502L;
      longArray0[4] = 1614L;
      longArray0[5] = (-1L);
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1614L;
      floatArray0[1] = (float) 1502L;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 1610L;
      floatArray0[6] = (float) 1610L;
      String string1 = StringUtils.join(floatArray0, '+');
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, floatArray0.length);
      assertEquals("1614.0+1502.0+-1.0+-1.0+0.0+1610.0+1610.0", string1);
      assertArrayEquals(new float[] {1614.0F, 1502.0F, (-1.0F), (-1.0F), 0.0F, 1610.0F, 1610.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("", "");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("", 16, '&');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("&&&&&&&&&&&&&&&&", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("org.junitpioneer.jupiter.params.FloatRange");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("egnaRtaolF.smarap.retipuj.reenoiptinuj.gro", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.reverse("");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceAll("", (String) null, "CartesianProductTest can not have a non-empty display name");
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("Fy^v_7r4=pS5,qzz4a", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string7 = StringUtils.repeat("CartesianProductTest can not have a non-empty display name", "x#3\"", (-394));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.rotate("Fy^v_7r4=pS5,qzz4a", (-1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertEquals("y^v_7r4=pS5,qzz4aF", string8);
      assertNotNull(string8);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "y^v_7r4=pS5,qzz4aF";
      String string9 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertEquals(1, stringArray0.length);
      assertEquals("y^v_7r4=pS5,qzz4aF", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("2mI/f{9", "n{H6!00<Gx-", 76);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-3009));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, '_', 75, 13);
      assertNull(string0);
      
      String string1 = StringUtils.upperCase((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      String string0 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", 5, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      String string0 = StringUtils.abbreviate(";@%\"K*\">7?_/SsJ/", (String) null, (-1476));
      assertEquals(";@%\"K*\">7?_/SsJ/", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("J2sb ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("J2sb", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase(";@%\"K*\">7?_/SsJ/");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(";@%\"k*\">7?_/sSj/", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing((String) null, '!');
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, ";@%\"k*\">7?_/sSj/");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "J2sb";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[5] = ";@%\"K*\">7?_/SsJ/";
      stringArray0[6] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "=,5:JhPHLq'0,Ugx");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.upperCase("?o2SH0ETCN-|ejeq^");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("?O2SH0ETCN-|EJEQ^", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '[');
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">b9ji[=s}~wOwd}";
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("+'?(&*}hooO;YB%", "\r");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.chomp("x_D8", (String) null);
      assertEquals("x_D8", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, 'i', 0, (-3509));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, charArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars((String) null, 'i', 'i');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      String string0 = StringUtils.replaceOnce((String) null, "#K'7.k_k@8PEi.qkYNT$m\"=sK6jo{", (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "#K'7.k_k@8PEi.qkYNT$m\"=sK6jo{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      String string0 = StringUtils.capitalize("{' matches '{");
      assertEquals("{' matches '{", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("{' matches '{");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[13];
      String string1 = StringUtils.joinWith((String) null, charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(13, charSequenceArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "{' matches '{";
      charSequenceArray0[4] = (CharSequence) "{' matches '{";
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      String string2 = StringUtils.lowerCase("VM?(J!k7u:ivc2>", locale0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("vm?(j!k7u:ivc2>", string2);
      assertNotNull(string2);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      charSequenceArray0[5] = (CharSequence) "vm?(j!k7u:ivc2>";
      String string3 = StringUtils.replaceChars("", 'N', 'N');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      charSequenceArray0[6] = (CharSequence) "";
      String string4 = StringUtils.stripAccents(":*}?<:aXU2}F/.~.");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(":*}?<:aXU2}F/.~.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("u/?_~B{a+2oF", 32);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("u/?_~B{a+2oF", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.equalsAny(charSequenceArray0[1], charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(13, charSequenceArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) " ", (CharSequence) " ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars(" ", 'c', 'c');
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      String string0 = StringUtils.rightPad("e.+Q^Du~m-o", (-2454), (String) null);
      assertEquals("e.+Q^Du~m-o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("e.+Q^Du~m-o", "e.+Q^Du~m-o", (CharSequence[]) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("e.+Q^Du~m-o", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("e.+Q^Du~m-o", (CharSequence[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '';
      longArray0[1] = (long) (-2454);
      String string2 = StringUtils.join(longArray0, '%', 17, 17);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, longArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new long[] {127L, (-2454L)}, longArray0);
      assertNotNull(string2);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("e.+Q^Du~m-o"));
      assertEquals(0, linkedList0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>(linkedList0);
      assertNotNull(treeSet0);
      assertFalse(linkedList0.contains("e.+Q^Du~m-o"));
      assertFalse(treeSet0.contains("e.+Q^Du~m-o"));
      assertEquals(0, linkedList0.size());
      
      linkedList0.addLast("R:BuD...");
      assertTrue(linkedList0.contains("R:BuD..."));
      assertFalse(linkedList0.contains("e.+Q^Du~m-o"));
      assertEquals(1, linkedList0.size());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 127L;
      doubleArray0[1] = (double) '';
      doubleArray0[2] = (double) '';
      String string3 = StringUtils.join(doubleArray0, 'l');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(3, doubleArray0.length);
      assertEquals("127.0l127.0l127.0", string3);
      assertArrayEquals(new double[] {127.0, 127.0, 127.0}, doubleArray0, 0.01);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "127.0l127.0l127.0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2295.9226F;
      floatArray0[2] = (-696.0F);
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("\n", "\n");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("hZ2", "hZ2", (-719));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.trimToEmpty("L+");
      assertEquals("L+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace(")RvF!}pwLo<eM*BY");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(")RvF!}pwLo<eM*BY", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "hZ2", charArray0);
      assertFalse(int1 == int0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'T', 'T'}, charArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("hZ2");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.wrapIfMissing("2!!E1^Ub'.V)Q9A@", "Don't clear/set the same entry more than once.");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Don't clear/set the same entry more than once.2!!E1^Ub'.V)Q9A@Don't clear/set the same entry more than once.", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      String string0 = StringUtils.substringBetween(">6|]EmvJJ!c", ">6|]EmvJJ!c", "org.apache.commons.lang3.Charsets");
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.Charsets", (-4241), (-4241));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring((String) null, 108);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "...", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      byte byte0 = (byte)85;
      // Undeclared exception!
      try { 
        Charset.forName("...");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ...
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("%o{", "%o{");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%o{", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringAfter("%o{", 23);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("' matches '", '%');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("' matches '", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "%o{", (CharSequence) "' matches '", (-1678));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.abbreviate("", (-475), (-1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase((String) null, "j&D1#4)P,152<E");
      assertNull(string1);
      
      String string2 = StringUtils.wrap("{' matches '{", 'p');
      assertEquals("p{' matches '{p", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("p{' matches '{p", "Search and Replace array lengths don't match: ");
      assertTrue(string3.equals((Object)string2));
      assertEquals("p{' matches '{p", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      
      String string4 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string4);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      
      String[] stringArray0 = StringUtils.splitByCharacterType("6>LTCE^\":");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.join((long[]) null, 'p');
      assertNull(string5);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      charArray0[4] = 'p';
      String string6 = StringUtils.join(charArray0, 'p');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals(5, charArray0.length);
      assertEquals("ppppppppp", string6);
      assertArrayEquals(new char[] {'p', 'p', 'p', 'p', 'p'}, charArray0);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("j&D1#4)P,152<E", "ppppppppp");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "p{' matches '{p", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.chomp((String) null, "T]w^*");
      assertNull(string7);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("CZ", (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("u#BfOR;C FR", 'p');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string8 = StringUtils.stripAccents("}}9CKu*B~qRRPp");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertEquals("}}9CKu*B~qRRPp", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("\r", (String) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("", "", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("", 0, "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 348.0F;
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      String string2 = StringUtils.trimToEmpty("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.compare("x_D8", "x_D8", false);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.ArrayUtils", "x_D8");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.mid("W", (-1), (-2645));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissing("", "", stringArray0);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals(1, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int3 = StringUtils.indexOfAny((CharSequence) "W", charSequenceArray0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int3);
      
      String string5 = StringUtils.substringAfter(" (LA&", "");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(" (LA&", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'A', 26, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("x#3G\"", stringArray0);
      assertEquals(188, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      String string0 = StringUtils.wrap("1[", 'w');
      assertEquals("w1[w", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "w1[w", (CharSequence) "1[");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "1[", (CharSequence) "1[");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("1[");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.remove("1[", 'w');
      assertFalse(string1.equals((Object)string0));
      assertEquals("1[", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("Locale must not be null", "", "w1[w", (-711));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("", "Locale must not be null");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.compare(",/!~", "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", false);
      assertEquals((-20), int0);
      
      String string4 = StringUtils.rotate("...", (-711));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((int[]) null, 'w');
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      String string6 = StringUtils.rotate("2o}>anHmP*qG ;)J`", (-711));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals(")J`2o}>anHmP*qG ;", string6);
      assertNotNull(string6);
      
      charSequenceArray0[1] = (CharSequence) "*qG ;)J`2o}>anHmP";
      charSequenceArray0[2] = (CharSequence) "...";
      charSequenceArray0[3] = (CharSequence) "...";
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.wrapIfMissing("Locale must not be null", 'w');
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("wLocale must not be nullw", string7);
      assertNotNull(string7);
      
      boolean boolean3 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int1 = StringUtils.indexOf((CharSequence) "wLocale must not be nullw", (CharSequence) "...", 119);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean4 = StringUtils.endsWith("2o}>anHmP*qG ;)J`", charSequenceArray0[3]);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      String string0 = StringUtils.capitalize("{' matches '{");
      assertEquals("{' matches '{", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string1 = StringUtils.toRootLowerCase("org.junitpioneer.jupiter.params.Range");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.range", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.range";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "org.junitpioneer.jupiter.params.range", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'X'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      String string0 = "YS'rlP'$3wxyR_a";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("YS'rlP'$3wxyR_a", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      String string0 = StringUtils.chop("khEX2MeNB1\"v_BNPd7B");
      assertEquals("khEX2MeNB1\"v_BNPd7", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "Never disable parameterized test method itself";
      String string1 = StringUtils.join(objectArray0, "Never disable parameterized test method itself", 31, 31);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = null;
      String string3 = StringUtils.abbreviate((String) null, 7, 502);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "khEX2MeNB1\"v_BNPd7", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object0));
      assertNotNull(object6);
      
      String string0 = StringUtils.substringAfter("2>6W<z", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 269, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                                                                                                                                                                                                               Search and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "_u@vs.jVijgFmM|B";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "2>6W<z";
      int int0 = StringUtils.lastIndexOfAny("Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(46, int0);
      
      int int1 = StringUtils.compareIgnoreCase("vKv@L}d8$@b`M~l", "M {2Lv0v,sw)pIl9g,", false);
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      String string2 = StringUtils.chomp("                                                                                                                                                                                                                               Search and Replace array lengths don't match: ");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                                                                                                                                                                                                               Search and Replace array lengths don't match: ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("lUE");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("LUE", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.right("", (-1747));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '^');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("%>ah#+TeoC=aig^ZU@", supplier0);
      assertEquals("%>ah#+TeoC=aig^ZU@", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("%>ah#+TeoC=aig^ZU@");
      assertFalse(string2.equals((Object)string1));
      assertEquals("%>AH#+TEOC=AIG^ZU@", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNotEmpty((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("SN+G", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substring("OZK3*,6z&mV&=}z-tAQ", (-2335));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("OZK3*,6z&mV&=}z-tAQ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBefore("", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isNumericSpace("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      
      Locale locale1 = Locale.FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("fr", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      String string5 = locale0.getDisplayLanguage(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("anglais", string5);
      assertNotNull(string5);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("fr", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      String string6 = StringUtils.getIfBlank("\r", supplier1);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      String string0 = StringUtils.center("[OW", 8, "[OW");
      assertEquals("[O[OW[OW", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'W';
      charArray0[2] = 'K';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      String string0 = StringUtils.substringAfter("XQd$A7H`Dt@Q`Gc65Y7", "2>6W<z");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("", 5, "khEX2MeNB1\"v_BNPd7B");
      assertFalse(string1.equals((Object)string0));
      assertEquals("khEX2", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny("khEX2", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("khEX2MeNB1\"v_BNPd7B", "khEX2", false);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      String string2 = StringUtils.chomp("CartesianProductTest can not have a non-empty display name");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("CartesianProductTest can not have a non-empty display name", string2);
      assertNotNull(string2);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string3 = StringUtils.join((List<?>) arrayList0, "CartesianProductTest can not have a non-empty display name", 5, (-1700));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      String string0 = StringUtils.join((List<?>) stack0, "Y #&c_lf@p)\"'jY #&c_lf@p)\"'j", 78, 78);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      String string0 = StringUtils.stripToNull("[XKq:+%lW/f:k jHb");
      assertEquals("[XKq:+%lW/f:k jHb", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("Fml9qn5b9=%Va&bJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Fml9qn5b9=%Va&bJ", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Fml9qn5b9=%Va&bJ";
      charSequenceArray0[1] = (CharSequence) "Fml9qn5b9=%Va&bJ";
      charSequenceArray0[2] = (CharSequence) "Fml9qn5b9=%Va&bJ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '}';
      String string2 = StringUtils.join(charArray0, '}');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, charArray0.length);
      assertEquals("4}}", string2);
      assertArrayEquals(new char[] {'4', '}'}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference((String) null, ")_`-g8=W.gMUF");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(")_`-g8=W.gMUF", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("...", (-1), "px\"?>Sd\"g");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEnd("R:BuD", "...");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("R:BuD", string5);
      assertNotNull(string5);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'k';
      charArray1[1] = '}';
      charArray1[2] = '4';
      charArray1[3] = '4';
      charArray1[4] = '4';
      charArray1[5] = '4';
      charArray1[6] = '4';
      charArray1[7] = '}';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "R:BuD", charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'k', '}', '4', '4', '4', '4', '4', '}'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      String string0 = StringUtils.substringBetween("DGq>9aAdU`!;_", " annotation, but there were ", " annotation, but there were ");
      assertNull(string0);
      
      String string1 = StringUtils.truncate("Kc", 69);
      assertEquals("Kc", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("Kk$D", "Kc", 69);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrapIfMissing(" annotation, but there were ", "Kc");
      assertFalse(string2.equals((Object)string1));
      assertEquals("Kc annotation, but there were Kc", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1952.294F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 2005.09F;
      floatArray0[3] = 1379.1989F;
      floatArray0[4] = 872.011F;
      String string1 = StringUtils.join(floatArray0, 'O');
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, floatArray0.length);
      assertEquals("1952.294O1.0O2005.09O1379.1989O872.011", string1);
      assertArrayEquals(new float[] {1952.294F, 1.0F, 2005.09F, 1379.1989F, 872.011F}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("C4! N^8", "", "\"", 16);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("C4! N^8", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("C4! N^8", "R:BuD...", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("C4! N^8", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("", 65, "1952.294O1.0O2005.09O1379.1989O872.011");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("1952.294O1.0O2005.09O1379.1989O81952.294O1.0O2005.09O1379.1989O87", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.SPACE;
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replace((String) null, "1952.294O1.0O2005.09O1379.1989O81952.294O1.0O2005.09O1379.1989O87", (String) null);
      assertNull(string6);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String string7 = StringUtils.truncate("'jvqZgiT7cj", 65);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("'jvqZgiT7cj", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      String string0 = StringUtils.stripToNull("The Array must not be null");
      assertEquals("The Array must not be null", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.chomp(")G_`-g8=W.gMUF");
      assertFalse(string1.equals((Object)string0));
      assertEquals(")G_`-g8=W.gMUF", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.truncate(")G_`-g8=W.gMUF", 12, 10);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("UF", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      String string0 = StringUtils.replace(" ", " ", " ");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2480.729F;
      floatArray0[1] = (-17.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-773.1203F);
      floatArray0[4] = 779.0F;
      String string0 = StringUtils.join(floatArray0, ';');
      assertEquals(5, floatArray0.length);
      assertEquals("2480.729;-17.0;0.0;-773.1203;779.0", string0);
      assertArrayEquals(new float[] {2480.729F, (-17.0F), 0.0F, (-773.1203F), 779.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("2480.729;-17.0;0.0;-773.1203;779.0", "\r", "2480.729;-17.0;0.0;-773.1203;779.0", 16);
      assertTrue(string1.equals((Object)string0));
      assertEquals("2480.729;-17.0;0.0;-773.1203;779.0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("oTKi9#Ez", (String) null, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("oTKi9#Ez", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("\r", 65, "oTKi9#Ez");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("oTKi9#EzoTKi9#EzoTKi9#EzoTKi9#Ez\roTKi9#EzoTKi9#EzoTKi9#EzoTKi9#Ez", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "oTKi9#EzoTKi9#EzoTKi9#EzoTKi9#Ez\roTKi9#EzoTKi9#EzoTKi9#EzoTKi9#Ez";
      charSequenceArray0[2] = (CharSequence) null;
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      charSequenceArray0[3] = (CharSequence) " ";
      charSequenceArray0[4] = (CharSequence) "oTKi9#EzoTKi9#EzoTKi9#EzoTKi9#Ez\roTKi9#EzoTKi9#EzoTKi9#EzoTKi9#Ez";
      charSequenceArray0[5] = (CharSequence) "oTKi9#Ez";
      charSequenceArray0[6] = (CharSequence) "oTKi9#Ez";
      String string5 = StringUtils.replace("oTKi9#EzoTKi9#EzoTKi9#EzoTKi9#Ez\roTKi9#EzoTKi9#EzoTKi9#EzoTKi9#Ez", "'jvqZgiT7cj", "y&z");
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("oTKi9#EzoTKi9#EzoTKi9#EzoTKi9#Ez\roTKi9#EzoTKi9#EzoTKi9#EzoTKi9#Ez", string5);
      assertNotNull(string5);
      
      charSequenceArray0[7] = (CharSequence) "oTKi9#EzoTKi9#EzoTKi9#EzoTKi9#Ez\roTKi9#EzoTKi9#EzoTKi9#EzoTKi9#Ez";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string6 = StringUtils.truncate("FTbE|9(h[aFmx", 116);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("FTbE|9(h[aFmx", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripToEmpty((String) null);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("dRCJg QW4`Qw", (-1978));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      LinkedList<String> linkedList0 = new LinkedList<String>(vector0);
      assertNotNull(linkedList0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "yjfX9^[Wl[");
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(vector0.contains("yjfX9^[Wl["));
      assertFalse(linkedList0.contains("yjfX9^[Wl["));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) vector0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) linkedList0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      String string1 = StringUtils.join(objectArray0, '=');
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, objectArray0.length);
      assertNotNull(string1);
      
      String string2 = "pXXzf@";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("pXXzf@", (-2183));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "P\u0005JxjmEt&aU(r&_", (-1519), 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Whlaw_qqL:0 ''");
      assertEquals("Whlaw_qqL:0 ''", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("", "Don't clear/set the same entry more than once.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 890.1F;
      floatArray0[2] = (-2442.9F);
      String string2 = StringUtils.join(floatArray0, '7');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, floatArray0.length);
      assertEquals("0.07890.17-2442.9", string2);
      assertArrayEquals(new float[] {0.0F, 890.1F, (-2442.9F)}, floatArray0, 0.01F);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0.07890.17-2442.9";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("0.07890.17-2442.9", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("", 2170);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("Whlaw_qqL:0 ''", supplier0);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Whlaw_qqL:0 ''", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "?TmI^1,6EvLvh=", (-317), 235);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Whlaw_qqL:0 ''");
      assertEquals("Whlaw_qqL:0 ''", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("", "Don't clear/set the same entry more than once.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 890.1F;
      floatArray0[2] = (-2442.9F);
      String string2 = StringUtils.join(floatArray0, '7');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, floatArray0.length);
      assertEquals("0.07890.17-2442.9", string2);
      assertArrayEquals(new float[] {0.0F, 890.1F, (-2442.9F)}, floatArray0, 0.01F);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[1];
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("", 0);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring("{' matches '{", 76);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substring("H", 9);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("S");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, ':', (-1), 22);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      String string0 = StringUtils.join((List<?>) stack0, 'j', 3, 3);
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(stack0.contains(3));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      String string0 = StringUtils.rightPad("e.+Q^Du~m-o", (-2454), (String) null);
      assertEquals("e.+Q^Du~m-o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("e.+Q^Du~m-o", "e.+Q^Du~m-o", (CharSequence[]) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("e.+Q^Du~m-o", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("e.+Q^Du~m-o", (CharSequence[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '';
      longArray0[1] = (long) (-2454);
      String string2 = StringUtils.join(longArray0, '%', 17, 17);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, longArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new long[] {127L, (-2454L)}, longArray0);
      assertNotNull(string2);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("e.+Q^Du~m-o"));
      assertEquals(0, linkedList0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>(linkedList0);
      assertNotNull(treeSet0);
      assertFalse(linkedList0.contains("e.+Q^Du~m-o"));
      assertFalse(treeSet0.contains("e.+Q^Du~m-o"));
      assertEquals(0, linkedList0.size());
      
      NavigableSet<String> navigableSet0 = treeSet0.subSet("\n", false, "2%RqT8iQ%*2w1U", false);
      assertNotNull(navigableSet0);
      assertFalse(linkedList0.contains("e.+Q^Du~m-o"));
      assertFalse(treeSet0.contains("e.+Q^Du~m-o"));
      assertFalse(navigableSet0.contains("e.+Q^Du~m-o"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      assertNotNull(list0);
      assertFalse(linkedList0.contains("e.+Q^Du~m-o"));
      assertFalse(list0.contains("e.+Q^Du~m-o"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'S', 17, 71);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 71
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">b9ji[=s}~wOwd}";
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(">b9ji[=s}~wOwd}"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add("d*J(f");
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.contains(">b9ji[=s}~wOwd}"));
      assertTrue(linkedHashSet0.contains("d*J(f"));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, " ");
      assertEquals("d*J(f", string0);
      assertNotNull(string0);
      assertFalse(linkedHashSet0.contains(">b9ji[=s}~wOwd}"));
      assertTrue(linkedHashSet0.contains("d*J(f"));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals(">b9ji[=s}~wOwd}", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ">b9ji[=s}~wOwd}", Integer.MIN_VALUE);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = linkedHashSet0.add("d*J(f");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(linkedHashSet0.contains(" "));
      assertTrue(linkedHashSet0.contains("d*J(f"));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) Integer.MIN_VALUE;
      String string2 = StringUtils.join(floatArray0, ';');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, floatArray0.length);
      assertEquals("-2.14748365E9", string2);
      assertArrayEquals(new float[] {(-2.14748365E9F)}, floatArray0, 0.01F);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("d*J(f");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("d*j(f", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) Integer.MIN_VALUE;
      String string4 = StringUtils.join(doubleArray0, ';');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(1, doubleArray0.length);
      assertEquals("-2.147483648E9", string4);
      assertArrayEquals(new double[] {(-2.147483648E9)}, doubleArray0, 0.01);
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isAsciiPrintable("-2.147483648E9");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "-2.147483648E9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      String string0 = StringUtils.substringBetween("maxWith cannot be negative", "maxWith cannot be negative");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("maxWith cannot be negative", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      String string0 = "y";
      String string1 = StringUtils.substringBetween("y", "y", "y");
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      String string0 = "[\\XKq:+%lW/f:k jb";
      String string1 = StringUtils.stripToNull("[XKq:+%lW/f:k jb");
      assertFalse(string1.equals((Object)string0));
      assertEquals("[XKq:+%lW/f:k jb", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("Fml9qn5b9=%Va&bJ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Fml9qn5b9=%Va&bJ", string2);
      assertNotNull(string2);
      
      String string3 = null;
      String string4 = StringUtils.strip("Timeout for vintage @Test must be positive.", (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Timeout for vintage @Test must be positive.", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNumeric("[XKq:+%lW/f:k jb");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "[XKq:+%lW/f:k jb", (CharSequence) "Fml9qn5b9=%Va&bJ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("Timeout for vintage @Test must be positive.", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      String string0 = StringUtils.stripStart("Never disable parameterized test method itself", "");
      assertEquals("Never disable parameterized test method itself", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      String string0 = StringUtils.stripEnd("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{AUTOSELECT_FILTERINGkMAP_EXTENDED_RANGES", "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      String string0 = StringUtils.difference("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize("{' matches '{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{' matches '{", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("{' matches '{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = ']';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'a';
      charArray0[5] = 'T';
      charArray0[6] = 'Z';
      charArray0[7] = '|';
      charArray0[8] = '%';
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(9, charArray0.length);
      assertEquals("Z]RRaTZ|%", string2);
      assertArrayEquals(new char[] {'Z', ']', 'R', 'R', 'a', 'T', 'Z', '|', '%'}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, "", "H|(w<d*^wEa6A#NU?q~", 50);
      assertNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty((String) null, "^VHr5fVHd,AT]K>*");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("^VHr5fVHd,AT]K>*", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "^VHr5fVHd,AT]K>*";
      stringArray0[1] = "";
      stringArray0[2] = "t5^PAbh~9";
      stringArray0[3] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray0[4] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '`', (-1192), 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1192
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      String string0 = StringUtils.removeEnd("d*J(f", "}'|9TsBG@Kc");
      assertEquals("d*J(f", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...");
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp("offset cannot be negative", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'X', 0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">b9ji[=s}~wOwd}";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(">b9ji[=s}~wOwd}"));
      assertEquals(0, linkedList0.size());
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(linkedList0.contains(">b9ji[=s}~wOwd}"));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "Um*qp]");
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(linkedList0.contains("Um*qp]"));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny(">b9ji[=s}~wOwd}", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.replaceAll(">b9ji[=s}~wOwd}", (String) null, ">b9ji[=s}~wOwd}");
      assertFalse(string1.equals((Object)string0));
      assertEquals(">b9ji[=s}~wOwd}", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.joinWith("r4:'};>MDlTn~1.", stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals(">b9ji[=s}~wOwd}", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("[<", "org.apache.commons.lang3.ObjectUtils", 87);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.substring("eCbq", (-3968), 87);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("eCbq", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("org.apache.commons.lang3.ObjectUtils");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.ObjectUtils", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToNull((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, ' ');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      String string0 = StringUtils.trimToNull("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("FS!llCcEOl", "FS!llCcEOl");
      assertFalse(string1.equals((Object)string0));
      assertEquals("FS!llCcEOl", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "FS!llCcEOl", (CharSequence) "FS!llCcEOl", 8);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("t(l?i)z winzbUQ-H,'", "FS!llCcEOl");
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "", 1867, 88);
      assertFalse(string3.equals((Object)string1));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("FS!llCcEOl", (-1008), 3002);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("FS!llCcEOl", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.trimToNull("FS!llCcEOl");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals("FS!llCcEOl", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "FS!llCcEOl", (CharSequence) "FS!llCcEOl");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split((String) null, '@');
      assertNull(stringArray1);
      
      String string6 = StringUtils.join((Object[]) null, "FS!llCcEOl");
      assertNull(string6);
      
      String string7 = StringUtils.replaceFirst("?^u", (String) null, "FS!llCcEOl");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertEquals("?^u", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      String[] stringArray0 = new String[3];
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chomp("TSYnxokeM`?x([QUE");
      assertEquals("TSYnxokeM`?x([QUE", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "TSYnxokeM`?x([QUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "9:dV6RAQ", charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "9:dV6RAQ", charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      String string0 = StringUtils.difference("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize("{' matches '{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{' matches '{", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("{' matches '{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, charArray0.length);
      assertEquals("X", string2);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string3 = StringUtils.toRootLowerCase("org.junitpioneer.jupiter.params.Range");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.params.range", string3);
      assertNotNull(string3);
      
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.range";
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "org.junitpioneer.jupiter.params.range", charArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(1, charArray0.length);
      assertTrue(boolean3);
      assertArrayEquals(new char[] {'X'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.RetryiTestExtension");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(12, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.overlay((String) null, (String) null, 14, 14);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.replaceEachRepeatedly(">{~", stringArray0, stringArray0);
      assertEquals(12, stringArray0.length);
      assertEquals(">{~", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'T';
      charArray0[3] = 'z';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.jupiter.RetryiTestExtension", charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'z', 'z', 'T', 'z', 'x', 'x'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(">b9ji[=s}~wOwd}", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.overlay((String) null, ">b9ji[=s}~wOwd}", (-1314), 3010);
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "`U~", (CharSequence) null);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("`U~", '*');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens(">b9ji[=s}~wOwd}", (String) null, (-410));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, '!');
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("", "", "&E3[yiZ&!bCy I<g{", (int) '!');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("FS!llCcEOl", '!');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("!FS!llCcEOl!", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.overlay("PXw,r3[V", "!FS!llCcEOl!", 872, 3081);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("PXw,r3[V!FS!llCcEOl!", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, "FS!llCcEOl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chomp("offset cannot be negative", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("offset cannot be negative", 'n');
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("...", "offset cannot be negative", (int) 'n');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat((String) null, "|b.$Aw?", (int) (short)223);
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("offset cannot be negative", "offset cannot be negative");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.replaceOnceIgnoreCase((String) null, (String) null, "offset cannot be negative");
      assertNull(string5);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Minimum abbreviation width with offset is %d", (CharSequence) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int1 == int0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.unwrap((String) null, 'W');
      assertNull(string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase("offset cannot be negative", (CharSequence) null, stringArray0);
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("offset cannot be negative", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[4] = stringArray0[2];
      char char0 = 'U';
      String string0 = StringUtils.join((Object[]) stringArray0, 'U', 0, 0);
      assertEquals(9, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "5I";
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "5I", (-4843));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange(stringArray0[4], 108);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.center((String) null, 45, 'V');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "%");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotEmpty("%");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string1 = StringUtils.wrapIfMissing(";bdQL;: TnXx", 'i');
      assertEquals("i;bdQL;: TnXxi", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceAll("i;bdQL;: TnXxi", "", "");
      assertTrue(string2.equals((Object)string1));
      assertEquals("i;bdQL;: TnXxi", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("%");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string3 = StringUtils.unwrap("i;bdQL;: TnXxi", 'E');
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("i;bdQL;: TnXxi", string3);
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.startsWith("i;bdQL;: TnXxi", "i;bdQL;: TnXxi");
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      boolean boolean5 = StringUtils.containsAny((CharSequence) "i;bdQL;: TnXxi", (CharSequence) null);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      String string4 = StringUtils.replaceFirst("", "i;bdQL;: TnXxi", "o00{W6F");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter((String) null, (-3283));
      assertNull(string5);
      
      boolean boolean6 = StringUtils.isBlank((CharSequence) null);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6);
      
      String string6 = StringUtils.replaceChars("Locale must not be null", "i;bdQL;: TnXxi", (String) null);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("ocalemustoteull", string6);
      assertNotNull(string6);
      
      boolean boolean7 = StringUtils.endsWithIgnoreCase(";bdQL;: TnXx", (CharSequence) null);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "i;bdQL;: TnXxi", 122, 0);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "i;bdQL;: TnXxi";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "%";
      boolean boolean8 = StringUtils.equalsAnyIgnoreCase(";bdQL;: TnXx", charSequenceArray0);
      assertTrue(boolean8 == boolean7);
      assertFalse(boolean8 == boolean6);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean4);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean3);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean8);
      
      String string7 = StringUtils.reverseDelimited("", 'E');
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.appendIfMissing("h*8+w-=lfz4<", "", charSequenceArray0);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertEquals(3, charSequenceArray0.length);
      assertEquals("h*8+w-=lfz4<", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.strip("i;bdQL;: TnXxi", "1.0KT(LA|'");
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string3));
      assertEquals("i;bdQL;: TnXxi", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      String string0 = StringUtils.wrap("1[", 'w');
      assertEquals("w1[w", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "w1[w", (CharSequence) "1[");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "1[", (CharSequence) "1[");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("1[");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.remove("1[", 'w');
      assertFalse(string1.equals((Object)string0));
      assertEquals("1[", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("Locale must not be null", "", "w1[w", (-711));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("", "Locale must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.compare(",/!~", "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", false);
      assertEquals((-20), int0);
      
      String string4 = StringUtils.rotate("...", (-711));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", 0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty(" ");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("#`fWOlxuF=", "#`fWOlxuF=");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(11, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.replaceIgnoreCase("J?j%Xy4{", "w1I/hRc{C", "#`fWOlxuF=", 160);
      assertEquals("J?j%Xy4{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("D#PdOg~QKCn/8", "#`fWOlxuF=", true);
      assertEquals(33, int0);
      
      String string1 = StringUtils.rotate(" ", 80);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((int[]) null, '4');
      assertNull(string2);
      
      String string3 = StringUtils.rotate("w1I/hRc{C", 1875);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("c{Cw1I/hR", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.split(" ");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.removeEndIgnoreCase("30hD/ez9Y|Cjs<V(", "D#PdOg~QKCn/8");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("30hD/ez9Y|Cjs<V(", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAllUpperCase(" ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      char char0 = '(';
      String string0 = StringUtils.reverseDelimited("5yw;u", '(');
      assertEquals("5yw;u", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '(';
      doubleArray0[2] = (double) '(';
      doubleArray0[3] = (double) '(';
      charSequenceArray0[0] = (CharSequence) "5yw;u";
      charSequenceArray0[2] = (CharSequence) "5yw;u";
      charSequenceArray0[3] = (CharSequence) "5yw;u";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "5yw;u", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)64;
      byte byte0 = (byte)64;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte)120;
      // Undeclared exception!
      try { 
        Charset.forName("5yw;u");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 5yw;u
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n", ",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.rightPad("", 26, "_%Fr{0W;JlL,r@I6");
      assertEquals("_%Fr{0W;JlL,r@I6_%Fr{0W;Jl", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("LJn(g", "", "_%Fr{0W;JlL,r@I6");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("LJn(g", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "_%Fr{0W;JlL,r@I6";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.ordinalIndexOf("", (CharSequence) null, 50);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("", "", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("", 0, "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 348.0F;
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      String string2 = StringUtils.replaceIgnoreCase("x\" Dt'.$*$ZJy", "W", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("x\" Dt'.$*$ZJy", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 809);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.compare("x_D8", "x_D8", true);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.ArrayUtils", "x_D8");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.mid("W", (-1), (-2645));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissing("", "", stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int3 = StringUtils.indexOfAny((CharSequence) "W", charSequenceArray0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ch";
      String string0 = StringUtils.stripStart("Minimum abbreviation width is %d", "Minimum abbreviation width with offset is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "ch", (CharSequence) "Minimum abbreviation width with offset is %d", Integer.MAX_VALUE);
      assertEquals(43, int0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, " must be static");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Y #&c_lf@p)\"'j", "Y #&c_lf@p)\"'j");
      assertEquals("Y #&c_lf@p)\"'j", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Y #&c_lf@p)\"'j", "Y #&c_lf@p)\"'j");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "Y #&c_lf@p)\"'j");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Y #&c_lf@p)\"'j", 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "(yF>'u`", (CharSequence) "(yF>'u`", 32755);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object5));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      String string0 = StringUtils.join(objectArray0, "' contains '", 502, 53);
      assertEquals(7, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.valueOf(charArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, charArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("x_D8", "ey  gO");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("x_D8", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[1] = "d*J(f";
      stringArray0[2] = ">b9ji[=s}~wOwd}";
      stringArray0[3] = "fUL+oma(";
      stringArray0[4] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[5] = "org.junitpioneer.vintage.TimeoutExtension";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("org.junitpioneer.vintage.TimeoutExtension", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("org.junitpioneer.vintage.TimeoutExtension", (-1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("n", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp("offset cannot be negative", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.join(charArray0, 'X', 0, 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      String string0 = StringUtils.capitalize("!");
      assertEquals("!", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      String string0 = StringUtils.capitalize("gT(:+$|-");
      assertEquals("GT(:+$|-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      String string0 = StringUtils.difference("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize("{' matches '{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{' matches '{", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("{' matches '{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = ']';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'a';
      charArray0[5] = 'T';
      charArray0[6] = 'Z';
      charArray0[7] = '|';
      charArray0[8] = '%';
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(9, charArray0.length);
      assertEquals("Z]RRaTZ|%", string2);
      assertArrayEquals(new char[] {'Z', ']', 'R', 'R', 'a', 'T', 'Z', '|', '%'}, charArray0);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{' matches '{";
      stringArray0[1] = "{' matches '{";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray0[5] = "Z]RRaTZ|%";
      String string3 = StringUtils.replaceEachRepeatedly("vC^lMpDWx.P", stringArray0, stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertEquals("vC^lMpDWx.P", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string2 = "j&D1#4)P,152<E";
      String string3 = StringUtils.removeStartIgnoreCase((String) null, "j&D1#4)P,152<E");
      assertNull(string3);
      
      String string4 = StringUtils.wrap("{' matches '{", 'p');
      assertFalse(string4.equals((Object)string2));
      assertEquals("p{' matches '{p", string4);
      assertNotNull(string4);
      
      String string5 = "Search and Replace array lengths don't match: ";
      String string6 = StringUtils.remove("p{' matches '{p", "Search and Replace array lengths don't match: ");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertEquals("p{' matches '{p", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("p{' matches '{p", '3');
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertEquals("3p{' matches '{p3", string7);
      assertNotNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string8 = StringUtils.removeStart((String) null, "p{' matches '{p");
      assertNull(string8);
      
      // Undeclared exception!
      try { 
        Charset.forName("p{' matches '{p");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // p{' matches '{p
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Kq=ryV{(n", "Kk$D", "Kq=ryV{(n");
      assertNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "eU";
      stringArray0[2] = null;
      stringArray0[3] = "Kq=ryV{(n";
      boolean boolean0 = StringUtils.equalsIgnoreCase("y@W`B:eca`.", string0);
      assertFalse(boolean0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEnd("\n", "");
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Locale locale0 = new Locale("Kq=ryV{(n", "Kq=ryV{(n");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("kq=ryv{(n_KQ=RYV{(N", locale0.toString());
      assertEquals("KQ=RYV{(N", locale0.getCountry());
      assertEquals("kq=ryv{(n", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        Locale.forLanguageTag(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase(".<V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removePattern("LTBaD,R{U-F\"", "LTBaD,R{U-F\"");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 6
         // LTBaD,R{U-F\"
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("9?org(guditioneer.jupiter.param+.LongRange", "Threshold must not be negative");
      assertEquals("9?org(guditioneer.jupiter.param+.LongRange", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("\n", "Y");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.params.ShortRange", '3');
      assertEquals("3org.junitpioneer.jupiter.params.ShortRange3", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("3org.junitpioneer.jupiter.params.ShortRange3");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      String string0 = StringUtils.substringBefore("r=venqB", "r=venqB");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 1868);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'Q');
      assertNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "maxWith cannot bnegative", (CharSequence) "maxWith cannot bnegative");
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 10);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      String string0 = StringUtils.substringBefore("QHZh1@ns?", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      String string1 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[2], (CharSequence) "", 928);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getDigits("dqgi!+zt!u");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      String string0 = StringUtils.substringBefore("7B[\" vq|", "7B[\" vq|");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      String string0 = StringUtils.wrap("YS'rlP'$3wxyR_a", "");
      assertEquals("YS'rlP'$3wxyR_a", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("", '\u001E');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 1216, 1216);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("YS'rlP'$3wxyR_a");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string2 = StringUtils.join((byte[]) null, 'X');
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string0 = StringUtils.substringAfter("~", (-2408));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right((String) null, (-2408));
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("5yw;u", '(');
      assertEquals("5yw;u", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '(';
      doubleArray0[2] = (double) '(';
      doubleArray0[3] = (double) '(';
      String string1 = StringUtils.join(doubleArray0, '#');
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, doubleArray0.length);
      assertEquals("40.0#0.0#40.0#40.0", string1);
      assertArrayEquals(new double[] {40.0, 0.0, 40.0, 40.0}, doubleArray0, 0.01);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "40.0#0.0#40.0#40.0";
      charSequenceArray0[1] = (CharSequence) "5yw;u";
      charSequenceArray0[2] = (CharSequence) "5yw;u";
      charSequenceArray0[3] = (CharSequence) "5yw;u";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "5yw;u", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte)120;
      // Undeclared exception!
      try { 
        Charset.forName("5yw;u");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 5yw;u
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Y16S,)+Gy-+1Iiy?", 'd');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("Y16S,)+Gy-+1Iiy?", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Kq=ryV{(n", (CharSequence) "Kq=ryV{(n");
      assertEquals(0, int0);
      
      String string0 = StringUtils.defaultString("Kq=ryV{(n");
      assertEquals("Kq=ryV{(n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("Kk$D", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Kk$D", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("Kk$D", "");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Kk$D", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("x_D8", '&');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("x_D8", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("Kk$D", "Kk$D", "Kk$D");
      assertNull(string4);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.replaceIgnoreCase(" vs ", "hZ2", "...");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(" vs ", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "...", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Kk$D", (CharSequence) "Kk$D");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "Kk$D", charArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "9lTp?P0+", charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Q}DO'Z_Q4");
      assertEquals("Q}DO'Z_Q4", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("Q}DO'Z_Q4", 32, "Q}DO'Z_Q4");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Q}DO'Z_Q4";
      charSequenceArray0[1] = (CharSequence) "Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'";
      charSequenceArray0[2] = (CharSequence) "Q}DO'Z_Q4";
      charSequenceArray0[3] = (CharSequence) "Q}DO'Z_Q4";
      charSequenceArray0[4] = (CharSequence) "Q}DO'Z_Q4";
      charSequenceArray0[5] = (CharSequence) "Q}DO'Z_Q4";
      charSequenceArray0[6] = (CharSequence) "Q}DO'Z_Q4";
      charSequenceArray0[7] = (CharSequence) "Q}DO'Z_Q4";
      int int0 = StringUtils.indexOfAny((CharSequence) "Q}DO'Z_Q4", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(9, int1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Q}DO'Z_Q4");
      assertFalse(boolean0);
      
      String string2 = StringUtils.joinWith("Q}DO'Z_Q4", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(8, charSequenceArray0.length);
      assertEquals("Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isMixedCase("Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4Q}DO'Z_Q4");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, '', 578, 32);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(8, charSequenceArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("GMT", (-1362), 13);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("GMT", string4);
      assertNotNull(string4);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 32;
      doubleArray0[1] = (double) (-1362);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '', (-1362), 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1362
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      String string0 = StringUtils.unwrap("Minimum abbreviation width is %d", "");
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      String string0 = StringUtils.mid("g+mfv9\"g+mfv9\"", 8, 8);
      assertEquals("+mfv9\"", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("+mfv9\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "}'|9TsBG@Khc");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("i8'R;E8X$M.-3_fE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase(")t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("M-+'GC");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "M-+'GC", 7, 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("!", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) ">6|]EmvJJ!c", 2949);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      String string0 = StringUtils.substring("Search and Replace array lengths don't match: ", (-2672), (-2672));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      String string0 = "@mgf9Zj2R-OOA:Z";
      String string1 = StringUtils.substring("@mgf9Zj2R-OOA:Z", (-205), (-931));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-205), (-931));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[2] = 0L;
      longArray0[3] = (long) (-205);
      longArray0[4] = (long) (-931);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '', (-1), 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.repeat('}', (int) '}');
      assertEquals("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.unwrap((String) null, "");
      assertNull(string1);
      
      String string2 = StringUtils.join((float[]) null, 'p');
      assertNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("", 2182);
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("!_6eFT", supplier0);
      assertFalse(string5.equals((Object)string4));
      assertEquals("!_6eFT", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "#VI.uC;woI6", (Supplier<CharSequence>) null);
      assertEquals("#VI.uC;woI6", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals("aa", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 51);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      String string0 = StringUtils.chop("khEX2MeNB1\"v_BNPd7B");
      assertEquals("khEX2MeNB1\"v_BNPd7", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'W';
      charArray0[2] = 'K';
      charArray0[3] = '4';
      int int0 = StringUtils.indexOfAny((CharSequence) "khEX2MeNB1\"v_BNPd7", charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'[', 'W', 'K', '4'}, charArray0);
      
      String string1 = StringUtils.chomp("StdIoExtension is active but neither System.out or System.in are getting redirected.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("StdIoExtension is active but neither System.out or System.in are getting redirected.", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "StdIoExtension is active but neither System.out or System.in are getting redirected.", (CharSequence) "StdIoExtension is active but neither System.out or System.in are getting redirected.");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      Locale.setDefault(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      String string2 = locale0.getDisplayVariant((Locale) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string3 = Locale.lookupTag(linkedList0, (Collection<String>) null);
      assertNull(string3);
      assertEquals(0, linkedList0.size());
      
      String string4 = StringUtils.lowerCase("StdIoExtension is active but neither System.out or System.in are getting redirected.", locale0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("stdioextension is active but neither system.out or system.in are getting redirected.", string4);
      assertNotNull(string4);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" doesn't contain any substring.");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '4';
      longArray0[1] = (long) '4';
      String string5 = StringUtils.join(longArray0, '[');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals(2, longArray0.length);
      assertEquals("52[52", string5);
      assertArrayEquals(new long[] {52L, 52L}, longArray0);
      assertNotNull(string5);
      
      String string6 = StringUtils.join(charArray0, 'K');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals(4, charArray0.length);
      assertEquals("[KWKKK4", string6);
      assertArrayEquals(new char[] {'[', 'W', 'K', '4'}, charArray0);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("52[52", "khEX2MeNB1\"v_BNPd7");
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOf((CharSequence) "khEX2MeNB1\"v_BNPd7B", (-1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string7 = StringUtils.chomp(" doesn't contain any substring.", (String) null);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals(" doesn't contain any substring.", string7);
      assertNotNull(string7);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("StdIoExtension is active but neither System.out or System.in are getting redirected.", 'N');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string8 = StringUtils.stripAccents("52[52");
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertEquals("52[52", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.substringBefore((String) null, "5-72jKs<,;e<~%");
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      String string0 = StringUtils.lowerCase("hDo0BE%{8BoVd`mli");
      assertEquals("hdo0be%{8bovd`mli", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "hdo0be%{8bovd`mli", (CharSequence) "hDo0BE%{8BoVd`mli");
      assertEquals(5, int0);
      
      String string1 = StringUtils.chomp("hDo0BE%{8BoVd`mli", "hDo0BE%{8BoVd`mli");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "hDo0BE%{8BoVd`mli", (CharSequence) "", 10);
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "hdo0be%{8bovd`mli";
      stringArray0[1] = "hDo0BE%{8BoVd`mli";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertEquals("h", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("hDo0BE%{8BoVd`mli");
      assertFalse(boolean0);
      
      String string3 = "Y51s\\W#|9\\u_/L";
      String[] stringArray1 = StringUtils.substringsBetween("", "h", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.substringAfter("Aborting to protect against StackOverflowError - output of one loop is the input of another", "hDo0BE%{8BoVd`mli");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "gT(:+$|-";
      stringArray0[1] = "gT(:+$|-";
      stringArray0[2] = "gT(:+$|-";
      stringArray0[3] = "gT(:+$|-";
      stringArray0[4] = "gT(:+$|-";
      stringArray0[5] = "gT(:+$|-";
      stringArray0[6] = "gT(:+$|-";
      stringArray0[7] = "gT(:+$|-";
      stringArray0[8] = "gT(:+$|-";
      String string0 = StringUtils.replaceEach("gT(:+$|-", stringArray0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("gT(:+$|-", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("gT(:+$|-", "'.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char char0 = 'U';
      String string2 = StringUtils.join((Object[]) stringArray0, 'U', 0, 0);
      assertFalse(string2.equals((Object)string0));
      assertEquals(9, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "gT(:+$|-", 108);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(9, stringArray0.length);
      assertEquals("gT(:+$|-", string3);
      assertNotNull(string3);
      
      String string4 = "5I";
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "5I", (-4843));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("gT(:+$|-", 108);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=108.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "J%e";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("J%e", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7Tmeout for vintage @Test must be positive.";
      stringArray0[1] = "7Tmeout for vintage @Test must be positive.";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("7Tmeout for vintage @Test must be positive.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      String string0 = StringUtils.chop("khEX2MeNB1\"v_BNPd7B");
      assertEquals("khEX2MeNB1\"v_BNPd7", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'W';
      charArray0[2] = 'K';
      int int0 = StringUtils.indexOfAny((CharSequence) "khEX2MeNB1\"v_BNPd7", charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'[', 'W', 'K', '\u0000'}, charArray0);
      
      String string1 = StringUtils.chomp("StdIoExtension is active but neither System.out or System.in are getting redirected.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("StdIoExtension is active but neither System.out or System.in are getting redirected.", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "StdIoExtension is active but neither System.out or System.in are getting redirected.", (CharSequence) "StdIoExtension is active but neither System.out or System.in are getting redirected.");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      Locale.setDefault(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      String string2 = locale0.getDisplayVariant((Locale) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string3 = Locale.lookupTag(linkedList0, (Collection<String>) null);
      assertNull(string3);
      assertEquals(0, linkedList0.size());
      
      String string4 = StringUtils.lowerCase("StdIoExtension is active but neither System.out or System.in are getting redirected.", locale0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("stdioextension is active but neither system.out or system.in are getting redirected.", string4);
      assertNotNull(string4);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" doesn't contain any substring.");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '\u0000';
      longArray0[1] = (long) '4';
      String string5 = StringUtils.join(longArray0, '[');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(2, longArray0.length);
      assertEquals("0[52", string5);
      assertArrayEquals(new long[] {0L, 52L}, longArray0);
      assertNotNull(string5);
      
      String string6 = StringUtils.join(charArray0, 'K');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals(4, charArray0.length);
      assertEquals("[KWKKK\u0000", string6);
      assertArrayEquals(new char[] {'[', 'W', 'K', '\u0000'}, charArray0);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("0[52", "khEX2MeNB1\"v_BNPd7");
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOf((CharSequence) "khEX2MeNB1\"v_BNPd7B", (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string7 = StringUtils.chomp(" doesn't contain any substring.", (String) null);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals(" doesn't contain any substring.", string7);
      assertNotNull(string7);
      
      String string8 = locale0.getDisplayScript((Locale) null);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertNotNull(string8);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("StdIoExtension is active but neither System.out or System.in are getting redirected.", 'N');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string9 = StringUtils.stripAccents("0[52");
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string5));
      assertEquals("0[52", string9);
      assertNotNull(string9);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Strings must not be null", "&E3[yiZ&!bCy I<g{", (-1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      String string0 = StringUtils.unwrap("5ND.IL|P", "5ND.IL|P");
      assertEquals("5ND.IL|P", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", '1');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("5ND.IL|P").when(supplier0).get();
      String string2 = StringUtils.getIfBlank("", supplier0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("5ND.IL|P", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-35);
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((-780));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.deleteWhitespace(";Apfd@*=`*C%<1T1");
      assertFalse(string1.equals((Object)string0));
      assertEquals(";Apfd@*=`*C%<1T1", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean2 = StringUtils.isAlphaSpace(";Apfd@*=`*C%<1T1");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("dRCJg QW4`Qw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      String string0 = StringUtils.wrap("1[", 'w');
      assertEquals("w1[w", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "w1[w", (CharSequence) "1[");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "1[", (CharSequence) "1[");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("1[");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.substring("", (-2335));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("Expected exception %s was not thrown.", "org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Expected exception %s was not thrown.", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.isNumericSpace("Locale must not be null");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string3 = StringUtils.defaultIfEmpty("\\lquL.twFp'", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\\lquL.twFp'", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "~~T%CyzC;dbfj/gt~7;`6%fm|*5XGJ~~T%CyzC;dbfj/gt~7;`6%fm|*5XGJ~~T%CyzC;dbfj/gt~7;`6%fm|*5XGJgt~7;`6%fm|*5XGJ");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean4 = StringUtils.equals((CharSequence) "", (CharSequence) " ");
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isBlank("Locale must not be null");
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      
      String string4 = StringUtils.uncapitalize("FyR<yc(H5g|H2");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("fyR<yc(H5g|H2", string4);
      assertNotNull(string4);
      
      boolean boolean6 = StringUtils.isAlphaSpace("Locale must not be null");
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("5yw;u", '(');
      assertEquals("5yw;u", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (double) '(';
      doubleArray0[2] = (double) '(';
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[8];
      locale_CategoryArray0[0] = locale_Category2;
      locale_CategoryArray0[1] = locale_Category1;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category2;
      locale_CategoryArray0[5] = locale_Category3;
      locale_CategoryArray0[6] = locale_Category3;
      locale_CategoryArray0[7] = locale_Category0;
      String string1 = StringUtils.join(locale_CategoryArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, locale_CategoryArray0.length);
      assertEquals("DISPLAYFORMATDISPLAYDISPLAYDISPLAYFORMATFORMATDISPLAY", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("DISPLAYFORMATDISPLAYDISPLAYDISPLAYFORMATFORMATDISPLAY");
      assertTrue(boolean0);
      
      String string2 = StringUtils.removePattern((String) null, "m'-^\"3h:&Y5O'{S");
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate((String) null, 1208, 3060);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("", "");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("", '&', '&');
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replace("/5ZWuBH|L)+hFN", (String) null, "/5ZWuBH|L)+hFN", (-1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("/5ZWuBH|L)+hFN", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center((String) null, 2933, "");
      assertNull(string6);
      
      String string7 = StringUtils.SPACE;
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals(" ", string7);
      assertNotNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string8 = StringUtils.truncate((String) null, 116);
      assertNull(string8);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Fml9qn5b9=%Va&bJ");
      assertEquals("Fml9qn5b9=%Va&bJ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Fml9qn5b9=%Va&bJ", (CharSequence) "Fml9qn5b9=%Va&bJ", 76);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Fml9qn5b9=%Va&bJ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.left("Fml9qn5b9=%Va&bJ", (-1068));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.CR;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Fml9qn5b9=%Va&bJ", "12U#ji");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isMixedCase("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      String string0 = StringUtils.join(objectArray0, 'N');
      assertEquals(4, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("Minimum abbreviation width is %d", 0, 'M');
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.left("", 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replacePattern("", ";^CNUMm", "");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join(objectArray0, 'N');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split("{qaq-b[S9%N7vwO$|aA", "", (-2445));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.joinWith((String) null, objectArray0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals(4, objectArray0.length);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "{qaq-b[S9%N7vwO$|aA");
      assertTrue(boolean0);
      
      String string7 = StringUtils.strip("");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.center("0W+|(CF9l!V{*", 0, "%O~NJzP");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertEquals("0W+|(CF9l!V{*", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.overlay("java.lang.Object@fe8ea81Njava.lang.Object@4febb151Njava.lang.Object@34f8f856Njava.lang.Object@32eadcb9", "69#YCDOdCs-,S", 0, (-2445));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertNotNull(string9);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("{qaq-b[S9%N7vwO$|aA", "69#YCDOdCs-,Sjava.lang.Object@fe8ea81Njava.lang.Object@4febb151Njava.lang.Object@34f8f856Njava.lang.Object@32eadcb9");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "{qaq-b[S9%N7vwO$|aA", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      boolean boolean3 = StringUtils.startsWith("", "69#YCDOdCs-,S");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      String string0 = StringUtils.removeFirst((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceEachRepeatedly("org.junitpioneer.jupiter.RetryingTestExtension", (String[]) null, (String[]) null);
      assertEquals("org.junitpioneer.jupiter.RetryingTestExtension", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.RetryingTestExtension", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.toRootUpperCase((String) null);
      assertNull(string2);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.RetryingTestExtension", (CharSequence) null);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.chop("h");
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("lsoTXG;6PeiI1[^P,j", (String) null, (String) null, 50);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("lsoTXG;6PeiI1[^P,j", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultIfEmpty("mapX|z9EI[a@Ded", "lsoTXG;6PeiI1[^P,j");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("mapX|z9EI[a@Ded", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceIgnoreCase("2#}fUIM|I", "}lFG*fHSGS #$B&", "lsoTXG;6PeiI1[^P,j", 52);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("2#}fUIM|I", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.strip("mapX|z9EI[a@Ded");
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("mapX|z9EI[a@Ded", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.leftPad("}lFG*fHSGS #$B&", 12, ':');
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertEquals("}lFG*fHSGS #$B&", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.join((Object[]) null, '@');
      assertNull(string9);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string10 = StringUtils.join((Object[]) null, "...", (-5053), (-3092));
      assertNull(string10);
      
      String string11 = StringUtils.defaultString("Rgo9&2", (String) null);
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string6));
      assertEquals("Rgo9&2", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "wlpz|EV", (-2877), (-2877));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, 'p');
      assertEquals(1, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '\u0013', 4, (int) '\u0013');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      String string0 = StringUtils.wrap("YS'rlP'$3wxyR_a", "");
      assertEquals("YS'rlP'$3wxyR_a", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("", '\u001E');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 1216, 1216);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("YS'rlP'$3wxyR_a");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) "YS'rlP'$3wxyR_a";
      String string2 = StringUtils.join(objectArray0, " ", 8, (-1560));
      assertFalse(string2.equals((Object)string0));
      assertEquals(13, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "YS'rlP'$3wxyR_a");
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "\n");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.ordinalIndexOf("YS'rlP'$3wxyR_a", "YS'rlP'$3wxyR_a", 10);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      String string0 = StringUtils.removePattern("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Minimum abbreviation width with offset is %d");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimumabbreviationwidthwithoffsetis%d", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.prependIfMissing("", "Minimumabbreviationwidthwithoffsetis%d", charSequenceArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("Minimumabbreviationwidthwithoffsetis%d", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string3 = StringUtils.join(stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringAfter("qw-*Su2dW5=ZGd%_odd", 4465);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = '|';
      charArray0[2] = '_';
      charArray0[3] = '%';
      charArray0[4] = ']';
      charArray0[5] = '#';
      charArray0[6] = 'k';
      charArray0[7] = 'e';
      charArray0[8] = '2';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Minimumabbreviationwidthwithoffsetis%d", charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'B', '|', '_', '%', ']', '#', 'k', 'e', '2'}, charArray0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      String string5 = StringUtils.right("qw-*Su2dW5=ZGd%_odd", 4465);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("qw-*Su2dW5=ZGd%_odd", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Pcm(',_g7", (CharSequence) "Pcm(',_g7", (-2311));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      String string0 = StringUtils.removePattern("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Minimum abbreviation width with offset is %d");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimumabbreviationwidthwithoffsetis%d", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.prependIfMissing("", "Minimumabbreviationwidthwithoffsetis%d", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("Minimumabbreviationwidthwithoffsetis%d", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string3 = StringUtils.join(stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringAfter("qw-*Su2dW5=ZGd%_odd", 4465);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = '|';
      charArray0[2] = '_';
      charArray0[3] = '%';
      charArray0[4] = ']';
      charArray0[5] = '#';
      charArray0[6] = 'k';
      charArray0[7] = 'e';
      charArray0[8] = '2';
      String string5 = StringUtils.unwrap("", '%');
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-477));
      assertEquals((-1), int0);
      
      String string6 = StringUtils.abbreviate("...", 2811, 3732);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("...", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase((String) null, "j&D1#4)P,152<E");
      assertNull(string1);
      
      String string2 = StringUtils.remove((String) null, "Search and Replace array lengths don't match: ");
      assertNull(string2);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string3 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string3);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNull(stringArray1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "j&D1#4)P,152<E", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) " ", (CharSequence) "]Pi&,F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.", (CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.";
      charSequenceArray0[2] = (CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.";
      charSequenceArray0[3] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissing("Expected exactly one annotation to provide an ArgumentSource, found %d.", "", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Locale must not be null", 120);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Locale must not be null", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.equalsAny(charSequenceArray0[1], charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("7", "7", "7");
      assertEquals("7", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "7", (CharSequence) "7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.equalsAny("!", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      String string0 = StringUtils.strip("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Locale must not be null", 120);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Locale must not be null", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "";
      boolean boolean2 = StringUtils.equalsAny("Locale must not be null", charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(2, charSequenceArray1.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 28);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Kq=ryV{(n", (CharSequence) "Kq=ryV{(n");
      assertEquals(0, int0);
      
      String string0 = StringUtils.defaultString("Kq=ryV{(n");
      assertEquals("Kq=ryV{(n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("Kk$D", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Kk$D", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("Kk$D", "");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Kk$D", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("x_D8", '&');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("x_D8", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("Kk$D", "Kk$D", "Kk$D");
      assertNull(string4);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.replaceIgnoreCase(" vs ", "hZ2", "...");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals(" vs ", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 2067);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      String string0 = StringUtils.substringBetween("I^%@!XYU5k", "I^%@!XYU5k", "I^%@!XYU5k");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      String string1 = StringUtils.reverse("...");
      assertTrue(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("...");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceAll("...", "Threshold must not be negative", "`_U-Cg5^GTX$b7^/)Q");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("...", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase(charSequenceArray0[1], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.left("VYAZ[", 76);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("VYAZ[", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("7", "7", "7");
      assertEquals("7", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("7");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "7", (CharSequence) "7");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.replaceOnceIgnoreCase(" ", "DefaultTimeZo(nC", "Mqu9rv%|>Tc.#i6KF+}");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.containsIgnoreCase(" ", "7");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      String string0 = StringUtils.removeFirst((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.center((String) null, 0);
      assertNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.toRootUpperCase((String) null);
      assertNull(string2);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.RetryingTestExtension", (CharSequence) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.replaceIgnoreCase("lsoTXG;6PeiI1[^P,j", (String) null, (String) null, 50);
      assertEquals("lsoTXG;6PeiI1[^P,j", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("mapX|z9EI[a@Ded", "lsoTXG;6PeiI1[^P,j");
      assertFalse(string4.equals((Object)string3));
      assertEquals("mapX|z9EI[a@Ded", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "mapX|z9EI[a@Ded");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      String[] stringArray0 = new String[15];
      stringArray0[0] = "7}xu9nh&];7pq/D";
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("7}xu9nh&];7pq/D", stringArray0);
      assertEquals(15, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      String string0 = StringUtils.center("@Defau@tLocale can only be used with", (-2645), '3');
      assertEquals("@Defau@tLocale can only be used with", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      String string0 = StringUtils.repeat("org.junitpioneer.jupiter.params.DoubleRange", "Method `CartesianProductTest.Sets ", Integer.MIN_VALUE);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Method `CartesianProductTest.Sets ";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.DoubleRange";
      charSequenceArray0[2] = (CharSequence) "Method `CartesianProductTest.Sets ";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.params.DoubleRange";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "org.junitpioneer.jupiter.params.DoubleRange", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      String string2 = StringUtils.center("Method `CartesianProductTest.Sets ", Integer.MIN_VALUE, '+');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Method `CartesianProductTest.Sets ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse("sPj");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("jPs", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("~VZL?r~Ai'U");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("U'iA~r?LZV~", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceAll("ZF6e4Hw%#]7B@", "Fy^v_7r4=pS5,qzz4a", "Method `CartesianProductTest.Sets ");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("ZF6e4Hw%#]7B@", string5);
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "jPs";
      charSequenceArray1[1] = (CharSequence) "ZF6e4Hw%#]7B@";
      charSequenceArray1[2] = (CharSequence) "ZF6e4Hw%#]7B@";
      charSequenceArray1[3] = (CharSequence) "jPs";
      charSequenceArray1[4] = (CharSequence) "jPs";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty(charSequenceArray0[2], (CharSequence) "sPj");
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string5));
      assertTrue(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("Method `CartesianProductTest.Sets ", charSequence0);
      assertNotNull(charSequence0);
      
      charSequenceArray1[5] = (CharSequence) "Method `CartesianProductTest.Sets ";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase(charSequenceArray0[3], charSequenceArray1);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(6, charSequenceArray1.length);
      assertFalse(boolean0);
      
      String string6 = StringUtils.repeat("~VZL?r~Ai'U", "", 0);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.unwrap("U'iA~r?LZV~", "U'iA~r?LZV~");
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("U'iA~r?LZV~", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("maxWith cannot be negative");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("~Ev(Dm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      String string0 = StringUtils.center("g", 307, (String) null);
      assertEquals("                                                                                                                                                         g                                                                                                                                                         ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad(" ", 8211);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.chomp(" ");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat(" ", 8211);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.capitalize(" ");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(" "));
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      String string0 = StringUtils.repeat("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", (int) '@');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      String string0 = StringUtils.repeat("L$", 112);
      assertEquals("L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$L$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      String string0 = StringUtils.chop("khEX2MeNB1\"v_BNPd7B");
      assertEquals("khEX2MeNB1\"v_BNPd7", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'W';
      charArray0[2] = 'K';
      charArray0[3] = '4';
      int int0 = StringUtils.indexOfAny((CharSequence) "khEX2MeNB1\"v_BNPd7", charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'[', 'W', 'K', '4'}, charArray0);
      
      String string1 = StringUtils.chomp("StdIoExtension is active but neither System.out or System.in are getting redirected.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("StdIoExtension is active but neither System.out or System.in are getting redirected.", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "StdIoExtension is active but neither System.out or System.in are getting redirected.", (CharSequence) "StdIoExtension is active but neither System.out or System.in are getting redirected.");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      
      Locale.setDefault(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      
      String string2 = locale0.getDisplayVariant((Locale) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "khEX2MeNB1\"v_BNPd7";
      String string3 = StringUtils.appendIfMissingIgnoreCase("x_D8", (CharSequence) null, charSequenceArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("x_D8", string3);
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) "x_D8";
      String string4 = StringUtils.repeat("khEX2MeNB1\"v_BNPd7B", "", (int) '4');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("khEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7BkhEX2MeNB1\"v_BNPd7B", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripAccents("rtT*Ze-ge");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("rtT*Ze-ge", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rtT*Ze-ge";
      stringArray0[1] = "StdIoExtension is active but neither System.out or System.in are getting redirected.";
      stringArray0[2] = "rtT*Ze-ge";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      String string0 = StringUtils.getDigits("\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 31);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      String string0 = StringUtils.stripToNull("`xRd(6!mBx\"!gJB%\u0003l! ");
      assertEquals("`xRd(6!mBx\"!gJB%\u0003l!", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2295.9226F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-696.0F);
      floatArray0[3] = 3636.721F;
      floatArray0[4] = (-2264.56F);
      String string0 = StringUtils.join(floatArray0, 'j');
      assertEquals(5, floatArray0.length);
      assertEquals("2295.9226j0.0j-696.0j3636.721j-2264.56", string0);
      assertArrayEquals(new float[] {2295.9226F, 0.0F, (-696.0F), 3636.721F, (-2264.56F)}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "&E3[yiZ&!bCy I<g{", (CharSequence) "2295.9226j0.0j-696.0j3636.721j-2264.56");
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat('V', 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("m");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("M", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("M", "&E3[yiZ&!bCy I<g{");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.mid("M", 0, (-844));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("M", "");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.removePattern("", "2295.9226j0.0j-696.0j3636.721j-2264.56");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string5 = StringUtils.center((String) null, 256, "");
      assertNull(string5);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.substring("", 0, (-1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", "' contains '");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string7 = StringUtils.stripToEmpty("Search and Replace array lengths don't match: ");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match:", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertEquals("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("org.apache.commons.lang3.CharUtils", "$k6bKh8");
      assertEquals(0.39, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("", "", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }");
      assertFalse(string1.equals((Object)string0));
      assertEquals("report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("x_D8", 322);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("x_D8", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-119);
      byteArray0[8] = (byte)50;
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Kq=ryV{(n", "Kk$D", "Kq=ryV{(n");
      assertNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "eU";
      stringArray0[2] = null;
      stringArray0[3] = "Kq=ryV{(n";
      stringArray0[4] = "Kk$D";
      stringArray0[5] = null;
      stringArray0[6] = "Kk$D";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "C*`9dSu)");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-107L);
      longArray0[1] = (-1L);
      longArray0[2] = 1610L;
      longArray0[3] = 1502L;
      longArray0[4] = 1614L;
      longArray0[5] = (-1L);
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      longArray0[8] = 384L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'i', (-164), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -164
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("|Cg:x/&/6R<yq");
      assertEquals("|Cg:x/&/6R<yq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("OB@QJ:YWE|3");
      assertEquals("oB@QJ:YWE|3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      String string0 = StringUtils.difference("t3K8onu", "t3K8onu");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "t3K8onu", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp("offset cannot be negative", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.join(charArray0, 'X', 76, 76);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2295.9226F;
      floatArray0[1] = 0.0F;
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("CF{:tq7 qjS", "<Jwy%2RoCZ/!sQE8=t");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.substring("&E3[yiZ&!bCy I<g{", (-2335));
      assertEquals("&E3[yiZ&!bCy I<g{", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("hZ2");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("&E3[yiZ&!bCy I<g{", 19, "CF{:tq7 qjS");
      assertFalse(string1.equals((Object)string0));
      assertEquals("C&E3[yiZ&!bCy I<g{C", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("ive", (String) null, (-858), 872);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("&E3[yiZ&!bCy I<g{", "CF{:tq7 qjS");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      String string0 = StringUtils.swapCase("org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider");
      assertEquals("ORG.JUNITPIONEER.JUPITER.PARAMS.rANGEsOURCEaRGUMENTSpROVIDER", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", "org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", 0, (-1849));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.params.RangeSourceArgumentsProviderorg.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.params.RangeSourceArgumentsProviderorg.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", (char[]) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceChars((String) null, "ORG.JUNITPIONEER.JUPITER.PARAMS.rANGEsOURCEaRGUMENTSpROVIDER", "");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{";
      String string0 = StringUtils.chomp("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{");
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.wrapIfMissing("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.ordinalIndexOf("m#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{m", "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 5);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.leftPad("Don't clear/set the same entry more than once.", (-1), "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Don't clear/set the same entry more than once.", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, 's');
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Don't clear/set the same entry more than once.:", "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 5);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(5, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string5 = StringUtils.center((String) null, (-406));
      assertNull(string5);
      
      String string6 = StringUtils.substring("m#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{m", 5, 5);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.swapCase((String) null);
      assertNull(string7);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("QR(En,AT2", "p{InCombiningDiacriticalMarks}+");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.left("CF{:tq7 qjS", 32);
      assertEquals("CF{:tq7 qjS", string0);
      assertNotNull(string0);
      
      String string1 = ";^CNUMm";
      String string2 = StringUtils.replacePattern("l ['rb~m\"1}ACf)v", ";^CNUMm", ";^CNUMm");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("l ['rb~m\"1}ACf)v", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, '%');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(188, stringArray0.length);
      assertEquals("aa%ab%ae%af%ak%am%an%ar%as%av%ay%az%ba%be%bg%bh%bi%bm%bn%bo%br%bs%ca%ce%ch%co%cr%cs%cu%cv%cy%da%de%dv%dz%ee%el%en%eo%es%et%eu%fa%ff%fi%fj%fo%fr%fy%ga%gd%gl%gn%gu%gv%ha%he%hi%ho%hr%ht%hu%hy%hz%ia%id%ie%ig%ii%ik%in%io%is%it%iu%iw%ja%ji%jv%ka%kg%ki%kj%kk%kl%km%kn%ko%kr%ks%ku%kv%kw%ky%la%lb%lg%li%ln%lo%lt%lu%lv%mg%mh%mi%mk%ml%mn%mo%mr%ms%mt%my%na%nb%nd%ne%ng%nl%nn%no%nr%nv%ny%oc%oj%om%or%os%pa%pi%pl%ps%pt%qu%rm%rn%ro%ru%rw%sa%sc%sd%se%sg%si%sk%sl%sm%sn%so%sq%sr%ss%st%su%sv%sw%ta%te%tg%th%ti%tk%tl%tn%to%tr%ts%tt%tw%ty%ug%uk%ur%uz%ve%vi%vo%wa%wo%xh%yi%yo%za%zh%zu", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split((String) null, "{qaq-b[S9%N7vwO$|aA", 15);
      assertNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("CF{:tq7 qjS", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.joinWith("%&f\"/SG0gi1Gox^rf", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("%&f\"/SG0gi1Gox^rf%&f\"/SG0gi1Gox^rf", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      String string0 = StringUtils.overlay("1lNAr1", "object", 61, 61);
      assertEquals("1lNAr1object", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "1lNAr1object", "K");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Fml9qn5b9=%Va&bJ");
      assertEquals("Fml9qn5b9=%Va&bJ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "Fml9qn5b9=%Va&bJ", 49);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.left((String) null, (-1));
      assertNull(string1);
      
      String string2 = StringUtils.CR;
      assertFalse(string2.equals((Object)string0));
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "ive");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("ive");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("T", stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.overlay("R PBnh?V+b&k3", (String) null, 256, (-497));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Kq=ryV{(n", "Kk$D", "Kq=ryV{(n");
      assertNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "eU";
      stringArray0[2] = null;
      stringArray0[3] = "Kq=ryV{(n";
      String string1 = StringUtils.replaceIgnoreCase("}lFG*fHSGS #$B&", "y@W`B:eca`.", "hZ2", 66);
      assertEquals("}lFG*fHSGS #$B&", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("Kk$D");
      assertFalse(string2.equals((Object)string1));
      assertEquals("Kk$D", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("Q$ILqAx;h&acB/.S1E0", 66, 'j');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjQ$ILqAx;h&acB/.S1E0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, 'j');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(7, stringArray0.length);
      assertEquals("jeUjjKq=ryV{(njjj", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      String string0 = StringUtils.left("\"ps^E~3h1uNX", 56);
      assertEquals("\"ps^E~3h1uNX", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\"ps^E~3h1uNX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("}HP`NwR");
      assertEquals("}HP`NwR", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("}HP`NwR", '`');
      assertFalse(string1.equals((Object)string0));
      assertEquals("NwR`}HP", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("NwR`}HP");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("`l6^)5U=zm*>", "`l6^)5U=zm*>", "`l6^)5U=zm*>");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 3
         // `l6^)5U=zm*>
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      String string0 = StringUtils.join(objectArray0, 'N');
      assertEquals(4, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("Minimum abbreviation width is %d", 0, 'M');
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.left("", 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replacePattern("", ";^CNUMm", "");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join(objectArray0, 'N');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split("{qaq-b[S9%N7vwO$|aA", "", (-2445));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.joinWith((String) null, objectArray0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals(4, objectArray0.length);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "{qaq-b[S9%N7vwO$|aA");
      assertTrue(boolean0);
      
      String string7 = StringUtils.strip("");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.center("0W+|(CF9l!V{*", 0, "%O~NJzP");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertEquals("0W+|(CF9l!V{*", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.overlay("java.lang.Object@30e918a4Njava.lang.Object@3e242d7fNjava.lang.Object@4690241dNjava.lang.Object@6f5fd240", "69#YCDOdCs-,S", 0, (-2445));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("{qaq-b[S9%N7vwO$|aA", "69#YCDOdCs-,Sjava.lang.Object@30e918a4Njava.lang.Object@3e242d7fNjava.lang.Object@4690241dNjava.lang.Object@6f5fd240");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Object varargs must not be null", (CharSequence) "Object varargs must not be null");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("", "", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("", 0, "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 348.0F;
      floatArray0[1] = (float) 0;
      String string2 = StringUtils.join(floatArray0, ':');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, floatArray0.length);
      assertEquals("348.0:0.0", string2);
      assertArrayEquals(new float[] {348.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      String string0 = StringUtils.leftPad("!|wRNdDvH", 256, 'H');
      assertEquals("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!|wRNdDvH", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!|wRNdDvH", 256, 2);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.wrapIfMissing("", 'r');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeStart("", "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH!|wRNdDvH");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = "";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = "sY[ul|YM<_1xo1=>";
      String[] stringArray1 = StringUtils.splitByWholeSeparator("sY[ul|YM<_1xo1=>", "sY[ul|YM<_1xo1=>");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Locale must not be null", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 188
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "#K'7.k_kA@8\\n[PEi.qykYNT$m\"=sK6jo{";
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.wrap("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray2 = new String[2];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{";
      stringArray2[1] = "m#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{m";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", stringArray0, stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("bgx5K?j&S8E", "bgx5K?j&S8E");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEachRepeatedly("bgx5K?j&S8E", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("bgx5K?j&S8E", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      String string0 = StringUtils.wrap("' matches '", '{');
      assertEquals("{' matches '{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "{' matches '{", (CharSequence) "{' matches '{");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("{' matches '{");
      assertTrue(string1.equals((Object)string0));
      assertEquals("{' matches '{", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{Z`!ZuW2_", "x_D8");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.FORMAT;
      locale_CategoryArray0[6] = locale_Category6;
      String string2 = StringUtils.join(locale_CategoryArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(7, locale_CategoryArray0.length);
      assertEquals("FORMATFORMATDISPLAYFORMATDISPLAYDISPLAYFORMAT", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      String string0 = "StdIo_Std_In";
      int int0 = StringUtils.compare("StdIo_Std_In", "StdIo_Std_In", false);
      assertEquals(0, int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        linkedList0.subList(10, 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 7
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      int int0 = StringUtils.compare("ugt", "ugt");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      String string0 = StringUtils.wrap("M-VUFC", 'Q');
      assertEquals("QM-VUFCQ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "QM-VUFCQ", (CharSequence) "M-VUFC");
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("QM-VUFCQ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("QM-VUFCQ", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("QM-VUFCQ", "M-VUFC");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substringAfterLast("Object varargs must not be null", (-2697));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "QM-VUFCQ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 887, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("7", "7");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("7", 2771, 2771);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "\r");
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat('8', 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.substring("_u@vs.jVijgFmM|B", (-806), (-806));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("_u@vs.jVijgFmM|B", "M {2Lv0v,sw)pIl9g,", true);
      assertFalse(int1 == int0);
      assertEquals((-14), int1);
      
      String string1 = StringUtils.chomp("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("Search and Replace array lengths don't match: 2>6W<z");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: 2>6W<z", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("org.apache.commons.lang3.StringUtils", 0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "No instructions to disableNo instructions to disable";
      stringArray0[1] = "lUE";
      stringArray0[2] = "";
      stringArray0[3] = "Timeout for vintage @Test must be positive.";
      stringArray0[4] = "Search and Replace array lengths don't match: 2>6W<z";
      stringArray0[5] = "org.apache.commons.lang3.CharUtils";
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(6, stringArray0.length);
      assertEquals("No instructions to disableNo instructions to disable", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("org.apache.commons.lang3.CharUtils", "...offset cannot be negative");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("org.apache.commons.lang3.CharUtil", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("7Ls@~BoJY,NMcA", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcAAborting to protect against StackOverflowError - output of one loop is the input of another", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      String string0 = StringUtils.mid("3", 12, (-1521));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2295.9226F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-696.0F);
      floatArray0[3] = 3636.721F;
      floatArray0[4] = (-2264.56F);
      String string0 = StringUtils.join(floatArray0, 'j');
      assertEquals(5, floatArray0.length);
      assertEquals("2295.9226j0.0j-696.0j3636.721j-2264.56", string0);
      assertArrayEquals(new float[] {2295.9226F, 0.0F, (-696.0F), 3636.721F, (-2264.56F)}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "&E3[yiZ&!bCy I<g{", (CharSequence) "2295.9226j0.0j-696.0j3636.721j-2264.56");
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat('V', 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "&E3[yiZ&!bCy I<g{");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.mid("", 0, (-844));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.removePattern("", "2295.9226j0.0j-696.0j3636.721j-2264.56");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string5 = StringUtils.center((String) null, 256, "");
      assertNull(string5);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.substring("", 0, (-1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("(ObDok{[IyA", "(ObDok{[IyA", "_C");
      assertEquals("_C", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "_C";
      charSequenceArray0[1] = (CharSequence) "(ObDok{[IyA";
      charSequenceArray0[3] = (CharSequence) "_C";
      charSequenceArray0[4] = (CharSequence) "_C";
      String string1 = StringUtils.replaceEachRepeatedly("z--", (String[]) null, (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("z--", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "z--", "_C");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithAny("1lNAr1", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.toRootUpperCase("_C");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("_C", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "(ObDok{[IyA", (CharSequence) "z--");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.containsOnly(charSequenceArray0[1], "(ObDok{[IyA");
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("_C");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "QA%+$(O", "QA%+$(O");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      String string0 = StringUtils.rightPad("e.+Q^Du~m-o", (-2454), (String) null);
      assertEquals("e.+Q^Du~m-o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("e.+Q^Du~m-o", "e.+Q^Du~m-o", (CharSequence[]) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("e.+Q^Du~m-o", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("e.+Q^Du~m-o", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeAll("e.+Q^Du~m-o", "Threshold must not be negative");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("e.+Q^Du~m-o", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = StringUtils.getBytes("", (Charset) null);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      String string3 = StringUtils.replaceIgnoreCase("e.+Q^Du~m-o", "e.+Q^Du~m-o", "e.+Q^Du~m-o");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("e.+Q^Du~m-o", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase("e.+Q^Du~m-o");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "e.+Q^Du~m-o", (CharSequence[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string4 = locale0.getDisplayLanguage();
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Italian", string4);
      assertNotNull(string4);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      assertNotNull(list0);
      assertFalse(list0.contains(locale0));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string5 = StringUtils.upperCase("", locale0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      boolean boolean3 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      int int0 = StringUtils.compare("e.+Q^Du~m-o", "Threshold must not be negative", true);
      assertEquals(17, int0);
      
      boolean boolean4 = StringUtils.isAllLowerCase("e.+Q^Du~m-o");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'e';
      charArray0[2] = '2';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "e.+Q^Du~m-o", charArray0);
      assertFalse(int1 == int0);
      assertEquals(3, charArray0.length);
      assertEquals(1, int1);
      assertArrayEquals(new char[] {'2', 'e', '2'}, charArray0);
      
      Locale locale1 = Locale.GERMANY;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de_DE", locale1.toString());
      assertEquals("", locale1.getVariant());
      
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      assertTrue(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      
      String string6 = StringUtils.right((String) null, (-2454));
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "7", "maxWith cannot be negative");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Timeout for vintage @Test must be positive.", "J");
      assertEquals("JTimeout for vintage @Test must be positive.J", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Timeout for vintage @Test must be positive.", "Y #&c");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Timeout for vintage @Test must be positive.", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "JTimeout for vintage @Test must be positive.J", "J");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("Y #&c");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric("Y #&c");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("r?XkewNpi");
      assertEquals("r?XkewNpi", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("r?XkewNpi", "r?XkewNpi");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      String string0 = StringUtils.removeFirst((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceEachRepeatedly("org.junitpioneer.jupiter.RetryingTestExtension", (String[]) null, (String[]) null);
      assertEquals("org.junitpioneer.jupiter.RetryingTestExtension", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.RetryingTestExtension", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.toRootUpperCase((String) null);
      assertNull(string2);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.RetryingTestExtension", (CharSequence) null);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.chop("h");
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      String string0 = StringUtils.lowerCase("/hSr(B0Y2y");
      assertEquals("/hsr(b0y2y", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("do+u!-wfGH8S<WF", "", 56);
      assertFalse(string1.equals((Object)string0));
      assertEquals("do+u!-wfGH8S<WF", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "do+u!-wfGH8S<WF", (CharSequence) "");
      assertEquals(15, int0);
      
      String string2 = StringUtils.chomp("VEs", "W4_4}E{");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("VEs", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("m) >fo>Cwx9|0vP", "W@+Ya^J^w''");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("m) >fo>Cwx9|0vP", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("do+u!-wfGH8S<WF");
      assertFalse(boolean0);
      
      String string4 = StringUtils.right("VEs", 56);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("VEs", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStart("", "Loj.[_B%_^2&!Q<aTI");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isMixedCase("VEs");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "R", "R");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("}'|9TsBG@Khc", "org.junitpioneer.jupiter.params.ByteRange", (CharSequence[]) null);
      assertEquals("org.junitpioneer.jupiter.params.ByteRange}'|9TsBG@Khc", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("org.junitpioneer.jupiter.params.ByteRange", "org.junitpioneer.jupiter.params.ByteRange}'|9TsBG@Khc");
      assertEquals(0.98, double0, 0.01);
      
      String string1 = StringUtils.substringAfter("}'|9TsBG@Khc", 245);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      String string0 = StringUtils.wrap("YS'rlP'$3wxyR_a", "");
      assertEquals("YS'rlP'$3wxyR_a", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("", '\u001E');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 1216, 1216);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("YS'rlP'$3wxyR_a");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "\r", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripEnd("O", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("O", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.right("IXiac", 56);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("IXiac", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootLowerCase(" ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isMixedCase("O");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      String string0 = StringUtils.removePattern("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Minimum abbreviation width with offset is %d");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimumabbreviationwidthwithoffsetis%d", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.prependIfMissing("", "Minimumabbreviationwidthwithoffsetis%d", charSequenceArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("Minimumabbreviationwidthwithoffsetis%d", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string3 = StringUtils.join(stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringAfter("qw-*Su2dW5=ZGd%_odd", 4465);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = '|';
      charArray0[2] = '_';
      charArray0[3] = '%';
      charArray0[4] = ']';
      charArray0[5] = '#';
      charArray0[6] = 'k';
      charArray0[7] = 'e';
      charArray0[8] = '2';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Minimumabbreviationwidthwithoffsetis%d", charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'B', '|', '_', '%', ']', '#', 'k', 'e', '2'}, charArray0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(locale0));
      assertEquals(0, linkedList0.size());
      
      Locale locale1 = Locale.lookup(vector0, linkedList0);
      assertNull(locale1);
      assertFalse(linkedList0.contains(locale0));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, linkedList0.size());
      
      String string5 = StringUtils.lowerCase("Minimum abbreviation width with offset is %d", locale0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("minimum abbreviation width with offset is %d", string5);
      assertNotNull(string5);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "", (-875));
      assertFalse(boolean0);
      
      String string0 = StringUtils.abbreviate("org.junitpioneer.jupiter.CartesianProductTestExtension", 115, 1673);
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtension", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("qCqn");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "qCqn";
      stringArray0[1] = "\ntfe(%@g*crPK";
      stringArray0[2] = "qCqn";
      stringArray0[3] = "\"P~";
      String string1 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Display name '", (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean2 = StringUtils.isNoneEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'd');
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '1';
      charArray0[2] = '9';
      charArray0[3] = 'G';
      String string0 = StringUtils.join(charArray0, 'u', 462, 0);
      assertEquals(4, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'/', '1', '9', 'G'}, charArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 459);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.unwrap("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)160;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short)0;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'n', (-869), 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -869
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("", "");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("", 16, '&');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("&&&&&&&&&&&&&&&&", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.reverse("");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceAll("", (String) null, "CartesianProductTest can not have a non-empty display name");
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("Fy^v_7r4=pS5,qzz4a", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)51;
      String string7 = StringUtils.join(byteArray0, '&');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertEquals(4, byteArray0.length);
      assertEquals("0&46&120&51", string7);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)120, (byte)51}, byteArray0);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, '4');
      assertEquals(0, intArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      String string0 = StringUtils.reverse("Y");
      assertEquals("Y", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("E\u0003<hvM96({QquHB", "", (CharSequence[]) null);
      assertEquals("E\u0003<hvM96({QquHB", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "M-+'GCM-+'GC", (CharSequence) "M-+'GCM-+'GC");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("\n", "Threshold must not be negative#1de6?)A vs ", "Threshold must not be negative#1de6?)A vs ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 35
         // Threshold must not be negative#1de6?)A vs 
         //                                    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.prependIfMissing("I>pd9U-zCff)gq7", "Threshold must not be negative", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("Threshold must not be negativeI>pd9U-zCff)gq7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.repeat("Y+&c", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 32, "org.junitpioneer.jupiter.CartesianProductTestExtension");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "G5TAcKs('*0.\"");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceFirst("G5TAcKs('*0.\"", (String) null, "qCqn");
      assertEquals("G5TAcKs('*0.\"", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (-875));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.substring((String) null, (-875), 32);
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate("org.junitpioneer.jupiter.CartesianProductTestExtension", 32, 1673);
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtension", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "org.junitpioneer.jupiter.CartesianProductTestExtension");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.CartesianProductTestExtension", (String) null);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtension", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isAlphanumeric("qCqn");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", (CharSequence) "qCqn");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string6 = StringUtils.appendIfMissingIgnoreCase("org.junitpioneer.jupiter.CartesianProductTestExtension", "", (CharSequence[]) null);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtension", string6);
      assertNotNull(string6);
      
      String string7 = null;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("G5TAcKs('*0.\"", "6>LTCE^\":", (-875));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      String string0 = StringUtils.repeat("", 76);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("I>pd9U-zCffgq7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("R", "R", (-251));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 180);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(",", "dm}AbOgF5ug7I");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.prependIfMissing(",", "dm}AbOgF5ug7I", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(",", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      String string0 = StringUtils.right("1lNAr1", (-317));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      String string0 = StringUtils.right("Y #&c_", 1182);
      assertEquals("Y #&c_", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%Te'Qq8qt", "YzB'9,", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      String string1 = StringUtils.join(doubleArray0, 'K');
      assertEquals(0, doubleArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("or any enclosing class", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertEquals("or any enclosing class", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((long[]) null, ',', 0, 4601);
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing(" ", 'T');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("T T", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "clone");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.abbreviate("\n", 7, 19);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("\n", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string6 = StringUtils.center("or any enclosing class", 19, "or any enclosing class");
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("or any enclosing class", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isNotBlank("clone");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "or any enclosing class", "or any enclosing class");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean3 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      String string0 = StringUtils.removeFirst((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceEachRepeatedly("org.junitpioneer.jupiter.RetryingTestExtension", (String[]) null, (String[]) null);
      assertEquals("org.junitpioneer.jupiter.RetryingTestExtension", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.RetryingTestExtension", (CharSequence) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.chop("h");
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      String string3 = StringUtils.join((char[]) null, '/');
      assertNull(string3);
      
      String string4 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      String string0 = StringUtils.chomp("%9b_MI^@Sy&");
      assertEquals("%9b_MI^@Sy&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "wkn@lMQd(Cv%r", "wkn@lMQd(Cv%r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfterLast("4 t_M(O:]SKdf;)", "RW-N?s'^5tUtqXM");
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = StringUtils.chomp("{' matches '{");
      assertFalse(string2.equals((Object)string1));
      assertEquals("{' matches '{", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      Locale.setDefault(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      String string3 = locale0.getDisplayVariant((Locale) null);
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string4 = Locale.lookupTag(linkedList0, (Collection<String>) null);
      assertNull(string4);
      assertEquals(0, linkedList0.size());
      
      String string5 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string5);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string6 = StringUtils.join((long[]) null, 'K');
      assertNull(string6);
      
      String string7 = StringUtils.join(charArray0, 'K');
      assertFalse(string7.equals((Object)string2));
      assertEquals(0, charArray0.length);
      assertEquals("", string7);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("StdIoExtension is active but neither System.out or System.in are getting redirected.", (CharSequence) null);
      assertFalse(boolean0);
      
      int int3 = StringUtils.indexOf((CharSequence) null, (-1));
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      String string8 = StringUtils.chomp("StdIoExtension is active but neither System.out or System.in are getting redirected.", "");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertEquals("StdIoExtension is active but neither System.out or System.in are getting redirected.", string8);
      assertNotNull(string8);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("YdN_bU8[ji+p|'Hbd", 'a');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string9 = StringUtils.stripAccents((String) null);
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "vuErvuwfp895!4", 1834);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "MC|fNm\"~sQjUY", (CharSequence) "MC|fNm\"~sQjUY");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase((String) null, "j&D1#4)P,152<E");
      assertNull(string1);
      
      String string2 = StringUtils.wrap("{' matches '{", 'p');
      assertEquals("p{' matches '{p", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("p{' matches '{p", "Search and Replace array lengths don't match: ");
      assertTrue(string3.equals((Object)string2));
      assertEquals("p{' matches '{p", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeIgnoreCase("hZ2", "d>Uym;=bS_BZ!q");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("hZ2", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isBlank("hZ2");
      assertFalse(boolean0);
      
      String string5 = StringUtils.uncapitalize("g@nIHr9ipz/W");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("g@nIHr9ipz/W", string5);
      assertNotNull(string5);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 'p';
      floatArray0[2] = (float) 'p';
      String string6 = StringUtils.join(floatArray0, 'p');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals(3, floatArray0.length);
      assertEquals("0.0p112.0p112.0", string6);
      assertArrayEquals(new float[] {0.0F, 112.0F, 112.0F}, floatArray0, 0.01F);
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Search and Replace array lengths don't match: ", (char[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '7';
      longArray0[1] = (long) '7';
      String string0 = StringUtils.join(longArray0, '7');
      assertEquals(2, longArray0.length);
      assertEquals("55755", string0);
      assertArrayEquals(new long[] {55L, 55L}, longArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "55755", (CharSequence) "55755");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      String string0 = StringUtils.chomp("}'|9TsBGvKc", "}'|9TsBGvKc");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      String string0 = StringUtils.stripAccents("?");
      assertEquals("?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      String string0 = StringUtils.removeEnd("a", "");
      assertEquals("a", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = StringUtils.join(charArray0, '$');
      assertEquals(6, charArray0.length);
      assertEquals("\u0000$\u0000$\u0000$\u0000$\u0000$\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      String string0 = StringUtils.getDigits("e~");
      assertEquals("", string0);
      assertNotNull(string0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("e~"));
      assertEquals(0, priorityQueue0.size());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>(priorityQueue0);
      assertNotNull(arrayList0);
      assertFalse(priorityQueue0.contains("e~"));
      assertFalse(arrayList0.contains("e~"));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = priorityQueue0.containsAll(arrayList0);
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains("e~"));
      assertFalse(arrayList0.contains("e~"));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean1 = priorityQueue0.add(object0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(object0));
      assertFalse(priorityQueue0.contains("e~"));
      assertEquals(1, priorityQueue0.size());
      
      String string1 = StringUtils.join((List<?>) arrayList0, "", 10, 10);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(priorityQueue0.contains(object0));
      assertFalse(priorityQueue0.contains("e~"));
      assertFalse(arrayList0.contains("e~"));
      assertEquals(1, priorityQueue0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean2 = arrayList0.add((Object) priorityQueue0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(priorityQueue0.contains(object0));
      assertFalse(priorityQueue0.contains("e~"));
      assertFalse(arrayList0.contains("e~"));
      assertEquals(1, priorityQueue0.size());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "e~", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.remove("u*0SOx", 'U');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("u*0SOx", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootUpperCase("");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean3 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.isAlpha("e~");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isMixedCase("");
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "u*0SOx";
      stringArray0[1] = "";
      stringArray0[2] = "u*0SOx";
      String string4 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals(3, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      String string0 = StringUtils.chomp("Y");
      assertEquals("Y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("Y");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Y", (CharSequence) "Y");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Y";
      String string1 = StringUtils.abbreviate("", 122, 4756);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("", "");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[2] = 'i';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Y", charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'i', '\u0000', 'i'}, charArray0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(locale0));
      assertEquals(0, linkedList0.size());
      
      Locale locale1 = Locale.lookup(vector0, linkedList0);
      assertNull(locale1);
      assertFalse(linkedList0.contains(locale0));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      String string3 = StringUtils.lowerCase("HC", locale0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("hc", string3);
      assertNotNull(string3);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Could not resolve parameter of type %s.");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      String string0 = StringUtils.rightPad("rA", (-309), "rA");
      assertEquals("rA", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      String string0 = StringUtils.truncate("FS!llCcEOl", 3081);
      assertEquals("FS!llCcEOl", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      
      String string1 = StringUtils.lowerCase("FS!llCcEOl", locale0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("fs!llcceol", string1);
      assertNotNull(string1);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      
      String string2 = StringUtils.replaceChars("offset cannot be negative", '!', '[');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("FS!llCcEOl");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("FS!llCcEOl", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replace("FS!llCcEOl", "FS!llCcEOl", "FS!llCcEOl");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("FS!llCcEOl", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("fs!llcceol", 3081);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("fs!llcceol", string5);
      assertNotNull(string5);
      
      Locale locale2 = Locale.JAPAN;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      assertEquals("", locale2.getVariant());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("JP", locale2.getCountry());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("ja", locale2.getLanguage());
      
      String string6 = StringUtils.upperCase(" ", locale0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertEquals(" ", string6);
      assertNotNull(string6);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      
      int int0 = StringUtils.countMatches((CharSequence) "offset cannot be negative", 'q');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.rightPad("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are empty.", (-1561), (String) null);
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are empty.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("64{S3T}s", 331);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("[e", "64{S3T}s");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("[e", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("[e");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("[e", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrap((String) null, "[e");
      assertNull(string5);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string6 = StringUtils.unwrap("", '2');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are empty.");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "[e";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are empty.";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "[e";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "[e";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare("[e", "p{InCombiningDiacriticalMarks}+");
      assertFalse(int1 == int0);
      assertEquals((-21), int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "", (-2621));
      assertNull(stringArray0);
      
      String string7 = StringUtils.upperCase((String) null, (Locale) null);
      assertNull(string7);
      
      String string8 = null;
      // Undeclared exception!
      try { 
        Charset.forName("p{InCombiningDiacriticalMarks}+");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // p{InCombiningDiacriticalMarks}+
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("YS'rlP'$3wxyR_a", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("`", "la");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("YS'rlP'$3wxyR_a", "\n", 78);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.trimToEmpty("\r");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("\r");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "338.@(<(Ww0z", charArray0);
      assertFalse(int1 == int0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'U'}, charArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("la");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.junitpioneer.jupiter.DefaultLocaleExtension", (-1837));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", 8189, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "\\u";
      String string1 = StringUtils.prependIfMissing(string0, string0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("\\u", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((char[]) null, ':');
      assertNull(string1);
      
      int int0 = StringUtils.compare((String) null, "rams.ShortRange");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap(" !", "\r");
      assertFalse(string2.equals((Object)string0));
      assertEquals(" !", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      String string0 = StringUtils.truncate("^N|7*]}z%O1T'", 71, 68);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'K');
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter("^N|7*]}z%O1T'", 817);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("t3K8onu");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("t3K8onu", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("maxWith cannot be negative", "!g%X0Xuel1j$\")Mx;7", "t3K8onu");
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.isEmpty("t3K8onu");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.leftPad("maxWith cannot be negative", 71, "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("                                             maxWith cannot be negative", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      StringUtils.rightPad("!g%X0Xuel1j$\")Mx;7", 65536, 'K');
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short)1909;
      shortArray0[2] = (short)108;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)35;
      shortArray0[5] = (short)1254;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)2625;
      String string0 = StringUtils.join(shortArray0, '+');
      assertEquals(8, shortArray0.length);
      assertEquals("32+1909+108+1+35+1254+2+2625", string0);
      assertArrayEquals(new short[] {(short)32, (short)1909, (short)108, (short)1, (short)35, (short)1254, (short)2, (short)2625}, shortArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "32+1909+108+1+35+1254+2+2625", "32+1909+108+1+35+1254+2+2625");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("[x}#S!tx+\"$}ab~$j", 29);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j", ".*{[0-9]+}.*", "32+1909+108+1+35+1254+2+2625");
      assertNull(string2);
      
      int int0 = StringUtils.length(".*{[0-9]+}.*");
      assertEquals(12, int0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (Charset) null);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("32+1909+108+1+35+1254+2+2625", "32+1909+108+1+35+1254+2+2625", (short)1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.trimToEmpty("[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.normalizeSpace("[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("[x}#S!tx+\"$}ab~$j");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("[x}#S!tx+\"$}ab~$j", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad((String) null, (int) (short)1909, '+');
      assertNull(string6);
      
      String string7 = StringUtils.join(shortArray0, '+', 11, (-2064888120));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertEquals(8, shortArray0.length);
      assertEquals("", string7);
      assertArrayEquals(new short[] {(short)32, (short)1909, (short)108, (short)1, (short)35, (short)1254, (short)2, (short)2625}, shortArray0);
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("vs ", "[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j", "[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 492
         // [x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j[x}#S!tx+\"$}ab~$j

         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      String string0 = StringUtils.upperCase("qCqnorg.junitpioneer.jupiter.CartesianProductTestExtension", locale0);
      assertEquals("QCQNORG.JUNITPIONEER.JUPITER.CARTESIANPRODUCTTESTEXTENSION", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "QCQNORG.JUNITPIONEER.JUPITER.CARTESIANPRODUCTTESTEXTENSION", (CharSequence[]) stringArray0);
      assertEquals(250, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("\r", "\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase(", Length: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[2], (CharSequence) "", 928);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.getDigits("dqgi!+zt!u");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 928;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 928;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'e', 67, 928);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = StringUtils.getBytes("offset cannot be negative", charset0);
      assertEquals(25, byteArray0.length);
      assertNotNull(byteArray0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      String string0 = StringUtils.rightPad("e.+Q^Du~m-o", (-2454), (String) null);
      assertEquals("e.+Q^Du~m-o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("e.+Q^Du~m-o", "e.+Q^Du~m-o", (CharSequence[]) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("e.+Q^Du~m-o", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("e.+Q^Du~m-o", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeAll("e.+Q^Du~m-o", "e.+Q^Du~m-o");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("e.+Q^Du~m-o", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = StringUtils.getBytes("", (Charset) null);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      String string3 = StringUtils.replaceIgnoreCase("e.+Q^Du~m-o", "e.+Q^Du~m-o", "e.+Q^Du~m-o");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("e.+Q^Du~m-o", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase("e.+Q^Du~m-o");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "e.+Q^Du~m-o", (CharSequence[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      String string4 = locale0.getDisplayLanguage();
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Italian", string4);
      assertNotNull(string4);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      assertNotNull(list0);
      assertFalse(list0.contains(locale0));
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string5 = StringUtils.upperCase("", locale0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      boolean boolean3 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int0 = StringUtils.compare("e.+Q^Du~m-o", "e.+Q^Du~m-o", true);
      assertEquals(0, int0);
      
      boolean boolean4 = StringUtils.isAllLowerCase("e.+Q^Du~m-o");
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isBlank("e.+Q^Du~m-o");
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      String string6 = StringUtils.rightPad((String) null, 98, "");
      assertNull(string6);
      
      String string7 = StringUtils.removePattern("e.+Q^Du~m-o", "e.+Q^Du~m-o");
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertEquals("e.+Q^Du~m-o", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.substringBetween("y{Y#%c*<r-.A\"q)mW", "e.+Q^Du~m-o", "9/");
      assertNull(string8);
      
      String string9 = StringUtils.rightPad("9/", 0, '~');
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertEquals("9/", string9);
      assertNotNull(string9);
      
      int int1 = StringUtils.compare((String) null, "e.+Q^Du~m-o", false);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string10 = StringUtils.strip("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertEquals("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#VI.uCG;woI6", "{4'LV");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "{4'LV", charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = StringUtils.removeEndIgnoreCase("Never disable parameterized test method itself", "Never disable parameterized test method itself");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(" ", "");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) " ", (CharSequence) " ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter((String) null, "");
      assertNull(string2);
      
      String string3 = StringUtils.removeEnd((String) null, "org.junitpioneer.jupiter.params.Range");
      assertNull(string3);
      
      String string4 = StringUtils.unwrap("DFeH$", 'f');
      assertFalse(string4.equals((Object)string1));
      assertEquals("DFeH$", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip((String) null);
      assertNull(string5);
      
      boolean boolean0 = StringUtils.isAlpha("DFeH$");
      assertFalse(boolean0);
      
      String string6 = StringUtils.center("4,k 2%j|wMe1L", (-522347638), "");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("4,k 2%j|wMe1L", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.overlay((String) null, "", 122, (-1102));
      assertNull(string7);
      
      String string8 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string8);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string9 = StringUtils.stripToNull((String) null);
      assertNull(string9);
      
      boolean boolean2 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAsciiPrintable("4,k 2%j|wMe1L");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("5yw;u");
      assertFalse(string1.equals((Object)string0));
      assertEquals("5yw;u", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("\n", "tfe(%@g*crPK");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '&';
      charArray0[3] = '4';
      int int1 = StringUtils.indexOfAny((CharSequence) "5yw;u", charArray0);
      assertFalse(int1 == int0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'4', '4', '&', '4'}, charArray0);
      
      String string4 = StringUtils.getDigits("");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.remove("5yw;u", "&J;*g6S.BM");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("5yw;u", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trim((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.removeStart("p{InCombiningDiacriticalMarks}+", "5yw;u");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertEquals("p{InCombiningDiacriticalMarks}+", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.defaultString("org.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesi", " ");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtensionorg.junitpioneer.jupiter.Cartesi", string8);
      assertNotNull(string8);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      String string9 = StringUtils.right("", (-1112));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertEquals("", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.removeEndIgnoreCase(",`i|q|l(/g*Jn:", "R:BuD...");
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertEquals(",`i|q|l(/g*Jn:", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.", string0);
      assertNotNull(string0);
      
      int int0 = (-2611);
      int int1 = StringUtils.lastIndexOf((CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.", 0, (-2611));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Expected exactly one annotation to provide an ArgumentSource, found %d.", "Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2611);
      doubleArray0[4] = (double) (-2611);
      doubleArray0[5] = (double) (-2611);
      String string1 = StringUtils.join(doubleArray0, 'D');
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, doubleArray0.length);
      assertEquals("-1.0D-1.0D-1.0D-2611.0D-2611.0D-2611.0", string1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-2611.0), (-2611.0), (-2611.0)}, doubleArray0, 0.01);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("Expected exactly one annotation to provide an ArgumentSource, found %d.", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.", string2);
      assertNotNull(string2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'D', 32, 4601);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      String string0 = StringUtils.difference("org.junitpioneer.jupiter.params.DoubleRange", "'cPx!EY1K");
      assertEquals("'cPx!EY1K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      String string0 = StringUtils.swapCase("%o{");
      assertEquals("%O{", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "%o{";
      charSequenceArray0[1] = (CharSequence) "%O{";
      String string1 = StringUtils.difference("%O{", "%o{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("o{", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o{";
      String string2 = StringUtils.replaceChars("offset cannot be negative", "%o{", "6 3gcfbA?(/iQ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("3ffset cann3t be negative", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("o{");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("7", "7", "7");
      assertEquals("7", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("7", "7");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      String string0 = StringUtils.difference("", "Ba^k_34z#\"A4}:3");
      assertEquals("Ba^k_34z#\"A4}:3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      String string0 = StringUtils.difference("fUL+oma(", "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'Z';
      charArray0[2] = '+';
      charArray0[3] = 'X';
      charArray0[4] = '|';
      charArray0[5] = 'T';
      charArray0[6] = '%';
      charArray0[7] = 'a';
      charArray0[8] = '+';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, charArray0.length);
      assertEquals("RZ+X|T%a+", string1);
      assertArrayEquals(new char[] {'R', 'Z', '+', 'X', '|', 'T', '%', 'a', '+'}, charArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "gT(:+$|-";
      stringArray0[1] = "gT(:+$|-";
      stringArray0[2] = "gT(:+$|-";
      stringArray0[3] = "gT(:+$|-";
      stringArray0[4] = "Cannot store ";
      stringArray0[5] = "gT(:+$|-";
      stringArray0[6] = "gT(:+$|-";
      stringArray0[7] = "gT(:+$|-";
      String string0 = StringUtils.replaceEach("gT(:+$|-", stringArray0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("gT(:+$|-", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny("gT(:+$|-", stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("|n-pnbtXO%Wf$D[cEm", (String) null, false);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", 'm');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "gT(:+$|-";
      stringArray0[5] = "gT(:+$|-";
      String string0 = StringUtils.replaceEach("gT(:+$|-", stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("gT(:+$|-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Locale must not be null");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEachRepeatedly("3As;hd0>l#~Q", stringArray0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("3As;hd0>l#~Q", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("MC|fNm\"~sQjUY", '=');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.replaceEach("MUmf96wAV%89qJ", stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals("MUmf96wAV%89qJ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("MC|fNm\"~sQjUY");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Minimum abbreviation width is %d";
      String string0 = StringUtils.replaceEach("Minimum abbreviation width is %d", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'I', (-1501), (-1501));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeEnd("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      String string0 = StringUtils.substringAfter("offset cannot be negative@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", "BIY%e#");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      String string0 = StringUtils.unwrap("", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", 32, "org.junitpioneer.jupiter.CartesianProductTestExtension");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.Cartesi", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("G5TAcKs('*0.\"", "org.junitpioneer.jupiter.CartesianProductTestExtension", 32);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.replaceFirst("G5TAcKs('*0.\"", "", "qCqn");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("qCqnG5TAcKs('*0.\"", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("org.junitpioneer.jupiter.CartesianProductTestExtension", "G5TAcKs('*0.\"");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "gT(:+$|-";
      stringArray0[1] = "gT(:+$|-";
      stringArray0[2] = "gT(:+$|-";
      stringArray0[3] = "gT(:+$|-";
      stringArray0[4] = "Cannot store ";
      stringArray0[5] = "gT(:+$|-";
      stringArray0[6] = "gT(:+$|-";
      stringArray0[7] = "gT(:+$|-";
      stringArray0[8] = "gT(:+$|-";
      String string0 = StringUtils.replaceEach("gT(:+$|-", stringArray0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("gT(:+$|-", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("gT(:+$|-", "'.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 0;
      String string2 = StringUtils.join((Object[]) stringArray0, 'U', 0, 0);
      assertFalse(string2.equals((Object)string0));
      assertEquals(9, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "gT(:+$|-", 108);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertEquals(9, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "5I", (-4843));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("Cannot store ", 108);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=108.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize("9Td'gTc)o<6a-");
      assertEquals("9Td'gTc)o<6a-", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.remove((String) null, "9Td'gTc)o<6a-");
      assertNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string4 = StringUtils.replaceIgnoreCase("2!!E1^Ub'.V)Q9A@Don't clear/set the same entry more than once.", "l+x,/", "VKa%V*heb.pvKKz*K;");
      assertFalse(string4.equals((Object)string1));
      assertEquals("2!!E1^Ub'.V)Q9A@Don't clear/set the same entry more than once.", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-570));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = StringUtils.unwrap("", '\u0000');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("E");
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {69}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "Esp<;", 2056);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      String string0 = StringUtils.strip(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) "", (-2022));
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripStart(" ", " ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Comparator should not be null.", "'oGg~7Wxb[;4oeZQ0O", (String) null);
      assertEquals("Comparator should not be null.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "'oGg~7Wxb[;4oeZQ0O", (CharSequence) "Comparator should not be null.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      String string0 = StringUtils.substringAfter("a2[}z ]@)-@$N2LG4", "a2[}z ]@)-@$N2LG4");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.LF;
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("h2-", "*u&}");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *u&}
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Invalid exceptionStatus", "Z`5&|_|\";li9F?F1k?");
      assertEquals("Invalid exceptionStatus", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      String string0 = StringUtils.center("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are empty.", 64, '?');
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are empty.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      String string0 = StringUtils.center("p@SG]y*1", 97);
      assertEquals("                                            p@SG]y*1                                             ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "                                            p@SG]y*1                                             ", 97, 51);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      String string0 = "CF{:tq7 qjS";
      String string1 = StringUtils.center("CF{:tq7 qjS", 634);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                                                                                                                                                                                                                                                                                                       CF{:tq7 qjS                                                                                                                                                                                                                                                                                                                        ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "                                                                                                                                                                                                                                                                                                                       CF{:tq7 qjS                                                                                                                                                                                                                                                                                                                        ", (CharSequence) "CF{:tq7 qjS");
      assertEquals(311, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("                                                                                                                                                                                                                                                                                                                       CF{:tq7 qjS                                                                                                                                                                                                                                                                                                                        ", "CF{:tq7 qjS");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 1
         // CF{:tq7 qjS
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ">b9ji[=s}~wOwd}", (CharSequence) "XG3'XF9Z`n`jmnQ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Y", "Y");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.wrap("Y", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "Y", (CharSequence) "");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      String string0 = StringUtils.wrap("x#3\"", ">A(?s'dtCf");
      assertEquals(">A(?s'dtCfx#3\">A(?s'dtCf", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBetween("x_D8", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.truncate("x_D8", 108, 2032);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", (CharSequence) " ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "?_#CCn", "?_#CCn");
      assertEquals(0, int0);
      
      String string0 = StringUtils.rotate("", (-1610612734));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (-1610612734), (-1610612734));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      String string0 = StringUtils.wrap("TviA-r=WIl1v)HO@v", "TviA-r=WIl1v)HO@v");
      assertEquals("TviA-r=WIl1v)HO@vTviA-r=WIl1v)HO@vTviA-r=WIl1v)HO@v", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.prependIfMissing("CF{:tq7 qjS", "CF{:tq7 qjS", stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals("CF{:tq7 qjS", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "x#3\"", (CharSequence[]) stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWithAny("x#3\"", stringArray0);
      assertEquals(188, stringArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfAny("CF{:tq7 qjS", stringArray0);
      assertTrue(int1 == int0);
      assertEquals(188, stringArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      int int0 = StringUtils.lastIndexOfAny("^H#*:O?ZU&)", charSequenceArray0);
      assertEquals(17, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isEmpty("^H#*:O?ZU&)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(")&t6", '\'');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(")&t6", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      String string0 = StringUtils.reverse("I&");
      assertEquals("&I", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = '?';
      String string1 = StringUtils.remove("bBfSQY$-uRg\"2", 'Q');
      assertFalse(string1.equals((Object)string0));
      assertEquals("bBfSY$-uRg\"2", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("Supplied value must be a valid byte literal between -128 and 127: [", (String) null, false);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chomp("...");
      assertEquals("...", string1);
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, '!');
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      String string2 = StringUtils.leftPad("0", 397, "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                            0", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("vo RvbM/99", "vo RvbM/99", false);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.chomp("_u@vs.jVijgFmM|B");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("_u@vs.jVijgFmM|B", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("x_D8", "x_D8");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "x_D8");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)14;
      String string1 = StringUtils.join(byteArray0, 'q');
      assertNotNull(string1);
      assertEquals("76q0q100q65q32q14", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte)100, (byte)65, (byte)32, (byte)14}, byteArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("76q0q100q65q32q14", "76q0q100q65q32q14", 2456);
      assertEquals(18, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.prependIfMissing("CF{:tq7 qjS", "CF{:tq7 qjS", stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals("CF{:tq7 qjS", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "x#3\"", (CharSequence[]) stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfter("0W^W", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, '$', 790, (-1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(188, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("[jNYgy!(=%|8u", "#/U|o\u0001XG_/'JeX-", false);
      assertEquals(56, int0);
      
      String string0 = StringUtils.chomp("0P3y,8FvN");
      assertEquals("0P3y,8FvN", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '!');
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      String string0 = StringUtils.mid("W~zah", (-1684), 411);
      assertEquals("W~zah", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\r";
      stringArray0[1] = "...";
      String string1 = StringUtils.replaceEach("\r", stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfAny("\r", stringArray0);
      assertTrue(int1 == int0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.compareIgnoreCase("...", "\r", false);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(33, int2);
      
      String string2 = StringUtils.chomp("\r");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd(" ", "Gpc:n[xXTB-!sQ ");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("Strings must not be null");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Strings must not be null", string4);
      assertNotNull(string4);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      int int3 = StringUtils.getFuzzyDistance("Strings must not be null", " ", locale0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      String string5 = StringUtils.remove("", 'O');
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, '<');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      String string0 = StringUtils.repeat("Y:r&VZ", "r=UC\"-/d|", 3);
      assertEquals("Y:r&VZr=UC\"-/d|Y:r&VZr=UC\"-/d|Y:r&VZ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, "Pq|0w6Ko]w", 3);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "Y:r&VZ", 3);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("Y:r&VZr=UC\"-/d|Y:r&VZr=UC\"-/d|Y:r&VZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      String string0 = StringUtils.leftPad("s", 100, "s");
      assertEquals("ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, '!');
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((byte[]) null, '#');
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 8);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringAfter("", (String) null);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "FS!llCcEOl";
      String string4 = StringUtils.leftPad("<0", 269, "_u@vs.jVijgFmM|B");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijg<0", string4);
      assertNotNull(string4);
      
      charSequenceArray0[3] = (CharSequence) "_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijg<0";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.compareIgnoreCase("Object varargs must not be null", (String) null, false);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.chomp("");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("5yw;u");
      assertFalse(string1.equals((Object)string0));
      assertEquals("5yw;u", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("\n", "tfe(%@g*crPK");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("\n", 'f');
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("\n", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip(",&jQpcP|9A}^xoM4j");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(",&jQpcP|9A}^xoM4j", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlpha("EuW~BrCd-fW15(Opc:#");
      assertFalse(boolean0);
      
      String string6 = StringUtils.center("lLx", 97, "mO&t&`l?*=?cFDU");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("mO&t&`l?*=?cFDUmO&t&`l?*=?cFDUmO&t&`l?*=?cFDUmOlLxmO&t&`l?*=?cFDUmO&t&`l?*=?cFDUmO&t&`l?*=?cFDUmO", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.overlay("", "mO&t&`l?*=?cFDU", (-858), 5);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("mO&t&`l?*=?cFDU", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("mO&t&`l?*=?cFDU", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string8 = StringUtils.removeStartIgnoreCase((String) null, "mO&t&`l?*=?cFDU");
      assertNull(string8);
      
      int int1 = StringUtils.lastOrdinalIndexOf("tfe(%@g*crPK", (CharSequence) null, 4157);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but gMt [%dO", "Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but gMt [%dO", (-96));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.leftPad("", (-1), "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("MC|fNm\"~sQjUY", 'm');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeEndIgnoreCase("MC|fNm\"~sQjUY", "MC|fNm\"~sQjUY");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeIgnoreCase("RThreshold must not be negative", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("RThreshold must not be negative", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("MC|fNm\"~sQjUY", "RThreshold must not be negative");
      assertEquals(0.24, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("!", 433);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("No instructions to disable");
      assertFalse(string1.equals((Object)string0));
      assertEquals("No instructions to disable", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("o", "No instructions to disable");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("No instructions to disable", "No instructions to disable");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("", 'f');
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween(" vs ", "No instructions to disable", "EuW~BrCd-fW15(Opc:#");
      assertNull(string5);
      
      int[] intArray0 = StringUtils.toCodePoints("No instructions to disable");
      assertEquals(26, intArray0.length);
      assertNotNull(intArray0);
      
      String string6 = StringUtils.replaceIgnoreCase("W", "", (String) null);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("W", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "W", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.removeEndIgnoreCase((String) null, "*#O7_dp|C>~6o9");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Search and Replace array lengths don't match: ";
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      String string0 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 26, "Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny(stringArray0[5], stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("R:BuD...", "Search and Replace array lengths don't match: ", false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.chomp("iaT*qm*.<QFIp+P");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("iaT*qm*.<QFIp+P", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      String string0 = StringUtils.remove("k", "k");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      String string0 = StringUtils.replace("7", "7", "7");
      assertEquals("7", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("7");
      assertTrue(boolean0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      char[] charArray0 = new char[1];
      boolean boolean1 = StringUtils.equalsIgnoreCase("7", "7");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "7", 4);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.chomp((String) null, "uyq&GM7");
      assertNull(string2);
      
      String string3 = StringUtils.stripAccents("Db");
      assertFalse(string3.equals((Object)string0));
      assertEquals("Db", string3);
      assertNotNull(string3);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Db"));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("M?", "do+u!-wfGH8S<WFF(?9drj)#qkzO?Do!Y7", 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 35
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Object varargs must not be null");
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Object varargs must not be null";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.defaultString("ow|jCiNBb<YR:");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ow|jCiNBb<YR:", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits("Object varargs must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "Object varargs must not be null", (CharSequence) "Object varargs must not be null", 490);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("Object varargs must not be null", "");
      assertTrue(boolean0);
      
      String string3 = StringUtils.remove("ow|jCiNBb<YR:", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("ow|jCiNBb<YR:", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("(E*IOn<T8teTB4", "(E*IOn<T8teTB4");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) stringArray1, '', 3, (-1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.chomp("(E*IOn<T8teTB4");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("(E*IOn<T8teTB4", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("YS'rlP'$3wxyR_a", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("`", "YS'rlP'$3wxyR_a");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("YS'rlP'$3wxyR_a", "\n", 78);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.trimToEmpty("\r");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("YS'rlP'$3wxyR_a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("E`K~", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      String string0 = StringUtils.remove("Minimum abbreviation width is %d", "dyJ+FY#)0P0");
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfterLast("Minimum abbreviation width is %d", 858);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeIgnoreCase("Minimum abbreviation width is %d", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeFirst("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 858;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 858;
      doubleArray0[6] = (double) (-1);
      String string4 = StringUtils.join(doubleArray0, 'c');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(7, doubleArray0.length);
      assertEquals("-1.0c-1.0c0.0c858.0c-1.0c858.0c-1.0", string4);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 858.0, (-1.0), 858.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((float[]) null, 'c');
      assertNull(string5);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "dyJ+FY#)0P0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.length("Minimum abbreviation width is %d");
      assertFalse(int1 == int0);
      assertEquals(32, int1);
      
      String string6 = StringUtils.removeEnd("", "");
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfterLast("Minimum abbreviation width is %d", (String) null);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.isEmpty("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Locale locale0 = new Locale("", "");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.forLanguageTag("...");
      assertTrue(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertTrue(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertNotNull(set0);
      assertFalse(set0.contains('c'));
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string8 = StringUtils.lowerCase("KqB]>d.ScU8QT9FV^97", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertNotSame(locale0, locale1);
      assertEquals("kqb]>d.scu8qt9fv^97", string8);
      assertNotNull(string8);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string9 = StringUtils.leftPad("", 2, "");
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertEquals("  ", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(".{,?7ya_", ".{,?7ya_", 9);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("7Tmeout for vintage @Test must be positive.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      String string0 = StringUtils.replaceChars("&-IL[bbHEJEZJJz9", "&-IL[bbHEJEZJJz9", "{[7mu~ij7s");
      assertEquals("{[7mu~~j7s7ss", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      String string0 = StringUtils.replaceChars("GMT", "GMT", "GMT");
      assertEquals("GMT", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "GMT";
      objectArray0[1] = (Object) "GMT";
      objectArray0[2] = (Object) "GMT";
      String string1 = StringUtils.join(objectArray0, "GMT");
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, objectArray0.length);
      assertEquals("GMTGMTGMTGMTGMT", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("GMT", '#');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#GMT#", string2);
      assertNotNull(string2);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(2506);
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("GMT"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      boolean boolean0 = linkedHashSet0.add(locale_Category0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.contains("GMT"));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = linkedHashSet0.add(object1);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(object1, object0);
      assertTrue(boolean1);
      assertTrue(linkedHashSet0.contains(object1));
      assertFalse(linkedHashSet0.contains("GMT"));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      
      String string3 = StringUtils.join(objectArray0, "#GMT#", 2506, (-1560));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(3, objectArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      long[] longArray0 = new long[8];
      longArray0[1] = (long) 2506;
      longArray0[1] = (long) (-1560);
      longArray0[2] = (long) (-1560);
      longArray0[3] = (long) (-1560);
      longArray0[4] = (long) (-1560);
      longArray0[5] = (long) '#';
      longArray0[6] = (long) (-1560);
      longArray0[7] = (long) (-1560);
      String string4 = StringUtils.join(longArray0, '#');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(8, longArray0.length);
      assertEquals("0#-1560#-1560#-1560#-1560#35#-1560#-1560", string4);
      assertArrayEquals(new long[] {0L, (-1560L), (-1560L), (-1560L), (-1560L), 35L, (-1560L), (-1560L)}, longArray0);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Y", "t3K8onu", "Y");
      assertEquals("Y", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      String string0 = null;
      String string1 = StringUtils.join(objectArray0, (String) null);
      assertEquals(3, objectArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("java.lang.Object@b427873java.lang.Object@e759282java.lang.Object@142474c2");
      assertFalse(string2.equals((Object)string1));
      assertEquals("2c474241@tcejbO.gnal.avaj282957e@tcejbO.gnal.avaj378724b@tcejbO.gnal.avaj", string2);
      assertNotNull(string2);
      
      int[] intArray0 = new int[0];
      String string3 = StringUtils.join(intArray0, '9');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, intArray0.length);
      assertEquals("", string3);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.rotate("org.apache.commons.lang3.StringUtils", 1327);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("pache.commons.lang3.StringUtilsorg.a", string4);
      assertNotNull(string4);
      
      String string5 = "5yw;uoffset cannot be negative";
      String[] stringArray0 = StringUtils.split("5yw;uoffset cannot be negative");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.wrapIfMissing("kAW-du.:<M", 'M');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("MkAW-du.:<M", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.left("org.apache.commons.lang3.StringUtils", 9);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertEquals("org.apach", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.isAllUpperCase("org.apach");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "pache.commons.lang3.StringUtilsorg.a");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("CF{:tq7 qjS", "x#3\"");
      assertEquals("CF{:tq7 qjS", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((long[]) null, 'o');
      assertNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      charArray0[4] = 'o';
      String string2 = StringUtils.join(charArray0, 'o');
      assertFalse(string2.equals((Object)string0));
      assertEquals(5, charArray0.length);
      assertEquals("ooooooooo", string2);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o', 'o'}, charArray0);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "ooooooooo");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.chomp("\\)waW@+Ya^J^w''", "CF{:tq7 qjS");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\\)waW@+Ya^J^w''", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("qyP_>A%Ue7bW", "org.apache.commons.lang3.CharUtils");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is %d", '\'');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.stripAccents("@<Z|F;-!/;0M'm");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("@<Z|F;-!/;0M'm", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("C_nnot clone Cloneable type ");
      assertEquals("c_nnot clone Cloneable type ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("&3[yiZ&!bCy I<g{", "&3[yiZ&!bCy I<g{", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("C_nnot clone Cloneable type ", 128, 'h');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhC_nnot clone Cloneable type ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      String[] stringArray0 = new String[21];
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\"'YsQo5hgU", "\"'YsQo5hgU");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\"'YsQo5hgU", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(21, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      String string0 = StringUtils.stripStart("PCeGUOp", ".i@F\" ");
      assertEquals("PCeGUOp", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      String string0 = StringUtils.stripEnd("9'N!'Vtw 8=XN f", "'/i,|16*#p3");
      assertEquals("9'N!'Vtw 8=XN f", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter((String) null, "");
      assertNull(string2);
      
      String string3 = StringUtils.removeEnd((String) null, "org.junitpioneer.jupiter.params.Range");
      assertNull(string3);
      
      String string4 = StringUtils.unwrap("DFeH$", 'f');
      assertFalse(string4.equals((Object)string1));
      assertEquals("DFeH$", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip((String) null);
      assertNull(string5);
      
      boolean boolean0 = StringUtils.isAlpha("DFeH$");
      assertFalse(boolean0);
      
      String string6 = StringUtils.center("4,k 2%j|wMe1L", (-522347638), "");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("4,k 2%j|wMe1L", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.overlay((String) null, "", (-1682), (-1102));
      assertNull(string7);
      
      String string8 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string8);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '\u0082');
      assertNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("RY #&c_lf@p)\"'j", "p{InCombiningDiacriticalMarks}+", "0");
      assertEquals("RY #&c_lf@p)\"'j", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("RY #&c_lf@p)\"'j", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.unwrap("p{InCombiningDiacriticalMarks}+", ']');
      assertFalse(string3.equals((Object)string2));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string4);
      
      String string5 = StringUtils.substringBefore("Minimum abbreviation width with offset is %d", "RY #&c_lf@p)\"'j");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Minimum abbreviation width with offset is %d", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("TviA-rWIl1v)HO@v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      String string0 = StringUtils.repeat("org.junitpioneer.jupiter.params.DoubleRange", "Method `CartesianProductTest.Sets ", Integer.MIN_VALUE);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Method `CartesianProductTest.Sets ";
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.DoubleRange";
      charSequenceArray0[2] = (CharSequence) "Method `CartesianProductTest.Sets ";
      charSequenceArray0[3] = (CharSequence) "Method `CartesianProductTest.Sets ";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "org.junitpioneer.jupiter.params.DoubleRange", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '+';
      int int1 = (-1685);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '+', (-1685), 54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1685
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("*3rFX", "YS'rlP'$3wxyR_a");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfter("(Hok#3e@}.l:Co=1j0X+wr\u0002gaAzMCj0X+wr\u0002gaAzMCj0X+wr\u0002gaAzMhZ2", 101);
      assertEquals("@}.l:Co=1j0X+wr\u0002gaAzMCj0X+wr\u0002gaAzMCj0X+wr\u0002gaAzMhZ2", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "YS'rlP'$3wxyR_a", 46, 46);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "' matches '", (CharSequence) "", 16);
      assertEquals(11, int0);
      
      String string2 = StringUtils.abbreviate("", (-698), (-698));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "' matches '";
      stringArray1[2] = "org.apache.commons.lang3.ObjectUtils";
      stringArray1[3] = "(Hok#3e@}.l:Co=1j0X+wr\u0002gaAzMCj0X+wr\u0002gaAzMCj0X+wr\u0002gaAzMhZ2";
      stringArray1[4] = "@}.l:Co=1j0X+wr\u0002gaAzMCj0X+wr\u0002gaAzMCj0X+wr\u0002gaAzMhZ2";
      stringArray1[5] = "' matches '";
      stringArray1[6] = "@}.l:Co=1j0X+wr\u0002gaAzMCj0X+wr\u0002gaAzMCj0X+wr\u0002gaAzMhZ2";
      String string3 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, '!');
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("", " ", "&E3[yiZ&!bCy I<g{", (int) '!');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap(" ", '!');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("! !", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "&E3[yiZ&!bCy I<g{";
      stringArray0[1] = "! !";
      stringArray0[2] = "! !";
      stringArray0[3] = "";
      stringArray0[4] = "FS!llCcEOl";
      stringArray0[5] = " ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "! !");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains('!'));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
      try { 
        stack0.listIterator(3081);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3081
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      String string0 = StringUtils.strip("=");
      assertEquals("=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("=");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "=", (CharSequence) "=");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.stripEnd("=", "=");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = StringUtils.right("", 69);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("offset cannot be negative...");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("offset cannot be negative...", string3);
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean0 = StringUtils.endsWithAny("8Aj0", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "\\u";
      try { 
        StringUtils.getBytes(string1, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "YzB'9,", (-1));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.stripEnd("YzB'9,", "L+B]7");
      assertEquals("YzB'9,", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("YzB'9,");
      assertFalse(boolean0);
      
      String string1 = StringUtils.right("YzB'9,", (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", ' ');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", (-1430));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, '(', 4256, 4256);
      assertEquals(250, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("9Td'gTc)o<6a-");
      assertEquals("9td'gtc)o<6a-", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.capitalize("9Td'gTc)o<6a-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("9Td'gTc)o<6a-", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("+V3`", "9Td'gTc)o<6a-", "offset cannot be negative");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("+V3`", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(", ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("oD%", "oD%");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("[OW");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("[OW");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "[OW", (-1), (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(188, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("{&DO4?", '\u001A');
      assertEquals("\u001A{&DO4?\u001A", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.appendIfMissingIgnoreCase("/Ox<L", "/Ox<L", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("/Ox<L", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("c");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "%");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotEmpty("%");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string1 = StringUtils.wrapIfMissing(";bdQL;: TnXx", 'i');
      assertEquals("i;bdQL;: TnXxi", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceAll("i;bdQL;: TnXxi", "", "");
      assertTrue(string2.equals((Object)string1));
      assertEquals("i;bdQL;: TnXxi", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("%");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string3 = StringUtils.unwrap("i;bdQL;: TnXxi", 'E');
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("i;bdQL;: TnXxi", string3);
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.startsWith("i;bdQL;: TnXxi", "i;bdQL;: TnXxi");
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      boolean boolean5 = StringUtils.containsAny((CharSequence) "i;bdQL;: TnXxi", (CharSequence) null);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5);
      
      String string4 = StringUtils.replaceFirst("", "i;bdQL;: TnXxi", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter((String) null, (-3283));
      assertNull(string5);
      
      boolean boolean6 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6);
      
      String string6 = StringUtils.replaceChars("Locale must not be null", "i;bdQL;: TnXxi", (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("ocalemustoteull", string6);
      assertNotNull(string6);
      
      boolean boolean7 = StringUtils.endsWithIgnoreCase(";bdQL;: TnXx", (CharSequence) null);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "i;bdQL;: TnXxi", 122, 0);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "i;bdQL;: TnXxi";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "Locale must not be null";
      boolean boolean8 = StringUtils.equalsAnyIgnoreCase(";bdQL;: TnXx", charSequenceArray0);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean5);
      assertFalse(boolean8 == boolean6);
      assertFalse(boolean8 == boolean2);
      assertTrue(boolean8 == boolean3);
      assertFalse(boolean8 == boolean4);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean7);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean8);
      
      String string7 = StringUtils.reverseDelimited("", 'E');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.appendIfMissing("h*8+w-=lfz4<", "", charSequenceArray0);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertEquals(3, charSequenceArray0.length);
      assertEquals("h*8+w-=lfz4<", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.strip("i;bdQL;: TnXxi", "1.0KT(LA|'");
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertEquals("i;bdQL;: TnXxi", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      String string0 = "Backup";
      try { 
        StringUtils.getBytes("ZYrsS04nFe2\"pq", "Backup");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      try { 
        StringUtils.getBytes(";PFw)$?%!n", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2480.729F;
      floatArray0[1] = (-17.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-773.1203F);
      floatArray0[4] = 779.0F;
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "0/`K6]Xc]]:AVzHX";
      charSequenceArray0[1] = (CharSequence) "0/`K6]Xc]]:AVzHX";
      charSequenceArray0[2] = (CharSequence) "0/`K6]Xc]]:AVzHX";
      charSequenceArray0[3] = (CharSequence) "0/`K6]Xc]]:AVzHX";
      charSequenceArray0[4] = (CharSequence) "0/`K6]Xc]]:AVzHX";
      String string0 = StringUtils.prependIfMissing("0/`K6]Xc]]:AVzHX", "0/`K6]Xc]]:AVzHX", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("0/`K6]Xc]]:AVzHX", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[3], charSequenceArray0[0], 928);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.getDigits("0/`K6]Xc]]:AVzHX");
      assertFalse(string1.equals((Object)string0));
      assertEquals("06", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "&E3[yiZ&!bCy S<gd", (CharSequence) "hZ2", 31);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      String string0 = StringUtils.unwrap("qs", 'h');
      assertEquals("qs", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2295.9226F;
      floatArray0[1] = 0.0F;
      String string0 = StringUtils.substringAfter(" aL|_nv>72VB aV9", 4465);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("", '%');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "&E3[yiZ&!bCy I<g{", (CharSequence) null, 4465);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.abbreviate("", (-477), 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Display name '", (CharSequence) "Display name '", 71);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      String string0 = StringUtils.removeAll("BB@QJ:YWE|]3", "BB@QJ:YWE|]3");
      assertEquals("|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      int[] intArray0 = new int[3];
      String string0 = StringUtils.join(intArray0, '\u0013');
      assertEquals(3, intArray0.length);
      assertEquals("0\u00130\u00130", string0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      String string0 = StringUtils.abbreviate("!", 5);
      assertEquals("!", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("!", 4028);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) "!";
      charSequenceArray0[2] = (CharSequence) "!";
      String string2 = StringUtils.unwrap("V'-}%I+RID{A", 'V');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("V'-}%I+RID{A", string2);
      assertNotNull(string2);
      
      charSequenceArray0[3] = (CharSequence) "V'-}%I+RID{A";
      charSequenceArray0[4] = (CharSequence) string1;
      charSequenceArray0[5] = (CharSequence) string1;
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripEnd("!", "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("!", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, '!');
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      String string2 = StringUtils.join(objectArray0, "Never disable parameterized test method itself", 3002, 502);
      assertEquals(6, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("' contains '", 502, 64);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("' contains '", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.repeat("DZ5/)", "clone", 502);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("", 222);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Pcm('_g7", charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      String string0 = StringUtils.rotate("JeBqZ0WcVe/i|", (-507));
      assertEquals("JeBqZ0WcVe/i|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      String string0 = StringUtils.repeat("org.junitpioneer.jupiter.params.DoubleRange", "Method `CartesianProductTest.Sets ", Integer.MIN_VALUE);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Method `CartesianProductTest.Sets ";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.DoubleRange";
      charSequenceArray0[2] = (CharSequence) "Method `CartesianProductTest.Sets ";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.params.DoubleRange";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "org.junitpioneer.jupiter.params.DoubleRange", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = ':';
      charArray0[2] = ')';
      charArray0[3] = 'b';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'+', ':', ')', 'b'}, charArray0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("org.junitpioneer.jupiter.params.DoubleRange");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[1], (CharSequence) "Method `CartesianProductTest.Sets ");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("6>LTCE^\":", (String) null, Integer.MIN_VALUE);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("6>LTCE^\":", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("5&P/4 we=cYTv76^r ", "x^12s(D85nI+In]Y", "");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 16
         // x^12s(D85nI+In]Y
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      String string0 = StringUtils.capitalize("{' matches '{");
      assertEquals("{' matches '{", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("{' matches '{");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[13];
      String string1 = StringUtils.joinWith((String) null, charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(13, charSequenceArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "{' matches '{";
      String string2 = StringUtils.wrap((String) null, '?');
      assertNull(string2);
      
      String string3 = StringUtils.remove("H&:g5K,%!", "{' matches '{");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("H&:g5K,%!", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) null, "p{InCombiningDiacriticalMarks}+", 53, 11);
      assertNull(string4);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[2] = '?';
      charArray0[3] = 'J';
      charArray0[4] = '&';
      charArray0[5] = '?';
      charArray0[6] = '?';
      charArray0[7] = '?';
      charArray0[8] = '?';
      String string5 = StringUtils.valueOf(charArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals(9, charArray0.length);
      assertEquals("?\u0000?J&????", string5);
      assertArrayEquals(new char[] {'?', '\u0000', '?', 'J', '&', '?', '?', '?', '?'}, charArray0);
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultIfBlank("{' matches '{", "H&:g5K,%!");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("{' matches '{", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...");
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp("offset cannot be negative", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("...", "offset cannot be negative");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertTrue(boolean0);
      
      String string3 = StringUtils.right("v[*\"", 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("offset cannot be negative", "...");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("offset cannot be negative", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isMixedCase("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      String string0 = StringUtils.rightPad("e.+Q^Du~m-o", (-2454), (String) null);
      assertEquals("e.+Q^Du~m-o", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '';
      longArray0[1] = (long) (-2454);
      String string1 = StringUtils.join(longArray0, '%', 17, 17);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, longArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new long[] {127L, (-2454L)}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.trim("<");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("<", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("<", (String) null);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("<", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((short[]) null, 'f', (int) (short)32, 83);
      assertNull(string4);
      
      String string5 = StringUtils.replaceOnceIgnoreCase((String) null, "[<g0R[", (String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("3elb2+FXcmF|_}", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("3elb2+FXcmF|_}", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd(" vs ", "\r");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" vs ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEach("Ocw=\"d", (String[]) null, (String[]) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Ocw=\"d", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny("...", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("...", "\r", false);
      assertFalse(int1 == int0);
      assertEquals(33, int1);
      
      String string4 = StringUtils.chomp("3elb2+FXcmF|_}");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("3elb2+FXcmF|_}", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("org.apache.commons.lang3.StringUtils", "Ocw=\"d");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToEmpty("Bxf.{<");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Bxf.{<", string6);
      assertNotNull(string6);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      
      int int2 = StringUtils.getFuzzyDistance("3elb2+FXcmF|_}", "3elb2+FXcmF|_}", locale0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(40, int2);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      
      String string7 = StringUtils.remove("", 'b');
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", 'W');
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      String string0 = StringUtils.stripToNull("[XKq:+%lW/f:k jHb");
      assertEquals("[XKq:+%lW/f:k jHb", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("Fml9qn5b9=%Va&bJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Fml9qn5b9=%Va&bJ", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "Fml9qn5b9=%Va&bJ";
      charSequenceArray0[2] = (CharSequence) "Fml9qn5b9=%Va&bJ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '}';
      String string2 = StringUtils.join(charArray0, '}');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, charArray0.length);
      assertEquals("4}}", string2);
      assertArrayEquals(new char[] {'4', '}'}, charArray0);
      assertNotNull(string2);
      
      int int1 = StringUtils.compare("atch: ", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string3 = StringUtils.rotate("(g`S,p_U`d8j!X", 113);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("X(g`S,p_U`d8j!", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((int[]) null, '4');
      assertNull(string4);
      
      String string5 = StringUtils.rotate("[XKq:+%lW/f:k jHb", (-1652));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("q:+%lW/f:k jHb[XK", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string6 = StringUtils.removeEndIgnoreCase("YY", (String) null);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("YY", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAllUpperCase("4}}");
      assertFalse(boolean0);
      
      String string7 = StringUtils.leftPad("Fml9qn5b9=%Va&bJ", 488);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        Fml9qn5b9=%Va&bJ", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      String string0 = StringUtils.wrap("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", '|');
      assertEquals("|This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      String string0 = StringUtils.wrap("1[", 'w');
      assertEquals("w1[w", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "w1[w", (CharSequence) "1[");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "1[", (CharSequence) "1[");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("1[");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.substringBefore("Expected exception %s was not thrown.", "org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exception %s was not thrown.", string1);
      assertNotNull(string1);
      
      boolean boolean3 = StringUtils.isNumericSpace("Locale must not be null");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string2 = StringUtils.defaultIfEmpty("\\lquL.twFp'", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\\lquL.twFp'", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Locale must not be null";
      stringArray0[1] = " ";
      stringArray0[2] = null;
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("w1[w", "ZZgRI");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean4 = StringUtils.isNoneEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean4);
      
      // Undeclared exception!
      StringUtils.leftPad(" ", 65536, ")sCw\"y");
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, "Locale must not be null");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      String string0 = StringUtils.remove("Minimum abbreviation width is %d", "dyJ+FY#)0P0");
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfterLast("Minimum abbreviation width is %d", 858);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeIgnoreCase("Minimum abbreviation width is %d", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("org.junitpioneer.jupiter.DefaultTimeZoneExtension", 0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string3);
      assertNotNull(string3);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      String string4 = StringUtils.join(intArray0, 'S');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(1, intArray0.length);
      assertEquals("-1", string4);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("Minimum abbreviation width is %d", 2);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("%dMinimum abbreviation width is ", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split("Minimum abbreviation width is %d");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.wrapIfMissing("Minimum abbreviation width is %d", '^');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("^Minimum abbreviation width is %d^", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAllUpperCase("org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d", 65);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.center("Locale must not be null", 858, "_Slnfgqd<?I94nu50o");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertEquals("_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_SlLocale must not be null_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Slnfgqd<?I94nu50o_Sln", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.right("=oxdO", (-1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.defaultString("org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string9);
      assertNotNull(string9);
      
      int int2 = StringUtils.countMatches((CharSequence) "-1", (CharSequence) "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("g+mfv]\"g+mfv9\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{", (CharSequence) "#K'7.k_kA@8\n[PEi.qykYNT$m\"=sK6jo{");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      String string0 = StringUtils.remove("&E3[yiZ&!bCy I<g{", '[');
      assertEquals("&E3yiZ&!bCy I<g{", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Whlaw_qqL:0 ''");
      assertEquals("Whlaw_qqL:0 ''", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("", "Don't clear/set the same entry more than once.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "Don't clear/set the same entry more than once.", (String) null, 1110);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("h7w>bhlm'|n23r2R>'", "2>6W<zSearch and Replace array lengths don't match: 2>6W<z2>6W<zSearch and Replace array lengths don't match: 2>6W<zjV<p|i:s");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("h7w>bhlm'|n23r2R>'", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.compare("'p", (String) null, false);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.rotate((String) null, (-711));
      assertNull(string4);
      
      String string5 = StringUtils.join((int[]) null, 'S');
      assertNull(string5);
      
      String string6 = StringUtils.rotate("org.apache.commons.lang3.StringUtils", 30);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("ache.commons.lang3.StringUtilsorg.ap", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.params.DisableIfNameExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.wrapIfMissing("'p", '8');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertEquals("8'p8", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.center("Whlaw_qqL:0 ''", (-711), "}");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertEquals("Whlaw_qqL:0 ''", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      int int0 = StringUtils.compare(" vs <", "N!N");
      assertEquals((-46), int0);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, '<');
      assertNull(string0);
      
      String string1 = StringUtils.right("!M-+'GC", 702);
      assertEquals("!M-+'GC", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("maxWith cannot be negative", "4Wq2UwA`AcRkzK(M7lStdIo_System_Out");
      assertEquals("maxWith cannot be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      String string0 = StringUtils.chomp("Y");
      assertEquals("Y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("Y");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Y", (CharSequence) "Y");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Y";
      charSequenceArray0[2] = (CharSequence) "Y";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Y";
      String string1 = StringUtils.substringBeforeLast("Y", "Y");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "Y");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Minimum abbreviation width is %d", "k.Fg4u[K[#y>W,MRUd", "Minimum abbreviation width is %d");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      String string0 = StringUtils.chomp("9Td'gTc)o<6a-");
      assertEquals("9Td'gTc)o<6a-", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "9Td'gTc)o<6a-", (CharSequence) "9Td'gTc)o<6a-");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("E@!4k>xEaO;PV \"Ck", (-899), "g)FwN\";Zi");
      assertFalse(string1.equals((Object)string0));
      assertEquals("E@!4k>xEaO;PV \"Ck", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-899);
      double double0 = StringUtils.getJaroWinklerDistance("9Td'gTc)o<6a-", "E@!4k>xEaO;PV \"Ck");
      assertEquals(0.38, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("4Wq2UwA`AcRkzK(M7lStdIo_System_Out", "4Wq2UwA`AcRkzK(M7lStdIo_System_Out");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      String string0 = StringUtils.defaultString("L");
      assertEquals("L", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("No instructions to disable");
      assertFalse(string1.equals((Object)string0));
      assertEquals("No instructions to disable", string1);
      assertNotNull(string1);
      
      String string2 = "";
      String string3 = StringUtils.removeEnd("", "Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA...");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("offset cannot be negative", "", (-6));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("offset cannot be negative", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("Yb!Tz>s", "");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Yb!Tz>s", string5);
      assertNotNull(string5);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "No instructions to disable";
      objectArray0[2] = (Object) "Aborting to protect against StackOverflowError - output of one loop is the input of another7Ls@~BoJY,NMcA...";
      objectArray0[3] = (Object) "j8l^";
      objectArray0[4] = (Object) "BuD";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "Yb!Tz>s";
      objectArray0[7] = (Object) "o";
      String string6 = StringUtils.joinWith("offset cannot be negative", objectArray0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals(8, objectArray0.length);
      assertNotNull(string6);
      
      int int1 = StringUtils.ordinalIndexOf("BuD", "", 10);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("**T(BD^7XF]w+y", "V!hk[q&h!W+J>", "offset cannot be negative");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 12
         // V!hk[q&h!W+J>
         //             ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "", "#DCR_");
      assertNull(string1);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "eU");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance(" ", " ");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      String string0 = "y";
      String string1 = StringUtils.normalizeSpace("y");
      assertTrue(string1.equals((Object)string0));
      assertEquals("y", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("y", "y");
      assertEquals(1.0, double0, 0.01);
      
      String string2 = StringUtils.substringBeforeLast("y", "X$3@h#PzP3Pg$/");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("y", string2);
      assertNotNull(string2);
      
      String string3 = "";
      String string4 = StringUtils.substringBetween("", "y", "y");
      assertNull(string4);
      
      String string5 = StringUtils.defaultString("y");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("y", string5);
      assertNotNull(string5);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1;
      short short0 = (short)76;
      shortArray0[2] = (short)76;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1759);
      shortArray0[6] = (short) (-2117);
      char char0 = '\"';
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '\"', (int) (short) (-2117), (int) (short)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2117
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("M-+'GCM-+'GC", "! must return `CartesianProductTest.Sets`", "! must return `CartesianProductTest.Sets`");
      assertEquals("M-+'GCM-+'GC", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("X-y]}UXf%Y[", "offset cannot be negative");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.center("5AYDML07iBkMg]xV5L", 80);
      assertEquals("                               5AYDML07iBkMg]xV5L                               ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("Threshold must not be negative", stringArray0, (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("Threshold must not be negative", string1);
      assertNotNull(string1);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("Threshold must not be negative"));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "offset cannot be negative");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("                              5AYDML07iBkMg]xV5L                               ", "hZ2");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "@GW]6";
      charSequenceArray0[1] = (CharSequence) "@GW]6";
      String string0 = StringUtils.prependIfMissing("@GW]6", "@GW]6", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("@GW]6", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "e\"\"EGh/Cjo'6>;d*iy<";
      stringArray0[1] = "[Jn5_DDOE ";
      stringArray0[2] = "@GW]6";
      stringArray0[3] = "@GW]6";
      stringArray0[4] = "@GW]6";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("[Jn5_DDOE ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      String string0 = StringUtils.replaceEach("org.apache.commons.lang3.StringUtils", (String[]) null, (String[]) null);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("YS'rlP'$3wxyR_a", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.stripEnd("\r", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("xIVW+;d3SC+-xr?w", "TRXFY9tgN2!HOQck$");
      assertFalse(string1.equals((Object)string0));
      assertEquals("TRXFY9tgN2!HOQck$", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("No instructions to disable");
      assertFalse(string1.equals((Object)string0));
      assertEquals("No instructions to disable", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("o", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("o", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("", "113y0~523[*FMHdr@z");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("", 'f');
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween(" vs ", "No instructions to disable", "EuW~BrCd-fW15(Opc:#");
      assertNull(string5);
      
      int[] intArray0 = StringUtils.toCodePoints("No instructions to disable");
      assertEquals(26, intArray0.length);
      assertNotNull(intArray0);
      
      String string6 = StringUtils.replaceIgnoreCase("W", "o", (String) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("W", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "W", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      String string0 = StringUtils.chomp("O6n");
      assertEquals("O6n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("O6n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "O6n", (CharSequence) "O6n");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.removeEnd(" vs ", "O6n");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty(" vs ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("vs", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("O6n", " vs ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("O6n", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("O6n");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string4 = StringUtils.right("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentatizn for more details.", 69);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("hich is fragile. Check the Javadoc or documentatizn for more details.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.toRootLowerCase("hZ2");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("hz2", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isMixedCase("O6n");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2295.9226F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-696.0F);
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "&E3[yiZ&!bCy I<g{", (CharSequence) "hZ2");
      assertEquals("&E3[yiZ&!bCy I<g{", charSequence0);
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.unwrap(" must be static", "7fFtb1R/v?mXU=");
      assertFalse(string0.equals((Object)charSequence0));
      assertEquals(" must be static", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp(">F=EI>C<4");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals(">F=EI>C<4", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("6ZU-K1|:b{P:>lU:1J", 2235, 2235);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "lLx$%nrk8", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.removeStartIgnoreCase(" vs ", "es=E.~Db");
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" vs ", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("&E3[yiZ&!bCy I<g{", "cGq");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...", 33);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      charSequenceArray0[3] = (CharSequence) "...";
      boolean boolean0 = StringUtils.startsWithAny(charSequenceArray0[2], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[2], charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.stripToEmpty("...");
      assertTrue(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "[+'<S%Q ", (CharSequence) "...");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.chop("7IB\"-DdPtV");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("7IB\"-DdPt", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String string3 = StringUtils.removeStartIgnoreCase("q(%T9D)R< kh ]EM|E!", "7IB\"-DdPtV");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("q(%T9D)R< kh ]EM|E!", string3);
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.containsWhitespace(charSequenceArray0[3]);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      String string0 = StringUtils.leftPad("l", (-1), '{');
      assertEquals("l", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      String string0 = StringUtils.lowerCase("hDo0BE%{8BoVd`mli");
      assertEquals("hdo0be%{8bovd`mli", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "hdo0be%{8bovd`mli", (CharSequence) "hDo0BE%{8BoVd`mli");
      assertEquals(5, int0);
      
      String string1 = StringUtils.chomp("hDo0BE%{8BoVd`mli", "hDo0BE%{8BoVd`mli");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "hDo0BE%{8BoVd`mli", (CharSequence) "", 10);
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      String string2 = StringUtils.chop(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("ch", "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)76;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      String string3 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, byteArray0.length);
      assertEquals("\uFFFDL", string3);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)76}, byteArray0);
      assertNotNull(string3);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "\uFFFDL", (CharSequence) ",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -", (-2067));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isNumeric(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^PNml -\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      String string0 = StringUtils.chop("\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      String string0 = StringUtils.swapCase("%o{");
      assertEquals("%O{", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "%o{";
      charSequenceArray0[1] = (CharSequence) "%O{";
      String string1 = StringUtils.prependIfMissing("@GW]6", "%o{", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("%o{@GW]6", string1);
      assertNotNull(string1);
      
      String string2 = "e\"\"EGh/Cjo'6>;d*iy<";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%o{@GW]6";
      stringArray0[1] = "@GW]6";
      stringArray0[2] = "%o{";
      stringArray0[3] = "%O{";
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "@GW]6";
      stringArray1[1] = "%o{@GW]6";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("e\"\"EGh/Cjo'6>;d*iy<", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 4 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("MC|fNm\"~sQjUY", (String) null, "MC|fNm\"~sQjUY");
      assertEquals("MC|fNm\"~sQjUY", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "MC|fNm\"~sQjUY", (CharSequence) "MC|fNm\"~sQjUY");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chomp("Ie-a/y!pjl6m93[7Be");
      assertEquals("Ie-a/y!pjl6m93[7Be", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object4));
      assertNotNull(object6);
      
      String string0 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 4510, "_u@vs.jVijgFmM|B");
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("vKv@L}d8$@b`M~l", "", false);
      assertEquals(15, int0);
      
      String string1 = StringUtils.chomp("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("_u@vs.jVijgFmM|B", 269, 2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "_u@vs.jVijgFmM|B", (CharSequence) "2>6W<z");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.removeStartIgnoreCase("_u@vs.jVijgFmM|B", "$%nrk8");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_u@vs.jVijgFmM|B", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      String[] stringArray0 = new String[3];
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      String string0 = StringUtils.strip(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween(" ", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      String[] stringArray0 = new String[19];
      String string0 = StringUtils.replaceEach("Y #&c_lf@p)\"'jY #&c_lf@p)\"'j", stringArray0, stringArray0);
      assertEquals(19, stringArray0.length);
      assertEquals("Y #&c_lf@p)\"'jY #&c_lf@p)\"'j", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Y+&c", (CharSequence) null, 636);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      String string0 = StringUtils.stripEnd("E[G2tWIllegal range. There's no way to get from %s to %s with a step of %s.", "E[G2tWIllegal range. There's no way to get from %s to %s with a step of %s.");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      String string0 = StringUtils.chop("CIbS?SL9Mf&");
      assertEquals("CIbS?SL9Mf", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.join((Object[]) null, 'v');
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("T'-QuCPszU1/", "T'-QuCPszU1/", true);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "T'-QuCPszU1/", "T'-QuCPszU1/");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace(")knx{");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("&E3[yi\"&!bCy <g{", (String[]) null, (String[]) null);
      assertEquals("&E3[yi\"&!bCy <g{", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("}HP`NwR", "}HP`NwR", "}HP`NwR");
      assertEquals("}HP`NwR", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      String string0 = StringUtils.stripToNull("#U0Xa");
      assertEquals("#U0Xa", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, '!');
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("", " ", "\"!(>e}G?/[^B@H", (int) '!');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("DEOWz q,k:ysWp%", 7);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("DEOW...", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("DEOW...", (String) null, (-984));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      classLoader1.setClassAssertionStatus("y|CR[NP", true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      boolean boolean0 = StringUtils.startsWithAny("y|CR[NP", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.defaultIfBlank("", "");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      String string0 = StringUtils.stripStart("wI?d9);BUfrm&/?", "wI?d9);BUfrm&/?");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("U0NWb>3w", "U0NWb>3w");
      assertEquals("U0NWb>3w", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      String string0 = StringUtils.chop("t3K8onu");
      assertEquals("t3K8on", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(",gJt 92%v]0y,h%9UwUfc-&%:1S%7HL^ZNml -\n");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      String[] stringArray0 = new String[19];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(19, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int0);
      
      String string0 = StringUtils.rightPad(" ", 0);
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">b9ji[=s}~wOwd}";
      stringArray0[1] = "d*J(f";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("d*J(f", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("d*J(f", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      String string0 = StringUtils.rightPad("u", 248, "u");
      assertEquals("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfBlank("", supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("jZ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAsciiPrintable(charSequenceArray0[4]);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", (Supplier<CharSequence>) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[20];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(20, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      String string0 = StringUtils.wrap("' mches '", '{');
      assertEquals("{' mches '{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "{' mches '{", (CharSequence) "{' mches '{");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("{' mches '{");
      assertTrue(string1.equals((Object)string0));
      assertEquals("{' mches '{", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverseDelimited("{Z`!ZuW2_", '{');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Z`!ZuW2_", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Z`!ZuW2_";
      charSequenceArray0[1] = (CharSequence) "Z`!ZuW2_";
      charSequenceArray0[2] = (CharSequence) "{Z`!ZuW2_";
      charSequenceArray0[3] = (CharSequence) "{Z`!ZuW2_";
      charSequenceArray0[4] = (CharSequence) "Z`!ZuW2_";
      charSequenceArray0[5] = (CharSequence) "{Z`!ZuW2_";
      int int1 = StringUtils.indexOfAny((CharSequence) "Z`!ZuW2_", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("{' mches '{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      String string0 = StringUtils.unwrap("\"iPf9FYL:1*N`y{", "\"iPf9FYL:1*N`y{");
      assertEquals("\"iPf9FYL:1*N`y{", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      String string0 = StringUtils.chomp("Y");
      assertEquals("Y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("Y");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "T", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Y";
      charSequenceArray0[2] = (CharSequence) "Y";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Y";
      String string1 = StringUtils.substringBeforeLast("Y", "Y");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[2], "", 26);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "", 0);
      assertTrue(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string2 = StringUtils.getIfBlank("", (Supplier<String>) null);
      assertNull(string2);
      
      String string3 = StringUtils.left("0L,EfK4+/;O?f8X'", 3585);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("0L,EfK4+/;O?f8X'", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlpha("0L,EfK4+/;O?f8X'");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("Strings must not be null", "Strings must not be null");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      String string0 = StringUtils.rightPad("e.+Q^Du~m-o", (-2454), (String) null);
      assertEquals("e.+Q^Du~m-o", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("e.+Q^Du~m-o", "e.+Q^Du~m-o", (CharSequence[]) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("e.+Q^Du~m-o", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("e.+Q^Du~m-o", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeAll("e.+Q^Du~m-o", "Threshold must not be negative");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("e.+Q^Du~m-o", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = StringUtils.getBytes("", (Charset) null);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      String string3 = StringUtils.replaceIgnoreCase("e.+Q^Du~m-o", "e.+Q^Du~m-o", "e.+Q^Du~m-o");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("e.+Q^Du~m-o", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase("e.+Q^Du~m-o");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      String string4 = locale0.getDisplayLanguage();
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Italian", string4);
      assertNotNull(string4);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "e.+Q^Du~m-o", (CharSequence[]) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string5 = StringUtils.join(byteArray0, ';');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals(0, byteArray0.length);
      assertEquals("", string5);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string5);
      
      boolean boolean4 = StringUtils.isNumericSpace("e.+Q^Du~m-o");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string6 = StringUtils.substringAfterLast("Threshold must not be negative", "e.+Q^Du~m-o");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.rightPad("org.junitpioneer.jupiter.CartesiR", (int) (byte) (-119), "7rYdKA6x");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("org.junitpioneer.jupiter.CartesiR", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      String string0 = StringUtils.unwrap("5ND.IL|P", "5ND.IL|P");
      assertEquals("5ND.IL|P", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", '1');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfBlank("", supplier0);
      assertNull(string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-35);
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((-780));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "...");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      stack0.setSize(2485);
      assertEquals(2485, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2485, stack0.capacity());
      
      boolean boolean0 = stack0.add(">b9ji[=s}~wOwd}");
      assertTrue(boolean0);
      assertTrue(stack0.contains(">b9ji[=s}~wOwd}"));
      assertEquals(2486, stack0.size());
      assertEquals(4970, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      
      boolean boolean1 = stack0.add("XG3'XF9Z`n`jmnQ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(stack0.contains("XG3'XF9Z`n`jmnQ"));
      assertEquals(4970, stack0.capacity());
      assertEquals(2487, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(stack0.contains("XG3'XF9Z`n`jmnQ"));
      assertEquals(4970, stack0.capacity());
      assertEquals(2487, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "XG3'XF9Z`n`jmnQ");
      assertNotNull(string0);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("XG3'XF9Z`n`jmnQ"));
      assertEquals(4970, stack0.capacity());
      assertEquals(2487, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '(';
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals("ADAEAFAGAIALAMANAOAQARASATAUAWAXAZBABBBDBEBFBGBHBIBJBLBMBNBOBQBRBSBTBVBWBYBZCACCCDCFCGCHCICKCLCMCNCOCRCUCVCWCXCYCZDEDJDKDMDODZECEEEGEHERESETFIFJFKFMFOFRGAGBGDGEGFGGGHGIGLGMGNGPGQGRGSGTGUGWGYHKHMHNHRHTHUIDIEILIMINIOIQIRISITJEJMJOJPKEKGKHKIKMKNKPKRKWKYKZLALBLCLILKLRLSLTLULVLYMAMCMDMEMFMGMHMKMLMMMNMOMPMQMRMSMTMUMVMWMXMYMZNANCNENFNGNINLNONPNRNUNZOMPAPEPFPGPHPKPLPMPNPRPSPTPWPYQARERORSRURWSASBSCSDSESGSHSISJSKSLSMSNSOSRSSSTSVSXSYSZTCTDTFTGTHTJTKTLTMTNTOTRTTTVTWTZUAUGUMUSUYUZVAVCVEVGVIVNVUWFWSYEYTZAZMZW", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("ADAEAFAGAIALAMANAOAQARASATAUAWAXAZBABBBDBEBFBGBHBIBJBLBMBNBOBQBRBSBTBVBWBYBZCACCCDCFCGCHCICKCLCMCNCOCRCUCVCWCXCYCZDEDJDKDMDODZECEEEGEHERESETFIFJFKFMFOFRGAGBGDGEGFGGGHGIGLGMGNGPGQGRGSGTGUGWGYHKHMHNHRHTHUIDIEILIMINIOIQIRISITJEJMJOJPKEKGKHKIKMKNKPKRKWKYKZLALBLCLILKLRLSLTLULVLYMAMCMDMEMFMGMHMKMLMMMNMOMPMQMRMSMTMUMVMWMXMYMZNANCNENFNGNINLNONPNRNUNZOMPAPEPFPGPHPKPLPMPNPRPSPTPWPYQARERORSRURWSASBSCSDSESGSHSISJSKSLSMSNSOSRSSSTSVSXSYSZTCTDTFTGTHTJTKTLTMTNTOTRTTTVTWTZUAUGUMUSUYUZVAVCVEVGVIVNVUWFWSYEYTZAZMZW");
      assertEquals(500, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.containsWhitespace("ADAEAFAGAIALAMANAOAQARASATAUAWAXAZBABBBDBEBFBGBHBIBJBLBMBNBOBQBRBSBTBVBWBYBZCACCCDCFCGCHCICKCLCMCNCOCRCUCVCWCXCYCZDEDJDKDMDODZECEEEGEHERESETFIFJFKFMFOFRGAGBGDGEGFGGGHGIGLGMGNGPGQGRGSGTGUGWGYHKHMHNHRHTHUIDIEILIMINIOIQIRISITJEJMJOJPKEKGKHKIKMKNKPKRKWKYKZLALBLCLILKLRLSLTLULVLYMAMCMDMEMFMGMHMKMLMMMNMOMPMQMRMSMTMUMVMWMXMYMZNANCNENFNGNINLNONPNRNUNZOMPAPEPFPGPHPKPLPMPNPRPSPTPWPYQARERORSRURWSASBSCSDSESGSHSISJSKSLSMSNSOSRSSSTSVSXSYSZTCTDTFTGTHTJTKTLTMTNTOTRTTTVTWTZUAUGUMUSUYUZVAVCVEVGVIVNVUWFWSYEYTZAZMZW");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      int int0 = StringUtils.getFuzzyDistance("ADAEAFAGAIALAMANAOAQARASATAUAWAXAZBABBBDBEBFBGBHBIBJBLBMBNBOBQBRBSBTBVBWBYBZCACCCDCFCGCHCICKCLCMCNCOCRCUCVCWCXCYCZDEDJDKDMDODZECEEEGEHERESETFIFJFKFMFOFRGAGBGDGEGFGGGHGIGLGMGNGPGQGRGSGTGUGWGYHKHMHNHRHTHUIDIEILIMINIOIQIRISITJEJMJOJPKEKGKHKIKMKNKPKRKWKYKZLALBLCLILKLRLSLTLULVLYMAMCMDMEMFMGMHMKMLMMMNMOMPMQMRMSMTMUMVMWMXMYMZNANCNENFNGNINLNONPNRNUNZOMPAPEPFPGPHPKPLPMPNPRPSPTPWPYQARERORSRURWSASBSCSDSESGSHSISJSKSLSMSNSOSRSSSTSVSXSYSZTCTDTFTGTHTJTKTLTMTNTOTRTTTVTWTZUAUGUMUSUYUZVAVCVEVGVIVNVUWFWSYEYTZAZMZW", "ADAEAFAGAIALAMANAOAQARASATAUAWAXAZBABBBDBEBFBGBHBIBJBLBMBNBOBQBRBSBTBVBWBYBZCACCCDCFCGCHCICKCLCMCNCOCRCUCVCWCXCYCZDEDJDKDMDODZECEEEGEHERESETFIFJFKFMFOFRGAGBGDGEGFGGGHGIGLGMGNGPGQGRGSGTGUGWGYHKHMHNHRHTHUIDIEILIMINIOIQIRISITJEJMJOJPKEKGKHKIKMKNKPKRKWKYKZLALBLCLILKLRLSLTLULVLYMAMCMDMEMFMGMHMKMLMMMNMOMPMQMRMSMTMUMVMWMXMYMZNANCNENFNGNINLNONPNRNUNZOMPAPEPFPGPHPKPLPMPNPRPSPTPWPYQARERORSRURWSASBSCSDSESGSHSISJSKSLSMSNSOSRSSSTSVSXSYSZTCTDTFTGTHTJTKTLTMTNTOTRTTTVTWTZUAUGUMUSUYUZVAVCVEVGVIVNVUWFWSYEYTZAZMZW", locale0);
      assertEquals(1498, int0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add(">b9ji[=s}~wOwd}");
      assertTrue(boolean0);
      assertTrue(stack0.contains(">b9ji[=s}~wOwd}"));
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[>b9ji[=s}~wOwd}]", stack0.toString());
      
      boolean boolean1 = stack0.add("XG3'XF9Z`n`jmnQ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(stack0.contains(">b9ji[=s}~wOwd}"));
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[>b9ji[=s}~wOwd}, XG3'XF9Z`n`jmnQ]", stack0.toString());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(stack0.contains(">b9ji[=s}~wOwd}"));
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[>b9ji[=s}~wOwd}, XG3'XF9Z`n`jmnQ]", stack0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "XG3'XF9Z`n`jmnQ");
      assertEquals(">b9ji[=s}~wOwd}XG3'XF9Z`n`jmnQXG3'XF9Z`n`jmnQ", string0);
      assertNotNull(string0);
      assertTrue(stack0.contains(">b9ji[=s}~wOwd}"));
      assertFalse(stack0.contains(string0));
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[>b9ji[=s}~wOwd}, XG3'XF9Z`n`jmnQ]", stack0.toString());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '^');
      assertNull(string0);
      
      String string1 = StringUtils.toRootLowerCase((String) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Object) "! must return `CartesianProductTest.Sets`");
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("! must return `CartesianProductTest.Sets`"));
      assertEquals(1, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertTrue(linkedList0.contains("! must return `CartesianProductTest.Sets`"));
      assertEquals(1, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, "! must return `CartesianProductTest.Sets`");
      assertEquals("! must return `CartesianProductTest.Sets`", string0);
      assertNotNull(string0);
      assertTrue(linkedList0.contains("! must return `CartesianProductTest.Sets`"));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      String string0 = StringUtils.lowerCase("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...");
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp("offset cannot be negative", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category0;
      String string2 = StringUtils.join(locale_CategoryArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, locale_CategoryArray0.length);
      assertEquals("DISPLAY", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("DISPLAY");
      assertTrue(boolean0);
      
      String string3 = StringUtils.removePattern("&E3[yiZ&!bCy I<g{", "...");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("g{", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("mI%'6/z", 3465, 3465);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("mI%'6/z", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("offset cannot be negative...", 0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("offset cannot be negative...", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      String string0 = null;
      String string1 = StringUtils.join(objectArray0, (String) null);
      assertEquals(3, objectArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("java.lang.Object@2021a25cjava.lang.Object@21767cfajava.lang.Object@7c21c83d");
      assertFalse(string2.equals((Object)string1));
      assertEquals("d38c12c7@tcejbO.gnal.avajafc76712@tcejbO.gnal.avajc52a1202@tcejbO.gnal.avaj", string2);
      assertNotNull(string2);
      
      int[] intArray0 = new int[0];
      String string3 = StringUtils.join(intArray0, '[');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, intArray0.length);
      assertEquals("", string3);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        Charset.forName("Search and Replace array lengths don't match: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Search and Replace array lengths don't match: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("r=UC\"-/d|");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      String string0 = StringUtils.substring("r=UC\"-/d|", (-1));
      assertEquals("|", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("|", "r=UC\"-/d|");
      assertTrue(string1.equals((Object)string0));
      assertEquals("|", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "|", (CharSequence) "|", (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.stripStart("r=UC\"-/d|", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("r=UC\"-/d|", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-46);
      String string3 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(7, byteArray0.length);
      assertEquals("#\u0000\uFFFD\u000F\u001F \uFFFD", string3);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte) (-43), (byte)15, (byte)31, (byte)32, (byte) (-46)}, byteArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.join(byteArray0, '');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(7, byteArray0.length);
      assertEquals("350-43153132-46", string4);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte) (-43), (byte)15, (byte)31, (byte)32, (byte) (-46)}, byteArray0);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(";.&Te{g[Si2ee");
      assertEquals(";.&Te{g[Si2ee", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("hZ2", (-1308));
      assertFalse(string1.equals((Object)string0));
      assertEquals("hZ2", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length(";.&Te{g[Si2ee");
      assertEquals(13, int0);
      
      int int1 = StringUtils.compareIgnoreCase("hZ2", ";.&Te{g[Si2ee", true);
      assertFalse(int1 == int0);
      assertEquals(45, int1);
      
      String string2 = StringUtils.leftPad((String) null, 1202, "[x}#S!tx+\"$}ab~$j");
      assertNull(string2);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) ";.&Te{g[Si2ee", (CharSequence) "[x}#S!tx+\"$}ab~$j", 2537);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.wrapIfMissing("aw\u0001a`{S29s]Qp{InCombiningDiacriticalMarks}+", 'a');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("aw\u0001a`{S29s]Qp{InCombiningDiacriticalMarks}+a", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, "*6+=R(GU~", (-1308), (-2280));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      String string0 = StringUtils.join(locale_CategoryArray0);
      assertEquals(3, locale_CategoryArray0.length);
      assertEquals("FORMAT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("FORMAT");
      assertFalse(string1.equals((Object)string0));
      assertEquals("format", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("Aborting to potect against StackOverflowError - output of one loop is the input of another");
      assertEquals("aborting to potect against stackoverflowerror - output of one loop is the input of another", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = "Vh:f)g#+.$0TYn/m";
      try { 
        StringUtils.toString(byteArray0, "Vh:f)g#+.$0TYn/m");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      String string0 = StringUtils.wrap("YS'rlP'$3wxyR_a", "");
      assertEquals("YS'rlP'$3wxyR_a", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("", '+');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 1216, 1216);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("YS'rlP'$3wxyR_a");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "YS'rlP'$3wxyR_a";
      String string2 = StringUtils.join(objectArray0, " ", 8, (-1560));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "YS'rlP'$3wxyR_a");
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "\n");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      String string0 = StringUtils.join((Iterable<?>) treeSet0, "bH/yTL$bQd@V.dkuY6");
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(treeSet0.contains("bH/yTL$bQd@V.dkuY6"));
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing("", 'h');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("#K'7.k_kA@8\n[Pi.qykYNT$I=sK6jo{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "C_nnot clone Cloneable type ", (CharSequence) "C_nnot clone Cloneable type ", (-1572));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '%');
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, (-1727));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      String string0 = StringUtils.stripStart("No instructions to disable", "Gj/Ymk2zj");
      assertEquals("No instructions to disable", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '1', (-943), 2241);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -943
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      String string0 = StringUtils.difference("fUL+oma(", "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, charArray0.length);
      assertEquals("R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertArrayEquals(new char[] {'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[1] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[2] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[3] = "R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000";
      String string2 = StringUtils.replaceEachRepeatedly("jG&5p+VWVao9lp#", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("jG&5p+VWVao9lp#", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing((String) null, "jG&5p+VWVao9lp#");
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast("BuD", "[z+hB9]");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      String string0 = "@mgf9Zj2R-OOA:Z";
      String string1 = StringUtils.substring("@mgf9Zj2R-OOA:Z", (-205), 54);
      assertTrue(string1.equals((Object)string0));
      assertEquals("@mgf9Zj2R-OOA:Z", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "@mgf9Zj2R-OOA:Z", (-205), 54);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 54;
      longArray0[2] = 0L;
      longArray0[3] = (long) (-205);
      longArray0[4] = (long) 54;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '', (-1), 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      String string0 = StringUtils.chomp("9Td'gTc)o<6a-");
      assertEquals("9Td'gTc)o<6a-", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "9Td'gTc)o<6a-", (CharSequence) "9Td'gTc)o<6a-");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("E@!4k>xEaO;PV \"Ck", (-899), "g)FwN\";Zi");
      assertEquals("E@!4k>xEaO;PV \"Ck", string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-899);
      String string2 = StringUtils.join(floatArray0, ':');
      assertEquals("0.0:-899.0", string2);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.prependIfMissing("Threshold must not be negative", "Don't clear/set the same entry more than once.:", stringArray0);
      assertEquals("Don't clear/set the same entry more than once.:Threshold must not be negative", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Don't clear/set the same entry more than once.:Threshold must not be negative";
      charSequenceArray0[1] = (CharSequence) "Threshold must not be negative";
      String string1 = StringUtils.removeStart("L7J_}!{@~orrt", " vs  vs ");
      assertEquals("L7J_}!{@~orrt", string1);
      
      charSequenceArray0[2] = (CharSequence) "L7J_}!{@~orrt";
      int int0 = StringUtils.lastIndexOfAny("Don't clear/set the same entry more than once.:Threshold must not be negative", charSequenceArray0);
      assertEquals(47, int0);
      
      boolean boolean0 = StringUtils.contains(charSequenceArray0[0], 32);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      String string0 = StringUtils.leftPad("PcmL'_g7", 8211);
      boolean boolean0 = StringUtils.startsWithIgnoreCase(string0, "PcmL'_g7");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing(string0, "PcmL'_g7");
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("PcmL'_g7", string0, 8211);
      assertFalse(string0.equals((Object)string1));
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      int int2 = StringUtils.indexOf((CharSequence) null, 8211);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      StringUtils.firstNonEmpty(stringArray0);
      String string0 = StringUtils.wrapIfMissing("offset cannot be negative..", (String) null);
      assertNotNull(string0);
      assertEquals("offset cannot be negative..", string0);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      String string0 = StringUtils.rightPad("e.+Q^Du~m-o", (-2454), (String) null);
      assertEquals("e.+Q^Du~m-o", string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("e.+Q^Du~m-o", "e.+Q^Du~m-o", (CharSequence[]) null);
      StringUtils.equalsAnyIgnoreCase("e.+Q^Du~m-o", (CharSequence[]) null);
      StringUtils.removeAll("e.+Q^Du~m-o", "Threshold must not be negative");
      StringUtils.getBytes("", (Charset) null);
      String string2 = StringUtils.replaceIgnoreCase("e.+Q^Du~m-o", "e.+Q^Du~m-o", "e.+Q^Du~m-o");
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAllLowerCase("e.+Q^Du~m-o");
      StringUtils.containsAny((CharSequence) "e.+Q^Du~m-o", (CharSequence[]) null);
      Locale locale0 = Locale.ITALIAN;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      locale0.getDisplayLanguage();
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) null);
      String string3 = StringUtils.upperCase("", locale0);
      assertNotNull(string3);
      
      StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      int int0 = StringUtils.compare("e.+Q^Du~m-o", "Threshold must not be negative", true);
      assertEquals(17, int0);
      
      StringUtils.isAllLowerCase("e.+Q^Du~m-o");
      boolean boolean1 = StringUtils.isBlank("e.+Q^Du~m-o");
      assertTrue(boolean1 == boolean0);
      
      StringUtils.rightPad((String) null, 98, "");
      StringUtils.removePattern("e.+Q^Du~m-o", "e.+Q^Du~m-o");
      StringUtils.substringBetween("y{Y#%c*<r-.A\"q)mW", "e.+Q^Du~m-o", "9/");
      String string4 = StringUtils.rightPad("9/", 0, '~');
      assertNotNull(string4);
      
      StringUtils.compare((String) null, "e.+Q^Du~m-o", false);
      String string5 = StringUtils.strip("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
      assertEquals("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", string5);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      StringUtils.unwrap("", (String) null);
      StringUtils.rightPad("", 32, "org.junitpioneer.jupiter.CartesianProductTestExtension");
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "G5TAcKs('*0.\"");
      StringUtils.isWhitespace((CharSequence) null);
      StringUtils.replaceFirst("G5TAcKs('*0.\"", "", "qCqn");
      StringUtils.contains((CharSequence) "", (-875));
      StringUtils.substring("", (-875), 32);
      StringUtils.abbreviate("org.junitpioneer.jupiter.CartesianProductTestExtension", 32, 1673);
      StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.CartesianProductTestExtension");
      StringUtils.wrapIfMissing("org.junitpioneer.jupiter.CartesianProductTestExtension", "org.junitpioneer.jupiter.Cartesi");
      char char0 = ':';
      StringUtils.isAlphanumeric("qCqn");
      StringUtils.containsAny((CharSequence) "", (CharSequence) "qCqn");
      StringUtils.appendIfMissingIgnoreCase("org.junitpioneer.jupiter.CartesianProductTestExtension", "", stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("G5TAcKs('*0.\"", "6>LTCE^\":", (-875));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      long[] longArray0 = new long[1];
      String string0 = StringUtils.join(longArray0, '7');
      assertNotNull(string0);
      assertEquals("0", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "0", (CharSequence) "0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      StringUtils.join((float[]) null, '^');
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      String string0 = StringUtils.removeFirst((String) null, (String) null);
      assertNull(string0);
      
      String[] stringArray0 = new String[0];
      StringUtils.firstNonEmpty(stringArray0);
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, " &E3[yiZ&!bCy I<g{G?3Q(7");
      boolean boolean1 = StringUtils.isWhitespace(" &E3[yiZ&!bCy I<g{G?3Q(7");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      StringUtils.deleteWhitespace("8Aj0");
      StringUtils.indexOfIgnoreCase((CharSequence) "8Aj0", (CharSequence) "8Aj0");
      String string0 = StringUtils.leftPad((String) null, 0, "w`");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      StringUtils.lowerCase("GMT");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "GMT";
      objectArray0[1] = (Object) "gmt";
      objectArray0[2] = (Object) "gmt";
      StringUtils.join(objectArray0, "GMT");
      StringUtils.wrapIfMissing("GMT", '#');
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(2506);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      linkedHashSet0.add(locale_Category0);
      Object object0 = new Object();
      Object object1 = new Object();
      linkedHashSet0.add(object1);
      linkedHashSet0.add(object0);
      StringUtils.join((Iterable<?>) linkedHashSet0, "GMTGMTgmtGMTgmt");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "#GMT#";
      stringArray0[1] = "GMTGMTgmtGMTgmt";
      StringUtils.firstNonEmpty(stringArray0);
      StringUtils.contains((CharSequence) "#GMT#", 0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) '#';
      floatArray0[4] = (float) 0;
      StringUtils.join(floatArray0, '#');
      StringUtils.toRootLowerCase("GMTGMTgmtGMTgmt");
      StringUtils.isAsciiPrintable("gmtgmtgmtgmtgmt");
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "GMT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("x#3\"", "x#3\"");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 2903);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      StringUtils.startsWithAny("Z`5&|_|\";li9F?F1k?", charSequenceArray0);
      String string0 = StringUtils.substring((String) null, 15, 15);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 7, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(" ~5jyy/UO}BL}I", " ~5jyy/UO}BL}I");
      assertEquals(" ~5jyy/UO}BL}I", string0);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      StringUtils.substringAfterLast((String) null, "");
      String string0 = "org.junitpioneer.jupiter.CartesianProductTestExtension";
      StringUtils.rightPad((String) null, 32, "org.junitpioneer.jupiter.CartesianProductTestExtension");
      StringUtils.splitByWholeSeparator((String) null, "G5TAcKs('*0.\"");
      StringUtils.isWhitespace((CharSequence) null);
      StringUtils.replaceFirst("G5TAcKs('*0.\"", (String) null, "qCqn");
      StringUtils.contains((CharSequence) "", (-875));
      StringUtils.substring((String) null, (-875), 32);
      StringUtils.abbreviate("org.junitpioneer.jupiter.CartesianProductTestExtension", 32, 1673);
      StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "org.junitpioneer.jupiter.CartesianProductTestExtension");
      StringUtils.wrapIfMissing("org.junitpioneer.jupiter.CartesianProductTestExtension", (String) null);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1673;
      longArray0[1] = (long) (-875);
      longArray0[2] = (long) (-875);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-875);
      longArray0[5] = (long) 32;
      longArray0[6] = (long) 1673;
      char char0 = '.';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '.', 1673, 1914);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1673
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)87;
      shortArray0[1] = (short) (-4569);
      shortArray0[2] = (short)5;
      shortArray0[3] = (short)7;
      String string0 = StringUtils.join(shortArray0, 'w');
      assertNotNull(string0);
      assertEquals("87w-4569w5w7", string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("87w-4569w5w7", "87w-4569w5w7");
      String string1 = StringUtils.substringBetween("87w-4569w5w7", "87w-4569w5w7");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "87w-4569w5w7";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "87w-4569w5w7";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "87w-4569w5w7";
      charSequenceArray0[7] = (CharSequence) "87w-4569w5w7";
      charSequenceArray0[8] = (CharSequence) "87w-4569w5w7";
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("87w-4569w5w7", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      StringUtils.swapCase("org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider");
      StringUtils.chomp("org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider");
      StringUtils.overlay("org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", "org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", 0, (-1849));
      StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.params.RangeSourceArgumentsProviderorg.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", (char[]) null);
      String string0 = StringUtils.replaceChars((String) null, "|-QS", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      StringUtils.lowerCase((String) null);
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      String string0 = StringUtils.join((Locale.Category[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("\u0000\u0000\u0000\u0000\u0000", "\u0000\u0000\u0000\u0000\u0000");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      StringUtils.getDigits((String) null);
      StringUtils.swapCase("");
      StringUtils.stripAll((String[]) null, "");
      StringUtils.join((Object[]) null);
      StringUtils.isAllBlank((CharSequence[]) null);
      StringUtils.equalsAnyIgnoreCase("", (CharSequence[]) null);
      StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      StringUtils.lowerCase((String) null);
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = 'v';
      charArray0[2] = 'C';
      charArray0[3] = ',';
      charArray0[4] = 'b';
      charArray0[5] = 'q';
      charArray0[6] = '<';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("5vC,bq<", string0);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      StringUtils.toRootLowerCase("9Td'gTc)o<6a-");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "Z)<\":o5k5M");
      String string0 = StringUtils.substring("\r", (-2335));
      StringUtils.substringBefore("9Td'gTc)o<6a-", "");
      boolean boolean0 = StringUtils.isNumericSpace("\r");
      Locale locale0 = Locale.ENGLISH;
      String string1 = StringUtils.defaultIfEmpty("\r", "^c:XvaQBM;Ws@[\"5y");
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "9Td'gTc)o<6a-");
      assertNotNull(stringArray1);
      
      StringUtils.equals((CharSequence) "$'cX}!", (CharSequence) "Z)<\":o5k5M");
      boolean boolean1 = StringUtils.isAllBlank(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      short[] shortArray0 = new short[1];
      StringUtils.join(shortArray0, 'P');
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'P', 115, 641);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 115
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      short[] shortArray0 = new short[17];
      String string0 = StringUtils.join(shortArray0, 'P');
      assertNotNull(string0);
      assertEquals("0P0P0P0P0P0P0P0P0P0P0P0P0P0P0P0P0", string0);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      StringUtils.trimToEmpty("");
      StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      StringUtils.defaultString("No instructions to disable");
      StringUtils.substringAfter("o", "");
      StringUtils.removeEnd("", "113y0~523[*FMHdr@z");
      StringUtils.unwrap("", 'f');
      StringUtils.strip("");
      boolean boolean0 = StringUtils.isAlpha("EuW~BrCd-fW15(Opc:#");
      StringUtils.center("", 48, "");
      StringUtils.overlay("                                                ", "IdPr<", 5, 48);
      boolean boolean1 = StringUtils.endsWithIgnoreCase("No instructions to disable", " vs ");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = StringUtils.center("CIbS?SL9Mf&", (-5), "CIbS?SL9Mf&");
      assertEquals("CIbS?SL9Mf&", string0);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      String[] stringArray0 = StringUtils.split("r", "{aB-)0[,+d&};zc");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("org.junitpioneer.jupiter.SystemPropertyExtension", "r", "r");
      String string0 = StringUtils.firstNonBlank(stringArray1);
      assertEquals("g.junitpionee", string0);
      assertEquals(2, stringArray1.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast(" annotation, but there were ", "r");
      assertEquals("e ", string1);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      String string1 = StringUtils.leftPad(" ", 8192);
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) string1, 206);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getDigits(" ");
      String string3 = StringUtils.repeat("Search and Replace array lengths don't match: ", 22);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.normalizeSpace(string1);
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      String string0 = StringUtils.lowerCase("Minimum abbreviation width with offset is %d");
      assertEquals("minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      String string0 = StringUtils.center("r?XkewNpi", 3866, "r?XkewNpi");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      String string0 = StringUtils.chop("khEX2MeNB1\"v_BNPd7B");
      assertEquals("khEX2MeNB1\"v_BNPd7", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      String string1 = StringUtils.removeStartIgnoreCase("[t2SJt_`gC", " ");
      assertEquals("[t2SJt_`gC", string1);
      
      String string2 = StringUtils.wrap("fRoVj\"M:%m{hy/&-;", '[');
      assertEquals("[fRoVj\"M:%m{hy/&-;[", string2);
      
      StringUtils.remove("", "...");
      String string3 = StringUtils.removeIgnoreCase("blank_blank_blank_2014", "khEX2MeNB1\"v_BNPd7B");
      assertEquals("blank_blank_blank_2014", string3);
      
      boolean boolean0 = StringUtils.isBlank("j&D1#4)P,152<E");
      assertFalse(boolean0);
      
      String string4 = StringUtils.uncapitalize("Search and Replace array lengths don't match: ");
      assertEquals("search and Replace array lengths don't match: ", string4);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'p';
      String string5 = StringUtils.join(floatArray0, '[');
      assertEquals("112.0", string5);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("GkVGVSB8 Q_=/&b", "GkVGVSB8 Q_=/&b");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      String string0 = StringUtils.replaceAll("Search and Replace array lengths don't match: \n", "\r", "\r");
      assertEquals("Search and Replace array lengths don't match: \n", string0);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      String string0 = StringUtils.chomp("9Td'gTc)o<6a-");
      String string1 = StringUtils.uncapitalize("9Td'gTc)o<6a-");
      StringUtils.mid("9Td'gTc)o<6a-", 46, 322);
      String string2 = StringUtils.abbreviate("9Td'gTc)o<6a-", "offset cannot be negative", 122, 46);
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.countMatches((CharSequence) "9Td'gTc)o<6a-", (CharSequence) "offset cannot be negative");
      assertEquals(0, int0);
      
      String string3 = StringUtils.removeStartIgnoreCase("9Td'gTc)o<6a-", "");
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("GkVGVSB8 Q_=/&b");
      assertEquals("GkVGVSB8 Q_=/&b", string0);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '`');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      String string0 = StringUtils.removeFirst((String) null, "");
      assertNull(string0);
      
      StringUtils.countMatches((CharSequence) null, (CharSequence) "");
      String string1 = StringUtils.replaceEachRepeatedly("org.junitpioneer.jupiter.RetryingTestExtension", (String[]) null, (String[]) null);
      assertEquals("org.junitpioneer.jupiter.RetryingTestExtension", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "");
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.RetryingTestExtension", (CharSequence[]) null);
      StringUtils.toRootUpperCase((String) null);
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.RetryingTestExtension", (CharSequence) null);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.chop("h");
      assertNotNull(string2);
      
      StringUtils.isAnyBlank((CharSequence[]) null);
      String string3 = StringUtils.normalizeSpace("Y7A\"74q DU1`D3/oH;");
      assertEquals("Y7A\"74q DU1`D3/oH;", string3);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("hZ2", "hZ2");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      String string0 = StringUtils.chomp("9Td'gTc)o<6a-");
      String string1 = StringUtils.uncapitalize("9Td'gTc)o<6a-");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("", 322);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "\u0000\u0000\u0000\u0000\u0000\u0000", (-1295), (-1295));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      String string0 = StringUtils.abbreviate("z", 6);
      assertEquals("z", string0);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("x", 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 109);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      String string0 = "' contains '";
      StringUtils.join(objectArray0, "' contains '", 502, 53);
      String string1 = "4fHDj$!g:sR['sMz";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("4fHDj$!g:sR['sMz", 1917, (-41));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      StringUtils.mid("FS!llCcEOl", 3081, 3081);
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '!');
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      StringUtils.join(objectArray0, "Never disable parameterized test method itself", 3002, 502);
      String string1 = StringUtils.abbreviate("' contains '", 502, 64);
      assertEquals("' contains '", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "FS!llCcEOl", (CharSequence) "' contains '");
      assertEquals(12, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("' contains '");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("' contains '", '^');
      assertEquals(1, stringArray1.length);
      
      String string2 = StringUtils.join(objectArray0, "");
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\"eBv%.@OfW;$", ' ');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 18.0;
      String string0 = StringUtils.join(doubleArray0, 'k');
      assertEquals("18.0k0.0k0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("6]Fl9Qn5b9=%Va&bJ");
      boolean boolean0 = StringUtils.containsAny((CharSequence) "6]Fl9Qn5b9=%Va&bJ", (CharSequence[]) stringArray0);
      boolean boolean1 = StringUtils.isAlphaSpace("6]Fl9Qn5b9=%Va&bJ");
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.substringAfterLast("6]Fl9Qn5b9=%Va&bJ", "6]Fl9Qn5b9=%Va&bJ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 18.0;
      String string0 = StringUtils.join(doubleArray0, 'i');
      assertEquals("18.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      String string0 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      boolean boolean0 = StringUtils.containsAny((CharSequence) "9sU690,", (CharSequence[]) stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("org.apache.commons.lang3.StringUtils", '`');
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("5yw;u", '(');
      assertNotNull(string0);
      assertEquals("5yw;u", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (double) '(';
      doubleArray0[2] = (double) '(';
      doubleArray0[3] = (double) '(';
      String string1 = StringUtils.join(doubleArray0, '#');
      assertEquals("40.0#40.0#40.0#40.0", string1);
      
      charSequenceArray0[0] = (CharSequence) "40.0#40.0#40.0#40.0";
      charSequenceArray0[1] = (CharSequence) "5yw;u";
      charSequenceArray0[2] = (CharSequence) "5yw;u";
      charSequenceArray0[3] = (CharSequence) "5yw;u";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "5yw;u", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">b9ji[=s}~wOwd}";
      stringArray0[1] = "d*J(f";
      int[] intArray0 = new int[6];
      intArray0[0] = (-2645);
      intArray0[1] = 116;
      intArray0[2] = 1858;
      intArray0[3] = (-38);
      intArray0[4] = 0;
      intArray0[5] = (-3027);
      String string0 = StringUtils.join(intArray0, '9');
      assertNotNull(string0);
      assertEquals("-26459116918589-38909-3027", string0);
      
      String string1 = StringUtils.rotate("x_D8", (-38));
      assertEquals("D8x_", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("2o}>anHmP*qG ;)J`");
      assertEquals(2, stringArray1.length);
      
      String string2 = StringUtils.wrapIfMissing(">b9ji[=s}~wOwd}", ',');
      boolean boolean0 = StringUtils.isAllUpperCase("-26459116918589-38909-3027");
      assertFalse(boolean0);
      
      StringUtils.indexOf((CharSequence) ",>b9ji[=s}~wOwd},", (CharSequence) "D8x_", (-38));
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "-26459116918589-38909-3027", (CharSequence) ">b9ji[=s}~wOwd}");
      assertEquals(0, int0);
      
      String string3 = StringUtils.abbreviate(",>b9ji[=s}~wOwd},", 2355);
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("dRCJg QW4`Qw", "!");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("mIV6en/(P?qDX7x11S");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      String string0 = StringUtils.wrap("1[", 'w');
      assertEquals("w1[w", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "w1[w", (CharSequence) "1[");
      boolean boolean1 = StringUtils.contains((CharSequence) "1[", (CharSequence) "1[");
      boolean boolean2 = StringUtils.isWhitespace("1[");
      assertFalse(boolean2 == boolean0);
      
      StringUtils.remove("1[", 'w');
      String string1 = StringUtils.replaceIgnoreCase("Locale must not be null", "", "w1[w", (-711));
      assertEquals("Locale must not be null", string1);
      
      StringUtils.removeStart("", "Locale must not be null");
      int int0 = StringUtils.compare(",/!~", "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", false);
      assertEquals((-20), int0);
      
      String string2 = StringUtils.rotate("...", (-711));
      assertEquals("...", string2);
      
      StringUtils.join((int[]) null, 'w');
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.rotate("2o}>anHmP*qG ;)J`", (-711));
      assertEquals(")J`2o}>anHmP*qG ;", string3);
      
      charSequenceArray0[1] = (CharSequence) "*qG ;)J`2o}>anHmP";
      charSequenceArray0[2] = (CharSequence) "...";
      charSequenceArray0[3] = (CharSequence) "...";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "w1[w";
      charSequenceArray0[6] = (CharSequence) "Locale must not be null";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.";
      boolean boolean3 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      String string0 = StringUtils.center("{", 1, "{");
      assertEquals("{", string0);
      
      String string1 = StringUtils.wrapIfMissing("%GInpdBHJg", "Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]");
      assertEquals("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]%GInpdBHJgMethod `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Array and element cannot both be null", " ", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("8", "8");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      String string0 = StringUtils.substring(", '", (-1483));
      assertEquals(", '", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) ", '", (CharSequence) ", '");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 3942.0F;
      floatArray0[1] = 657.9105F;
      StringUtils.getCommonPrefix((String[]) null);
      StringUtils.rightPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-80));
      String string0 = StringUtils.substring((String) null, 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.rotate(string0, 13);
      assertEquals("u\\", string1);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      String string0 = StringUtils.mid("FS!llCcEOl", 3081, 3081);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("FS!llCcEOl", "FS!llCcEOl");
      assertEquals("FS!llCcEOl", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "FS!llCcEOl", (CharSequence) "FS!llCcEOl", 8);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("t(l?i)z winzbUQ-H,'", "FS!llCcEOl");
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "t(l?i)z winzbUQ-H,'";
      charSequenceArray0[1] = (CharSequence) "FS!llCcEOl";
      charSequenceArray0[2] = (CharSequence) "FS!llCcEOl";
      String string3 = StringUtils.leftPad("<0", 269, "_u@vs.jVijgFmM|B");
      assertNotNull(string3);
      assertEquals("_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijg<0", string3);
      
      charSequenceArray0[3] = (CharSequence) "_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijgFmM|B_u@vs.jVijg<0";
      int int1 = StringUtils.lastIndexOfAny("t(l?i)z winzbUQ-H,'", charSequenceArray0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.compareIgnoreCase("Object varargs must not be null", "FS!llCcEOl", false);
      assertEquals(9, int2);
      
      String string4 = StringUtils.chomp("");
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      StringUtils.lowerCase("");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      StringUtils.join(objectArray0, "");
      StringUtils.wrapIfMissing("", '#');
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(2506);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      linkedHashSet0.add(locale_Category0);
      Object object0 = new Object();
      Object object1 = new Object();
      linkedHashSet0.add(object1);
      linkedHashSet0.add(object0);
      StringUtils.join((Iterable<?>) linkedHashSet0, "");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      StringUtils.firstNonEmpty(stringArray0);
      StringUtils.contains((CharSequence) null, 0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) '#';
      floatArray0[4] = (float) 0;
      StringUtils.join(floatArray0, '#');
      StringUtils.toRootLowerCase("");
      StringUtils.isAsciiPrintable("");
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      StringUtils.lowerCase("...");
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...");
      assertEquals(0, int0);
      
      String string0 = StringUtils.substring("x_D8", 0);
      assertNotNull(string0);
      assertEquals("x_D8", string0);
      
      String string1 = StringUtils.substringBefore("...", "offset cannot be negative");
      assertEquals("...", string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("x_D8");
      Locale locale0 = Locale.ENGLISH;
      StringUtils.defaultIfEmpty((String) null, "wAbdZ9&BQ& Z8=6");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "...";
      stringArray0[1] = "PY5";
      stringArray0[2] = "...";
      StringUtils.stripAll(stringArray0, "...");
      boolean boolean1 = StringUtils.equals((CharSequence) ";", (CharSequence) "...");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.center(">b9ji[=s}~wOwd}", (-1314), "d4nVTu`*uuen$R3^|.h");
      assertEquals(">b9ji[=s}~wOwd}", string0);
      
      StringUtils.lowerCase(">b9ji[=s}~wOwd}");
      String string1 = StringUtils.replaceAll("org.junitpioneer.jupiter.params.ShortRange", "d4nVTu`*uuen$R3^|.h", ">b9ji[=s}~wOwd}");
      String string2 = StringUtils.normalizeSpace(">b9ji[=s}~wowd}");
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)11;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)971;
      StringUtils.join(shortArray0, 'h', 1101, (int) (short)0);
      boolean boolean0 = StringUtils.endsWithIgnoreCase("d4nVTu`*uuen$R3^|.h", "org.junitpioneer.jupiter.params.ShortRange");
      String string3 = StringUtils.replaceEachRepeatedly("org.junitpioneer.jupiter.params.>b9ji[=s}~wOwd}ortRange", stringArray0, stringArray0);
      assertTrue(string3.equals((Object)string1));
      
      StringUtils.firstNonBlank(stringArray0);
      StringUtils.prependIfMissing("aS{m\"N", "org.junitpioneer.jupiter.params.ShortRange", (CharSequence[]) null);
      boolean boolean1 = StringUtils.isAsciiPrintable("aS{m\"N");
      assertFalse(boolean1 == boolean0);
      
      StringUtils.mid("org.junitpioneer.jupiter.params.ShortRange", 83, (short)11);
      String string4 = StringUtils.substringBefore(">b9ji[=s}~wowd}", (String) null);
      assertTrue(string4.equals((Object)string2));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (-1314);
      longArray0[2] = (long) (short)971;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) 1101;
      String string5 = StringUtils.join(longArray0, 'M', 703, (int) (short)0);
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("YS'rlP'$3wxyR_a", "\r");
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("2!!E1^Ub'.V)Q9A@Don't clear/set the same entry more than once.", "YS'rlP'$3wxyR_a", false);
      assertEquals((-71), int0);
      
      StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      StringUtils.toRootUpperCase((String) null);
      String string0 = StringUtils.substringAfter("org.j3nitpioneer.vintage.TimeoutExtensionfUL+oma(", "CHV.o4]GCP\"X[]N6d'");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.right("CHV.o4]GCP\"X[]N6d'", 1044);
      assertEquals("CHV.o4]GCP\"X[]N6d'", string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean1 = linkedList0.add((Object) "CHV.o4]GCP\"X[]N6d'");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-4615);
      intArray0[3] = 2964;
      intArray0[4] = 0;
      intArray0[5] = 0;
      StringUtils.join(intArray0, 'H');
      StringUtils.removeAll((String) null, (String) null);
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = '4';
      charArray0[6] = 'H';
      charArray0[7] = '4';
      charArray0[8] = '4';
      StringUtils.indexOfAnyBut((CharSequence) ">e.UD", charArray0);
      Locale locale0 = Locale.GERMANY;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.lookup(vector0, linkedList0);
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      String string0 = StringUtils.difference("t3K8onu", "t3K8onu");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      String string0 = StringUtils.rotate("JeBqZWcVe/i|", (-4470));
      assertNotNull(string0);
      assertEquals("cVe/i|JeBqZW", string0);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("N9=");
      assertEquals("N9=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      StringUtils.compareIgnoreCase("&E3[yiZ&!bCy I<g{", "&E3[yiZ&!bCy I<g{");
      String string0 = StringUtils.substringBetween("&E3[yiZ&!bCy I<g{", "&E3[yiZ&!bCy I<g{");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      String string0 = StringUtils.join((float[]) null, '*');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("RWf3\"mjBf8(|83M._", "RWf3\"mjBf8(|83M._");
      assertEquals(19, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">b9ji[=s}~wOwd}";
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("+'?(&*}hooO;YB%", "\r");
      String string0 = StringUtils.substring("la", (-2335));
      assertEquals("la", string0);
      
      String string1 = StringUtils.substringBefore("OZK3*,6z&mV&=}z-tAQ", "OZK3*,6z&mV&=}z-tAQ");
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("d*J(f");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ENGLISH;
      String string2 = StringUtils.defaultIfEmpty("FyR<yc(H5g|H2", ";");
      assertEquals("FyR<yc(H5g|H2", string2);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, " ");
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) ";", (CharSequence) "x_D8");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      String string0 = StringUtils.wrap("' matches '", '{');
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "{' matches '{", (CharSequence) "{' matches '{");
      assertEquals((-1), int0);
      
      StringUtils.strip("{' matches '{");
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{Z`!ZuW2_", "{' matches '{");
      assertEquals(1, stringArray0.length);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      String string1 = StringUtils.strip("{' matches '{");
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlpha("{' matches '{");
      String string2 = StringUtils.center("' matches '", 447, "e0L=X0mVmM|%O%-]r)");
      assertEquals("e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0' matches 'e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0L=X0mVmM|%O%-]r)e0", string2);
      
      String string3 = StringUtils.overlay("lLx", "{' matches '{", 64, 5);
      assertEquals("lLx{' matches '{", string3);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("lLx", "{' matches '{");
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.removeStartIgnoreCase("lLx", "{+j^ma*XD3Hh'c]K");
      assertEquals("lLx", string4);
      
      StringUtils.contains((CharSequence) "", (CharSequence) null);
      StringUtils.lastIndexOf((CharSequence) "lLx", (CharSequence) ",&jQpcP|9A}^xoM4j");
      int int1 = StringUtils.indexOfDifference((CharSequence) "lLx", (CharSequence) "");
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      String string0 = StringUtils.difference("fUL+oma(", "fUL+oma(");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isEmpty("fUL+oma(");
      String string1 = StringUtils.removeStartIgnoreCase((String) null, "");
      assertNull(string1);
      
      String string2 = StringUtils.wrap((String) null, '[');
      assertNull(string2);
      
      String string3 = StringUtils.remove((String) null, "ZU)dk=K;Cz;<C");
      assertNull(string3);
      
      StringUtils.join((Object[]) null, (String) null, 53, 1321);
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      String string4 = StringUtils.valueOf(charArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultIfBlank((String) null, "...");
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) "fUL+oma(");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      StringUtils.upperCase("org.junitpioneer.jupiter.params.DisableIfNameExtension");
      StringUtils.swapCase("");
      String string0 = StringUtils.getIfEmpty("3/9~]t}54^", (Supplier<String>) null);
      assertEquals("3/9~]t}54^", string0);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      Locale locale0 = Locale.UK;
      String string0 = StringUtils.lowerCase("5hw%^GN:`2)", locale0);
      assertNotNull(string0);
      assertEquals("5hw%^gn:`2)", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "5hw%^gn:`2)", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("L$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      StringUtils.join((float[]) null, '^');
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("%>ah#+TeoC=aig^ZU@", supplier0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("%>ah#+TeoC=aig^ZU@");
      assertEquals("%>AH#+TEOC=AIG^ZU@", string1);
      
      boolean boolean1 = StringUtils.isNotEmpty((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("SN+G", "\r");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.substring("OZK3*,6z&mV&=}z-tAQ", (-2335));
      assertEquals("OZK3*,6z&mV&=}z-tAQ", string2);
      assertNotNull(string2);
      
      StringUtils.substringBefore("", "");
      StringUtils.isNumericSpace("");
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = Locale.FRENCH;
      locale0.getDisplayLanguage(locale1);
      String string3 = StringUtils.lowerCase("", locale0);
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.isNumeric("g+mfv9\"");
      // Undeclared exception!
      try { 
        StringUtils.truncate("g+mfv9\"", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("7", "7", "7");
      StringUtils.isNumeric("7");
      StringUtils.equals((CharSequence) "7", (CharSequence) "7");
      String string1 = StringUtils.trim("7");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, 4610, (-1795));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      StringUtils.splitByCharacterType(" ");
      StringUtils.substringAfterLast(" ", " ");
      StringUtils.removeStartIgnoreCase("fc0?6JyvkWD", "");
      StringUtils.center("", (-1), "fc0?6JyvkWD");
      StringUtils.lowerCase("fc0?6JyvkWD");
      StringUtils.replaceAll("", "()` not found in ", ".1i'*Sn");
      StringUtils.normalizeSpace("fc0?6jyvkwd");
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'h', 0, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      StringUtils.chomp("Y");
      String[] stringArray0 = StringUtils.split("Y", "Y");
      StringUtils.leftPad(" doesn't match any regular expression.", 150, "Y");
      StringUtils.substringBefore("org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", "TSRvuUYF5$\"");
      StringUtils.isNumericSpace("Search and Replace array lengths don't match: ");
      Locale locale0 = Locale.ENGLISH;
      StringUtils.compareIgnoreCase("org.apache.commons.lang3.StringUtils", "org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", false);
      StringUtils.chomp(")#WoZmM/`Hk{)cE");
      StringUtils.stripEnd("eyq\bV)#%3)(", ")#WoZmM/`Hk{)cE");
      StringUtils.isAnyBlank(stringArray0);
      StringUtils.toCodePoints(")#WoZmM/`Hk{)cE");
      String string0 = StringUtils.join((float[]) null, 'w', 54, 54);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, 'h');
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&E3[yiZ&!bCy I<g{", "hZ2");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2295.9226F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-696.0F);
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "&E3[yiZ&!bCy I<g{", (CharSequence) "hZ2");
      assertEquals("&E3[yiZ&!bCy I<g{", charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("&E3[yiZ&!bCy I<g{", charSequenceArray0);
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("&E3[yiZ&!bCy I<g{", "lLx$%nrk8", (int) (byte) (-116));
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap(" must be static", "7fFtb1R/v?mXU=");
      assertEquals(" must be static", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "lLx$%nrk8", (CharSequence) "", (int) (byte)0);
      StringUtils.mid("F", (byte)98, 37);
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) " must be static");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("Locale must not be null", "Locale must not be null", "Locale must not be null");
      assertEquals("Locale must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      String string0 = StringUtils.removeStartIgnoreCase("x#3\"", "x#3\"");
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("...", "...");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "...", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray1);
      assertEquals(13, stringArray1.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      String string0 = StringUtils.leftPad("PcmL'_g7", 8211);
      String string1 = StringUtils.truncate("PcmL'_g7", 8211, 8211);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      String string0 = StringUtils.swapCase("58[>-9sGB'");
      assertEquals("58[>-9Sgb'", string0);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      StringUtils.difference("'4rG-%jO_5m9Bdv%qU", "p{InCombiningDiacriticalMarks}+");
      StringUtils.truncate((String) null, 101);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "I>pd9U-zCffgq7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      StringUtils.removeStartIgnoreCase("", (String) null);
      StringUtils.center("lH[.7U<2$OeP?Ck.Fg4u[K[#y>W,MRUd", 48);
      StringUtils.containsAny((CharSequence) "       lH[.7U<2$OeP?Ck.Fg4u[K[#y>W,MRUd        ", (char[]) null);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "lH[.7U<2$OeP?Ck.Fg4u[K[#y>W,MRUd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      float[] floatArray0 = new float[6];
      String string0 = StringUtils.join(floatArray0, '3');
      assertEquals("0.030.030.030.030.030.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 3942.0F;
      floatArray0[1] = 657.9105F;
      floatArray0[2] = 2336.0F;
      StringUtils.join(floatArray0, 'm', 0, 0);
      StringUtils.isNumeric("");
      String string0 = "";
      StringUtils.removeStartIgnoreCase("", "hM#|E0tZZ|r?:");
      String string1 = ", '";
      StringUtils.removeFirst("r^!9", ", '");
      StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      String string0 = StringUtils.removeFirst(" ", " ");
      assertEquals("", string0);
  }
}
