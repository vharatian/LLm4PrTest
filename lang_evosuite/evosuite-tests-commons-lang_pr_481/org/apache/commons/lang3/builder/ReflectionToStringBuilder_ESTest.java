/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 14:00:43 GMT 2025
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Field;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle;
import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import org.apache.commons.lang3.builder.StandardToStringStyle;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ReflectionToStringBuilder_ESTest extends ReflectionToStringBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder.toString((Object) reflectionToStringBuilder0, toStringStyle0, false, true, true, (Class<? super Object>) class0);
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
      assertFalse(reflectionToStringBuilder0.isAppendTransients());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer("");
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0, stringBuffer0, (Class<? super Object>) class0, false, true, false);
      reflectionToStringBuilder0.appendFieldsIn(class0);
      assertFalse(reflectionToStringBuilder0.isExcludeNullValues());
      assertTrue(reflectionToStringBuilder0.isAppendStatics());
      assertFalse(reflectionToStringBuilder0.isAppendTransients());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[9];
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      ToStringBuilder.setDefaultStyle(toStringStyle0);
      String string0 = ReflectionToStringBuilder.toStringExclude((Object) class0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = ReflectionToStringBuilder.toStringExclude((Object) ";qF5", (Collection<String>) linkedList0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      ToStringBuilder.setDefaultStyle(toStringStyle0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = ReflectionToStringBuilder.toStringExclude(object0, (Collection<String>) linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      Class<Object> class0 = Object.class;
      String string0 = ReflectionToStringBuilder.toString(object0, toStringStyle0, false, false, true, (Class<? super Object>) class0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      Class<Object> class0 = Object.class;
      String string0 = ReflectionToStringBuilder.toString(object0, toStringStyle0, true, false, (Class<? super Object>) class0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      String string0 = ReflectionToStringBuilder.toString((Object) "e", (ToStringStyle) multilineRecursiveToStringStyle0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      String string0 = ReflectionToStringBuilder.toString(object0, toStringStyle0, false, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      String string0 = ReflectionToStringBuilder.toString((Object) linkedList0, toStringStyle0, true);
      assertFalse(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      String string0 = ReflectionToStringBuilder.toString(object0, toStringStyle0, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      String string0 = ReflectionToStringBuilder.toString(object0, toStringStyle0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray(linkedList0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(":]`Exl\bY.)4;!", (ToStringStyle) null, stringBuffer0, (Class<? super String>) class0, true, false, true);
      reflectionToStringBuilder0.setAppendStatics(true);
      String[] stringArray0 = new String[0];
      reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      //  // Unstable assertion: assertEquals(207, stringBuffer0.length());
      //  // Unstable assertion: assertTrue(reflectionToStringBuilder0.isExcludeNullValues());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "[hash=0,value={}]");
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0, stringBuffer0, (Class<? super Object>) class0, false, false, true);
      boolean boolean0 = reflectionToStringBuilder0.isExcludeNullValues();
      assertFalse(reflectionToStringBuilder0.isAppendTransients());
      assertTrue(boolean0);
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(":]`Exl\bY.)4;!", (ToStringStyle) null, stringBuffer0, (Class<? super String>) class0, true, false, true);
      boolean boolean0 = reflectionToStringBuilder0.isAppendTransients();
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
      assertTrue(reflectionToStringBuilder0.isExcludeNullValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      boolean boolean0 = reflectionToStringBuilder0.isAppendStatics();
      assertFalse(boolean0);
      assertFalse(reflectionToStringBuilder0.isAppendTransients());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("`lI0", standardToStringStyle0);
      Class<Object> class0 = Object.class;
      reflectionToStringBuilder0.setUpToClass(class0);
      reflectionToStringBuilder0.getUpToClass();
      assertFalse(reflectionToStringBuilder0.isAppendTransients());
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("java.lang.Object@1[]", toStringStyle0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.Object@1[]";
      reflectionToStringBuilder0.setExcludeFieldNames(stringArray0);
      String[] stringArray1 = reflectionToStringBuilder0.getExcludeFieldNames();
      assertEquals(1, stringArray1.length);
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
      assertFalse(reflectionToStringBuilder0.isAppendTransients());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(class0);
      String[] stringArray0 = new String[0];
      reflectionToStringBuilder0.excludeFieldNames = stringArray0;
      reflectionToStringBuilder0.getExcludeFieldNames();
      assertFalse(reflectionToStringBuilder0.isAppendTransients());
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toStringExclude((Object) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toStringExclude((Object) null, (Collection<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, toStringStyle0, true, true, true, (Class<? super Object>) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      ReflectionToStringBuilder.toString((Object) class0, (ToStringStyle) multilineRecursiveToStringStyle0, true, true, (Class<? super Object>) class0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, toStringStyle0, false, false, (Class<? super Object>) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, (ToStringStyle) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, (ToStringStyle) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null, toStringStyle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(32767);
      // Undeclared exception!
      ReflectionToStringBuilder.toString((Object) stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toString((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionToStringBuilder.toNoNullStringArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(linkedList0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getValue((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("I.WX");
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.appendFieldsIn((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(linkedList0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.appendFieldsIn(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.accept((Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      StringBuffer stringBuffer0 = new StringBuffer();
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, (ToStringStyle) multilineRecursiveToStringStyle0, stringBuffer0, (Class<? super Object>) class0, true, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle();
      StringBuffer stringBuffer0 = new StringBuffer();
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, toStringStyle0, stringBuffer0, (Class<? super Object>) class0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, multilineRecursiveToStringStyle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(":]`Exl\bY.)4;!", (ToStringStyle) null, stringBuffer0, (Class<? super String>) class0, true, false, true);
      reflectionToStringBuilder0.toString();
      assertEquals(68, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer(34);
      Class<String> class0 = String.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("org.apache.commons.lang3.builder.ReflectionToStringBuilder", toStringStyle0, stringBuffer0, (Class<? super String>) class0, false, false, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) reflectionToStringBuilder0;
      reflectionToStringBuilder0.append(objectArray0);
      assertEquals(369, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0, stringBuffer0, (Class<? super Object>) class0, true, false);
      String string0 = reflectionToStringBuilder0.toString();
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
      assertTrue(reflectionToStringBuilder0.isAppendTransients());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("");
      reflectionToStringBuilder0.setUpToClass((Class<?>) null);
      assertFalse(reflectionToStringBuilder0.isAppendTransients());
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames((String[]) null);
      assertFalse(reflectionToStringBuilder1.isAppendStatics());
      assertFalse(reflectionToStringBuilder1.isAppendTransients());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("I.WX");
      reflectionToStringBuilder0.getUpToClass();
      assertFalse(reflectionToStringBuilder0.isAppendTransients());
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer();
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0, toStringStyle0, stringBuffer0, (Class<? super Object>) class0, false, true, false);
      boolean boolean0 = reflectionToStringBuilder0.isAppendStatics();
      assertFalse(reflectionToStringBuilder0.isExcludeNullValues());
      assertTrue(boolean0);
      assertFalse(reflectionToStringBuilder0.isAppendTransients());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("", toStringStyle0, (StringBuffer) null);
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
      assertFalse(reflectionToStringBuilder0.isAppendTransients());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      reflectionToStringBuilder0.setAppendTransients(false);
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
      assertFalse(reflectionToStringBuilder0.isAppendTransients());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      boolean boolean0 = reflectionToStringBuilder0.isAppendTransients();
      assertFalse(boolean0);
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer();
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) "a", toStringStyle0, stringBuffer0, (Class<? super Object>) class0, false, false);
      reflectionToStringBuilder0.setExcludeNullValues(true);
      assertTrue(reflectionToStringBuilder0.isExcludeNullValues());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Class<String> class0 = String.class;
      String string0 = ReflectionToStringBuilder.toString("", toStringStyle0, false, false, (Class<? super String>) class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(class0);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.setUpToClass(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified class is not a superclass of the object
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ReflectionToStringBuilder.toStringExclude(object0, (String[]) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      // Undeclared exception!
      ReflectionToStringBuilder.toString((Object) class0, (ToStringStyle) multilineRecursiveToStringStyle0, true, true, true, (Class<? super Object>) class0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) toStringStyle0;
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray(objectArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(32767);
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      ReflectionToStringBuilder.toStringExclude((Object) stringBuffer0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = ReflectionToStringBuilder.toNoNullStringArray((Collection<String>) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      Class<Object> class0 = Object.class;
      StringBuffer stringBuffer0 = new StringBuffer();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("[]", toStringStyle0, stringBuffer0, (Class<? super String>) class0, false, false, false);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.reflectionAppendArray(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = ReflectionToStringBuilder.toString((Object) "java.lang.Object@4[]");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<String> class0 = String.class;
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      // Undeclared exception!
      ReflectionToStringBuilder.toString((Object) class0, (ToStringStyle) multilineRecursiveToStringStyle0, true);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      StringBuffer stringBuffer0 = new StringBuffer();
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) "a", toStringStyle0, stringBuffer0, (Class<? super Object>) class0, false, false);
      reflectionToStringBuilder0.isExcludeNullValues();
      assertFalse(reflectionToStringBuilder0.isAppendTransients());
      assertFalse(reflectionToStringBuilder0.isAppendStatics());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object object0 = new Object();
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      String string0 = ReflectionToStringBuilder.toString((Object) reflectionToStringBuilder0, (ToStringStyle) multilineRecursiveToStringStyle0);
      // Undeclared exception!
      ReflectionToStringBuilder.toStringExclude((Object) string0, (Collection<String>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      // Undeclared exception!
      ReflectionToStringBuilder.toString((Object) class0, (ToStringStyle) multilineRecursiveToStringStyle0, true, true);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(class0);
      // Undeclared exception!
      try { 
        reflectionToStringBuilder0.getExcludeFieldNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      StringBuffer stringBuffer0 = new StringBuffer();
      ReflectionToStringBuilder reflectionToStringBuilder0 = null;
      try {
        reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, standardToStringStyle0, stringBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Object passed in should not be null.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }
}
