/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 13:33:58 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)10614;
      shortArray0[1] = (short)10614;
      shortArray0[2] = (short)321;
      shortArray0[3] = (short)10614;
      shortArray0[1] = (short)10614;
      shortArray0[5] = (short)10614;
      shortArray0[3] = (short)10614;
      shortArray0[7] = (short)10614;
      String string0 = StringUtils.EMPTY;
      String string1 = "oWoExpected exception %s was not thrown.";
      StringUtils.toRootLowerCase("\"");
      StringUtils.rightPad("\"", (int) (short)0, "\"");
      // Undeclared exception!
      StringUtils.leftPad("nA1A", (int) (short)10614, "\"");
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '3', 26, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Cannot clear and set the following system properties at the same time: ");
      assertNotNull(stringArray0);
      assertEquals(25, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("The CharaterxmuVt not enull", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      StringUtils.getCommonPrefix(stringArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = 't';
      charArray0[2] = '9';
      charArray0[3] = 'p';
      charArray0[4] = '_';
      charArray0[5] = '`';
      charArray0[6] = 'T';
      charArray0[7] = 'k';
      charArray0[8] = '~';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'T', 12, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      String[] stringArray0 = new String[3];
      StringUtils.center("lgj<D@^ROE.+", 17, "lgj<D@^ROE.+");
      StringUtils.appendIfMissingIgnoreCase("<F?k$_", "lglgj<D@^ROE.+lgj", stringArray0);
      StringUtils.wrapIfMissing("<F?k$_lglgj<D@^ROE.+lgj", "lglgj<D@^ROE.+lgj");
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      StringUtils.repeat('a', 39);
      StringUtils.center("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 39, 'v');
      StringUtils.isAllLowerCase("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.repeat("rQg)axqGX+", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      StringUtils.stripEnd("Can only resolve parameter of type ", (String) null);
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Can only resolve parameter of type ";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "Can only resolve parameter of type";
      StringUtils.startsWithAny("Can only resolve parameter of type", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      StringUtils.substringAfterLast("\"52GC7\"1!", "*S,i&z4qZk9K6");
      StringUtils.substringAfterLast("(", "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      StringUtils.leftPad("", 8192, ' ');
      StringUtils.stripAccents("");
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)10614;
      StringUtils.join(shortArray0, 'I');
      String string0 = StringUtils.EMPTY;
      StringUtils.getLevenshteinDistance((CharSequence) "\"", (CharSequence) "10614I0", (int) (short)10614);
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      StringUtils.toRootLowerCase("oWoExpected exception %s was not thrown.");
      charSequenceArray0[0] = (CharSequence) "owoexpected exception %s was not thrown.";
      charSequenceArray0[1] = (CharSequence) "10614I0";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "\"";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "10614I0";
      StringUtils.isAnyEmpty(charSequenceArray0);
      // Undeclared exception!
      StringUtils.rightPad("", (int) (short)10614, "");
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.stripToEmpty("kqhlXH2+O<w3+cp3'");
      charSequenceArray0[0] = (CharSequence) "kqhlXH2+O<w3+cp3'";
      charSequenceArray0[1] = (CharSequence) "temp.dir";
      charSequenceArray0[2] = (CharSequence) "temp.dir";
      Stack<String> stack0 = new Stack<String>();
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, '0', 1640, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1640) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
      
      StringUtils.indexOfAny((CharSequence) null, "org.junitpioneer.jupiter.params.Rangedj{t5caY");
      StringUtils.getDigits("org.junitpioneer.jupiter.params.Rangedj{t5caY");
      StringUtils.rightPad((String) null, (-1), '^');
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("5", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      StringUtils.repeat("\n", 8192);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      StringUtils.indexOfAny((CharSequence) "lygyF", "codefx");
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '1', Integer.MIN_VALUE, (-178));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      StringUtils.chomp("maxWith cannot be negative");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StringUtils.firstNonBlank(stringArray0);
      StringUtils.countMatches((CharSequence) "maxWith cannot be negative", (CharSequence) "maxWith cannot be negative");
      String string0 = null;
      StringUtils.join((Object[]) stringArray0, (String) null, 1, 8);
      Stack<String> stack0 = new Stack<String>();
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, '_', 40, 706);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 706
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)10614;
      shortArray0[2] = (short)321;
      shortArray0[3] = (short)10614;
      shortArray0[4] = (short)10614;
      shortArray0[5] = (short)10614;
      shortArray0[3] = (short)10614;
      shortArray0[7] = (short)10614;
      String string0 = StringUtils.EMPTY;
      StringUtils.toRootLowerCase("\"");
      // Undeclared exception!
      StringUtils.rightPad("\"", (int) (short)10614, "\"");
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      String string0 = StringUtils.CR;
      StringUtils.stripStart("\r", (String) null);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      String string0 = "i\"`i\"`";
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("i\"`i\"`", "i\"`i\"`", "ZO)n%* a`]Fcq:R$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference: group index is missing
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      short[] shortArray0 = new short[4];
      String string0 = StringUtils.SPACE;
      StringUtils.substringBetween("Illegal range. There's no /ay to get from %s to %s with a step of %s.", " ");
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      StringUtils.join(byteArray0, ']', 2407, 2407);
      String string0 = StringUtils.rightPad("", 2407, "");
      String string1 = StringUtils.unwrap(string0, ']');
      StringUtils.isMixedCase(string1);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)45;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray1);
      charset0.decode(byteBuffer0);
      charset0.encode(string1);
      StringUtils.toEncodedString(byteArray0, charset0);
      StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) "", 2407);
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = ']';
      charArray0[5] = ']';
      charArray0[6] = ']';
      charArray0[7] = ']';
      charArray0[8] = ']';
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      stack0.push("gO!l");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      StringUtils.replaceIgnoreCase((String) null, "?`/", (String) null, 345);
      StringUtils.indexOfAny((CharSequence) "gO!l", "Expected exactly one annotation to provide an ArgumentSource, found %d.");
      StringUtils.indexOf((CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.", 65);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      byte[] byteArray0 = new byte[4];
      StringUtils.join(byteArray0, 's');
      StringUtils.getDigits("[hS_Qa 0UZ/FP^~-e+w");
      StringUtils.getJaroWinklerDistance("0s0s0s0", "0");
      StringUtils.lastIndexOf((CharSequence) "[hS_Qa 0UZ/FP^~-e+w", 97, 1302);
      StringUtils.countMatches((CharSequence) "0", 's');
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      StringUtils.substringAfterLast("E(`^*V~GZ", "E(`^*V~GZ");
      StringUtils.substringAfterLast("", (String) null);
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      StringUtils.toEncodedString(byteArray0, charset0);
      StringUtils.lastIndexOf((CharSequence) "", 160);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      StringUtils.abbreviate("7b)EqdPN<", Integer.MAX_VALUE);
      StringUtils.stripEnd("1_~8cq<NA0aN", "OmJoGJ");
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) '!';
      floatArray0[3] = (float) 1348;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) '!';
      floatArray0[6] = (float) Integer.MAX_VALUE;
      floatArray0[7] = (float) 2;
      floatArray0[8] = (float) '!';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '\'', 160, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) vector0;
      objectArray0[2] = (Object) vector0;
      objectArray0[3] = object0;
      vector0.add(object0);
      objectArray0[4] = object0;
      objectArray0[5] = (Object) vector0;
      objectArray0[6] = (Object) vector0;
      StringUtils.join(objectArray0, 'R', 1, 5);
      StringUtils.containsNone((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", "[java.lang.Object@5594a7d4]R[java.lang.Object@5594a7d4]Rjava.lang.Object@5594a7d4Rjava.lang.Object@5594a7d4");
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      String string0 = StringUtils.CR;
      StringUtils.normalizeSpace("\r");
      StringUtils.right("pYhnM[g&4cC_:#JoY> ", 31);
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      StringUtils.firstNonBlank(charSequenceArray0);
      StringUtils.isNumericSpace("\r");
      StringUtils.substringAfter("", " Ju<");
      StringUtils.leftPad("\r", 1513, 'C');
      StringUtils.isNumericSpace((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      StringUtils.substringAfterLast("uko", "uko");
      StringUtils.replaceFirst(" ", "Cannot clear and set the following system properties at the same time: ", "[+6");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "uko");
      StringUtils.equals((CharSequence) "uko", (CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "1_~8cq<NA0aN");
      StringUtils.equals((CharSequence) "1_~8cq<NA0aN", (CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      StringUtils.toRootUpperCase("A");
      StringUtils.isWhitespace("~WSQ+");
      StringUtils.wrap((String) null, 'x');
      int[] intArray0 = new int[8];
      intArray0[1] = (int) 'x';
      intArray0[2] = (int) 'x';
      intArray0[3] = (int) '\u0014';
      intArray0[4] = 10;
      intArray0[5] = 2802;
      intArray0[6] = (int) 'x';
      intArray0[7] = 10;
      StringUtils.join(intArray0, '/', 2802, 2786);
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) " 28?{N'\"7%", 10);
      StringUtils.toCodePoints("~WSQ+");
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "1_~8cq<NA0aN");
      StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "1_~8cq<NA0aN");
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = 'E';
      charArray0[4] = '`';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'H', 4, 576);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      charSequenceArray0[2] = (CharSequence) "Minimum abbreviation widKh is %d";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation widKh is %d";
      String string0 = StringUtils.LF;
      StringUtils.substringBefore("uKyS", "*4qDYSD;}OuX");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      arrayDeque0.toArray((Object[]) charSequenceArray0);
      linkedList0.iterator();
      arrayDeque0.poll();
      StringUtils.center("uKyS", 6017, "\n");
      StringUtils.indexOfAny((CharSequence) "\n", charSequenceArray0);
      // Undeclared exception!
      StringUtils.rightPad("uKyS", 8192, '@');
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      arrayDeque0.add("u&0J`Yw");
      arrayDeque0.add("u&0J`Yw");
      Iterator<String> iterator0 = arrayDeque0.iterator();
      arrayDeque0.descendingIterator();
      StringUtils.join(iterator0, (String) null);
      StringUtils.isAllUpperCase("u&0J`Ywu&0J`Yw");
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      String string0 = StringUtils.lowerCase("The Character must not be null");
      assertNotNull(string0);
      assertEquals("the character must not be null", string0);
      
      StringUtils.lastOrdinalIndexOf("The Character must not be null", "The Character must not be null", 19);
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      StringUtils.substringBetween("the character must not be null", "...", "the character must not be null");
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3097;
      shortArray0[1] = (short)0;
      StringUtils.join(shortArray0, '3', 0, 1);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      StringUtils.repeat('?', 62);
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      StringUtils.indexOfAnyBut((CharSequence) "??????????????????????????????????????????????????????????????", charArray0);
      StringUtils.abbreviate("??????????????????????????????????????????????????????????????", 62);
      StringUtils.stripEnd("??????????????????????????????????????????????????????????????", "OmJoGJ");
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '?';
      floatArray0[1] = (float) '?';
      floatArray0[2] = (float) '?';
      floatArray0[3] = (float) 62;
      floatArray0[4] = (float) 62;
      floatArray0[5] = (float) 62;
      floatArray0[6] = (float) '?';
      floatArray0[7] = (float) '?';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '!', 2, 1364);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      StringUtils.repeat("_;", 1114111);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '\\', (-502802517), 26);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = StringUtils.join(charArray0, '\u0000');
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      StringUtils.stripToNull("\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      StringUtils.chomp("\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      String string0 = StringUtils.swapCase("S*i2");
      assertNotNull(string0);
      assertEquals("s*I2", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "s*I2", (CharSequence) "S*i2");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "S*i2";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "S*i2";
      objectArray0[3] = (Object) "S*i2";
      objectArray0[4] = (Object) "s*I2";
      Object object1 = new Object();
      objectArray0[5] = object1;
      StringUtils.join(objectArray0, "org.junitpioneer.jupiter.SystemPropertyExtension");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.defaultString("s*I2", "s*I2");
      charSequenceArray0[0] = (CharSequence) "s*I2";
      StringUtils.indexOfAny((CharSequence) "S*i2org.junitpioneer.jupiter.SystemPropertyExtensionjava.lang.Object@a59d16dorg.junitpioneer.jupiter.SystemPropertyExtensionS*i2org.junitpioneer.jupiter.SystemPropertyExtensionS*i2org.junitpioneer.jupiter.SystemPropertyExtensions*I2org.junitpioneer.jupiter.SystemPropertyExtensionjava.lang.Object@7f407030", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      StringUtils.repeat('1', (int) '1');
      StringUtils.countMatches((CharSequence) "1111111111111111111111111111111111111111111111111", (CharSequence) "1111111111111111111111111111111111111111111111111");
      StringUtils.indexOf((CharSequence) "1111111111111111111111111111111111111111111111111", (int) '1');
      StringUtils.isAnyBlank((CharSequence[]) null);
      StringUtils.strip("Locale must not be null");
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 1;
      intArray0[2] = 26;
      intArray0[3] = 26;
      intArray0[4] = (int) 'T';
      StringUtils.join(intArray0, '$', 53, 0);
      StringUtils.left("Expected exactly one annotation to provide an ArgumentSource, found %d.", 26);
      StringUtils.prependIfMissing("", "Locale must not be null", (CharSequence[]) null);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) list0);
      StringUtils.join(list0, 'e', 1, 1);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      StringUtils.remove(" vs  vs ", '\u0088');
      StringUtils.normalizeSpace(" vs  vs ");
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      StringUtils.toRootUpperCase("A");
      StringUtils.truncate("A", 13);
      StringUtils.trimToNull("p9.2JX^ a[");
      String string0 = StringUtils.repeat('u', 3711);
      String string1 = "Search and Replace array lengths don't match: Search and Replace array lengths don't match: ";
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string0, "Search and Replace array lengths don't match: Search and Replace array lengths don't match: ");
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      StringUtils.chomp("qQ#c", "qQ#c");
      StringUtils.removeIgnoreCase("qQ#c", "qQ#c");
      StringUtils.isEmpty("qQ#c");
      StringUtils.replace("", "qQ#c", "qQ#c");
      String string0 = StringUtils.leftPad("bsB{!#z+Bv|[", 9991, "");
      StringUtils.toCodePoints(string0);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      StringUtils.leftPad("", 9989, "");
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      StringUtils.center("y=[7C@(Ob:ucC^>4", 65536, '3');
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      StringUtils.substringBetween("Aborting t", "ArMK+<p6{|=;nRvD@} 5", "Aborting t");
      StringUtils.isAlphaSpace((CharSequence) null);
      StringUtils.stripToNull("ArMK+<p6{|=;nRvD@} 5");
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      StringUtils.rightPad("junit", 5, "Aborting t");
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      String string0 = StringUtils.repeat('G', 9988);
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0, 50);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      Locale.forLanguageTag("A");
      StringUtils.isAllUpperCase("A");
      StringUtils.abbreviateMiddle("A", "Minimum abbreviation width with offset is %d", 1953);
      StringUtils.unwrap("Minimum abbreviation width with offset is %d", '\\');
      String string0 = StringUtils.rightPad("", 8192, '<');
      String string1 = StringUtils.trim(string0);
      StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) "A", 8192);
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "A";
      StringUtils.isAllEmpty(charSequenceArray0);
      StringUtils.trimToNull(string0);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      StringUtils.contains(charSequenceArray0[1], charSequenceArray0[0]);
      StringUtils.isAnyBlank(charSequenceArray0);
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance(charSequenceArray0[1], charSequenceArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfBlank("gO!l", supplier0);
      Supplier<CharSequence> supplier1 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfEmpty((CharSequence) "gO!l", supplier1);
      String string0 = StringUtils.SPACE;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("gO!l", "gO!l");
      StringUtils.startsWithAny(" ", stringArray0);
      StringUtils.abbreviateMiddle(".f+ocpafWu_]KAtJ\u001E", "gO!l", 6);
      StringUtils.split("gO!l", "org.apache.commons.lang3.CharUtils", 3);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      StringUtils.stripAll(stringArray0);
      String string0 = StringUtils.center(" ", 2772, "VAa/;j");
      String string1 = StringUtils.deleteWhitespace(string0);
      StringUtils.replacePattern("m6_\";.-X!Pq", "m6_\";.-X!Pq", "VAa/;j");
      String string2 = "nHw4&;kL [:`*-`+";
      StringUtils.substringBetween(string1, string2);
      int int0 = StringUtils.INDEX_NOT_FOUND;
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      String string0 = "\n";
      StringUtils.chomp("\n");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'L';
      doubleArray0[1] = (double) 'L';
      doubleArray0[2] = (double) 'L';
      doubleArray0[3] = (double) 'L';
      doubleArray0[4] = (-2094.8215549249);
      doubleArray0[5] = (double) 'L';
      doubleArray0[6] = (double) 'L';
      doubleArray0[7] = (double) 'L';
      doubleArray0[8] = (double) 'L';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'L', Integer.MAX_VALUE, (-1818));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      StringUtils.replace("", "", "");
      StringUtils.replacePattern("", "", "");
      StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      StringUtils.endsWithAny("", (CharSequence[]) null);
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = '%';
      charArray0[2] = 'h';
      charArray0[3] = '~';
      charArray0[4] = 'u';
      charArray0[5] = '6';
      charArray0[6] = 'c';
      StringUtils.containsOnly((CharSequence) "", charArray0);
      StringUtils.substring("", (-794));
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      StringUtils.chomp("S*i2");
      StringUtils.removeIgnoreCase("JqQ#c", "JqQ#c");
      StringUtils.repeat("", 20);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      StringUtils.replaceChars("S*i2", "JqQ#c", "");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)3;
      StringUtils.join(byteArray0, 'N', (int) (byte)3, (int) (byte)5);
      StringUtils.wrap("Y[==;PBk8`t0g", 'U');
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      StringUtils.replaceIgnoreCase("'C", "'C", "'C");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "'C";
      objectArray0[1] = (Object) "'C";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "'C";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[3] = (Object) "'C";
      objectArray0[7] = (Object) "'C";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '\'', 5, 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      StringUtils.wrapIfMissing("2@~.hGC{", 'g');
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Stack<Object> stack0 = new Stack<Object>();
      Object object0 = new Object();
      stack0.push(object0);
      stack0.add((Object) "|");
      ListIterator<Object> listIterator0 = stack0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, 'g');
      int int0 = StringUtils.INDEX_NOT_FOUND;
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      StringUtils.valueOf(charArray0);
      StringUtils.indexOfAny((CharSequence) "D", charArray0);
      StringUtils.chop(" ");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.substringsBetween("Locale must not be null", ">(ne7_[#xC\"(", " ");
      StringUtils.wrap(">(ne7_[#xC\"(", 'D');
      StringUtils.isAlphaSpace("Locale must not be null");
      StringUtils.isAnyBlank((CharSequence[]) null);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      StringUtils.replaceIgnoreCase("'C", "'C", "'C");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "'C";
      objectArray0[1] = (Object) "'C";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "'C";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "'C";
      objectArray0[7] = (Object) "'C";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '\'', 5, 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      StringUtils.lastOrdinalIndexOf("@~.hGC{", "", 474);
      StringUtils.wrapIfMissing("K*Xz@sZe", 'B');
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      StringUtils.substringBetween("@~.hGC{", "aBD)z6~mmRf`7Y", "9]S6W+tSxH <CWz%,;");
      StringUtils.getDigits("9]S6W+tSxH <CWz%,;");
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      StringUtils.unwrap("Search and Replace array lengths don't match: ", "9]S6W+tSxH <CWz%,;");
      StringUtils.indexOfAnyBut((CharSequence) "@~.hGC{", (CharSequence) "K*Xz@sZe");
      StringUtils.isAllUpperCase("9]S6W+tSxH <CWz%,;");
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      StringUtils.center("f85cQo", 51, "Y");
      StringUtils.abbreviate("?HNh.9~.\">?5p~:p", " pV}FP:(~}C&#8", 51, 16);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-107);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      StringUtils.toEncodedString(byteArray0, charset0);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      StringUtils.deleteWhitespace("NC7r@B[Mru$^7eDP&");
      long[] longArray0 = new long[5];
      longArray0[0] = (-2381L);
      longArray0[1] = 1L;
      longArray0[2] = (-109L);
      longArray0[3] = (-1627L);
      longArray0[4] = 1045L;
      StringUtils.join(longArray0, 'k', 0, 4);
      StringUtils.isAsciiPrintable("NC7r@B[Mru$^7eDP&");
      try { 
        StringUtils.getBytes("NC7r@B[Mru$^7eDP&", "NC7r@B[Mru$^7eDP&");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Cannot clear and set the following system properties at the same time: ");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("The CharacterxmuVt not be null", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      StringUtils.chomp("S*i2");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StringUtils.removeEnd("Ug9|Y;Hi@Owg!x)", (String) null);
      StringUtils.rightPad("n7y", (-18), 'r');
      StringUtils.unwrap("r!5ARw3ZcN_", 'r');
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      arrayDeque0.add("");
      Iterator<String> iterator0 = arrayDeque0.iterator();
      arrayDeque0.remove();
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "Tl95+Gy");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque$DeqIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      StringUtils.substringBefore(" M,3{", " M,3{");
      StringUtils.stripToEmpty("");
      StringUtils.isEmpty("");
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)696;
      shortArray0[1] = (short)4345;
      shortArray0[2] = (short)55;
      shortArray0[3] = (short) (-1883);
      shortArray0[4] = (short)55;
      StringUtils.join(shortArray0, 'j');
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "696j4345j55j-1883j55";
      charSequenceArray0[2] = (CharSequence) " M,3{";
      charSequenceArray0[3] = (CharSequence) "696j4345j55j-1883j55";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) " M,3{";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      StringUtils.indexOfAnyBut(charSequenceArray0[4], (CharSequence) null);
      StringUtils.wrapIfMissing("", "T&esucF i-7{");
      StringUtils.containsAny(charSequenceArray0[7], (char[]) null);
      StringUtils.rightPad("", (int) (short) (-1883), "696j4345j55j-1883j55");
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      CharBuffer.wrap((CharSequence) "1_~8cq<NA0aN");
      StringUtils.toRootUpperCase("1_~8cq<NA0aN");
      StringUtils.join((Iterable<?>) null, 's');
      Locale locale0 = Locale.CHINA;
      locale0.getScript();
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("1_~8CQ<NA0AN", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      StringUtils.wrap((String) null, 'q');
      StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      StringUtils.remove(" ", 'b');
      StringUtils.isWhitespace((CharSequence) null);
      StringUtils.indexOfAnyBut((CharSequence) " ", (CharSequence) " ");
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      StringUtils.unwrap("ArMK+<p6{|=;n`v}45", 'x');
      StringUtils.isNotEmpty("ArMK+<p6{|=;n`v}45");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "?axys.2rQ6Vy";
      stringArray0[2] = "?axys.2rQ6Vy";
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "?axys.2rQ6Vy";
      objectArray0[2] = (Object) "?axys.2rQ6Vy";
      objectArray0[3] = (Object) "ArMK+<p6{|=;n`v}45";
      objectArray0[4] = (Object) "ArMK+<p6{|=;n`v}45";
      objectArray0[5] = (Object) "?axys.2rQ6Vy";
      objectArray0[6] = (Object) "ArMK+<p6{|=;n`v}45";
      objectArray0[7] = (Object) "?axys.2rQ6Vy";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 't', 2, 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      StringUtils.repeat('3', 79);
      StringUtils.isNumeric("3333333333333333333333333333333333333333333333333333333333333333333333333333333");
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      StringUtils.lastOrdinalIndexOf("@~.hGC{", "", 474);
      StringUtils.wrapIfMissing("K*Xz@sZe", 'B');
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      StringUtils.substringBetween("@~.hGC{", "aBD)z6~mmRf`7Y", "5~{l-\"");
      StringUtils.getDigits("5~{l-\"");
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("B,c|xg!H<vy", "->*s0(ok", (int) (short)3097);
      StringUtils.isNumeric("5");
      StringUtils.lastIndexOfAny("@~.hGC{", stringArray0);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      String string0 = "7K5|2I";
      StringUtils.center("7K5|2I", 5, '*');
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '*';
      longArray0[1] = (long) 5;
      longArray0[2] = (long) '*';
      longArray0[3] = (long) 5;
      longArray0[4] = (long) '*';
      longArray0[5] = (long) 5;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '[', 5, 555);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      Iterator<Locale.FilteringMode> iterator0 = treeSet0.iterator();
      treeSet0.spliterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      treeSet0.add(locale_FilteringMode0);
      StringUtils.join(iterator0, "/+V8eIg*QAF");
      StringUtils.center("", (-1), 'h');
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation widKh is %d";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation widKh is %d";
      charSequenceArray0[2] = (CharSequence) "Minimum abbreviation widKh is %d";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation widKh is %d";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation widKh is %d";
      String string0 = StringUtils.LF;
      StringUtils.substringBefore("uKyS", "*4qDYSD;}OuX");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      arrayDeque0.toArray((Object[]) charSequenceArray0);
      linkedList0.iterator();
      arrayDeque0.poll();
      StringUtils.center(", Length: ", 6017, "\n");
      StringUtils.appendIfMissingIgnoreCase("& 8>2Y(qm+", "uKyS", (CharSequence[]) null);
      StringUtils.join((List<?>) linkedList0, 'I', 6017, 6017);
      // Undeclared exception!
      StringUtils.leftPad("Object varargs must not be null", 6017);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      StringUtils.rotate("Minimum abbreviation widKh is %d", 321);
      StringUtils.abbreviate("dMinimum abbreviation widKh is %", 598, 47);
      StringUtils.isAlphanumericSpace("dMinimum abbreviation widKh is %");
      StringUtils.unwrap("dMinimum abbreviation widKh is %", "Minimum abbreviation widKh is %d");
      StringUtils.containsOnly((CharSequence) "dMinimum abbreviation widKh is %", "dMinimum abbreviation widKh is %");
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("dMinimum abbreviation widKh is %", "", 47, 242);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      String string0 = StringUtils.repeat("1v", 540);
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      StringUtils.join((short[]) null, 'n');
      StringUtils.stripToNull("1>.PM4=avujw&[");
      String string0 = StringUtils.EMPTY;
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.equalsAnyIgnoreCase("1>.PM4=avujw&[", charSequenceArray0);
      StringUtils.isAlphaSpace("1>.PM4=avujw&[");
      // Undeclared exception!
      StringUtils.center("\"", (int) (short)10614, "\"");
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      StringUtils.repeat('?', 13);
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '?';
      StringUtils.indexOfAnyBut((CharSequence) "?????????????", charArray0);
      StringUtils.mid("?????????????", (-1074), 13);
      StringUtils.isNotEmpty("?????????????");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringUtils.join((List<?>) arrayList0, '?', 88, (-1074));
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      StringUtils.lastIndexOfAny("%_mqN#XoVq\"w?#", (CharSequence[]) null);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      StringUtils.difference(" ", " ");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      StringUtils.isAllEmpty(charSequenceArray0);
      StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) "", 68);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      String string0 = "\\u";
      StringUtils.replace(string0, "!a%UJf", "\n");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'Y', (-1610612734), (int) (byte)1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      arrayDeque0.add("");
      arrayDeque0.add("");
      Iterator<String> iterator0 = arrayDeque0.iterator();
      StringUtils.join(iterator0, (String) null);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      String[] stringArray0 = new String[4];
      StringUtils.stripAll(stringArray0);
      StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", "UnHtVn_", 65, 16);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("org");
      assertTrue(boolean0);
      
      String string0 = StringUtils.unwrap("org.apache.commons.lang3.CharSequenceUtils", "org");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string0);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      StringUtils.mid("", (-3649), (-3649));
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "@FDjAR/`cLC'JV2j";
      StringUtils.isNoneEmpty(charSequenceArray0);
      String string0 = StringUtils.LF;
      StringUtils.substringBefore("...", (String) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      linkedList0.iterator();
      arrayDeque0.poll();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayDeque0, locale_FilteringMode0);
      StringUtils.center("codefx", (-3649), "m8\"");
      StringUtils.appendIfMissingIgnoreCase("...", "Illegal range. The step cannot be zero.", charSequenceArray0);
      StringUtils.containsOnly((CharSequence) "...", "AQi@^R|Ihn(.");
      StringUtils.abbreviate("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "", 3051, (-3649));
      StringUtils.getDigits("codefx");
      StringUtils.isAllLowerCase("codefx");
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "@FDjAR/`cLC'JV2j", (CharSequence) "", 12);
      StringUtils.isWhitespace("");
      StringUtils.chomp("ArMK+<p6{|=;n`v}45");
      StringUtils.rightPad("\"", 10, "iN'\"hYr>5");
      StringUtils.repeat((String) null, 1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ArMK+<p6{|=;n`v}45";
      stringArray0[1] = "@FDjAR/`cLC'JV2j";
      stringArray0[2] = "ArMK+<p6{|=;n`v}45";
      stringArray0[3] = "\"";
      stringArray0[4] = "\"iN'\"hYr>5";
      stringArray0[5] = "t";
      stringArray0[6] = "}lk#JkzBBLGn9?GU";
      stringArray0[7] = "\"iN'\"hYr>5";
      stringArray0[8] = "ArMK+<p6{|=;n`v}45";
      StringUtils.firstNonEmpty(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      StringUtils.substring("org.junitpioneer.jupiter.TempDirectory", 0);
      StringUtils.leftPad("{nFIbI", 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      StringUtils.truncate("org.junitpioneer.jupiter.TempDirectory", 0, 0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)98;
      StringUtils.abbreviate("QyXgf#D", 16);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      StringUtils.strip("ArMK+<p6{|=;n`v}45", "ArMK+<p6{|=;n`v}45");
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("ArMK+<p6{|=;n`v}45");
      StringUtils.deleteWhitespace("Minimum abbreviation width is %d");
      StringUtils.countMatches((CharSequence) "Minimumabbreviationwidthis%d", (CharSequence) "Minimum abbreviation width is %d");
      double[] doubleArray0 = new double[0];
      StringUtils.join(doubleArray0, 'm', 0, 0);
      StringUtils.isNumericSpace("");
      StringUtils.isAnyBlank(stringArray0);
      StringUtils.normalizeSpace("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-6);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'L', (int) (byte)1, 34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      StringUtils.substringsBetween("Index: ", "6", "Index: ");
      StringUtils.indexOfAnyBut((CharSequence) "Index: ", (CharSequence) "6");
      StringUtils.trimToEmpty("6");
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfEmpty("Index: ", supplier0);
      StringUtils.swapCase("6");
      String string0 = "\\uLocale must not be nullOLx15&@GMlv79{:$W";
      String string1 = StringUtils.deleteWhitespace(string0);
      StringUtils.isMixedCase("Index: ");
      StringUtils.isNumericSpace(string1);
      StringUtils.firstNonEmpty((String[]) null);
      StringUtils.indexOfAny((CharSequence) "6", (CharSequence[]) null);
      StringUtils.wrapIfMissing((String) null, "Threshold must not be negative M,3{");
      StringUtils.uncapitalize("Index: ");
      StringUtils.defaultIfEmpty("Index: ", "6");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode2, locale_FilteringMode3, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      enumSet0.add(locale_FilteringMode4);
      EnumSet.copyOf((Collection<Locale.FilteringMode>) enumSet0);
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.EXTENDED_FILTERING;
      enumSet0.add(locale_FilteringMode5);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      enumSet0.add(locale_FilteringMode5);
      StringUtils.join(iterator0, "");
      StringUtils.getJaroWinklerDistance(string0, "Threshold must not be negative M,3{");
      StringUtils.isAllEmpty((CharSequence[]) null);
      StringUtils.uncapitalize("");
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      StringUtils.getJaroWinklerDistance("naU%y", "LaunchTi+e");
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      StringUtils.join((int[]) null, 'I');
      StringUtils.indexOfAny((CharSequence) null, "F");
      StringUtils.replacePattern("9H9@CPO$X", (String) null, (String) null);
      StringUtils.split((String) null);
      StringUtils.isAnyBlank((CharSequence[]) null);
      StringUtils.capitalize("F");
      StringUtils.isNumericSpace("F");
      StringUtils.defaultString((String) null, (String) null);
      StringUtils.endsWithAny("9H9@CPO$X", (CharSequence[]) null);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      StringUtils.abbreviate(" ", 6);
      StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) " ");
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      Locale.lookupTag(linkedList0, arrayList0);
      StringUtils.lowerCase("Object varargs must not be null", locale0);
      StringUtils.isAlphaSpace("object varargs must not be null");
      StringUtils.indexOf((CharSequence) " ", (CharSequence) " ", (-255));
      StringUtils.indexOf((CharSequence) "Object varargs must not be null", (-1));
      StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", (-255));
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      StringUtils.join((int[]) null, 'R');
      StringUtils.isNoneBlank((CharSequence[]) null);
      String string0 = "@&g'}k1_X_/xMW.pF[5";
      StringUtils.stripEnd("@&g'}k1_X_/xMW.pF[5", (String) null);
      StringUtils.wrap("@&g'}k1_X_/xMW.pF[5", "@&g'}k1_X_/xMW.pF[5");
      String string1 = null;
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      StringUtils.compareIgnoreCase("us;OF%U!fCf", "us;OF%U!fCf", true);
      StringUtils.indexOf((CharSequence) "us;OF%U!fCf", (CharSequence) "us;OF%U!fCf");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "us;OF%U!fCf";
      stringArray0[1] = "The character must not be null";
      stringArray0[2] = "us;OF%U!fCf";
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.splitPreserveAllTokens((String) null, "-{");
      StringUtils.isAlphaSpace("-{");
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("-{", "-{", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.center("3#}0h'UJ", 846, "6");
      assertNotNull(string0);
      assertEquals("666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666663#}0h'UJ66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666", string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("p7l=L-N93", "3#}0h'UJ", (CharSequence[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p7l=L-N933#}0h'UJ", string1);
      
      String string2 = StringUtils.abbreviate("6", "$$N1[BKS?PR-3G\"oI", 2772, 2772);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("6", string2);
      
      String string3 = StringUtils.getDigits(" VS  VS gO(^e7<=L~P~Zg");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("7", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "6", (-519), (-3346));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.stripToNull("/Uk");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("/Uk", string4);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, 944);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("2@~.hGC{");
      assertNotNull(string0);
      assertEquals("2@~.HGC{", string0);
      
      String string1 = StringUtils.wrapIfMissing("2@~.hGC{", 'g');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("g2@~.hGC{g", string1);
      
      String string2 = StringUtils.chomp("2@~.HGC{", ".&(+3[e']].vlY1");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("2@~.HGC{", string2);
      
      String string3 = StringUtils.reverseDelimited("A/=$t^BJj", 'g');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("A/=$t^BJj", string3);
      
      String string4 = StringUtils.uncapitalize("Strings must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("strings must not be null", string4);
      
      String string5 = StringUtils.removeAll("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", " ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("ExpectedexactlyoneannotationtoprovideanArgumentSource,found%d.org.junitpioneer.jupiter.params.Range", string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "ExpectedexactlyoneannotationtoprovideanArgumentSource,found%d.org.junitpioneer.jupiter.params.Range");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("*ZS3JV=~<^&.5SxR");
      assertNotNull(intArray0);
      assertEquals(17, intArray0.length);
      
      String string6 = StringUtils.EMPTY;
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      
      boolean boolean0 = StringUtils.isAlphanumeric("A/=$t^BJj");
      assertFalse(boolean0);
      
      String string7 = StringUtils.join((Iterable<?>) null, "Threshold must not be negative");
      assertNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range";
      charSequenceArray0[1] = (CharSequence) "2@~.HGC{";
      String string8 = StringUtils.join((Object[]) charSequenceArray0, 'g', (-872), (-1591));
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertEquals("", string8);
      assertEquals(4, charSequenceArray0.length);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "ExpectedexactlyoneannotationtoprovideanArgumentSource,found%d.org.junitpioneer.jupiter.params.Range";
      int int1 = StringUtils.lastIndexOfAny("ExpectedexactlyoneannotationtoprovideanArgumentSource,found%d.org.junitpioneer.jupiter.params.Range", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(99, int1);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 2);
      assertFalse(boolean0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("", string1);
      assertEquals(4, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 24);
      assertEquals((-1), int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)22;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertNotNull(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)92, (byte)10, (byte) (-119), (byte)32, (byte) (-36), (byte) (-21), (byte)22}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(7, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(7, byteBuffer0.remaining());
      
      // Undeclared exception!
      try { 
        byteBuffer0.getChar(28);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      String string0 = StringUtils.rightPad("Object varargs must not be null", 3788, 'g');
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, 3788);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[3] = 'T';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Object varargs must not be null";
      stringArray0[1] = string0;
      stringArray0[2] = "Object varargs must not be null";
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = "Object varargs must not be null";
      String string1 = StringUtils.replaceEach("Object varargs must not be null", stringArray0, stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertEquals(7, stringArray0.length);
      
      String string2 = StringUtils.abbreviate("", stringArray0[5], 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(7, stringArray0.length);
      
      String string3 = null;
      String string4 = "pR|hd;j. 5o1;Fq7@5y{L)V=22U";
      String string5 = StringUtils.replaceChars("", "mQz/B$Jw^+!v-", "pR|hd;j. 5o1;Fq7@5y{L)V=22U");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = StringUtils.leftPad("", 0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) stringArray0[3], (CharSequence) null, 54);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      String string0 = "gO!l";
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "gO!l";
      charSequenceArray0[1] = (CharSequence) "gO!l";
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "5~{l-\"", (-191305236), 108);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      String string0 = StringUtils.strip("org", "{");
      assertNotNull(string0);
      assertEquals("org", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "org");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      String string0 = StringUtils.unwrap("@~.hGC{", 'B');
      assertNotNull(string0);
      assertEquals("@~.hGC{", string0);
      
      String string1 = StringUtils.deleteWhitespace("@~.hGC{");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("@~.hGC{", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "@~.hGC{", (CharSequence) "@~.hGC{");
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("@~.hGC{");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      int int1 = StringUtils.indexOfAny((CharSequence) "@~.hGC{", (CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      String string1 = StringUtils.join(shortArray0, 'I');
      assertNotNull(string1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0I0I0I0", string1);
      assertEquals(4, shortArray0.length);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[24];
      charSequenceArray0[0] = (CharSequence) "";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0I0I0I0";
      stringArray0[1] = null;
      stringArray0[2] = "0I0I0I0";
      stringArray0[3] = null;
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("0I0I0I0", string3);
      assertEquals(4, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("0I0I0I0");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "0I0I0I0", (CharSequence) "0I0I0I0");
      assertEquals(1, int0);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("0I0I0I0");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(7, stringArray2.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, string2, 8, 1154);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      String string0 = StringUtils.center("8:7", 114, "Ignq1\">wya");
      assertNotNull(string0);
      assertEquals("Ignq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq18:7Ignq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq1\"", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Ignq1\">wya";
      charSequenceArray0[1] = (CharSequence) "Ignq1\">wya";
      charSequenceArray0[2] = (CharSequence) "Ignq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq18:7Ignq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq1\"";
      charSequenceArray0[3] = (CharSequence) "Ignq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq18:7Ignq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq1\">wyaIgnq1\"";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(10, int0);
      assertEquals(4, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4077.5150743);
      doubleArray0[1] = (double) 114;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 114;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) 114;
      String string1 = StringUtils.join(doubleArray0, '|', 10, 10);
      assertNotNull(string1);
      assertArrayEquals(new double[] {(-4077.5150743), 114.0, 10.0, 114.0, 10.0, 114.0}, doubleArray0, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = '2';
      charArray0[6] = '2';
      charArray0[7] = '2';
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'2', '2', '2', '2', '2', '2', '2', '2'}, charArray0);
      assertEquals("22222222", string0);
      assertEquals(8, charArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "22222222", charArray0);
      assertArrayEquals(new char[] {'2', '2', '2', '2', '2', '2', '2', '2'}, charArray0);
      assertEquals(0, int0);
      assertEquals(8, charArray0.length);
      
      String string1 = StringUtils.chop("22222222");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("2222222", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "22222222";
      charSequenceArray0[1] = (CharSequence) "2222222";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "22222222", charSequenceArray0[1]);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("22222222", charSequence0);
      assertEquals(3, charSequenceArray0.length);
      
      charSequenceArray0[2] = (CharSequence) "22222222";
      int int1 = StringUtils.lastIndexOfAny("2222222", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(3, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("t4Y4HOU[ADxX", "1M", (String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.wrap("{}", '0');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0{}0", string2);
      
      String string3 = StringUtils.trimToEmpty("|)xheM");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("|)xheM", string3);
      
      boolean boolean0 = StringUtils.isMixedCase("|)xheM");
      assertTrue(boolean0);
      
      String string4 = StringUtils.remove(" vs ", 'V');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" vs ", string4);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      String string0 = StringUtils.rotate("hY*", (-2303));
      assertNotNull(string0);
      assertEquals("*hY", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("*hY");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      String string1 = StringUtils.join(shortArray0, 'I');
      assertNotNull(string1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0I0I0I0", string1);
      assertEquals(4, shortArray0.length);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[24];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "0I0I0I0";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(24, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(24, charSequenceArray0.length);
      
      String string3 = StringUtils.stripEnd("", "?a> ka\"XbCW");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.wrap("", "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.replacePattern("", "\r", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String[] stringArray0 = StringUtils.split("{J3hjR");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      
      String string6 = StringUtils.capitalize("...");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("...", string6);
      
      String string7 = StringUtils.unwrap("A*D5Ln?Z>}?}U#", 'I');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertEquals("A*D5Ln?Z>}?}U#", string7);
      
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'I', 0, 1967);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("cQGsl=XrH)TcS>", ":1,nf+Gq:0/j6*$");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny(":1,nf+Gq:0/j6*$", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.abbreviateMiddle("A qcr4oT(ig", "H\n", 6);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("A H\nig", string1);
      
      String[] stringArray1 = StringUtils.split("A qcr4oT(ig", "cQGsl=XrH)TcS>", 6);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      String string0 = StringUtils.unwrap("@~.hGCxh{", 'B');
      assertNotNull(string0);
      assertEquals("@~.hGCxh{", string0);
      
      int int0 = StringUtils.compareIgnoreCase("Can only resolve parameter of type MT(r9/p2*mYq54 ", (String) null, true);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("Can only resolve parameter of type MT(r9/p2*mYq54 ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("@~.hGCxh{");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("@~.hGCxh{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Object object0 = stack0.push((Object) null);
      assertNull(object0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      boolean boolean0 = stack0.add((Object) locale_FilteringMode0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals("[null, EXTENDED_FILTERING]", stack0.toString());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(stack0.empty());
      assertEquals("[null, EXTENDED_FILTERING]", stack0.toString());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'D');
      assertNotNull(string0);
      assertFalse(stack0.contains('D'));
      assertEquals("DEXTENDED_FILTERING", string0);
      assertFalse(stack0.empty());
      assertEquals("[null, EXTENDED_FILTERING]", stack0.toString());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, '(', 108, 4047);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      String string0 = StringUtils.strip("ArMK+<p6{|=;n`v}45", "ArMK+<p6{|=;n`v}45");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("ArMK+<p6{|=;n`v}45");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      String string1 = StringUtils.deleteWhitespace("Minimum abbreviation width is %d");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimumabbreviationwidthis%d", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "Minimumabbreviationwidthis%d", (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      
      String string2 = locale0.getDisplayVariant();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      
      boolean boolean1 = StringUtils.startsWith("", "Minimum abbreviation width is %d");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.stripStart(" vs  vs ", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("vs  vs ", string3);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = 'u';
      charArray0[2] = 'E';
      charArray0[3] = 'Q';
      charArray0[4] = '\\';
      String string0 = StringUtils.join(charArray0, 'z');
      assertNotNull(string0);
      assertArrayEquals(new char[] {'z', 'u', 'E', 'Q', '\\'}, charArray0);
      assertEquals("zzuzEzQz\\", string0);
      assertEquals(5, charArray0.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "zzuzEzQz", charArray0);
      assertArrayEquals(new char[] {'z', 'u', 'E', 'Q', '\\'}, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("y", "zzuzEzQz", false);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 'u';
      longArray0[2] = (long) 'E';
      longArray0[3] = (long) 'z';
      longArray0[4] = (long) 'z';
      longArray0[5] = (long) 'z';
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'z', 13, 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.reverse("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("~WSQ+", "     ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("~WSQ+", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "~WSQ+";
      stringArray0[2] = "     ";
      stringArray0[3] = "~WSQ+";
      stringArray0[4] = "";
      stringArray0[5] = "~WSQ+";
      stringArray0[6] = "~WSQ+";
      String string2 = StringUtils.reverseDelimited("org.junitpioneer.jupiter.DefaultTimeZoneExtension", 'n');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("sioneExteneer.jupiter.DefaultTimeZonitpionorg.ju", string2);
      
      String string3 = StringUtils.stripToEmpty("~WSQ+");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("~WSQ+", string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "     ", (CharSequence) "~WSQ+");
      assertFalse(int1 == int0);
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      String string0 = StringUtils.unwrap("@~.hGC{", 'B');
      assertNotNull(string0);
      assertEquals("@~.hGC{", string0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) '4';
      String string1 = StringUtils.join(longArray0, 'B');
      assertNotNull(string1);
      assertArrayEquals(new long[] {66L, 52L}, longArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("66B52", string1);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("@~.hGC{", "@~.hGC{", (-1667));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.center("g@~.hGC{gL)_auchTme", 1987, "@~.hGC{");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap(",9ZTKM.1t{f", '4');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(",9ZTKM.1t{f", string3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string2));
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "g@~.hGC{gL)_auchTme", (CharSequence) "@~.hGC{");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.reverse("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("~WSQ+", "     ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("~WSQ+", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "~WSQ+";
      stringArray0[2] = "     ";
      stringArray0[3] = "~WSQ+";
      stringArray0[4] = "";
      stringArray0[5] = "~WSQ+";
      stringArray0[7] = "~WSQ+";
      String string2 = StringUtils.replaceEach("     ", stringArray0, stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("     ", string2);
      assertEquals(8, stringArray0.length);
      
      String string3 = StringUtils.abbreviate("", " 3dt", (-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceChars((String) null, " 3dt", "");
      assertNull(string4);
      
      String string5 = StringUtils.leftPad("3AOxZo%w", 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("3AOxZo%w", string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "~WSQ+", 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.containsWhitespace("3AOxZo%w");
      assertFalse(boolean0);
      
      String string6 = StringUtils.mid("", 322, 1596);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      int int2 = StringUtils.indexOf((CharSequence) "     ", (CharSequence) "~WSQ+");
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string0 = StringUtils.rotate(" ", Integer.MIN_VALUE);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      String string1 = StringUtils.toRootLowerCase(" ");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      String string2 = StringUtils.replace(" ", " ", "!a%UJf");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("!a%UJf", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "!a%UJf";
      charSequenceArray0[2] = (CharSequence) "!a%UJf";
      charSequenceArray0[3] = (CharSequence) " ";
      boolean boolean0 = StringUtils.startsWithAny(" ", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.deleteWhitespace("!a%UJf");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("!a%UJf", string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("Q+S4<'i5 R", " ", " ");
      assertNull(stringArray0);
      
      String string4 = StringUtils.wrap(" ", 'j');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("j j", string4);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (int) ';', (int) ';');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-2803.475);
      doubleArray0[1] = 1692.13;
      doubleArray0[2] = 3.0;
      String string0 = StringUtils.substring((String) null, (-2970), 49);
      assertNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "?axys.2rQ6Vy";
      stringArray0[3] = "?axys.2rQ6Vy";
      String string1 = StringUtils.replaceEachRepeatedly("offset cannot be negative", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals("offset cannot be negative", string1);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'2', '\u0000'}, charArray0);
      assertEquals("2\u0000", string0);
      assertEquals(2, charArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "2\u0000", charArray0);
      assertArrayEquals(new char[] {'2', '\u0000'}, charArray0);
      assertEquals(0, int0);
      assertEquals(2, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "2\u0000";
      String string1 = StringUtils.chop("2\u0000");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("2", string1);
      
      charSequenceArray0[2] = (CharSequence) "2\u0000";
      charSequenceArray0[3] = (CharSequence) "2\u0000";
      charSequenceArray0[4] = (CharSequence) "2\u0000";
      int int1 = StringUtils.lastIndexOfAny("2\u0000", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(5, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("2\u0000", "1M", "2");
      assertNull(stringArray0);
      
      String string2 = StringUtils.wrap(" vs ", 'i');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("i vs i", string2);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = StringUtils.joinWith("Arguments cannot both be null", stringArray0);
      assertNotNull(string0);
      assertEquals("Arguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be null", string0);
      assertEquals(10, stringArray0.length);
      
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance("Arguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be null", "Arguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be nullArguments cannot both be null");
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join((short[]) null, 'o', (-1191), (-1191));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", string1);
      
      String string2 = StringUtils.join((short[]) null, '|', 9, 4239);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      String string3 = StringUtils.removeEndIgnoreCase("@~.hGC{", "K@W,Ow{*I.{X#h5)");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("@~.hGC{", string3);
      
      charSequenceArray0[2] = (CharSequence) "@~.hGC{";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string4 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.leftPad("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", 4239);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.mid((String) null, 56, 111);
      assertNull(string6);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '}';
      charArray0[3] = '|';
      charArray0[4] = '|';
      charArray0[5] = '|';
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[3], charArray0);
      assertArrayEquals(new char[] {'|', '|', '}', '|', '|', '|'}, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(6, charArray0.length);
      
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      String string1 = StringUtils.join(shortArray0, 'I');
      assertNotNull(string1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0I0I0I0", string1);
      assertEquals(4, shortArray0.length);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "0I0I0I0";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.stripEnd("", "?a> ka\"XbCW");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.wrap("", "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.replacePattern("", "\r", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      String[] stringArray0 = StringUtils.split("{J3hjR");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      
      String string6 = StringUtils.capitalize("...");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("...", string6);
      
      String string7 = StringUtils.unwrap("A*D5Ln?Z>}?}U#", 'I');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("A*D5Ln?Z>}?}U#", string7);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'I', 0, 115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      String string0 = StringUtils.chomp("S*i2");
      assertNotNull(string0);
      assertEquals("S*i2", string0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      String string1 = locale0.getDisplayLanguage();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Chinese", string1);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "S*i2";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("S*i2", string2);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("S*i2");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "JqQ#c", (CharSequence) "@FDjAR/`cLC'JV2j");
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("@FDjAR/`cLC'JV2j"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean1 = hashSet0.add("S*i2");
      assertTrue(hashSet0.contains("S*i2"));
      assertFalse(hashSet0.contains("@FDjAR/`cLC'JV2j"));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      boolean boolean2 = hashSet0.add("SqS=]&");
      assertTrue(hashSet0.contains("S*i2"));
      assertFalse(hashSet0.contains("@FDjAR/`cLC'JV2j"));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "JqQ#c", (char[]) null);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "JqQ#c";
      objectArray0[2] = (Object) "S*i2";
      objectArray0[3] = (Object) hashSet0;
      objectArray0[4] = (Object) "@FDjAR/`cLC'JV2j";
      String string3 = StringUtils.joinWith("SqS=]&", objectArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, objectArray0.length);
      
      String string4 = StringUtils.stripToNull("S*i2");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("S*i2", string4);
      
      boolean boolean4 = StringUtils.containsNone((CharSequence) "java.lang.Object@2bee0961SqS=]&JqQ#cSqS=]&S*i2SqS=]&[SqS=]&, S*i2]SqS=]&@FDjAR/`cLC'JV2j", (char[]) null);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      String string0 = StringUtils.remove("lg?<D@^ROE.+lgj<D@^ROE.+", "lg?<D@^ROE.+lgj<D@^ROE.+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "lg?<D@^ROE.+lgj<D@^ROE.+");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "lg?<D@^ROE.+lgj<D@^ROE.+", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) " ";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "", (-1272));
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1272);
      intArray0[3] = (-1272);
      intArray0[4] = (-1272);
      intArray0[5] = (-1272);
      intArray0[6] = (-1);
      intArray0[7] = (-1272);
      intArray0[8] = (-6);
      String string1 = StringUtils.join(intArray0, 'B', 5, 7);
      assertNotNull(string1);
      assertArrayEquals(new int[] {(-1), (-1), (-1272), (-1272), (-1272), (-1272), (-1), (-1272), (-6)}, intArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-1272B-1", string1);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "3n4'URH:}.%o";
      charSequenceArray0[1] = (CharSequence) null;
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      
      String string1 = StringUtils.upperCase("", locale0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string2);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.equals((CharSequence) null, (CharSequence) "3n4'URH:}.%o");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string3 = StringUtils.unwrap("...", 'a');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("...", string3);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("u(ds~;(iZ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "u(ds~;(iZ", (CharSequence) null, 2414);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      String string0 = StringUtils.unwrap("@~.hGC{", 'B');
      assertNotNull(string0);
      assertEquals("@~.hGC{", string0);
      
      String string1 = StringUtils.wrapIfMissing("@~.hGC{", "28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%@~.hGC{28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%", string1);
      
      boolean boolean0 = StringUtils.isWhitespace("@~.hGC{");
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp("\r");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.params.Range", "Cel9&AK7BSZs");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.Range", string3);
      
      String string4 = StringUtils.unwrap("@~.hGC{", "Cel9&AK7BSZs");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("@~.hGC{", string4);
      
      String string5 = StringUtils.center("h~V'", (-2665), ']');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("h~V'", string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%@~.hGC{28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%", (CharSequence) "28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%@~.hGC{28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%", 12);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      char[] charArray0 = new char[15];
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.chomp("\r");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", "\n");
      assertEquals(0, int0);
      
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.stripToNull("\n");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'V');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      String string0 = StringUtils.reverse("OXi}g^/z'&S]");
      assertNotNull(string0);
      assertEquals("]S&'z/^g}iXO", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "]S&'z/^g}iXO", "OXi}g^/z'&S]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      String string0 = StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.mid("", (-3649), (-3649));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "@FDjAR/`cLC'JV2j";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = StringUtils.LF;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      
      String string3 = StringUtils.substringBefore("...", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("...", string3);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Locale locale0 = arrayDeque0.poll();
      assertNull(locale0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayDeque0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string4 = StringUtils.center("codefx", (-3649), "m8\"");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("codefx", string4);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("...", "Illegal range. The step cannot be zero.", charSequenceArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertEquals("...", string5);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "...", "AQi@^R|Ihn(.");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.abbreviate("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "", 3051, (-3649));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", string6);
      
      String string7 = StringUtils.getDigits("codefx");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      String string0 = StringUtils.stripAccents("!:tkIyq,p~k<~lV");
      assertNotNull(string0);
      assertEquals("!:tkIyq,p~k<~lV", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "!:tkIyq,p~k<~lV";
      charSequenceArray0[2] = (CharSequence) "!:tkIyq,p~k<~lV";
      charSequenceArray0[4] = (CharSequence) "!:tkIyq,p~k<~lV";
      char[] charArray0 = new char[6];
      String string1 = StringUtils.join(charArray0, '\\');
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\\\u0000\\\u0000\\\u0000\\\u0000\\\u0000", string1);
      assertEquals(6, charArray0.length);
      
      charSequenceArray0[4] = (CharSequence) "\u0000\u0000\u0000\u0000\u0000\u0000";
      String string2 = StringUtils.deleteWhitespace("!:tkIyq,p~k<~lV");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("!:tkIyq,p~k<~lV", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "!:tkIyq,p~k<~lV", 0, 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      String string0 = StringUtils.swapCase("76s]0[>");
      assertNotNull(string0);
      assertEquals("76S]0[>", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "76s]0[>";
      charSequenceArray0[1] = (CharSequence) "76S]0[>";
      charSequenceArray0[2] = (CharSequence) "76s]0[>";
      charSequenceArray0[3] = (CharSequence) "76S]0[>";
      charSequenceArray0[4] = (CharSequence) "76S]0[>";
      charSequenceArray0[5] = (CharSequence) "76s]0[>";
      boolean boolean0 = StringUtils.equalsAny("76S]0[>", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("ba\"?H{Xy RmwDYuj$'", "76s]0[>");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.join((char[]) null, '2');
      assertNull(string1);
      
      boolean boolean1 = StringUtils.startsWithAny(charSequenceArray0[1], stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.deleteWhitespace("\"`");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("\"`", string2);
      
      String string3 = StringUtils.abbreviateMiddle(" vvs ", "Failed to create default temp directory", 6);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" vvs ", string3);
      
      String[] stringArray1 = StringUtils.split("n;ZzLLocale must not be null", " ", 6);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another", true);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast("G%yeYD+6Rsl0cyETE.", "R`");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      String string1 = StringUtils.join(shortArray0, 'I');
      assertNotNull(string1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0I0I0I0", string1);
      assertEquals(4, shortArray0.length);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "0I0I0I0";
      charSequenceArray0[3] = (CharSequence) null;
      String string3 = StringUtils.abbreviate((String) null, 47, 76);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.unwrap((String) null, "'\"_{KO6V!T_");
      assertNull(string4);
      
      String string5 = StringUtils.substring("", 47);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      String string0 = StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.mid("", (-3649), (-3649));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "@FDjAR/`cLC'JV2j";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = StringUtils.LF;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNumeric("\n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultString("", "Minimum abbreviation width is %d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      String string0 = StringUtils.lowerCase("The Character must not be null");
      assertNotNull(string0);
      assertEquals("the character must not be null", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "e";
      charSequenceArray0[1] = (CharSequence) "The Character must not be null";
      charSequenceArray0[2] = (CharSequence) "The Character must not be null";
      charSequenceArray0[3] = (CharSequence) "e";
      charSequenceArray0[4] = (CharSequence) "the character must not be null";
      charSequenceArray0[5] = (CharSequence) "The Character must not be null";
      charSequenceArray0[6] = (CharSequence) "the character must not be null";
      String string1 = StringUtils.prependIfMissingIgnoreCase("e", "the character must not be null", charSequenceArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("e", string1);
      assertEquals(7, charSequenceArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[1], "e", 12);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny("The Character must not be null", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isMixedCase(charSequenceArray0[6]);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (-2900.40093);
      doubleArray0[2] = (double) 'q';
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 12;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 'q';
      doubleArray0[8] = (double) 'q';
      String string2 = StringUtils.join(doubleArray0, 'q');
      assertNotNull(string2);
      assertArrayEquals(new double[] {12.0, (-2900.40093), 113.0, (-1.0), (-1.0), 12.0, 1.0, 113.0, 113.0}, doubleArray0, 0.01);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("12.0q-2900.40093q113.0q-1.0q-1.0q12.0q1.0q113.0q113.0", string2);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean2 = StringUtils.isAlphaSpace("12.0q-2900.40093q113.0q-1.0q-1.0q12.0q1.0q113.0q113.0");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.substringBefore("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "12.0q-2900.40093q113.0q-1.0q-1.0q12.0q1.0q113.0q113.0");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", string3);
      
      String string4 = StringUtils.trimToNull("_(|B*!K6;*Nq?");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("_(|B*!K6;*Nq?", string4);
      
      boolean boolean3 = StringUtils.isBlank("the character must not be null");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (double) 'L';
      doubleArray0[3] = (double) Integer.MIN_VALUE;
      doubleArray0[4] = 3.0;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = (double) Integer.MIN_VALUE;
      doubleArray0[7] = (double) 6;
      String string0 = StringUtils.join(doubleArray0, 'i', 1, 6);
      assertNotNull(string0);
      assertArrayEquals(new double[] {3.0, 3.0, 76.0, (-2.147483648E9), 3.0, 6.0, (-2.147483648E9), 6.0}, doubleArray0, 0.01);
      assertEquals("3.0i76.0i-2.147483648E9i3.0i6.0", string0);
      assertEquals(8, doubleArray0.length);
      
      String string1 = StringUtils.stripToEmpty("ATy$bc{%`{+f$^IATy$bc{%`{+f$^I");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ATy$bc{%`{+f$^IATy$bc{%`{+f$^I", string1);
      
      String[] stringArray0 = StringUtils.split("ATy$bc{%`{+f$^IATy$bc{%`{+f$^I");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "ATy$bc{%`{+f$^IATy$bc{%`{+f$^I", (CharSequence) "9`)Ztymce");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "ATy$bc{%`{+f$^IATy$bc{%`{+f$^I", (CharSequence) "9`)Ztymce");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.replaceChars("\r", "org.junitpioneer.jupiter.params.FloatRange", (String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("\r", string1);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      boolean boolean0 = StringUtils.isAllUpperCase("A");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.strip("\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      String string2 = StringUtils.swapCase("\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\n", string2);
      
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.removeStart((String) null, "3dt");
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[1], charSequenceArray0[1], 20);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string4 = StringUtils.wrapIfMissing((String) null, 'm');
      assertNull(string4);
      
      String string5 = StringUtils.center(" ", 0, '3');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" ", string5);
      
      boolean boolean1 = StringUtils.isAlphaSpace("\n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "\n");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean2 = StringUtils.contains(charSequenceArray0[1], (CharSequence) "");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(5, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-68);
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      String string6 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string6);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)83, (byte)3, (byte)83, (byte)69, (byte)32, (byte) (-68)}, byteArray0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("\uFFFDS\u0003SE \uFFFD", string6);
      assertEquals(7, byteArray0.length);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string3 = StringUtils.getDigits("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.wrapIfMissing("", (String) null);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      int int0 = StringUtils.compare("DefaultLocale", "pX#;1g>q`u.");
      assertEquals((-44), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", (String) null, "");
      assertNull(stringArray0);
      
      String string5 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(" ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.chop(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details):", string1);
      
      String string2 = StringUtils.chomp(" vs ", " vs ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.rotate("gO!l", 35);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("O!lg", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", " ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", ". The following paths could not be deleted (see suppressed exceptions for details): ", 35);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase(" vs ", stringArray1);
      assertSame(stringArray1, stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      String string0 = StringUtils.capitalize("=_");
      assertNotNull(string0);
      assertEquals("=_", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "=_", (-179));
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultIfEmpty("R", "=_");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("R", string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[1] = 'o';
      charArray0[2] = '}';
      charArray0[3] = '~';
      charArray0[4] = 'J';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "R", charArray0);
      assertArrayEquals(new char[] {'H', 'o', '}', '~', 'J'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(5, charArray0.length);
      
      String string2 = StringUtils.chomp("M8&S8");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("M8&S8", string2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '~';
      doubleArray0[1] = (double) '}';
      String string3 = StringUtils.join(doubleArray0, '', 108, 9);
      assertNotNull(string3);
      assertArrayEquals(new double[] {126.0, 125.0}, doubleArray0, 0.01);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      String string0 = StringUtils.unwrap("Minimum abbreviation width with offset is %d", '\\');
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      String string1 = StringUtils.rightPad("", 8192, '<');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
      
      String string2 = StringUtils.truncate("i7:^w(BrhoU)", 6, 10);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("BrhoU)", string2);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "BrhoU)");
      assertNotNull(charBuffer0);
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.limit());
      assertEquals("BrhoU)", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charBuffer0.length());
      
      int int0 = StringUtils.length(charBuffer0);
      assertEquals(6, int0);
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.limit());
      assertEquals("BrhoU)", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charBuffer0.length());
      
      String string3 = StringUtils.stripToEmpty(string1);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = "";
      stringArray0[1] = "w(";
      stringArray0[2] = "w(";
      stringArray0[3] = "w(";
      stringArray0[4] = "";
      stringArray0[5] = "w(";
      stringArray0[6] = "";
      stringArray0[7] = "w(";
      stringArray0[8] = "w(";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("w(", string1);
      assertEquals(10, stringArray0.length);
      
      String string2 = StringUtils.swapCase("Minimum abbreviation width with offset is %d");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("mINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string2);
      
      String string3 = StringUtils.replaceChars("org.apache.commons.lang3.StringUtils", "mINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", "MRroBV_X_@m i7&");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.apache.coons.lang3.tringBtils", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "w(", (CharSequence) "");
      assertEquals(2, int0);
      
      String string4 = StringUtils.chomp(">", "w(");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(">", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "w(";
      charSequenceArray0[1] = (CharSequence) "w(";
      charSequenceArray0[2] = (CharSequence) ">";
      String string5 = StringUtils.appendIfMissing("w(", "", charSequenceArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("w(", string5);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.reverse("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("~WSQ+", "     ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("~WSQ+", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "~WSQ+";
      stringArray0[2] = "     ";
      stringArray0[3] = "~WSQ+";
      stringArray0[4] = "";
      stringArray0[5] = "~WSQ+";
      stringArray0[6] = "~WSQ+";
      stringArray0[7] = "~WSQ+";
      String string2 = StringUtils.replaceEach("     ", stringArray0, stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("     ", string2);
      assertEquals(8, stringArray0.length);
      
      String string3 = StringUtils.abbreviate("", " 3dt", (-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceChars((String) null, " 3dt", "");
      assertNull(string4);
      
      String string5 = StringUtils.leftPad("3AOxZo%w", 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("3AOxZo%w", string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "~WSQ+", 1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.containsWhitespace("3AOxZo%w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals(0, int0);
      
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Search and Replace array lengths don't match: ", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      String string0 = "&2\"?P@Z";
      String string1 = StringUtils.deleteWhitespace("&2\"?P@Z");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("&2\"?P@Z", string1);
      
      String string2 = StringUtils.wrapIfMissing("&2\"?P@Z", "&2\"?P@Z");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("&2\"?P@Z", string2);
      
      int[] intArray0 = new int[0];
      char char0 = 'M';
      String string3 = StringUtils.join(intArray0, 'M', 7, 5);
      assertNotNull(string3);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(0, intArray0.length);
      
      String string4 = "d4tM7;$d4tM7;$";
      String string5 = StringUtils.stripToNull("d4tM7;$d4tM7;$");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("d4tM7;$d4tM7;$", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("d4tM7;$d4tM7;$", (-1053), (-1053));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@~.\"GC{28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%";
      stringArray0[1] = "blank_blank_blank_2014";
      stringArray0[2] = "^L~y4K[>";
      stringArray0[3] = "NxIvK$T|0^h{w";
      stringArray0[4] = "org.junitpioneer.vintage.TimeoutExtension";
      String string0 = "J}}TMgBy'vqL3)vzq";
      stringArray0[5] = "J}}TMgBy'vqL3)vzq";
      stringArray0[6] = "Minimum abbreviation width is %d";
      stringArray0[7] = "c\"pBg";
      stringArray0[8] = "~&rywvf|>9+miG!*";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("@~.\"GC{28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%", string1);
      assertEquals(9, stringArray0.length);
      
      String string2 = StringUtils.substringAfter("~&rywvf|>9+miG!*", "^L~y4K[>");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("NxIvK$T|0^h{w", "", 25);
      assertEquals(13, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "@~.\"GC{28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%", (CharSequence) "J}}TMgBy'vqL3)vzq");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'Z', (-834), 25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -834
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      String string0 = StringUtils.substringBefore("JqQ#c", "JqQ#c");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("JqQ#c", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.chomp("JqQ#c", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("JqQ#c", string1);
      
      boolean boolean0 = StringUtils.isEmpty("JqQ#c");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", "I^ZyV<\"EAKcw6e)", "JqQ#c");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string3 = StringUtils.removeIgnoreCase("l", "HDF7");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("l", string3);
      
      charSequenceArray0[0] = (CharSequence) "l";
      charSequenceArray0[1] = (CharSequence) "JqQ#c";
      charSequenceArray0[2] = (CharSequence) "JqQ#c";
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "I^ZyV<\"EAKcw6e)", charSequenceArray0[2]);
      assertEquals(14, int0);
      assertEquals(3, charSequenceArray0.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "l";
      stringArray0[1] = "JqQ#c";
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("l", string4);
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(3, charSequenceArray0.length);
      
      String string5 = StringUtils.replaceChars("JqQ#c", "l", "l");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("JqQ#c", string5);
      
      String string6 = StringUtils.unwrap("l", "=>3 vrS");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("l", string6);
      
      String string7 = StringUtils.abbreviate("l", 14, 51);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertEquals("l", string7);
      
      String string8 = StringUtils.leftPad("l?cnSR8T?cGeW/CDHe", 321, '2');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertEquals("222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222l?cnSR8T?cGeW/CDHe", string8);
      
      String string9 = StringUtils.remove("7yo16hj]mh", '2');
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertEquals("7yo16hj]mh", string9);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("z\"Wf");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      int int0 = StringUtils.compare("z\"Wf", (String) null, false);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.endsWithAny("\n", stringArray0);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      String string0 = StringUtils.stripAccents("!:tkIyq,p~k<~lV");
      assertNotNull(string0);
      assertEquals("!:tkIyq,p~k<~lV", string0);
      
      String string1 = StringUtils.stripToNull("!:tkIyq,p~k<~lV");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("!:tkIyq,p~k<~lV", string1);
      
      String string2 = StringUtils.join((int[]) null, 'L');
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("!:tkIyq,p~k<~lV", '\\');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\\!:tkIyq,p~k<~lV\\", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", " but was: ", 1459);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = '2';
      charArray0[2] = '\\';
      charArray0[3] = 'x';
      charArray0[4] = 'L';
      charArray0[5] = '\\';
      charArray0[6] = '2';
      charArray0[7] = 'L';
      int int0 = StringUtils.indexOfAny((CharSequence) "!:tkIyq,p~k<~lV", charArray0);
      assertArrayEquals(new char[] {'\\', '2', '\\', 'x', 'L', '\\', '2', 'L'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      String string0 = StringUtils.truncate("@FDjAR/`cLC'JV2j", 344, 100);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((double[]) null, 'u', 100, 1956);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split("", "E");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("lh)rGR]X|rn", (String) null, 1956);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.leftPad((String) null, (int) 'u', 'u');
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, (String) null, 1956);
      assertNull(string4);
      
      String string5 = StringUtils.replaceChars("&5O3^QZ__5z7>$@", "Us0d|@L?", " ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertEquals("&5O3^QZ__5z7>$", string5);
      
      String string6 = StringUtils.join((Object[]) stringArray0, ":XtW;PSEoi@MCP{");
      assertNotNull(string6);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertEquals(0, stringArray0.length);
      
      String string7 = StringUtils.uncapitalize("w({T~1");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("w({T~1", string7);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "w({T~1", (CharSequence) "lh)rGR]X|rn", 3020);
      assertEquals(11, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("&5O3^QZ__5z7>$@");
      assertFalse(boolean0);
      
      String string8 = StringUtils.rightPad("#DUs}<-'Uc/wC7", 3020, "#DUs}<-'Uc/wC7");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      
      String string9 = StringUtils.defaultString("P$vHgjg'7M@Yi|z2A)", "lh)rGR]X|rn");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertEquals("P$vHgjg'7M@Yi|z2A)", string9);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) ":XtW;PSEoi@MCP{", (CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray1.length);
      
      String string10 = StringUtils.removeAll((String) null, "#DUs}<-'Uc/wC7");
      assertNull(string10);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", "io");
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[2] = (long) '.';
      longArray0[2] = (long) '.';
      longArray0[3] = (long) '.';
      longArray0[4] = (long) '.';
      String string2 = StringUtils.join(longArray0, 'o');
      assertNotNull(string2);
      assertArrayEquals(new long[] {(-1L), 0L, 46L, 46L, 46L}, longArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("-1o0o46o46o46", string2);
      assertEquals(5, longArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("io", " 2", (-25));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '4';
      int int0 = StringUtils.indexOfAny((CharSequence) "io", charArray0);
      assertArrayEquals(new char[] {'\'', '\'', '4'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      
      String string3 = StringUtils.removeEnd((String) null, " 2");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      String string0 = StringUtils.stripAccents("!:tkIyq,p~k<~lV");
      assertNotNull(string0);
      assertEquals("!:tkIyq,p~k<~lV", string0);
      
      String string1 = StringUtils.truncate("N   ", 32);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("N   ", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "!:tkIyq,p~k<~lV";
      String string2 = StringUtils.replaceFirst("org.apache.commons.lang3.StringUtils", "N   ", "!:tkIyq,p~k<~lV");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      
      String string3 = StringUtils.rightPad("5U}(@{.", 243);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("5U}(@{.                                                                                                                                                                                                                                           ", string3);
      
      int int0 = StringUtils.ordinalIndexOf("N   ", "N   ", 32);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 243;
      String string4 = StringUtils.join(floatArray0, 'N');
      assertNotNull(string4);
      assertArrayEquals(new float[] {243.0F}, floatArray0, 0.01F);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("243.0", string4);
      assertEquals(1, floatArray0.length);
      
      String string5 = StringUtils.wrapIfMissing("N   ", 'l');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("lN   l", string5);
      
      String string6 = StringUtils.rotate("E[|\" 'z@?uG", (-1));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("[|\" 'z@?uGE", string6);
      
      String string7 = StringUtils.chop((String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(4, charSequenceArray0.length);
      
      String string0 = StringUtils.substringAfterLast("org.junitpioneer.jupiter.TempDirectory$CloseablePath", "org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[0], (CharSequence) null);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[3]);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, intArray0.length);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripAccents("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("", "wde`o~'*X;p5(U#bD", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.join((int[]) null, '!', (-138), (-138));
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.split("N;ZZL", (String) null, (-138));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.center("", (-138), "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      
      String string6 = StringUtils.repeat("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", 6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension6BVforg.junitpioneer.vintage.ExpectedExceptionExtension6BVforg.junitpioneer.vintage.ExpectedExceptionExtension6BVforg.junitpioneer.vintage.ExpectedExceptionExtension6BVforg.junitpioneer.vintage.ExpectedExceptionExtension6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", string6);
      
      Locale locale0 = new Locale("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension6BVforg.junitpioneer.vintage.ExpectedExceptionExtension6BVforg.junitpioneer.vintage.ExpectedExceptionExtension6BVforg.junitpioneer.vintage.ExpectedExceptionExtension6BVforg.junitpioneer.vintage.ExpectedExceptionExtension6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "", "");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension", locale0.getLanguage());
      assertEquals("6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      String string7 = locale0.getDisplayScript();
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension", locale0.getLanguage());
      assertEquals("6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension6bvforg.junitpioneer.vintage.expectedexceptionextension", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(locale0));
      assertEquals(0, linkedList1.size());
      
      Locale locale1 = Locale.lookup(linkedList0, linkedList1);
      assertNull(locale1);
      assertFalse(linkedList1.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("wde`o~'*X;p5(U#bD", "", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'g';
      String[] stringArray0 = new String[2];
      stringArray0[1] = "Search and Replace array lengths don't match: ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Search and Replace array lengths don't match: ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      String string0 = StringUtils.chomp("S*i2");
      assertNotNull(string0);
      assertEquals("S*i2", string0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "S*i2";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("S*i2", string1);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("S*i2");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "JqQ#c", (CharSequence) "@FDjAR/`cLC'JV2j");
      assertEquals(0, int0);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("(5'XPYT6){.--");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(9, stringArray2.length);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("\r", "\r", (int) ')');
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertEquals(2, stringArray3.length);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("',has a lenth les thn 2', has a lenth less than 2", " ");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "',has a lenth les thn 2', has a lenth less than 2", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(12, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(" ", stringArray0);
      assertFalse(boolean0);
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("U[I'm3Oe >0.5D4[", "U[I'm3Oe >0.5D4[");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "U[I'm3Oe >0.5D4[", 977);
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("Illegal range. The step cannot be zero.", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Illegal range. The step cannot be zero.", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.replaceOnceIgnoreCase("W1Gv,T)b\">R*D;R", "U[I'm3Oe >0.5D4[", "U[I'm3Oe >0.5D4[");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("W1Gv,T)b\">R*D;R", string3);
      
      charSequenceArray0[1] = (CharSequence) "W1Gv,T)b\">R*D;R";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "Illegal range. The step cannot be zero.";
      boolean boolean1 = StringUtils.startsWithAny("Illegal range. The step cannot be zero.", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      String string4 = StringUtils.leftPad("U[I'm3Oe >0.5D4[", 1959, "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.substringBetween("", "j$TSG");
      assertNull(string5);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", charSequenceArray0[4]);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string3));
      assertEquals("", charSequence0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)charSequence0));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("[N8EV:qO", string4);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(1, stringArray1.length);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase("U[I'm3Oe >0.5D4[", "W1Gv,T)b\">R*D;R", charSequenceArray0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)charSequence0));
      assertEquals("U[I'm3Oe >0.5D4[", string7);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[1], (char[]) null);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string8 = StringUtils.substringAfterLast("", "org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)charSequence0));
      assertTrue(string8.equals((Object)string1));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.replace("", "", "&q,am';");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp("6BVforg.junitpioneer.vintage.ExpectedExceptionExtensionRepeatFailedTestExtension");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("6BVforg.junitpioneer.vintage.ExpectedExceptionExtensionRepeatFailedTestExtension", string2);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.substringAfterLast((String) null, "@4[%8pRv");
      assertNull(string3);
      
      CharSequence charSequence1 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertNull(charSequence1);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.repeat((String) null, "$n<0J!kIww#!", 0);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.center("", 0);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      String string0 = StringUtils.chomp("G");
      assertNotNull(string0);
      assertEquals("G", string0);
      
      String string1 = "DefaultTimeZone";
      String string2 = StringUtils.wrap("G", "{Ltl)h,dQRx6=ci 8)");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{Ltl)h,dQRx6=ci 8)G{Ltl)h,dQRx6=ci 8)", string2);
      
      int int0 = (-1073741822);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("G", "G", (-1073741822));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      String string0 = StringUtils.chomp("A");
      assertNotNull(string0);
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      String string0 = StringUtils.chomp("\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBeforeLast("\n", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      
      String string2 = StringUtils.substringBetween((String) null, "");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\n";
      String string3 = StringUtils.strip((String) null);
      assertNull(string3);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string4 = StringUtils.left((String) null, 890);
      assertNull(string4);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = arrayDeque0.add(locale_FilteringMode0);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertTrue(boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      ArrayDeque<Locale.FilteringMode> arrayDeque1 = new ArrayDeque<Locale.FilteringMode>();
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.contains(locale_FilteringMode0));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean1 = arrayDeque0.add(locale_FilteringMode1);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean2 = arrayDeque0.add(locale_FilteringMode2);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(3, arrayDeque0.size());
      
      boolean boolean3 = arrayDeque0.add(locale_FilteringMode1);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(4, arrayDeque0.size());
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(locale_FilteringMode0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      HashSet<Locale.FilteringMode> hashSet1 = new HashSet<Locale.FilteringMode>(hashSet0);
      assertNotNull(hashSet1);
      assertFalse(hashSet0.contains(locale_FilteringMode0));
      assertFalse(hashSet1.contains(locale_FilteringMode0));
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean4 = hashSet0.add(locale_FilteringMode3);
      assertFalse(hashSet0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode3));
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode0);
      assertSame(locale_FilteringMode3, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode1);
      assertFalse(hashSet0.equals((Object)hashSet1));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode1));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      String string0 = StringUtils.join((Iterable<?>) hashSet1, "z\"nf");
      assertNotNull(string0);
      assertFalse(hashSet0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode3));
      assertFalse(hashSet1.contains(locale_FilteringMode0));
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(hashSet1, hashSet0);
      assertFalse(hashSet0.equals((Object)hashSet1));
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertEquals("", string0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      
      boolean boolean5 = StringUtils.isAlphaSpace("z\"nf");
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5);
      
      String string1 = StringUtils.wrapIfMissing("F6h!|", " ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" F6h!| ", string1);
      
      int int0 = StringUtils.compare("z\"nf", "z\"nf");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Timeout", " pV}FP:(C&#8", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "3");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("3", 22, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("3                     ", string1);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string2 = locale0.getDisplayScript();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string3 = StringUtils.mid("nSY'^f{0_H/X)${<L", 5, 32);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("f{0_H/X)${<L", string3);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
      
      String string4 = StringUtils.rotate("52991456", 2);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("56529914", string4);
      
      String string5 = StringUtils.upperCase("52991456");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("52991456", string5);
      
      boolean boolean1 = StringUtils.containsWhitespace("52991456");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "3");
      assertEquals(0, int0);
      
      String string6 = StringUtils.leftPad("s?5F*Q\"Q", 32, 'B');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("BBBBBBBBBBBBBBBBBBBBBBBBs?5F*Q\"Q", string6);
      
      String string7 = StringUtils.overlay("", " ", (-411), (-4390));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals(" ", string7);
      
      String string8 = StringUtils.substringAfterLast("nSY'^f{0_H/X)${<L", "");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-973.6692887827253);
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 0.41452991452991456;
      String string0 = StringUtils.join(doubleArray0, '');
      assertNotNull(string0);
      assertArrayEquals(new double[] {(-973.6692887827253), 3.0, 0.41452991452991456}, doubleArray0, 0.01);
      assertEquals("-973.66928878272533.00.41452991452991456", string0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("-973.66928878272533.00.41452991452991456");
      assertFalse(boolean0);
      
      String string1 = "', has a length less than 2\\u";
      String string2 = StringUtils.abbreviate(string1, string1, 67, 64);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("', has a length less than 2\\u", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "-973.66928878272533.00.41452991452991456", 64, 67);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      String string3 = StringUtils.join(byteArray0, '', 113, (-1150));
      assertNotNull(string3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(0, byteArray0.length);
      
      String string4 = "temp.dir";
      String string5 = null;
      String string6 = StringUtils.defaultIfBlank("temp.dir", (String) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("temp.dir", string6);
      
      String string7 = StringUtils.wrapIfMissing("-973.66928878272533.00.41452991452991456", ">Azq/OUp");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals(">Azq/OUp-973.66928878272533.00.41452991452991456>Azq/OUp", string7);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 64);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "temp.dir";
      charSequenceArray0[2] = (CharSequence) "temp.dir";
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, (String) null, 14, 1104);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.reverse("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("~WSQ+", "     ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("~WSQ+", string1);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "~WSQ+", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.replaceChars((String) null, "~WSQ+", (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.removeEnd("', has a length less than 2", string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', has a length less than 2", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("', has a length less than 2", string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.chomp(string0, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.stripEnd("?a> ka\"XbCW", "y\r");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("?a> ka\"XbCW", string3);
      
      String string4 = StringUtils.trimToNull("e^./]");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("e^./]", string4);
      
      Locale locale0 = new Locale("daE4vqIc");
      assertNotNull(locale0);
      assertEquals("dae4vqic", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("dae4vqic", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      String string5 = StringUtils.upperCase("e^./]", locale0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("E^./]", string5);
      assertEquals("dae4vqic", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("dae4vqic", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      String string6 = StringUtils.substringBefore("", "Illegal range. The step cannot be zero.");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(locale0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayDeque0, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(arrayDeque0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string7 = StringUtils.center("AQi@^R|Ihn(.", 16, "e^./]");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertEquals("e^AQi@^R|Ihn(.e^", string7);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "F_Qc%");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string8 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", " vs ", 16, 16);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertEquals(" vs critical vs ", string8);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "JqQ#c";
      stringArray0[1] = "`Sf";
      stringArray0[2] = "JqQ#c";
      stringArray0[3] = "JqQ#c";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      String string0 = StringUtils.center("JqQ#c", 2772, "JqQ#c");
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("VjAba/;j", "`Sf", stringArray1);
      assertNotNull(string1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("VjAba/;j`Sf", string1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      String string2 = StringUtils.abbreviate(string0, "Timeout", 198, 198);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("TimeoutJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#cJqQ#Timeout", string2);
      
      String string3 = StringUtils.getDigits("g2@~.hGC{gLaunchTime");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("2", string3);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "e");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      String string0 = StringUtils.overlay("n;ZzLLocale must not be null", "org.apache.commons.lang3.CharSequenceUtils", 1475, 539);
      assertNotNull(string0);
      assertEquals("n;ZzLLocale must not be nullorg.apache.commons.lang3.CharSequenceUtils", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "n;ZzLLocale must not be nullorg.apache.commons.lang3.CharSequenceUtils", (CharSequence) "org.apache.commons.lang3.CharSequenceUtils", (-2927));
      assertEquals(28, int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("n;ZzLLocale must not be null");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "n;ZzLLocale must not be nullorg.apache.commons.lang3.CharSequenceUtils";
      objectArray0[1] = (Object) "?cnSR8T?cGeW/CDHe";
      objectArray0[2] = (Object) "n;ZzLLocale must not be null";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "?cnSR8T?cGeW/CDHe";
      objectArray0[5] = (Object) "org.apache.commons.lang3.CharSequenceUtils";
      String string1 = StringUtils.joinWith("?cnSR8T?cGeW/CDHe", objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      String string0 = StringUtils.capitalize("{&r&u`zP,,YHv>*%=");
      assertNotNull(string0);
      assertEquals("{&r&u`zP,,YHv>*%=", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "{&r&u`zP,,YHv>*%=", 1287);
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString("{&r&u`zP,,YHv>*%=", "{&r&u`zP,,YHv>*%=");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("{&r&u`zP,,YHv>*%=", string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "{&r&u`zP,,YHv>*%=", "offset cannot be negative");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.valueOf(charArray0);
      assertNotNull(string3);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(0, charArray0.length);
      
      String string4 = StringUtils.unwrap("", '9');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.replace((String) null, "eg6_@", (String) null, 1887);
      assertNull(string5);
      
      String string6 = StringUtils.chomp("");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      
      String string7 = StringUtils.getDigits((String) null);
      assertNull(string7);
      
      String string8 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "eg6_@", supplier0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string6));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string8));
      assertEquals("eg6_@", charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "eg6_@", (CharSequence) "eg6_@");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "{&r&u`zP,,YHv>*%=";
      stringArray0[3] = "offset cannot be negative";
      String string9 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)charSequence0));
      assertFalse(string9.equals((Object)string4));
      assertEquals("{&r&u`zP,,YHv>*%=", string9);
      assertEquals(4, stringArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '9';
      longArray0[1] = (long) '9';
      longArray0[2] = (long) 0;
      longArray0[3] = 1152L;
      longArray0[4] = (long) '9';
      longArray0[5] = (long) 1887;
      longArray0[6] = (long) '9';
      longArray0[7] = (long) '9';
      String string10 = StringUtils.join(longArray0, ')', 0, (-1324));
      assertNotNull(string10);
      assertArrayEquals(new long[] {57L, 57L, 0L, 1152L, 57L, 1887L, 57L, 57L}, longArray0);
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)charSequence0));
      assertTrue(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string6));
      assertEquals("", string10);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      String string0 = StringUtils.stripAccents("!:tkIyq,p~k<~lV");
      assertNotNull(string0);
      assertEquals("!:tkIyq,p~k<~lV", string0);
      
      String string1 = StringUtils.stripToNull("!:tkIyq,p~k<~lV");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("!:tkIyq,p~k<~lV", string1);
      
      String string2 = "";
      String string3 = "\\u";
      String string4 = StringUtils.repeat(string3, 10);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\\u\\u\\u\\u\\u\\u\\u\\u\\u\\u", string4);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string1));
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(string1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      String string5 = "NCc";
      boolean boolean0 = linkedList0.add("NCc");
      assertFalse(linkedList0.contains(string1));
      assertTrue(linkedList0.contains(string5));
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains(string1));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      
      boolean boolean1 = linkedList2.containsAll(set0);
      assertFalse(set0.contains(string1));
      assertFalse(linkedList2.contains(string1));
      assertNotSame(linkedList2, linkedList1);
      assertNotSame(linkedList2, linkedList0);
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList2.size());
      
      int int0 = 6;
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList2, "NCc", 2, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 6
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.removeEnd("', has a length less than 2", string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', has a length less than 2", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("', has a length less than 2", string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.chomp(string0, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 18;
      doubleArray0[2] = (double) 18;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 18;
      String string3 = StringUtils.join(doubleArray0, '%', 18, 18);
      assertNotNull(string3);
      assertArrayEquals(new double[] {0.0, 18.0, 18.0, 0.0, 18.0}, doubleArray0, 0.01);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "', has a length less than 2", string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(boolean0);
      
      String string4 = StringUtils.center("', has a length less than 2", 30, string0);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\\', has a length less than 2\\u", string4);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      String string0 = StringUtils.rightPad("PO@*Eex01B`", 16, "gOUl");
      assertNotNull(string0);
      assertEquals("PO@*Eex01B`gOUlg", string0);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "y\r";
      stringArray0[1] = "Minimum abbreviation width with offset is %d";
      stringArray0[2] = "Test '%s' was supposed to run no longer than %d ms but ran %d ms.";
      stringArray0[3] = ", Length: ";
      stringArray0[4] = "Array element ";
      stringArray0[5] = "Minimum abbreviation width is %d";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string0);
      assertEquals("y\r", string0);
      assertEquals(6, stringArray0.length);
      
      String string1 = StringUtils.truncate("io", 2, 2);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.left((String) null, 2);
      assertNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Array element ", "Minimum abbreviation width with offset is %d", 9);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width with offset is %d", 2);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) null);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "io", (String) null);
      assertTrue(boolean0);
      
      int int3 = StringUtils.countMatches((CharSequence) "y\r", 'T');
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("Minimum abbreviation width is %d"));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      boolean boolean1 = vector0.add((Object) ", Length: ");
      assertFalse(vector0.contains("Minimum abbreviation width is %d"));
      assertTrue(vector0.contains(", Length: "));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[, Length: ]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      String string3 = StringUtils.join((List<?>) vector0, 'T', 9, (-1));
      assertNotNull(string3);
      assertFalse(vector0.contains("Minimum abbreviation width is %d"));
      assertTrue(vector0.contains(", Length: "));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[, Length: ]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      int int4 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", (-1));
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      String string0 = StringUtils.stripToNull("Locale must not be null");
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      charSequenceArray0[1] = (CharSequence) "Locale must not be null";
      charSequenceArray0[2] = null;
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.substring("Locale must not be null", 92);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = StringUtils.normalizeSpace("Locale must not be null");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Locale must not be null", string2);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int1 = StringUtils.length("");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfAny(charSequenceArray0[2], (char[]) null);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(3, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      String string3 = StringUtils.join(doubleArray0, '3');
      assertNotNull(string3);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("-1.03-1.030.0", string3);
      assertEquals(3, doubleArray0.length);
      
      String string4 = StringUtils.trimToNull("Locale must not be null");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Locale must not be null", string4);
      
      int int3 = StringUtils.indexOf(charSequenceArray0[2], (CharSequence) "-1.03-1.030.0", 0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      assertEquals(3, charSequenceArray0.length);
      
      String string5 = StringUtils.substringBetween("Locale must not be null", "Locale must not be null");
      assertNull(string5);
      
      String string6 = StringUtils.rightPad("Fh-", 92, 'P');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Fh-PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", string6);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "^", (CharSequence) "^");
      assertEquals(0, int0);
      
      String string0 = StringUtils.overlay((String) null, "^", 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      String string0 = StringUtils.unwrap("ArMK+<p6{|=;n`v}45", 'x');
      assertNotNull(string0);
      assertEquals("ArMK+<p6{|=;n`v}45", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("ArMK+<p6{|=;n`v}45");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.rotate("B,U<}7", (-4390));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("}7B,U<", string1);
      
      boolean boolean2 = StringUtils.containsWhitespace("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "ArMK+<p6{|=;n`v}45");
      assertEquals(0, int0);
      
      String string2 = StringUtils.leftPad("", 1365, 'x');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.overlay((String) null, (String) null, 1365, 0);
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast("vR=", "offset cannot be negative");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short)16;
      shortArray0[2] = (short)2868;
      shortArray0[3] = (short) (-185);
      String string5 = StringUtils.join(shortArray0, '`');
      assertNotNull(string5);
      assertArrayEquals(new short[] {(short)15, (short)16, (short)2868, (short) (-185)}, shortArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("15`16`2868`-185", string5);
      assertEquals(4, shortArray0.length);
      
      String string6 = StringUtils.rightPad("}7B,U<", 16, "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("}7B,U<          ", string6);
      
      HashMap<Object, Locale.FilteringMode> hashMap0 = new HashMap<Object, Locale.FilteringMode>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Set<Object> set0 = hashMap0.keySet();
      assertNotNull(set0);
      assertFalse(set0.contains((short)16));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string7 = StringUtils.join((Iterable<?>) set0, 'X');
      assertNotNull(string7);
      assertFalse(set0.contains((short)16));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "TB~OUw_eW5'|C3tZT";
      String string0 = StringUtils.prependIfMissingIgnoreCase("TB~OUw_eW5'|C3tZT", "TB~OUw_eW5'|C3tZT", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("TB~OUw_eW5'|C3tZT", string0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[0], "TB~OUw_eW5'|C3tZT", 1);
      assertEquals(0, int0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny("TB~OUw_eW5'|C3tZT", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isMixedCase("TB~OUw_eW5'|C3tZT");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlpha("TB~OUw_eW5'|C3tZT");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.replace("kvk{+@CpqokH|tY2", "TB~OUw_eW5'|C3tZT", "TB~OUw_eW5'|C3tZT", 78);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("kvk{+@CpqokH|tY2", string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "kvk{+@CpqokH|tY2", (CharSequence) "TB~OUw_eW5'|C3tZT");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.leftPad("org.apache.commons.lang3.CharUtils", (int) (byte)16, 'B');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.CharUtils", string2);
      
      String string3 = StringUtils.overlay("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", (-2188), 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.CharUtilsorg.apache.commons.lang3.CharUtils", string3);
      
      String string4 = StringUtils.substringAfterLast("7wti~/{6~]xfi*RKsb4", "org.apache.commons.lang3.CharUtils");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      String string0 = StringUtils.strip("I~>");
      assertNotNull(string0);
      assertEquals("I~>", string0);
      
      String string1 = StringUtils.left("Search and Replace array lengths dZn't match: ^z", (-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("d['f@[nn");
      assertFalse(boolean0);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "d['f@[nn", (CharSequence) "d['f@[nn", (-1));
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Search and Replace array lengths dZn't match: ^z", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(48, int1);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      String string0 = StringUtils.unwrap("@~.hGC{", 'B');
      assertNotNull(string0);
      assertEquals("@~.hGC{", string0);
      
      String string1 = StringUtils.wrapIfMissing("@~.hGC{", "28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%@~.hGC{28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%", string1);
      
      boolean boolean0 = StringUtils.isWhitespace("@~.hGC{");
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp("                                                                                                                                                           Kj[%g5y_cHP                                                                                                                                                           ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                                                                                                                                           Kj[%g5y_cHP                                                                                                                                                           ", string2);
      
      String string3 = StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.params.Range", "Cel9&AK7BSZs");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.params.Range", string3);
      
      String string4 = StringUtils.unwrap("@~.hGC{", "Cel9&AK7BSZs");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("@~.hGC{", string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Expected exactly one annotation to provide an ArgumentSource, found %d.", "                                                                                                                                                           Kj[%g5y_cHP                                                                                                                                                           ", 3);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%@~.hGC{28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%", "^]D|#SQA0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("MiO~eX}+,6de=y");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "13Abl]E", (CharSequence) "13Abl]E");
      assertEquals(1, int0);
      
      String[] stringArray1 = StringUtils.split(",#^CEy!e~");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("D");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("J.ac Co.o5Q|", "Test '%s' was supposed to run no longer than %d ms but ran %d ms.", 1);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(1, stringArray3.length);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      String string0 = StringUtils.abbreviateMiddle("V`eLr_m[h&I", "0D", 3);
      assertNotNull(string0);
      assertEquals("V`eLr_m[h&I", string0);
      
      String[] stringArray0 = StringUtils.split("Minimum abbreviation width with offset is %d", ">X@F0j''>Ec+v5o<}", 3);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another", false);
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string0 = StringUtils.normalizeSpace("^7");
      assertNotNull(string0);
      assertEquals("^7", string0);
      
      String string1 = StringUtils.mid("a^dES/|@j)FMnl", 5, 5);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/|@j)", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "^7");
      assertFalse(boolean0);
      
      String string2 = StringUtils.rotate("^7", (-4390));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("^7", string2);
      
      boolean boolean1 = StringUtils.containsWhitespace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "/|@j)");
      assertEquals(0, int0);
      
      String string3 = StringUtils.leftPad("fGkq0^b", 5, 'B');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("fGkq0^b", string3);
      
      String string4 = StringUtils.overlay("^7", "/|@j)", (-1799), (-4390));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("/|@j)^7", string4);
      
      String string5 = StringUtils.substringAfterLast("^7", "/|@j)^7");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      String string6 = StringUtils.uncapitalize("ZwLo07nfP");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("ZwLo07nfP", string6);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, charArray0.length);
      
      String string7 = StringUtils.capitalize("fGkq0^b");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("FGkq0^b", string7);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      String string0 = StringUtils.strip("Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "Threshold must not be negative", '[');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "Threshold must not be negative";
      stringArray0[2] = "Threshold must not be negative";
      String string1 = StringUtils.center("Threshold must not be negative", 3, ' ');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Threshold must not be negative", string1);
      
      boolean boolean0 = StringUtils.startsWithAny("Threshold must not be negative", stringArray0);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.removeIgnoreCase("Threshold must not be negative", "Threshold must not be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.toRootUpperCase("or");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("OR", string3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = ';';
      charArray0[3] = '[';
      charArray0[4] = '[';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "Threshold must not be negative", charArray0);
      assertArrayEquals(new char[] {'n', ';', '\u0000', '[', '['}, charArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(5, charArray0.length);
      
      String string4 = StringUtils.reverse("S");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("S", string4);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Threshold must not be negative", (CharSequence) "S");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.stripAccents(";V6gQ)6*<]/O`:9)B");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(";V6gQ)6*<]/O`:9)B", string5);
      
      int int3 = StringUtils.indexOf((CharSequence) "OR", 0);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another", false);
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1780), 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.removeEnd("', has a length less than 2", string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', has a length less than 2", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("', has a length less than 2", string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.chomp(string0, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "', has a length less than 2", (CharSequence) string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(27, int0);
      
      String string3 = StringUtils.upperCase("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("CFg9bw_q");
      assertNotNull(string0);
      assertEquals("CFg9bw_q", string0);
      
      boolean boolean0 = StringUtils.endsWith("CFg9bw_q", "CFg9bw_q");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "CFg9bw_q", (-1582));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeAll("CFg9bw_q", "CFg9bw_q");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripToNull("");
      assertNull(string2);
      
      String string3 = StringUtils.wrap((String) null, "28,NtLJz/)w [?=B;");
      assertNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ':';
      charArray0[1] = 'H';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {':', 'H'}, charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, charArray0.length);
      
      boolean boolean1 = StringUtils.isNumericSpace("28,NtLJz/)w [?=B;");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.left((String) null, (-1));
      assertNull(string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "28,NtLJz/)w [?=B;", (CharSequence) "CFg9bw_q", 99);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.center((String) null, (-1), (String) null);
      assertNull(string5);
      
      String string6 = StringUtils.repeat("!5oxz>Q%p", (-1));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      
      boolean boolean2 = StringUtils.isEmpty("28,NtLJz/)w [?=B;");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string7 = StringUtils.getDigits((String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("6o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("\"+E");
      assertTrue(boolean0);
      
      String string0 = StringUtils.difference("\"+E", (String) null);
      assertNotNull(string0);
      assertEquals("\"+E", string0);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      String string0 = StringUtils.chomp("S*i2");
      assertNotNull(string0);
      assertEquals("S*i2", string0);
      
      String string1 = StringUtils.removeIgnoreCase("JqQ#c", "JqQ#c");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isEmpty("JqQ#c");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((int[]) null, 'L');
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("S*i2", 'L');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("LS*i2L", string3);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string4 = StringUtils.rotate("N>~dx", 20);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("N>~dx", string4);
      
      boolean boolean1 = StringUtils.containsWhitespace("U");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[0];
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertEquals(0, stringArray0.length);
      
      String string6 = StringUtils.difference("cIq/E=\"uQ;b<6", (String) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("cIq/E=\"uQ;b<6", string6);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "cIq/E=\"uQ;b<6", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(20));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      String string7 = StringUtils.join((List<?>) vector0, "JqQ#c", 44, (-156));
      assertNotNull(string7);
      assertFalse(vector0.contains("N>~dx"));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "N>~dx", (CharSequence) null, 5);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      String string0 = StringUtils.capitalize("org.junitpioneer.jupiter.params.FloatRange");
      assertNotNull(string0);
      assertEquals("Org.junitpioneer.jupiter.params.FloatRange", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "org.junitpioneer.jupiter.params.FloatRange", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string1 = StringUtils.leftPad("'AWh~X]T)", 2320, (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("", "G1j-\"");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) "'AWh~X]T)";
      String string3 = StringUtils.appendIfMissing((String) null, "", charSequenceArray0);
      assertNull(string3);
      assertEquals(2, charSequenceArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = 'G';
      charArray0[2] = 'J';
      charArray0[3] = 'l';
      charArray0[4] = 'S';
      charArray0[5] = 'Y';
      charArray0[6] = '$';
      charArray0[7] = 'n';
      charArray0[8] = '*';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'8', 'G', 'J', 'l', 'S', 'Y', '$', 'n', '*'}, charArray0);
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "3");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("3", 22, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("3                     ", string1);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String string2 = locale0.getDisplayScript();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      
      String string3 = StringUtils.lowerCase("Failed to get parent directory from provider", locale0);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("failed to get parent directory from provider", string3);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "3", (CharSequence) "");
      assertEquals(1, int0);
      
      String string4 = StringUtils.substringBetween("", "", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.upperCase("failed to get parent directory from provider", locale0);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("FAILED TO GET PARENT DIRECTORY FROM PROVIDER", string5);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String string6 = StringUtils.replaceAll("`j0hh4pDof/*57N", "failed to get parent directory from provider", " vs ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("`j0hh4pDof/*57N", string6);
      
      String string7 = StringUtils.leftPad("FAILED TO GET PARENT DIRECTORY FROM PROVIDER", 22, '?');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertEquals("FAILED TO GET PARENT DIRECTORY FROM PROVIDER", string7);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "3                     ";
      objectArray0[2] = (Object) "3                     ";
      objectArray0[3] = (Object) "`j0hh4pDof/*57N";
      objectArray0[4] = (Object) "FAILED TO GET PARENT DIRECTORY FROM PROVIDER";
      objectArray0[5] = (Object) "3                     ";
      String string8 = StringUtils.joinWith("rUsjA:6<`;", objectArray0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertEquals("rUsjA:6<`;3                     rUsjA:6<`;3                     rUsjA:6<`;`j0hh4pDof/*57NrUsjA:6<`;FAILED TO GET PARENT DIRECTORY FROM PROVIDERrUsjA:6<`;3                     ", string8);
      assertEquals(6, objectArray0.length);
      
      String string9 = StringUtils.stripToNull("3");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertEquals("3", string9);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      String string0 = StringUtils.defaultString("3", "org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertNotNull(string0);
      assertEquals("3", string0);
      
      String string1 = StringUtils.reverseDelimited("'Ll6k", 'L');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("l6kL'", string1);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "3";
      stringArray0[1] = "3";
      stringArray0[2] = "org.junitpioneer.jupiter.RepeatFailedTestExtension";
      stringArray0[3] = "l6kL'";
      stringArray0[4] = "'Ll6k";
      stringArray0[5] = "3";
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "3";
      stringArray1[1] = "org.junitpioneer.jupiter.RepeatFailedTestExtension";
      stringArray1[2] = "3";
      stringArray1[3] = "'Ll6k";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("org.junitpioneer.jupiter.RepeatFailedTestExtension", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 6 vs 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEndIgnoreCase((String) null, "");
      assertNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = "*p5$4";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      String string2 = StringUtils.rotate("+M}Jp?_]-[", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("+M}Jp?_]-[", string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("*p5$4");
      assertFalse(boolean0);
      
      String string3 = StringUtils.getCommonPrefix(stringArray1);
      assertNotNull(string3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) " ", (CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(2, stringArray0.length);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "+M}Jp?_]-[", (CharSequence[]) stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      String string4 = StringUtils.uncapitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.abbreviate((String) null, "+M}Jp?_]-[", 0, 0);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string1 = StringUtils.substringAfterLast("'AWh~X]T)", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.compare((String) null, "pQJ,,y~Td1}D{}h2", true);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substring("Search and Replace array lengths don't match: ^z", (-1), (-2021));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsWhitespace(" ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceEach(" ", (String[]) null, (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      String string2 = null;
      String string3 = StringUtils.abbreviate(" 3dt", (String) null, 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" 3dt", string3);
      
      String string4 = StringUtils.replaceChars(" 3dt", "XHwP3ZN#c|Q5Y $r`B", " 3dt");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("dt", string4);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      String string5 = StringUtils.leftPad((String) null, 0);
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " 3dt", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "@P3=XF");
      assertNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(4357);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4357, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4357, charBuffer0.limit());
      assertEquals(4357, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4357, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) charBuffer0, (CharSequence) null);
      assertEquals((-1), int0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4357, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4357, charBuffer0.limit());
      assertEquals(4357, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4357, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      
      String string2 = StringUtils.remove("@P3=XF", '2');
      assertNotNull(string2);
      assertEquals("@P3=XF", string2);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string0 = StringUtils.removeStart(" &v8m3zPW?~F5~{l-\"", (String) null);
      assertNotNull(string0);
      assertEquals(" &v8m3zPW?~F5~{l-\"", string0);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "DefaultTimeZone";
      String string2 = StringUtils.toRootLowerCase("DefaultTimeZone");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("defaulttimezone", string2);
      
      String string3 = StringUtils.stripToNull("DefaultTimeZone");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("DefaultTimeZone", string3);
      
      String string4 = StringUtils.wrap("", "{Ltl)h,dQRx6=ci 8)");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.abbreviate("DefaultTimeZone", "defaulttimezone", 550);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("DefaultTimeZone", string5);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string6 = StringUtils.unwrap("f`R$x8r)`8y.md", "Minimum abbreviation width is %d");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("f`R$x8r)`8y.md", string6);
      
      int int0 = StringUtils.ordinalIndexOf("DefaultTimeZone", "", 550);
      assertEquals(0, int0);
      
      String string7 = StringUtils.strip("DefaultTimeZone");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertEquals("DefaultTimeZone", string7);
      
      String string8 = StringUtils.center("f`R$x8r)`8y.md", 1987, ",?Rp&ao^");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      
      String string9 = StringUtils.unwrap(string8, '');
      assertNotNull(string9);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string9));
      assertEquals(0, linkedList0.size());
      
      String string10 = StringUtils.unwrap("", '');
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertEquals("", string10);
      
      String string11 = StringUtils.substringBetween("", string9);
      assertNull(string11);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "f`R$x8r)`8y.md";
      charSequenceArray0[1] = (CharSequence) "DefaultTimeZone";
      charSequenceArray0[2] = (CharSequence) "f`R$x8r)`8y.md";
      charSequenceArray0[3] = (CharSequence) "f`R$x8r)`8y.md";
      charSequenceArray0[4] = (CharSequence) "";
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, " but was: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("\r", "\r");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\r", "...");
      assertTrue(boolean0);
      
      String string0 = StringUtils.trimToEmpty("org");
      assertNotNull(string0);
      assertEquals("org", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", "\r", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replace("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", "", "s$");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", string2);
      
      boolean boolean1 = StringUtils.startsWithAny("s$", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.deleteWhitespace("...");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("...", string3);
      
      String string4 = StringUtils.replacePattern("M1OPOsv", "Strings must not be null", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("M1OPOsv", string4);
      
      String string5 = StringUtils.replaceIgnoreCase("", "n2nV5vB#@P+|", "maxWith cannot be negative");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "maxWith cannot be negative");
      assertEquals(0, int0);
      
      String string6 = StringUtils.leftPad("maxWith cannot be negative", 2022);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      int[] intArray0 = StringUtils.toCodePoints(string6);
      assertNotNull(intArray0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals(2022, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      String string0 = StringUtils.join(objectArray0, '%');
      assertNotNull(string0);
      assertEquals("%%%%%%%", string0);
      assertEquals(8, objectArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "%%%%%%%", (CharSequence) "%%%%%%%");
      assertEquals(0, int0);
      
      String string1 = StringUtils.lowerCase("%%%%%%%");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("%%%%%%%", string1);
      
      String string2 = StringUtils.leftPad("N", 0, 'N');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("N", string2);
      
      String string3 = StringUtils.joinWith("?-CAE)v(C", objectArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("?-CAE)v(C?-CAE)v(C?-CAE)v(C?-CAE)v(C?-CAE)v(C?-CAE)v(C?-CAE)v(C", string3);
      assertEquals(8, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "%%%%%%%";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string4 = StringUtils.substringAfterLast("28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%", "p;r5^*AQ'UPG|2^p1~");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      String string0 = StringUtils.substringBefore("oOSj-2", "F-q{Es7'r0v");
      assertNotNull(string0);
      assertEquals("oOSj-2", string0);
      
      String string1 = StringUtils.chomp("ATy$bc{%`{+f$^I\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ATy$bc{%`{+f$^I", string1);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "F-q{Es7'r0v";
      stringArray0[2] = "^z";
      stringArray0[3] = "ATy$bc{%`{+f$^I\n";
      stringArray0[4] = "ATy$bc{%`{+f$^I";
      stringArray0[5] = "oOSj-2";
      stringArray0[6] = "F-q{Es7'r0v";
      stringArray0[7] = "oOSj-2";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("F-q{Es7'r0v", string2);
      assertEquals(8, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("Don't clear/set the same property more than once.", '~');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "F-q{Es7'r0v", (CharSequence) "ATy$bc{%`{+f$^I\n");
      assertEquals(0, int0);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("F-q{Es7'r0v");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(10, stringArray2.length);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("D=b(ErdJ,Z2zd6b", "oOSj-2", 3);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertEquals(2, stringArray3.length);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      String string0 = StringUtils.chomp("H\n");
      assertNotNull(string0);
      assertEquals("H", string0);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("The Character must not be null");
      assertNotNull(string0);
      assertEquals("The Character must not be null", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      String string1 = StringUtils.trimToNull("The Character must not be null");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("The Character must not be null", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "The Character must not be null", ":n7i*cKB");
      assertEquals(9, int0);
      
      String string2 = StringUtils.replaceFirst("The Character must not be null", "The Character must not be null", "-E6K9");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-E6K9", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isNumeric("The Character must not be null");
      assertFalse(boolean0);
      
      String string3 = StringUtils.leftPad("The Character must not be null", (-1), '@');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("The Character must not be null", string3);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "The Character must not be null", (CharSequence[]) null);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-E6K9";
      stringArray0[1] = "m_;czb- Z";
      stringArray0[2] = ":n7i*cKB";
      String string4 = StringUtils.abbreviate("B'8", ":n7i*cKB", (-1), 34);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("B'8", string4);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("The Character must not be null"));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      boolean boolean1 = stack0.add((Object) "-E6K9");
      assertFalse(stack0.contains("The Character must not be null"));
      assertTrue(stack0.contains("-E6K9"));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-E6K9]", stack0.toString());
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(stack0.contains("The Character must not be null"));
      assertTrue(stack0.contains("-E6K9"));
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-E6K9]", stack0.toString());
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, 'o');
      assertNotNull(string5);
      assertFalse(stack0.contains("The Character must not be null"));
      assertTrue(stack0.contains("-E6K9"));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("-E6K9", string5);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-E6K9]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      String string0 = StringUtils.removeStart("\"52GC761!", "&");
      assertNotNull(string0);
      assertEquals("\"52GC761!", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("&");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.upperCase("\"52GC761!", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'O';
      charArray0[2] = 'N';
      charArray0[3] = 'Q';
      String string1 = StringUtils.valueOf(charArray0);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'e', 'O', 'N', 'Q'}, charArray0);
      assertEquals("eONQ", string1);
      assertEquals(4, charArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringAfter("Q!rp", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q!rp", string2);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Predicate<Locale.FilteringMode> predicate0 = Predicate.isEqual((Object) linkedList0);
      assertNotNull(predicate0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.removeIf(predicate0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, '[', (-3783), 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -3783
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "3");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("3", 22, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("3                     ", string1);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      String string2 = locale0.getDisplayScript();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      String string3 = StringUtils.lowerCase("Failed to get parent directory from provider", locale0);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("failed to get parent directory from provider", string3);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "S*i2";
      stringArray0[1] = "failed to get parent directory from provider";
      stringArray0[2] = "3                     ";
      stringArray0[3] = "";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("S*i2", string4);
      assertEquals(4, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("PznP-R6qPTt5R*");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "3                     ", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("PznP-R6qPTt5R*", "");
      assertEquals(0.0, double0, 0.01);
      
      String string5 = StringUtils.replace("", "", (String) null, (-640));
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      String string0 = StringUtils.left("13Abl]E", 8);
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      String string1 = StringUtils.rightPad("13Abl]E", 8);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("13Abl]E ", string1);
      
      String string2 = StringUtils.remove("13Abl]E", "blank_blank_blank_2014");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("13Abl]E", string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      String string3 = StringUtils.replacePattern((String) null, (String) null, "13Abl]E");
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("#X<T]c_Fx", "13Abl]E", "13Abl]E");
      assertNull(stringArray0);
      
      String string4 = StringUtils.substringBeforeLast((String) null, " ");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) " ";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceChars("", "XHwP3ZN#c|Q5Y $r`B", " 3dt");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.getDigits("XHwP3ZN#c|Q5Y $r`B");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("35", string2);
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.stripToEmpty("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("*ZS3JV=~<^&.5SxR", '*');
      assertNotNull(string0);
      assertEquals("ZS3JV=~<^&.5SxR", string0);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      String string0 = StringUtils.difference("Threshold", "Threshold");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("Threshold", "Threshold", 100);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance(string1, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.rotate((String) null, 35);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replacePattern((String) null, "y\r", " ");
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.split(" vs ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.capitalize("");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStart("3dt", " ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("3dt", string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "3dt", (CharSequence) "3dt", 20);
      assertEquals(0, int0);
      
      String string3 = StringUtils.wrapIfMissing("", 'm');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.center("Search and Replace array lengths don't match: ", 0, 'm');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string4);
      
      boolean boolean2 = StringUtils.isAlphaSpace("Search and Replace array lengths don't match: ");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.removeStart("", "eik7");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "#!T.m*/T#v^,x`E>X");
      assertNull(stringArray0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = StringUtils.isNumeric(" ");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, ", ", 14, 14);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, objectArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("", ", ", 13);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.swapCase("ExpectedException");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("eXPECTEDeXCEPTION", string1);
      
      String string2 = StringUtils.center("eXPECTEDeXCEPTION", (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("eXPECTEDeXCEPTION", string2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      String string3 = StringUtils.toString(byteArray0, (String) null);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)49, (byte)104, (byte)64, (byte)0}, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("1h@\u0000", string3);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      String string0 = StringUtils.repeat("", 2704);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      String string0 = StringUtils.removeEnd("y", "\r");
      assertNotNull(string0);
      assertEquals("y", string0);
      
      String string1 = StringUtils.substringBetween("", "y");
      assertNull(string1);
      
      String string2 = StringUtils.chomp("t+7eLxy\"yO-t!4a");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("t+7eLxy\"yO-t!4a", string2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 37;
      intArray0[1] = 64;
      intArray0[2] = 785;
      String string3 = StringUtils.join(intArray0, 'n', 322, 322);
      assertNotNull(string3);
      assertArrayEquals(new int[] {37, 64, 785}, intArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(3, intArray0.length);
      
      String[] stringArray0 = StringUtils.split((String) null, "", 785);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("8XCEPxi%]FT@x[\"(m", "ExceptionWasThrown", 37);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray1.length);
      
      boolean boolean0 = StringUtils.isWhitespace("\"|o9{=");
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrap("org.apache.commons.lang3.RegExUtils", 'n');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("norg.apache.commons.lang3.RegExUtilsn", string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "y", (CharSequence) "t+7eLxy\"yO-t!4a", 785);
      assertEquals(14, int0);
      
      boolean boolean1 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-1279);
      shortArray0[2] = (short) (-2022);
      shortArray0[3] = (short)99;
      shortArray0[4] = (short) (-324);
      shortArray0[5] = (short) (-2473);
      shortArray0[6] = (short)46;
      String string5 = StringUtils.join(shortArray0, 'n');
      assertNotNull(string5);
      assertArrayEquals(new short[] {(short)7, (short) (-1279), (short) (-2022), (short)99, (short) (-324), (short) (-2473), (short)46}, shortArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("7n-1279n-2022n99n-324n-2473n46", string5);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAny("org.junitpioneer.vintage.TimeoutExtension", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "BkJBDL+";
      charSequenceArray0[0] = (CharSequence) "BkJBDL+";
      charSequenceArray0[2] = (CharSequence) "BkJBDL+";
      int int0 = StringUtils.lastIndexOfAny("BkJBDL+", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string0 = StringUtils.removeEndIgnoreCase("I", "");
      assertNotNull(string0);
      assertEquals("I", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "org.junitpioneer.jupiter.TempDirectory$CloseablePath";
      stringArray0[2] = "Kh$cS[<b2{e-3";
      stringArray0[3] = "I";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Kh$cS[<b2{e-3", "I");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rotate("-", (-317));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-", string1);
      
      String string2 = StringUtils.mid("}iy_CTG<wF", (-317), 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.leftPad("[O./kp!rK", 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("[O./kp!rK", string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("[O./kp!rK");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "I");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.leftPad("The String must not be empty", (-2597), '^');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("The String must not be empty", string4);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      String string0 = StringUtils.repeat("\"", 16);
      assertNotNull(string0);
      assertEquals("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"";
      stringArray0[1] = "\"";
      stringArray0[2] = "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"";
      stringArray0[3] = "\"";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"", string1);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "BkJBDL+";
      charSequenceArray0[1] = (CharSequence) "BkJBDL+";
      charSequenceArray0[2] = (CharSequence) "BkJBDL+";
      int int0 = StringUtils.lastIndexOfAny("BkJBDL+", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string0 = StringUtils.left(" vs ", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase(" vs ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[5];
      String string1 = StringUtils.unwrap("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean2 = StringUtils.equals(charSequenceArray0[1], (CharSequence) "BkJBDL+");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string2);
      assertEquals(5, stringArray0.length);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("BkJBDL+"));
      assertEquals(0, linkedList0.size());
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(linkedList0.contains("BkJBDL+"));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, 'M');
      assertNotNull(string3);
      assertFalse(linkedList0.contains("BkJBDL+"));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      boolean boolean3 = StringUtils.isAllUpperCase(charSequenceArray0[2]);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      String string0 = StringUtils.substringBetween("/;DcGHbKW@kXl@", (String) null, "3");
      assertNull(string0);
      
      String string1 = StringUtils.substringBetween(")_pm+", (String) null, "3");
      assertNull(string1);
      
      String string2 = StringUtils.defaultString(" t;o", "/;DcGHbKW@kXl@");
      assertNotNull(string2);
      assertEquals(" t;o", string2);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = ")_pm+";
      stringArray0[2] = ")_pm+";
      stringArray0[3] = "/;DcGHbKW@kXl@";
      stringArray0[4] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      String string3 = StringUtils.unwrap("3", "q  ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertEquals("3", string3);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replaceIgnoreCase("U", string0, "k+O`UuVB1Lnh!j#2xR");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("U", string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = 'm';
      charArray0[2] = 'c';
      charArray0[3] = '\\';
      charArray0[4] = 'W';
      charArray0[5] = 'B';
      charArray0[6] = ' ';
      charArray0[7] = 'i';
      String string5 = StringUtils.valueOf(charArray0);
      assertNotNull(string5);
      assertArrayEquals(new char[] {'|', 'm', 'c', '\\', 'W', 'B', ' ', 'i'}, charArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("|mc\\WB i", string5);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      String string0 = StringUtils.stripToNull("\n");
      assertNull(string0);
      
      String string1 = StringUtils.substringBetween("sN8m2{]41/", (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      String string0 = StringUtils.substringBefore("9%_#c", "9%_#c");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\n";
      String string2 = StringUtils.center("", (-3537), "/)w [?=B;");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("", 'l');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)10;
      // Undeclared exception!
      try { 
        Charset.forName("/)w [?=B;");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /)w [?=B;
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.removeEnd("', has a length less than 2", string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', has a length less than 2", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("', has a length less than 2", string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.chomp(string0, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isEmpty("', has a length less than 2");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringBetweenhas a length less than 2", "Ta");
      assertNull(string3);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String string4 = StringUtils.upperCase(" 28?{'\"7%", locale0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" 28?{'\"7%", string4);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String string5 = StringUtils.replaceAlla", "@oyT#F5");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEqualsstring5);
      
      String string6 = StringUtils.leftPad("A85X~!k1p_J", 5, 'K');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("A85X~!k1p_J", string6);
      
      String string7 = StringUtils.stripToNull("S,y");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertEquals("S,y", string7);
      
      String string8 = StringUtils.repeat("H", 0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = linkedList0.add("l9]]PoJFw[dQSym");
      assertTrue(linkedList0.contains("l9]]PoJFw[dQSym"));
      assertFalse(linkedList0.contains
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      
      String string9 = StringUtils.join((List<?>) linkedList0, "zxF;~S*wXNjH$S p{D", 0, (-1));
      assertNotNull(string9);
      assertTrue(linkedList0.contains("l9]]PoJFw[dQSym"));
      assertFalse(linkedList0.contains
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertEquals("", string9);
      assertEquals(1, linkedList0.size());
      
      boolean boolean2 = StringUtils.contains((CharSequence) "H", (-2829));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToEmpty("BN/k7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("BN/k7", string1);
      
      String string2 = StringUtils.reverseDelimited(">vm6y-'i&", ')');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(">vm6y-'i&", string2);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      String string3 = StringUtils.center(">vm6y-'i&", (int) (short) (-2342), "BN/k7");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(">vm6y-'i&", string3);
      
      boolean boolean1 = StringUtils.isAlpha(">vm6y-'i&");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.replace("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension", "1WU", 2460);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("1WU", string4);
      
      String string5 = StringUtils.substringAfterLast(">vm6y-'i&", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      String string6 = StringUtils.substringBeforeLast("", ">vm6y-'i&");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase(":TyihUhy5x#>g", ":TyihUhy5x#>g", ":TyihUhy5x#>g", 65);
      assertNotNull(string0);
      assertEquals(":TyihUhy5x#>g", string0);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      String string0 = StringUtils.center("Kj[%g5y_cHP", 321);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                           Kj[%g5y_cHP                                                                                                                                                           ", string0);
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      
      String string2 = StringUtils.strip("4", "~7-");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("4", string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4";
      stringArray0[1] = "4";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("4", string3);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\n", (CharSequence[]) stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)20;
      shortArray0[1] = (short) (-611);
      shortArray0[2] = (short)4053;
      shortArray0[3] = (short) (-4186);
      String string4 = StringUtils.join(shortArray0, 'M', (-1172), (int) (short) (-4186));
      assertNotNull(string4);
      assertArrayEquals(new short[] {(short)20, (short) (-611), (short)4053, (short) (-4186)}, shortArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      String string0 = StringUtils.replacePattern("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", 14);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      String string1 = StringUtils.upperCase("org.apache.commons.lang3.Charsets", locale0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ORG.APACHE.COMMONS.LANG3.CHARSETS", string1);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      String string2 = StringUtils.replaceAll("-;x]K/tQKW8<-G", "ORG.APACHE.COMMONS.LANG3.CHARSETS", "#");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-;x]K/tQKW8<-G", string2);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "#";
      stringArray1[1] = "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension";
      stringArray1[2] = "-;x]K/tQKW8<-G";
      stringArray1[3] = "#";
      String string3 = StringUtils.firstNonEmpty(stringArray1);
      assertNotNull(string3);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("#", string3);
      assertEquals(4, stringArray1.length);
      
      String string4 = StringUtils.swapCase((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.replaceChars("Locale must not be null", "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "#");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Ll m  b ll", string5);
      
      String[] stringArray2 = new String[8];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension";
      stringArray2[1] = "ORG.APACHE.COMMONS.LANG3.CHARSETS";
      stringArray2[2] = "Ll m  b ll";
      stringArray2[3] = "-;x]K/tQKW8<-G";
      stringArray2[4] = "-;x]K/tQKW8<-G";
      stringArray2[5] = "-;x]K/tQKW8<-G";
      stringArray2[6] = null;
      stringArray2[7] = null;
      String string6 = StringUtils.replaceEach("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", stringArray2, stringArray2);
      assertNotNull(string6);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", string6);
      assertEquals(8, stringArray2.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string7 = StringUtils.chomp("6dD", "-;x]K/tQKW8<-G");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals("6dD", string7);
      
      String string8 = StringUtils.appendIfMissing("6dD", "Locale must not be null", stringArray1);
      assertNotNull(string8);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertEquals("6dDLocale must not be null", string8);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", (Supplier<CharSequence>) null);
      assertNotNull(charSequence0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(charSequence1);
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", charSequence1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", ',');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[5];
      stringArray
      stringArray
      stringArray0[2] = "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
      stringArray0[3] = "=";
      stringArray0[4] = "org.junitpioneer.vintage.ExpectedExceptionExtension";
      String string0 = StringUtils.replaceEachstringArray0, stringArray0);
      assertNotNull(string0);
      assertFalse(string0.equals((Object)charSequence1));
      assertFalse(string0.equals((Object)charSequence0));
      assertEquals("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", string0);
      assertEquals(5, stringArray0.length);
      
      String string1 = StringUtils.truncate("org.apache.commons.lang3.StringUtils", 0, 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence1));
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("offset cannot be negative", supplier0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("offset cannot be negative", string2);
      
      String[] stringArray1 = StringUtils.split("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("offset cannot be negative", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean0);
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.upperCase("=");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)charSequence1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("=", string3);
      
      String string4 = StringUtils.mid("{w..Y", 22, (-1519));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)charSequence0));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", (CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean2);
      assertEquals(5, stringArray0.length);
      
      String string5 = StringUtils.firstNonEmpty(stringArray1);
      assertNotNull(string5);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)charSequence1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)charSequence0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string5);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "Threshold must not be negative";
      stringArray0[2] = "io";
      stringArray0[3] = "Threshold must not be negative";
      stringArray0[4] = "Threshold must not be negative";
      String string0 = StringUtils.replaceEach("Threshold must not be negative", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      assertEquals(5, stringArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("Threshold must not be negative", "Threshold must not be negative");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase(":TyihUhy5x#>g", ":TyihUhy5x#>g", (String) null, 32);
      assertNotNull(string0);
      assertEquals(":TyihUhy5x#>g", string0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      String string0 = StringUtils.stripAccents("n;ZzL");
      assertNotNull(string0);
      assertEquals("n;ZzL", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("}\u0006", "n;ZzL");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.substringAfter("<", "Search and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("n;ZzL", '<');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-48);
      String string2 = StringUtils.join(byteArray0, '<');
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)40, (byte) (-107), (byte) (-48), (byte) (-48), (byte) (-92), (byte) (-48)}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("40<-107<-48<-48<-92<-48", string2);
      assertEquals(6, byteArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      charArray0[6] = '9';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "<", charArray0);
      assertArrayEquals(new char[] {'C', '9', '9', '<', '<', '<', '9'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      
      String string3 = StringUtils.unwrap("61", "j#");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("61", string3);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      String string0 = StringUtils.substringBefore("9%_#c", "9%_#c");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.center("", (-597), "eAoV2(^E\"$ri");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat("9%_#c", 1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("9%_#c", string2);
      
      String string3 = StringUtils.chomp("Threshold must not be negative");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Threshold must not be negative", string3);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-50);
      // Undeclared exception!
      try { 
        Charset.forName("13Abl]E");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 13Abl]E
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      String string0 = StringUtils.replacePattern("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "Locale must not be null13Abl]E", 14);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string1 = StringUtils.upperCase("org.apache.commons.lang3.Charsets", locale0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ORG.APACHE.COMMONS.LANG3.CHARSETS", string1);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string2 = StringUtils.replaceAll("-;x]K/tQKW8<-G", "ORG.APACHE.COMMONS.LANG3.CHARSETS", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-;x]K/tQKW8<-G", string2);
      
      String string3 = StringUtils.leftPad("ORG.APACHE.COMMONS.LANG3.CHARSETS", (-1089), ':');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ORG.APACHE.COMMONS.LANG3.CHARSETS", string3);
      
      String string4 = StringUtils.stripToNull("\nS*i2");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("S*i2", string4);
      
      String string5 = StringUtils.repeat("", 10);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("ORG.APACHE.COMMONS.LANG3.CHARSETS"));
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("ORG.APACHE.COMMONS.LANG3.CHARSETS"));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList1.add("NCc");
      assertFalse(linkedList1.contains("ORG.APACHE.COMMONS.LANG3.CHARSETS"));
      assertTrue(linkedList1.contains("NCc"));
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("ORG.APACHE.COMMONS.LANG3.CHARSETS"));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean1 = linkedList0.containsAll(linkedList1);
      assertFalse(linkedList0.contains("ORG.APACHE.COMMONS.LANG3.CHARSETS"));
      assertFalse(linkedList1.contains("ORG.APACHE.COMMONS.LANG3.CHARSETS"));
      assertTrue(linkedList1.contains("NCc"));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      
      String string6 = StringUtils.join((List<?>) linkedList0, "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", 4, 4);
      assertNotNull(string6);
      assertFalse(linkedList0.contains("ORG.APACHE.COMMONS.LANG3.CHARSETS"));
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "ORG.APACHE.COMMONS.LANG3.CHARSETS", (CharSequence) "", 14);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      String string0 = StringUtils.repeat("3", 1);
      assertNotNull(string0);
      assertEquals("3", string0);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      String string0 = StringUtils.replacePattern(" ", " ", "!9R(Z-=I");
      assertNotNull(string0);
      assertEquals("!9R(Z-=I", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("!9R(Z-=I");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("!9R(Z-=I");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.split("!9R(Z-=I", "!9R(Z-=I", 16);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("Locale must not be null13Abl]E", (String) null, 312);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray1.length);
      
      boolean boolean2 = StringUtils.isWhitespace(" ");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string1 = " 28?{'\"7%";
      String string2 = StringUtils.wrap("\"|o9{=", 'S');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("S\"|o9{=S", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "!9R(Z-=I", (CharSequence) null, 38);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.substringBetween((String) null, ")JRm");
      assertNull(string1);
      
      String string2 = StringUtils.chomp("");
      assertNotNull(string2);
      assertEquals("", string2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'R';
      String string3 = StringUtils.join(intArray0, '+');
      assertNotNull(string3);
      assertArrayEquals(new int[] {82}, intArray0);
      assertFalse(string3.equals((Object)string2));
      assertEquals("82", string3);
      assertEquals(1, intArray0.length);
      
      String string4 = StringUtils.trimToNull("");
      assertNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.replacePattern("@{slLT&.5$YGc1ia<O{", (String) null, "M1OPOsv");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("@{slLT&.5$YGc1ia<O{", string5);
      
      String[] stringArray0 = StringUtils.split("offset cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String string6 = StringUtils.capitalize("");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("4-x'e", "3z7]/o");
      assertNotNull(string0);
      assertEquals("4-x'e", string0);
      
      String string1 = StringUtils.swapCase("4-x'e");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("4-X'E", string1);
      
      int[] intArray0 = new int[1];
      int int0 = (-3638);
      intArray0[0] = (-3638);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'k', Integer.MIN_VALUE, (-3638));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) " w]jM2l(yhcH", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      
      String string0 = StringUtils.stripToNull(" w]jM2l(yhcH");
      assertNotNull(string0);
      assertEquals("w]jM2l(yhcH", string0);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, ':', ':');
      assertNull(string0);
      
      String string1 = StringUtils.stripStart("``````````````````````````", (String) null);
      assertNotNull(string1);
      assertEquals("``````````````````````````", string1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "``````````````````````````", false);
      assertEquals(1, int0);
      
      String string2 = StringUtils.rotate("``````````````````````````", 35);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("``````````````````````````", string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "``````````````````````````", charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      String string3 = StringUtils.stripToNull((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "``````````````````````````", "O &Y9F(");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.defaultString((String) null, "``````````````````````````");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("``````````````````````````", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "``````````````````````````", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      String string0 = StringUtils.removeEnd("y", "\r");
      assertNotNull(string0);
      assertEquals("y", string0);
      
      String string1 = StringUtils.left("Cannot store ", 8);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Cannot s", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\r", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((float[]) null, '-');
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("...", '!');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("!...!", string3);
      
      String string4 = StringUtils.rightPad("Minimum abbreviation width is %d", 98);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Minimum abbreviation width is %d                                                                  ", string4);
      
      String string5 = StringUtils.remove("fsX1ZlR/&H(`L'cN", "czrA");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("fsX1ZlR/&H(`L'cN", string5);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("Minimum abbreviation width is %d", "czrA");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.replacePattern("fsX1ZlR/&H(`L'cN", "", "O");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("OfOsOXO1OZOlORO/O&OHO(O`OLO'OcONO", string6);
      
      String[] stringArray0 = StringUtils.substringsBetween(",", "n^\rxZEpu-u&KZ6AJ", "blank_blank_blank_2014");
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("!...!", (-2172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, 'X');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfterLast(" 3dt", (String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBetween("", (String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.replaceFirst((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertNull(string3);
      
      boolean boolean3 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string4);
      assertEquals(3, stringArray0.length);
      
      boolean boolean4 = StringUtils.startsWithAny(string0, charSequenceArray0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      assertEquals(0, charSequenceArray0.length);
      
      String string5 = StringUtils.normalizeSpace((String) null);
      assertNull(string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 2991);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.unwrap("1g1{<q{PRo_;CCKs;)xE", '#');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertEquals("1g1{<q{PRo_;CCKs;)xE", string6);
      
      boolean boolean5 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      String string0 = StringUtils.strip("Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "Threshold must not be negative", (Supplier<CharSequence>) null);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("Threshold must not be negative", charSequence0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "Threshold must not be negative", '[');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.rotate("Threshold must not be negative", 1326);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("gativeThreshold must not be ne", string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'G';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '6';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Threshold must not be negative", charArray0);
      assertArrayEquals(new char[] {'[', 'G', '[', '[', '6'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      
      String string2 = StringUtils.abbreviate("Threshold must not be negative", (-1), 47);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Threshold must not be negative", string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Threshold must not be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.unwrap("yNKR(eH6HGWI~Bs0c", "yNKR(eH6HGWI~Bs0c");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast(" w]jM2l(yhcH", (String) null);
      assertNotNull(string0);
      assertEquals(" w]jM2l(yhcH", string0);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      String string0 = StringUtils.unwrap("ArMK+<p6{|=;n`v}45", 'x');
      assertNotNull(string0);
      assertEquals("ArMK+<p6{|=;n`v}45", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("ArMK+<p6{|=;n`v}45");
      assertTrue(boolean0);
      
      String string1 = StringUtils.swapCase("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[0] = 'k';
      int int0 = StringUtils.indexOfAny((CharSequence) "ArMK+<p6{|=;n`v}45", charArray0);
      assertArrayEquals(new char[] {'k', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      String string0 = StringUtils.substringBefore("9%_#c", "9%_#c");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\n";
      String string2 = StringUtils.leftPad("\n", (-1204), "S*i2");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("\n", string2);
      
      byte[] byteArray0 = StringUtils.getBytes(". The following paths could not be deleted (see suppressed exceptions for details): ", (String) null);
      assertNotNull(byteArray0);
      assertEquals(84, byteArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.compare(" 28?{'\"7%", "\n");
      assertEquals(22, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", 1258);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      String string0 = StringUtils.remove("", 'E');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("jd{O", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("jd{O", string1);
      
      String string2 = StringUtils.abbreviate("", 50);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "jd{O";
      charSequenceArray0[3] = (CharSequence) "jd{O";
      charSequenceArray0[4] = (CharSequence) "jd{O";
      charSequenceArray0[5] = (CharSequence) "jd{O";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "jd{O";
      charSequenceArray0[8] = (CharSequence) "";
      String string3 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      String string0 = StringUtils.substringBefore("9%_#c", "9%_#c");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category2;
      locale_CategoryArray0[1] = locale_Category1;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category1;
      locale_CategoryArray0[4] = locale_Category0;
      String string2 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("DISPLAYFORMATFORMATFORMATDISPLAY", string2);
      assertEquals(5, locale_CategoryArray0.length);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("y", "j#", 20);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.rightPad((String) null, 20, "9%_#c");
      assertNull(string3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = '2';
      charArray0[6] = '2';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'2', '2', '2', '2', '2', '2', '2'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 5066, "Minimum abbreviation width is %d");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      String string0 = StringUtils.stripAccents("!:tkIyq,p~k<~lV");
      assertNotNull(string0);
      assertEquals("!:tkIyq,p~k<~lV", string0);
      
      String[] stringArray0 = StringUtils.split("\n");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = null;
      String string2 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string2);
      
      int int0 = StringUtils.compare("!:tkIyq,p~k<~lV", "ezqE", false);
      assertEquals((-68), int0);
      
      String string3 = StringUtils.substring("Object varargs must not be null", (-68), 16);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("Object varargs m", string3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, ';');
      assertNull(stringArray1);
      
      String string4 = "Xf_i";
      // Undeclared exception!
      try { 
        StringUtils.truncate("Xf_i", (-68), (-68));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("A*O])~NuQ9qIb!Ide_%");
      assertNotNull(string0);
      assertEquals("A*O])~NuQ9qIb!Ide_%", string0);
      
      String string1 = StringUtils.uncapitalize("U$iB*,\"vA9|");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("u$iB*,\"vA9|", string1);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = Locale.CHINESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      boolean boolean0 = locale1.hasExtensions();
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(boolean0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      
      String[] stringArray1 = StringUtils.split((String) null, 'P');
      assertNull(stringArray1);
      
      double[] doubleArray0 = new double[0];
      String string3 = StringUtils.join(doubleArray0, 'P', (int) 'P', (int) 'P');
      assertNotNull(string3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(0, doubleArray0.length);
      
      String string4 = StringUtils.remove("U", 'P');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("U", string4);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      String string0 = StringUtils.wrap("6w\"$B[0%F6R=", "6w\"$B[0%F6R=");
      assertNotNull(string0);
      assertEquals("6w\"$B[0%F6R=6w\"$B[0%F6R=6w\"$B[0%F6R=", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "6w\"$B[0%F6R=6w\"$B[0%F6R=6w\"$B[0%F6R=", (CharSequence) "6w\"$B[0%F6R=", 6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      String string0 = StringUtils.center("org.junitpioneer.vintage.ExpectedExceptionExtension", (-1891));
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      int int0 = StringUtils.lastIndexOfAny("org.junitpioneer.vintage.ExpectedExceptionExtension", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.rightPad("org.junitpioneer.vintage.ExpectedExceptionExtension", 205);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension                                                                                                                                                          ", string1);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ExceptionWasThrown";
      stringArray0[1] = "org.junitpioneer.vintage.ExpectedExceptionExtension                                                                                                                                                          ";
      stringArray0[2] = "28,NtLJz/)w [?=B;13Abl]E28,NtLJz/)w [?=B; 28?{'\"7%@~.hGC{";
      stringArray0[3] = "org.junitpioneer.vintage.ExpectedExceptionExtension";
      String string2 = StringUtils.replaceEach("&*@fY'=oET", stringArray0, stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("&*@fY'=oET", string2);
      assertEquals(4, stringArray0.length);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "&*@fY'=oET", (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension                                                                                                                                                          ", 58);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      String string3 = StringUtils.join(charArray0, 'Q');
      assertNotNull(string3);
      assertArrayEquals(new char[] {'7', '7', '7', '7'}, charArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("7Q7Q7Q7", string3);
      assertEquals(4, charArray0.length);
      
      String string4 = StringUtils.center("7Q7Q7Q7", (-555), '7');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("7Q7Q7Q7", string4);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", '^');
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string2 = StringUtils.chomp("", "S1vwu%z)TaY9gE");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.getDigits("S1vwu%z)TaY9gE");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("19", string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, 'g');
      assertNotNull(string4);
      assertSame(stringArray0, stringArray1);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "19");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.lowerCase(" 3dt");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals(" 3dt", string5);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, stringArray1.length);
      
      String string6 = StringUtils.appendIfMissing("Minimum abbreviation width with offset is %d", "", stringArray1);
      assertNotNull(string6);
      assertSame(stringArray1, stringArray0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is %d", string6);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("junit-pioneer");
      assertNotNull(string0);
      assertEquals("JUNIT-PIONEER", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("JUNIT-PIONEER", "JqQ#c");
      assertEquals(0.41, double0, 0.01);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.reverse("L?V~K|]");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]|K~V?L", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("Expected exception %s was not thrown.", "L?V~K|]");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Expected exception %s was not thrown.", string2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Expected exception %s was not thrown.";
      stringArray0[1] = "]|K~V?L";
      stringArray0[2] = "L?V~K|]";
      stringArray0[3] = "]|K~V?L";
      stringArray0[4] = "JUNIT-PIONEER";
      stringArray0[5] = "]|K~V?L";
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = 'I';
      charArray0[3] = '7';
      charArray0[4] = '';
      charArray0[5] = '7';
      charArray0[6] = '7';
      charArray0[7] = '7';
      String string3 = StringUtils.join(charArray0, 'I');
      assertNotNull(string3);
      assertArrayEquals(new char[] {'7', '7', 'I', '7', '', '7', '7', '7'}, charArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("7I7III7II7I7I7", string3);
      assertEquals(8, charArray0.length);
      
      String string4 = StringUtils.center((String) null, 0, 'R');
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Minimum abbreviation width with offset is %dp?{5.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      String string0 = StringUtils.replacePattern((String) null, (String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize("!}Rc+<=r4azy+Q*");
      assertNotNull(string1);
      assertEquals("!}Rc+<=r4azy+Q*", string1);
      
      String string2 = StringUtils.uncapitalize("xh!xVfv09Nfz+");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("xh!xVfv09Nfz+", string2);
      
      String string3 = StringUtils.removeAll("!}Rc+<=r4azy+Q*", "Search and Replace array lengths don't match: ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("!}Rc+<=r4azy+Q*", string3);
      
      String string4 = StringUtils.center("Ypy@$", 2701, (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.stripToEmpty(string4);
      assertNotNull(string5);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Ypy@$", string5);
      
      String[] stringArray0 = StringUtils.split("xh!xVfv09Nfz+");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\r", (CharSequence) "zz .J9IISc&");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("n;ZzL");
      assertNotNull(string0);
      assertEquals("N;ZZL", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("}\u0006", "N;ZZL");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.substringAfter("<", "Search and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("N;ZZL", '<');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      String[] stringArray2 = new String[0];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String[] stringArray3 = StringUtils.stripAll(stringArray2, "C_rgD[e$.i");
      assertNotNull(stringArray3);
      assertSame(stringArray2, stringArray3);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertSame(stringArray3, stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
      assertEquals(0, stringArray3.length);
      
      String string2 = StringUtils.rotate("Search and Replace array lengths don't match: ", (byte) (-107));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ace array lengths don't match: Search and Repl", string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("}\u0006");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate("A", " 2", 13, (int) (byte)40);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("A", string3);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains((byte)40));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(stack0.contains((byte)40));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, 'x');
      assertNotNull(string4);
      assertFalse(stack0.contains((byte)40));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string5 = StringUtils.joinWith("N;ZZL", stringArray0);
      assertNotNull(string5);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray3);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("}\u0006", string5);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      String string0 = StringUtils.substringBefore("9%_#c", "9%_#c");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "?axys.2rQ6Vy";
      stringArray0[2] = "?axys.2rQ6Vy";
      stringArray0[3] = "";
      stringArray0[4] = "9%_#c";
      stringArray0[5] = "\n";
      stringArray0[6] = "9%_#c";
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "9%_#c";
      stringArray1[2] = "?axys.2rQ6Vy";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "\n";
      stringArray1[6] = "?axys.2rQ6Vy";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("\n", stringArray0, stringArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      String string0 = StringUtils.replacePattern("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "UotpP", (CharSequence) "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension";
      String string1 = StringUtils.leftPad("R;llxXYm}8a", 2, "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("R;llxXYm}8a", string1);
      
      charSequenceArray0[1] = (CharSequence) "R;llxXYm}8a";
      charSequenceArray0[2] = (CharSequence) "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.join(intArray0, '&');
      assertNotNull(string2);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("\"52GC7\"1!", "\"52GC7\"1!", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ":/3~>+Z";
      String string0 = StringUtils.prependIfMissingIgnoreCase(":/3~>+Z", ":/3~>+Z", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(":/3~>+Z", string0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[0], ":/3~>+Z", 1);
      assertEquals(0, int0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny(":/3~>+Z", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isMixedCase(":/3~>+Z");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllLowerCase(":/3~>+Z");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.replace("kvk{+@CpqokH|tY2", ":/3~>+Z", ":/3~>+Z", 100);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("kvk{+@CpqokH|tY2", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ":/3~>+Z";
      stringArray0[1] = ":/3~>+Z";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(":/3~>+Z", string2);
      assertEquals(2, stringArray0.length);
      
      boolean boolean3 = StringUtils.isMixedCase("kvk{+@CpqokH|tY2");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.endsWithAny(":/3~>+Z", stringArray0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertEquals(2, stringArray0.length);
      
      String string3 = StringUtils.stripToNull(":/3~>+Z");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(":/3~>+Z", string3);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)44;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short)16;
      String[] stringArray1 = StringUtils.split("kvk{+@CpqokH|tY2", ":/3~>+Z", 400);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      
      String[] stringArray2 = StringUtils.split(".08]9xEX;L;[*~", "offset cannot be negative", 26);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      
      boolean boolean5 = StringUtils.isWhitespace(":/3~>+Z");
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      
      String string4 = StringUtils.wrap("offset cannot be negative", 'l');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("loffset cannot be negativel", string4);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      String string0 = StringUtils.substring("F-q{Es7'r0v", (-2252));
      assertNotNull(string0);
      assertEquals("F-q{Es7'r0v", string0);
      
      String string1 = StringUtils.leftPad("VP_D Z)Pqz3[", (-2252));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("VP_D Z)Pqz3[", string1);
      
      int[] intArray0 = new int[4];
      intArray0[1] = (-2252);
      intArray0[1] = (-2252);
      intArray0[3] = (-2252);
      String string2 = StringUtils.join(intArray0, '!', (-2252), (-2252));
      assertNotNull(string2);
      assertArrayEquals(new int[] {0, (-2252), 0, (-2252)}, intArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(4, intArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)776;
      shortArray0[2] = (short)98;
      shortArray0[3] = (short)9;
      shortArray0[4] = (short)98;
      shortArray0[5] = (short)98;
      shortArray0[6] = (short)776;
      String string3 = StringUtils.abbreviate("{Hn\"z]U8'udW?", (int) (short)9);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("{Hn\"z]...", string3);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)98;
      objectArray0[1] = (Object) (short)9;
      objectArray0[2] = (Object) "VP_D Z)Pqz3[";
      objectArray0[3] = (Object) "{Hn\"z]...";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) (short)98;
      objectArray0[7] = (Object) "VP_D Z)Pqz3[";
      String string4 = StringUtils.joinWith("{Hn\"z]...", objectArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(8, objectArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("7gM", (String) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      String string0 = StringUtils.unwrap("@~.hGCxh{", '-');
      assertNotNull(string0);
      assertEquals("@~.hGCxh{", string0);
      
      int int0 = StringUtils.compareIgnoreCase("@~.hGCxh{", (String) null, true);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("@~.hGCxh{");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("O_#4TOz$r");
      assertNotNull(string0);
      assertEquals("O_#4TOZ$R", string0);
      
      int[] intArray0 = new int[0];
      String string1 = StringUtils.join(intArray0, '*', 81, 81);
      assertNotNull(string1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, intArray0.length);
      
      String string2 = StringUtils.leftPad("", 256, "\"h7#>Qw\"'C");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Qw\"'C\"h7#>Q", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\"h7#>Qw\"'C", 81);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("O_#4TOz$r");
      assertNotNull(string0);
      assertEquals("O_#4TOZ$R", string0);
      
      String string1 = StringUtils.wrapIfMissing("68yK3IG$V6", 'g');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("g68yK3IG$V6g", string1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string2 = StringUtils.getDigits("Threshold must not be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Threshold must not be negative", "O_#4TOz$r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceChars("Locale must not be null", "=eiYe\"(My.yt)Y", ".G,_}a_/$^g");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("LocalG mus no bG null", string3);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'g';
      intArray0[1] = (int) 'g';
      intArray0[2] = (int) 'g';
      intArray0[3] = (int) 'g';
      intArray0[4] = 113;
      intArray0[5] = (int) 'g';
      intArray0[6] = (int) 'g';
      intArray0[7] = (int) 'g';
      String string4 = StringUtils.join(intArray0, '3', 2947, 103);
      assertNotNull(string4);
      assertArrayEquals(new int[] {103, 103, 103, 103, 113, 103, 103, 103}, intArray0);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(8, intArray0.length);
      
      String string5 = StringUtils.leftPad("9%_#cU", 54, "[%");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[9%_#cU", string5);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "g68yK3IG$V6g", 103);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.substringBefore("", "9%_#cU");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String string7 = StringUtils.removeStart("9%_#cU", "=eiYe\"(My.yt)Y");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("9%_#cU", string7);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ".G,_}a_/$^g", 103);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.normalizeSpace(" ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase(" ", " ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase(" ", " ", (CharSequence[]) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.normalizeSpace("lMT9ickkOP~<");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("lMT9ickkOP~<", string2);
      
      String string3 = StringUtils.center(" 28?{'\"7%", 12, 'a');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("a 28?{'\"7%aa", string3);
      
      boolean boolean1 = StringUtils.startsWithAny(" 28?{'\"7%", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.removeIgnoreCase("lMT9ickkOP~<", "FgtT8N");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("lMT9ickkOP~<", string4);
      
      String string5 = StringUtils.toRootUpperCase("/A0hA,QnZeXJH;S~1");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("/A0HA,QNZEXJH;S~1", string5);
      
      String string6 = StringUtils.join((Object[]) null, 'H');
      assertNull(string6);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = ';';
      charArray0[4] = ']';
      charArray0[5] = ';';
      charArray0[6] = ';';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "lMT9ickkOP~<", charArray0);
      assertArrayEquals(new char[] {'H', 'H', 'H', ';', ']', ';', ';'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(7, charArray0.length);
      
      String string7 = StringUtils.reverse((String) null);
      assertNull(string7);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "lMT9ickkOP~<", (CharSequence) " ");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string8 = StringUtils.stripAccents(" vs ");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertEquals(" vs ", string8);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      String string0 = StringUtils.center("Array and element cannot both be null", 321);
      assertNotNull(string0);
      assertEquals("                                                                                                                                              Array and element cannot both be null                                                                                                                                              ", string0);
      
      int int0 = StringUtils.compareIgnoreCase("lqzAhh620\":\"", "                                                                                                                                              Array and element cannot both be null                                                                                                                                              ", false);
      assertEquals(76, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("lqzAhh620\":\"");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("lqzAhh620\":\"", "lqzAhh620\":\"", " 3dt");
      assertNull(stringArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("Array and element cannot both be null", supplier0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Array and element cannot both be null", string1);
      
      String string2 = StringUtils.strip("\r");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isEmpty("Array and element cannot both be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.rightPad(" ", 321, "\r");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" \r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", string3);
      
      int int2 = StringUtils.compare("org.apache.commons.lang3.RegExUtils", " \r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(79, int2);
      
      String[] stringArray1 = StringUtils.substringsBetween("zSY:i%]pE", "$dEmaV", " ");
      assertNull(stringArray1);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "                                                                                                                                              Array and element cannot both be null                                                                                                                                              ", (CharSequence) "                                                                                                                                              Array and element cannot both be null                                                                                                                                              ");
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = StringUtils.indexOf((CharSequence) "Array and element cannot both be null", (CharSequence) " \r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r");
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Vector<String> vector0 = new Vector<String>(0, 1610);
      assertNotNull(vector0);
      assertFalse(vector0.contains(string0));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      
      String string1 = StringUtils.normalizeSpace("Failed to delete temp directory ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Failed to delete temp directory", string1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1610;
      doubleArray0[1] = (double) (byte)4;
      doubleArray0[2] = (double) 1610;
      String string2 = StringUtils.substring("FgtT8N", 0, (int) (byte)4);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("FgtT", string2);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string3);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      String string0 = StringUtils.strip("Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "Threshold must not be negative", (Supplier<CharSequence>) null);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("Threshold must not be negative", charSequence0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "Threshold must not be negative", '^');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "Threshold must not be negative";
      stringArray0[2] = "Threshold must not be negative";
      stringArray0[3] = "Threshold must not be negative";
      stringArray
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.replaceEach("Threshold must not be negative", stringArray0, stringArray1);
      assertNotNull(string1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("Threshold must not be negative", string1);
      assertEquals(5, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string2 = StringUtils.truncate("Threshold must not be negative", 0, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("", string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("egative").when(supplier0).get();
      String string3 = StringUtils.getIfBlank((String) null, supplier0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("egative", string3);
      
      String[] stringArray2 = StringUtils.split("Threshold must not be negative");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(5, stringArray2.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Threshold must not be negative", stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(boolean0);
      assertEquals(5, stringArray2.length);
      
      String string4 = StringUtils.replaceOncehreshold must not be negative");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("Threshold must not be negative", string4);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "Threshold must not be negative", (CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean2);
      assertEquals(0, stringArray1.length);
      
      String string5 = StringUtils.firstNonEmpty(stringArray1);
      assertNull(string5);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "7Fdhn{\"P+hW\"`\n", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.rotate("Minimum abbreviation width is %d", 321);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dMinimum abbreviation width is %", string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "dMinimum abbreviation width is %", charArray0);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.stripToNull("");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "dMinimum abbreviation width is %");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = null;
      stringArray1[3] = null;
      String string3 = StringUtils.replaceEach((String) null, stringArray0, stringArray1);
      assertNull(string3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      String string4 = StringUtils.removeEndIgnoreCase("", "zxChD{s#");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      String string0 = StringUtils.substring("F-q{Es7'r0v", (-2252));
      assertNotNull(string0);
      assertEquals("F-q{Es7'r0v", string0);
      
      String string1 = StringUtils.leftPad("VP_D Z)Pqz3[", (-2252));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("VP_D Z)Pqz3[", string1);
      
      int[] intArray0 = new int[4];
      intArray0[1] = (-2252);
      intArray0[1] = (-2252);
      intArray0[3] = (-2252);
      String string2 = StringUtils.join(intArray0, '!', (-2252), (-2252));
      assertNotNull(string2);
      assertArrayEquals(new int[] {0, (-2252), 0, (-2252)}, intArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(4, intArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)776;
      shortArray0[2] = (short)98;
      shortArray0[3] = (short)9;
      shortArray0[4] = (short)98;
      shortArray0[5] = (short)98;
      shortArray0[6] = (short)776;
      String string3 = StringUtils.join(shortArray0, '4');
      assertNotNull(string3);
      assertArrayEquals(new short[] {(short)0, (short)776, (short)98, (short)9, (short)98, (short)98, (short)776}, shortArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("04776498494984984776", string3);
      assertEquals(7, shortArray0.length);
      
      String string4 = StringUtils.abbreviate("{Hn\"z]U8'udW?", (int) (short)9);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("{Hn\"z]...", string4);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Strings must not be null");
      assertNotNull(string0);
      assertEquals("Stringsmustnotbenull", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Stringsmustnotbenull", (CharSequence) "Strings must not be null");
      assertEquals(7, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Stringsmustnotbenull", (CharSequence) "Strings must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, (String) null, 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      String string0 = StringUtils.unwrap("@~.hGC{", 'B');
      assertNotNull(string0);
      assertEquals("@~.hGC{", string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) 'B';
      longArray0[2] = (long) 'B';
      longArray0[3] = (long) '.';
      longArray0[4] = (long) 'B';
      longArray0[5] = (long) 'B';
      longArray0[6] = (long) 'B';
      longArray0[7] = (long) 'B';
      String string1 = StringUtils.join(longArray0, 'B');
      assertNotNull(string1);
      assertArrayEquals(new long[] {66L, 66L, 66L, 46L, 66L, 66L, 66L, 66L}, longArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("66B66B66B46B66B66B66B66", string1);
      assertEquals(8, longArray0.length);
      
      String string2 = StringUtils.lowerCase("Luqu");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("luqu", string2);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("luqu", "Locale must not be null");
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "@~.hGC{", 1808);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.strip("luqu");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("luqu", string3);
      
      String string4 = StringUtils.center("Locale must not be null", 1, "#ogu7lQw-=Ovf0TV4fH");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Locale must not be null", string4);
      
      String string5 = StringUtils.unwrap("\n", 'p');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("\n", string5);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      
      String string6 = StringUtils.join((List<?>) null, "66B66B66B46B66B66B66B66", 657, 657);
      assertNull(string6);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "1276-24690646060", (CharSequence) "@~.hGC{", 2038);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.chomp("\n", "S*i2");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertEquals("\n", string7);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n", 16);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string8 = StringUtils.rotate("/J?n.1_gpZe4W%b", 31);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertEquals("b/J?n.1_gpZe4W%", string8);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeAll("13Abl]E", "13Abl]E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripToNull("");
      assertNull(string2);
      
      String string3 = StringUtils.wrap((String) null, "28,NtLJz/)w [?=B;");
      assertNull(string3);
      
      String string4 = StringUtils.rotate("28,NtLJz/)w [?=B;", (-1582));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("8,NtLJz/)w [?=B;2", string4);
      
      boolean boolean1 = StringUtils.containsWhitespace("13Abl]E");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replaceOnce("", "P/~(Nn84cxiz%j]H#S$", "#|higH(e*obH");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.leftPad("", 0, 'B');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String string7 = StringUtils.overlay("13Abl]E", "8,NtLJz/)w [?=B;2", (-871), 472);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertEquals("8,NtLJz/)w [?=B;2", string7);
      
      String string8 = "LL@)U";
      String string9 = StringUtils.substringAfterLast("E)g%MPy>]", "LL@)U");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertEquals("", string9);
      
      String string10 = StringUtils.substringAfter("G]Op^=", "G]Op^=");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string9));
      assertEquals("", string10);
      
      // Undeclared exception!
      try { 
        Charset.forName("4");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 4
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", 'n');
      assertNotNull(string0);
      assertEquals("org.apache.commos.lag3.StrigUtils", string0);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("O_#4TOz$r");
      assertNotNull(string0);
      assertEquals("O_#4TOZ$R", string0);
      
      String string1 = StringUtils.wrapIfMissing("68yK3IG$V6", 'g');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("g68yK3IG$V6g", string1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string2 = StringUtils.getDigits("Threshold must not be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Threshold must not be negative", "O_#4TOz$r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceChars("Locale must not be null", "org.junitpioneer.jupiter.DefaultTimeZoneExtension", ".G,_}a_/$^g");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("L.c a$ _.$ b _a", string3);
      
      String string4 = StringUtils.remove("org.junitpioneer.jupiter.TempDirectory$CloseablePath", 'g');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("or.junitpioneer.jupiter.TempDirectory$CloseablePath", string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) " *[e^~/znYu*6Q", 1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath", supplier0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", charSequence0);
      
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath";
      charSequenceArray0[4] = (CharSequence) "or.junitpioneer.jupiter.TempDirectory$CloseablePath";
      charSequenceArray0[5] = (CharSequence) "O_#4TOZ$R";
      charSequenceArray0[6] = (CharSequence) "L.c a/ ./ b a";
      String string5 = StringUtils.prependIfMissingIgnoreCase("Search and Replace array lengths don't match: ", "or.junitpioneer.jupiter.TempDirectory$CloseablePath", charSequenceArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Search and Replace array lengths don't match: ", string5);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("defaulttimezone", "defaulttimezone");
      assertEquals(1.0, double0, 0.01);
      
      String string0 = StringUtils.chomp("defaulttimezone", "defaulttimezone");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      boolean boolean1 = StringUtils.startsWith("N;ZZL", "defaulttimezone");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.center("N;ZZL", 16, "N;ZZL");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("N;ZZLN;ZZLN;ZZLN", string1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "N;ZZL", "N;ZZL");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = StringUtils.abbreviate("", "N;ZZLN;ZZLN;ZZLN", 3, 1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      String string0 = StringUtils.strip("Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "Threshold must not be negative", '[');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "Threshold must not be negative";
      stringArray0[2] = "Threshold must not be negative";
      stringArray0[3] = "Threshold must not be negative";
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      String string1 = StringUtils.strip("Threshold must not be negative");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Threshold must not be negative", string1);
      
      String string2 = StringUtils.center("|u2f+KkA6vnmufw<TT", 79, "Threshold must not be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Threshold must not be negative|u2f+KkA6vnmufw<TTThreshold must not be negativeT", string2);
      
      boolean boolean0 = StringUtils.isMixedCase("Threshold must not be negative");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("Threshold must not be negative");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.compare((String) null, "Threshold must not be negative");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp("S*i2", "Ypy@$");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("S*i2", string1);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((int[]) null, 'C');
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing(">lie]|@p/]>L/i;F", 'h');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("h>lie]|@p/]>L/i;Fh", string3);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("L", (String) null, 955);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.rightPad("S*i2", 26, "Locale must not be null13Abl]E");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("S*i2Locale must not be nul", string4);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\\';
      charArray0[1] = 'h';
      charArray0[2] = '2';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      charArray0[5] = 'L';
      charArray0[6] = '\\';
      charArray0[7] = '\\';
      charArray0[8] = 'L';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'\\', 'h', '2', '\\', '\\', 'L', '\\', '\\', 'L'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      String string0 = StringUtils.getDigits("SIIbh3^^o-+.U[L%_$");
      assertNotNull(string0);
      assertEquals("3", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("3", "SIIbh3^^o-+.U[L%_$");
      assertEquals(0.69, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("junit-pioneer");
      assertNotNull(string0);
      assertEquals("JUNIT-PIONEER", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("JUNIT-PIONEER", "JqQ#c");
      assertEquals(0.41, double0, 0.01);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "JUNIT-PIONEER", (CharSequence) "JqQ#c", 36);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.reverse("L?V~K|]");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]|K~V?L", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("Expected exception %s was not thrown.", "L?V~K|]");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Expected exception %s was not thrown.", string2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Expected exception %s was not thrown.";
      stringArray0[1] = "]|K~V?L";
      stringArray0[2] = "L?V~K|]";
      stringArray0[3] = "]|K~V?L";
      stringArray0[4] = "JUNIT-PIONEER";
      stringArray0[5] = "]|K~V?L";
      stringArray0[6] = "~WSQ+";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "io");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("]|K~V?L", "]|K~V?L");
      assertTrue(boolean0);
      
      String string3 = StringUtils.rotate("L?V~K|]", (-2597));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("L?V~K|]", string3);
      
      String string4 = StringUtils.mid("rOZh4.7+e;&l#en", (-1514), 36);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("rOZh4.7+e;&l#en", string4);
      
      boolean boolean1 = StringUtils.containsWhitespace("rOZh4.7+e;&l#en");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "~WSQ+", (CharSequence) "Expected exception %s was not thrown.");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.leftPad("L?V~K|]", 0, '');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("L?V~K|]", string5);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.mid("a^dES/|@j)FMnl", 5, 5);
      assertNotNull(string1);
      assertEquals("/|@j)", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("a^dES/|@j)FMnl", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.rotate((String) null, 2272);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.containsWhitespace("/|@j)");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^7", (CharSequence) "F-q{Es7'r0v");
      assertEquals(0, int0);
      
      String string3 = StringUtils.leftPad("fGkq0^b", (-4390), 'B');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertEquals("fGkq0^b", string3);
      
      String string4 = StringUtils.overlay((String) null, "^7", 94, 93);
      assertNull(string4);
      
      String string5 = StringUtils.substringAfterLast("G[@^ w", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Vector<String> vector0 = new Vector<String>(0, 1610);
      assertNotNull(vector0);
      assertFalse(vector0.contains(""));
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.junitpioneer.jupiter.TempDirectory";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string1);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      
      String string2 = StringUtils.join((Object[]) stringArray1, 'T', 51, 0);
      assertNotNull(string2);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(0, stringArray1.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.TempDirectory");
      assertEquals(0, int0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", "", 1610);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, ':', ':');
      assertNull(string0);
      
      String string1 = StringUtils.stripStart("``````````````````````````", (String) null);
      assertNotNull(string1);
      assertEquals("``````````````````````````", string1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "``````````````````````````", false);
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("``````````````````````````");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) "``````````````````````````");
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripAccents((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAllUpperCase("|Dy");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("codefx", (String) null, 1);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens(" 3dt", ':');
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      
      String string4 = StringUtils.truncate((String) null, 1);
      assertNull(string4);
      
      String string5 = StringUtils.getDigits("xP~HuF}|B*3x:I");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertEquals("3", string5);
      
      String string6 = StringUtils.prependIfMissing("``````````````````````````", (CharSequence) null, stringArray2);
      assertNotNull(string6);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertEquals("``````````````````````````", string6);
      assertEquals(1, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace(" B");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "8m", (-893), (-893));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      String string0 = StringUtils.removePattern("S*i2", "S*i2");
      assertNotNull(string0);
      assertEquals("S*", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "S*", (CharSequence) "S*i2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string0 = StringUtils.substring("(5'XPYT6){.--", 108, 6);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = " ";
      stringArray0[1] = "(5'XPYT6){.--";
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-654.9890881);
      doubleArray0[1] = 0.7;
      doubleArray0[2] = (-654.9890881);
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 108;
      doubleArray0[5] = (double) 'Z';
      String string1 = StringUtils.join(doubleArray0, 'b');
      assertNotNull(string1);
      assertArrayEquals(new double[] {(-654.9890881), 0.7, (-654.9890881), 6.0, 108.0, 90.0}, doubleArray0, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-654.9890881b0.7b-654.9890881b6.0b108.0b90.0", string1);
      assertEquals(6, doubleArray0.length);
      
      String string2 = StringUtils.substring("F6h!|", 321, 6);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("(5'XPYT6){.--", string3);
      assertEquals(8, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      String string0 = StringUtils.stripAccents("!:tkIyq,p~k<~lV");
      assertNotNull(string0);
      assertEquals("!:tkIyq,p~k<~lV", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "!:tkIyq,p~k<~lV", (CharSequence) "!:tkIyq,p~k<~lV");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "!:tkIyq,p~k<~lV";
      charSequenceArray0[1] = (CharSequence) "!:tkIyq,p~k<~lV";
      charSequenceArray0[2] = (CharSequence) "!:tkIyq,p~k<~lV";
      charSequenceArray0[3] = (CharSequence) "!:tkIyq,p~k<~lV";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      String string0 = StringUtils.chomp("S*i2");
      assertNotNull(string0);
      assertEquals("S*i2", string0);
      
      String string1 = StringUtils.chomp("U", "s0d|@L?");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("U", string1);
      
      boolean boolean0 = StringUtils.isEmpty("JqQ#c");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((int[]) null, 'L');
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("S*i2", 'L');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("LS*i2L", string3);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("~QL*bRtBp", "y", 20);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.rightPad("9%_#c ", 20, "s0d|@L?");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("9%_#c s0d|@L?s0d|", string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '2';
      charArray0[2] = 'L';
      int int0 = StringUtils.indexOfAny((CharSequence) "9%_#c s0d|@L?s0d|", charArray0);
      assertArrayEquals(new char[] {'\\', '2', 'L'}, charArray0);
      assertEquals(14, int0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.unwrap(string0, '\\');
      assertNotNull(string1);
      assertEquals("\\u", string1);
      
      String string2 = StringUtils.substringBefore("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "Can only resolve parameter of type MT(r9/p2*mYq54 ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", string2);
      
      boolean boolean0 = StringUtils.isAlpha("gqPV|c7A(,\"h*9(");
      assertFalse(boolean0);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("gqPV|c7A(,\"h*9(", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.removeEnd("', has a length less than 2", string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', has a length less than 2", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("', has a length less than 2", string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.chomp(string0, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isEmpty("', has a length less than 2");
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((int[]) null, 'L');
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing((String) null, '>');
      assertNull(string4);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string5 = StringUtils.lowerCase("FtGTp");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("ftgtp", string5);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase((CharSequence) null, "FtGTp");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "', has a length less than 2", 1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string6 = StringUtils.strip("', has a length less than 2");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("', has a length less than 2", string6);
      
      String string7 = StringUtils.center("FtGTp", 1, "^7HfqrCwnH");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("FtGTp", string7);
      
      String string8 = StringUtils.unwrap("FtGTp", 'F');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertEquals("FtGTp", string8);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string6));
      assertEquals(0, linkedList0.size());
      
      String string9 = StringUtils.join((List<?>) arrayList0, "mT2>+GAP", 18, 18);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertEquals("", string9);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "DJ2k*7fs\"h", (CharSequence) "", 4326);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[0];
      String string10 = StringUtils.join(objectArray0, ',', 5, (-2055));
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string2));
      assertEquals("", string10);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat('g', 2364);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap(string0, 'g');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      String string0 = StringUtils.center("Array and element cannot both be null", 321);
      assertNotNull(string0);
      assertEquals("                                                                                                                                              Array and element cannot both be null                                                                                                                                              ", string0);
      
      int int0 = StringUtils.compareIgnoreCase("lqzAhh620\":\"", "                                                                                                                                              Array and element cannot both be null                                                                                                                                              ", false);
      assertEquals(76, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("lqzAhh620\":\"");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("lqzAhh620\":\"", "lqzAhh620\":\"", " 3dt");
      assertNull(stringArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("Array and element cannot both be null", supplier0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Array and element cannot both be null", string1);
      
      String string2 = StringUtils.strip("\r");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isEmpty("Array and element cannot both be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.rightPad(" ", 321, "\r");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" \r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", string3);
      
      String string4 = StringUtils.leftPad("`n[Zb4C$T*QKI", 782, " ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals`n[Zb4C$T*QKI", string4);
      
      int[] intArray0 = new int[0];
      String string5 = StringUtils.join(intArray0, 'R', 76, 0);
      assertNotNull(string5);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertEquals(0, intArray0.length);
      
      String string6 = StringUtils.join((Iterator<?>) null, " vs ");
      assertNull(string6);
      
      String string7 = StringUtils.replaceOnce("Array and element cannot both be null", "`n[Zb4C$T*QKI", "%MX*M?J0.e;v");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Array and element cannot both be null", string7);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      String string0 = StringUtils.defaultString("3", "");
      assertNotNull(string0);
      assertEquals("3", string0);
      
      String string1 = StringUtils.join((float[]) null, 'S');
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("6BVf", '}');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("}6BVf}", string2);
      
      String string3 = StringUtils.remove("'Ll6k", "6BVf");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("'Ll6k", string3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("'Ll6k", "; -X[@");
      assertFalse(boolean0);
      
      String string4 = StringUtils.replaceOnce("'Ll6k", "'Ll6k", "'Ll6k");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("'Ll6k", string4);
      
      String string5 = StringUtils.removeEndIgnoreCase(" 28?{'\"7%", "9%_#c");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(" 28?{'\"7%", string5);
      
      String string6 = StringUtils.removeStart((String) null, "9%_#c");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "x,L\"y}h_", (CharSequence) "(o1!F*Eg7@~MwM");
      assertEquals(0, int0);
      
      String string0 = StringUtils.substringAfter("(o1!F*Eg7@~MwM", "(o1!F*Eg7@~MwM");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Strings must not be null/)w [?=B;");
      assertNotNull(stringArray0);
      assertEquals(19, stringArray0.length);
      
      int int0 = StringUtils.compare("org.apache.commons.lang3.RegExUtils", "org.junitpioneer.jupiter.params.ShortRange", false);
      assertEquals((-9), int0);
      
      String string0 = StringUtils.chop("org.apache.commons.lang3.RegExUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.RegExUtil", string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "org.apache.commons.lang3.RegExUtil");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(19, stringArray0.length);
      assertEquals(19, stringArray1.length);
      
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.RegExUtil", "B`(@f");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.RegExUtil", string1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Strings must not be null/)w [?=B;", (CharSequence) "org.apache.commons.lang3.RegExUtils");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(false));
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(false));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("2 ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.2 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      String string0 = StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.mid("", (-3649), (-3649));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3649);
      floatArray0[1] = (float) (-3649);
      floatArray0[2] = (float) (-3649);
      floatArray0[3] = (float) (-3649);
      floatArray0[4] = (float) (-3649);
      String string2 = StringUtils.join(floatArray0, 'i');
      assertNotNull(string2);
      assertArrayEquals(new float[] {(-3649.0F), (-3649.0F), (-3649.0F), (-3649.0F), (-3649.0F)}, floatArray0, 0.01F);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-3649.0i-3649.0i-3649.0i-3649.0i-3649.0", string2);
      assertEquals(5, floatArray0.length);
      
      String string3 = StringUtils.substringBeforeLast("=2J0$@Bm", " YlL{WpC@6RcB");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("=2J0$@Bm", string3);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("=2J0$@Bm");
      assertTrue(boolean0);
      
      String string4 = StringUtils.strip("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("@FDjAR/`cLC'JV2j", "=2J0$@Bm");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) " YlL{WpC@6RcB");
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      String string0 = StringUtils.difference("Threshold", "Threshold");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "H&";
      String string2 = null;
      String string3 = StringUtils.repeat((String) null, "Threshold", 100);
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-2803.475);
      doubleArray0[1] = 1692.13;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2732.92622318046);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 3.0;
      doubleArray0[7] = 0.7;
      String string0 = StringUtils.normalizeSpace("9%_#c");
      assertNotNull(string0);
      assertEquals("9%_#c", string0);
      
      String string1 = StringUtils.rightPad("9%_#c", 2516, 'F');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      String string2 = locale0.getExtension('F');
      assertNull(string2);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      String string3 = StringUtils.upperCase("ySC|c(X2s~H99>", locale0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("YSC|C(X2S~H99>", string3);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      String string4 = StringUtils.stripStart("Hrv(!,jJ`]`tOQ=~G;", "U");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Hrv(!,jJ`]`tOQ=~G;", string4);
      
      String string5 = StringUtils.right((String) null, 2516);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.repeat((String) null, "ev_)6N|y4`KZorg.junitpioneer.jupiter.params.FloatRangeDefaultTimeZone", 755);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("6b/", (-2127), (-2127));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "F-q{s7'r0";
      charSequenceArray0[1] = (CharSequence) "F-q{s7'r0";
      charSequenceArray0[2] = (CharSequence) "F-q{s7'r0";
      charSequenceArray0[2] = (CharSequence) "F-q{s7'r0";
      charSequenceArray0[4] = (CharSequence) "F-q{s7'r0";
      charSequenceArray0[5] = (CharSequence) "F-q{s7'r0";
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast((String) null, "Object varargs must not be null");
      assertNull(string0);
      
      int int0 = StringUtils.compare("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", (String) null, true);
      assertEquals(1, int0);
      
      String string1 = StringUtils.substring("Object varargs must not be null", 1, 1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      String string0 = StringUtils.removeEnd("y", "\r");
      assertNotNull(string0);
      assertEquals("y", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "\r");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.chomp("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", string1);
      
      boolean boolean0 = StringUtils.isEmpty("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '\'';
      longArray0[1] = (long) '\'';
      longArray0[2] = (long) '\'';
      String string2 = StringUtils.join(longArray0, '.');
      assertNotNull(string2);
      assertArrayEquals(new long[] {39L, 39L, 39L}, longArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("39.39.39", string2);
      assertEquals(3, longArray0.length);
      
      String string3 = StringUtils.lowerCase("1276-24690646060");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("1276-24690646060", string3);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("1276-24690646060", "y");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "Locale must not be null", 1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.strip("Locale must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Locale must not be null", string4);
      
      String string5 = StringUtils.center("Locale must not be null", (-1), "Locale must not be null");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Locale must not be null", string5);
      
      String string6 = StringUtils.unwrap("N;ZZL", 'B');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("N;ZZL", string6);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Locale must not be null"));
      assertEquals(0, linkedList0.size());
      
      String string7 = StringUtils.join((List<?>) linkedList0, "8.TO>8", 2038, (-1));
      assertNotNull(string7);
      assertFalse(linkedList0.contains("Locale must not be null"));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      assertEquals(0, linkedList0.size());
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "DJ2k*7fs\"h", (CharSequence) ">s\"#NI1=", (-2079));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("", "", (CharSequence[]) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.normalizeSpace("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.center("mIof,]@xI`d6VY!m~-", (-1), ';');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("mIof,]@xI`d6VY!m~-", string3);
      
      String string4 = StringUtils.difference("2 ", "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.removeIgnoreCase("mIof,]@xI`d6VY!m~-", "M3");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("mIof,]@xI`d6VY!m~-", string5);
      
      String string6 = StringUtils.toRootUpperCase("");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      
      String string7 = StringUtils.join((Object[]) null, ';');
      assertNull(string7);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[4] = ';';
      charArray0[5] = ';';
      charArray0[6] = ';';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "M3", charArray0);
      assertArrayEquals(new char[] {';', ';', ';', ';', ';', ';', ';'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(7, charArray0.length);
      
      String string8 = StringUtils.reverse("M3");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertEquals("3M", string8);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string9 = StringUtils.stripAccents("3M");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertEquals("3M", string9);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string0 = StringUtils.chop("S>&^PWD] DY=X");
      assertNotNull(string0);
      assertEquals("S>&^PWD] DY=", string0);
      
      boolean boolean1 = StringUtils.equalsAny("S>&^PWD] DY=", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 0, (-2378));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0, 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat("uG", (-456));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = linkedHashSet0.add(locale_Category0);
      assertTrue(linkedHashSet0.contains(locale_Category0));
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Iterator<Locale.Category> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(linkedHashSet0.contains(locale_Category0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.chomp("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.removeIgnoreCase("nOgm_ DRVt#|<n!1!", "uG");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("nOgm_ DRVt#|<n!1!", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string4 = StringUtils.appendIfMissing("", "nOgm_ DRVt#|<n!1!", charSequenceArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(1, charSequenceArray0.length);
      
      String string5 = StringUtils.replaceIgnoreCase("     A", "N;ZZL", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("     A", string5);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.wrapIfMissing("2", " ");
      assertNotNull(string0);
      assertEquals(" 2 ", string0);
      
      String[] stringArray0 = StringUtils.split("]+TWYr4", "\r", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.removePattern(" 2 ", "2");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("  ", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) " 2 ", (CharSequence) "  ");
      assertEquals(0, int0);
      
      String string2 = StringUtils.defaultString("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "\r", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.center("Don't clear/set the same property more than once.", 0, "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Don't clear/set the same property more than once.", string3);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", " ");
      assertTrue(boolean0);
      
      String string4 = StringUtils.abbreviate("  ", 322);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("  ", string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "Don't clear/set the same property more than once.", 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.center(">vB) SJxK#/dG&", (-1668), 'x');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(">vB) SJxK#/dG&", string5);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("S; ", supplier0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("S; ", string6);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string0);
      assertEquals("U'o}\"\bWIWv7", string0);
      assertEquals(2, objectArray0.length);
      
      String string1 = StringUtils.rightPad("", 22, "U'o}\"\bWIWv7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("U'o}\"\bWIWv7U'o}\"\bWIWv7", string1);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      String string2 = locale0.getDisplayScript();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      String string3 = StringUtils.lowerCase("", locale0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "U'o}\"\bWIWv7", (CharSequence) "");
      assertEquals(11, int0);
      
      String string4 = StringUtils.replacePattern("\"]v!nYZbTg", "U'o}\"\bWIWv7", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\"]v!nYZbTg", string4);
      
      String string5 = StringUtils.leftPad("", 1, "U'o}\"\bWIWv7");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("U", string5);
      
      String string6 = StringUtils.deleteWhitespace("U'o}\"\bWIWv7");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("U'o}\"\bWIWv7", string6);
      
      String string7 = StringUtils.right("", 0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, '7');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 0, (-2378));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0, 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat("uG", (-456));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = linkedHashSet0.add(locale_Category0);
      assertTrue(linkedHashSet0.contains(locale_Category0));
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Iterator<Locale.Category> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(linkedHashSet0.contains(locale_Category0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertEquals("", charSequence0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.substringBefore("\"|o9{=", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "uG", (String) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.rotate(" 3dt", 1148);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" 3dt", string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.substringsBetween("x$}", (String) null, "org.junitpioneer.jupiter.params.Range");
      assertNull(stringArray0);
      
      String string4 = StringUtils.remove((String) null, 'c');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlpha(" ");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("U[I'm3Oe >0.5D4[", "Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "U[I'm3Oe >0.5D4[", 977);
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("Illegal range. The step cannot be zero.", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Illegal range. The step cannot be zero.", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.replaceOnceIgnoreCase("W1Gv,T)b\">R*D;R", "U[I'm3Oe >0.5D4[", "Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("W1Gv,T)b\">R*D;R", string3);
      
      charSequenceArray0[1] = (CharSequence) "W1Gv,T)b\">R*D;R";
      charSequenceArray0[2] = (CharSequence) "Illegal range. There's no way to get from %s to %s with a step of %s.";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Illegal range. There's no way to get from %s to %s with a step of %s.";
      charSequenceArray0[5] = (CharSequence) "Illegal range. The step cannot be zero.";
      boolean boolean1 = StringUtils.startsWithAny("Illegal range. The step cannot be zero.", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      String string4 = StringUtils.leftPad("U[I'm3Oe >0.5D4[", 1959, "Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.substringBetween("", "j$TSG");
      assertNull(string5);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Illegal range. There's no way to get from %s to %s with a step of %s.", charSequenceArray0[4]);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string4));
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", charSequence0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("Illegal range. There's no way to get from %s to %s with a step of %s.", "Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Illegal range. There's no way to get from %s to %s with a step of %s.";
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string6);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("[N8EV:qO", string4);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(1, stringArray1.length);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase("U[I'm3Oe >0.5D4[", "W1Gv,T)b\">R*D;R", charSequenceArray0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("U[I'm3Oe >0.5D4[", string7);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[1], (char[]) null);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string8 = StringUtils.substringAfterLast("Illegal range. There's no way to get from %s to %s with a step of %s.", "org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      String string0 = StringUtils.joinWith((String) null, objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeFirst("Strings must not be null", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Strings must not be null", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.strip((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.center("/)w [?=B;", (-3537), "Strings must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("/)w [?=B;", string3);
      
      boolean boolean2 = StringUtils.isMixedCase("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = '9';
      charArray0[2] = 'z';
      boolean boolean3 = StringUtils.containsNone(charSequenceArray0[0], charArray0);
      assertArrayEquals(new char[] {'n', '9', 'z'}, charArray0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(3, charArray0.length);
      
      String string4 = StringUtils.removeEnd("Strings must not be null", "/)w [?=B;");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Strings must not be null", string4);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 2748);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      String string0 = StringUtils.joinWith((String) null, objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeFirst("Strings must not be null", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      
      String string2 = StringUtils.strip("Strings must not be null", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Strings must not be null", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Strings must not be null", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.joinWith("Strings must not be null", charSequenceArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", "org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("Strings must not be null"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean3 = hashSet0.add("org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertFalse(hashSet0.contains("Strings must not be null"));
      assertTrue(hashSet0.contains("org.junitpioneer.jupiter.RepeatFailedTestExtension"));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      boolean boolean4 = hashSet0.add("");
      assertFalse(hashSet0.contains("Strings must not be null"));
      assertTrue(hashSet0.contains(""));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      String string4 = StringUtils.join((Iterable<?>) hashSet0, '^');
      assertNotNull(string4);
      assertFalse(hashSet0.contains("Strings must not be null"));
      assertTrue(hashSet0.contains(""));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("^org.junitpioneer.jupiter.RepeatFailedTestExtension", string4);
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("Strings must not be null"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean5 = linkedHashSet0.add(object1);
      assertTrue(linkedHashSet0.contains(object1));
      assertFalse(linkedHashSet0.contains("Strings must not be null"));
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = '^';
      boolean boolean6 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'S', '^'}, charArray0);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6);
      assertEquals(2, charArray0.length);
      
      String string5 = StringUtils.joinWith("TST~vdf%QE_@", charSequenceArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertEquals(1, charSequenceArray0.length);
      
      String string6 = StringUtils.stripToNull("");
      assertNull(string6);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", (-1275));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean7 = StringUtils.containsNone((CharSequence) "Strings must not be null", charArray0);
      assertArrayEquals(new char[] {'S', '^'}, charArray0);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7);
      assertEquals(2, charArray0.length);
      
      boolean boolean8 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean8 == boolean3);
      assertFalse(boolean8 == boolean7);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean1);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8 == boolean4);
      assertFalse(boolean8 == boolean0);
      assertTrue(boolean8);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("f$wnJ>m");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("f$wnJ>m", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "f$wnJ>m");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrap("o=6@,k-", "#Gh$p3GbbZcPe!");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#Gh$p3GbbZcPe!o=6@,k-#Gh$p3GbbZcPe!", string2);
      
      String string3 = StringUtils.toRootLowerCase("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.startsWithAny("#Gh$p3GbbZcPe!o=6@,k-#Gh$p3GbbZcPe!", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replacePattern("YAh!SkU:W", "", "dj{t5caY");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("dj{t5caYYdj{t5caYAdj{t5caYhdj{t5caY!dj{t5caYSdj{t5caYkdj{t5caYUdj{t5caY:dj{t5caYWdj{t5caY", string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "f$wnJ>m", (CharSequence) "hfov.~}8F7");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("", 'L');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "in}LkJaS45MP/7", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("#Gh$p3GbbZcPe!", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("<).-#.@&\"OPj{zWF ");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      
      String string1 = locale0.getDisplayScript();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      
      String string2 = StringUtils.lowerCase(" ", locale0);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) " ");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replacePattern("", "13Abl]E", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.leftPad("(Di*?7y%J(I>,bo", 53, "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("p{InCombiningDiacriticalMarks}+p{InCom(Di*?7y%J(I>,bo", string4);
      
      String string5 = StringUtils.deleteWhitespace(";@!y>9i>7Kvx.i+to");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(";@!y>9i>7Kvx.i+to", string5);
      
      String string6 = StringUtils.right(" ", 8);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals(" ", string6);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.LF;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      
      String string3 = StringUtils.strip((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.center("bv/MGKuW<E]wl4pR BP", 802, "yT9a");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("yT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9bv/MGKuW<E]wl4pR BPyT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9ayT9a", string4);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) null;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      objectArray0[3] = (Object) null;
      String string1 = StringUtils.join(objectArray0, 'a', (-490), (-855));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(4, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charSequenceArray0.length);
      
      String string2 = StringUtils.LF;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      
      String string3 = StringUtils.chomp("_YddUGAgyTy", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("_YddUGAgyTy", string3);
      
      String string4 = StringUtils.SPACE;
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" ", string4);
      
      boolean boolean2 = StringUtils.isBlank((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      String string0 = StringUtils.substring("F-q{Es7'r0v", (-2252));
      assertNotNull(string0);
      assertEquals("F-q{Es7'r0v", string0);
      
      String string1 = StringUtils.leftPad("VP_D Z)Pqz3[", (-2252));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("VP_D Z)Pqz3[", string1);
      
      int[] intArray0 = new int[4];
      intArray0[1] = (-2252);
      intArray0[1] = (-2252);
      intArray0[2] = (-2252);
      intArray0[3] = (-2252);
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[1] = (CharSequence) "VP_D Z)Pqz3[";
      charSequenceArray0[2] = (CharSequence) "F-q{Es7'r0v";
      String string2 = StringUtils.replaceIgnoreCase("F-q{Es7'r0v", "VP_D Z)Pqz3[", "D^>PvtJF");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("F-q{Es7'r0v", string2);
      
      charSequenceArray0[3] = (CharSequence) "F-q{Es7'r0v";
      int int0 = StringUtils.indexOfAny((CharSequence) "F-q{Es7'r0v", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.capitalize("Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      
      boolean boolean0 = StringUtils.isNumeric("F-q{Es7'r0v");
      assertFalse(boolean0);
      
      String string4 = StringUtils.leftPad("6T:a", (-2252), '!');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("6T:a", string4);
      
      String string5 = StringUtils.joinWith("@", charSequenceArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("F-q{Es7'r0v@VP_D Z)Pqz3[@F-q{Es7'r0v@F-q{Es7'r0v", string5);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "\\u";
      String[] stringArray0 = StringUtils.substringsBetween("", string1, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("F-q{Es7'r0v");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("Minimum abbreviation width is %d", "F-q{Es7'r0v", "F-q{Es7'r0v");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width is %d", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("Minimum abbreviation width is %d");
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", (-1380));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(322);
      assertNotNull(byteBuffer0);
      assertEquals(322, byteBuffer0.remaining());
      assertEquals(322, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=322 cap=322]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(322, byteBuffer0.limit());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(322, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=322 lim=322 cap=322]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(322, byteBuffer0.position());
      assertEquals(322, byteBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(322, charBuffer0.length());
      assertEquals(322, charBuffer0.remaining());
      assertEquals(322, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(322, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.isRegistered());
      
      byte[] byteArray0 = StringUtils.getBytes("Minimum abbreviation width is %d", charset1);
      assertNotNull(byteArray0);
      assertSame(charset1, charset0);
      assertEquals(32, byteArray0.length);
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.isRegistered());
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Minimum abbreviation width is %d";
      stringArray1[1] = "F-q{Es7'r0v";
      stringArray1[2] = "Minimum abbreviation width is %d";
      stringArray1[3] = "Minimum abbreviation width is %d";
      stringArray1[4] = "Minimum abbreviation width with offset is %d";
      stringArray1[5] = "F-q{Es7'r0v";
      stringArray1[6] = "Cannot store ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Cannot store ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 10 vs 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceEach(" ", (String[]) null, (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      String string2 = StringUtils.abbreviate(" 3dt", (String) null, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" 3dt", string2);
      
      String string3 = StringUtils.replaceChars(" 3dt", "XHwP3ZN#c|Q5Y $r`B", " 3dt");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("dt", string3);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-654.9890881);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.7;
      doubleArray0[5] = (double) 0;
      String string4 = StringUtils.join(doubleArray0, 'Z');
      assertNotNull(string4);
      assertArrayEquals(new double[] {1.0, 0.0, (-654.9890881), 1.0, 0.7, 0.0}, doubleArray0, 0.01);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("1.0Z0.0Z-654.9890881Z1.0Z0.7Z0.0", string4);
      assertEquals(6, doubleArray0.length);
      
      String string5 = StringUtils.substring("org.junitpioneer.jupiter.params.IntRange", 20, 20);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      String string6 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string6);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore((String) null, "_bvLQ9m/iO(");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another", false);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "&=B,k>B", (CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.uncapitalize("i\"`_");
      assertNotNull(string0);
      assertEquals("i\"`_", string0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      String string0 = StringUtils.center(" ", 8, 'R');
      assertNotNull(string0);
      assertEquals("RRR RRRR", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "RRR RRRR", (CharSequence) "RRR RRRR", 8);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rightPad(" ", 54, "RRR RRRR");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" RRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR R", string1);
      
      boolean boolean0 = StringUtils.isWhitespace(" RRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR R");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd(" RRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR R", " ");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" RRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR R", string2);
      
      String string3 = StringUtils.replaceIgnoreCase(" RRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR R", " ", "y\r");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("y\rRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rR", string3);
      
      boolean boolean1 = StringUtils.isWhitespace("y\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.chomp("xrl}_U*(~?:P*4*");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("xrl}_U*(~?:P*4*", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string5 = StringUtils.removeIgnoreCase("y\r", "xrl}_U*(~?:P*4*");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("y\r", string5);
      
      charSequenceArray0[0] = (CharSequence) "y\r";
      charSequenceArray0[1] = (CharSequence) "y\rRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rR";
      charSequenceArray0[2] = (CharSequence) "RRR RRRR";
      charSequenceArray0[3] = (CharSequence) " RRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR R";
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[5] = (CharSequence) " RRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR RRRRRRR R";
      charSequenceArray0[6] = (CharSequence) "RRR RRRR";
      charSequenceArray0[7] = (CharSequence) "y\rRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rR";
      String string6 = StringUtils.appendIfMissing("RRR RRRR", "y\rRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rRRRRRRRy\rR", charSequenceArray0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("RRR RRRR", string6);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("7K5|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ":/3~>+Z";
      String string0 = StringUtils.prependIfMissingIgnoreCase(":/3~>+Z", ":/3~>+Z", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(":/3~>+Z", string0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ":/3~>+Z", (CharSequence) ":/3~>+Z", 1);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.endsWithAny(":/3~>+Z", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isMixedCase(":/3~>+Z");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllLowerCase(":/3~>+Z");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.replace("kvk{+@CpqokH|tY2", ":/3~>+Z", ":/3~>+Z", 100);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("kvk{+@CpqokH|tY2", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ":/3~>+Z";
      stringArray0[1] = ":/3~>+Z";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(":/3~>+Z", string2);
      assertEquals(2, stringArray0.length);
      
      boolean boolean3 = StringUtils.isMixedCase("kvk{+@CpqokH|tY2");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.endsWithAny(":/3~>+Z", stringArray0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      assertEquals(2, stringArray0.length);
      
      String string3 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripToNull(":/3~>+Z");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(":/3~>+Z", string4);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)44;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short)16;
      shortArray0[3] = (short)13;
      shortArray0[4] = (short)776;
      shortArray0[5] = (short)98;
      shortArray0[6] = (short)751;
      shortArray0[7] = (short)55;
      shortArray0[8] = (short)9;
      String string5 = StringUtils.join(shortArray0, '0');
      assertNotNull(string5);
      assertArrayEquals(new short[] {(short)44, (short)4, (short)16, (short)13, (short)776, (short)98, (short)751, (short)55, (short)9}, shortArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("44040160130776098075105509", string5);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "The Character must not be null";
      charSequenceArray0[1] = (CharSequence) "The Character must not be null";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1317);
      shortArray0[1] = (short)26;
      shortArray0[2] = (short)111;
      shortArray0[3] = (short)1446;
      String string0 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", (int) (short)111, '~');
      assertNotNull(string0);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~p{InCombiningDiacriticalMarks}+", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = '~';
      charArray0[2] = '~';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~p{InCombiningDiacriticalMarks}+", charArray0);
      assertArrayEquals(new char[] {'o', '~', '~'}, charArray0);
      assertEquals(79, int0);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.getDigits("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isMixedCase("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      String string0 = StringUtils.stripToNull("q");
      assertNotNull(string0);
      assertEquals("q", string0);
      
      boolean boolean0 = StringUtils.isAlpha("q");
      assertTrue(boolean0);
      
      String string1 = StringUtils.appendIfMissing("AX{gM3T3~I]z%iyOHF", "q", (CharSequence[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("AX{gM3T3~I]z%iyOHFq", string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("AX{gM3T3~I]z%iyOHFq");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = arrayList0.add(object1);
      assertTrue(arrayList0.contains(object1));
      assertFalse(arrayList0.contains(object0));
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      boolean boolean1 = arrayList0.add(object0);
      assertTrue(arrayList0.contains(object1));
      assertNotSame(object0, object1);
      assertFalse(object0.equals((Object)object1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      
      String string0 = StringUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("", "5", 1019);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another", "o&K", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("AbArting tA prAtect against StackOverflAwErrAr - Autput Af Ane lAAp is the input Af anAther", string2);
      
      String string3 = StringUtils.getDigits("5");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("5", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "dT=T", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.lowerCase("");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      Locale locale1 = Locale.forLanguageTag("");
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      String string5 = locale1.getScript();
      assertNotNull(string5);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      String string6 = locale0.getDisplayVariant(locale1);
      assertNotNull(string6);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      Locale locale2 = (Locale)locale0.clone();
      assertNotNull(locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("KOR", locale2.getISO3Country());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("ko_KR", locale2.toString());
      assertEquals("KR", locale2.getCountry());
      
      boolean boolean2 = locale0.hasExtensions();
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(locale0.equals((Object)locale2));
      assertFalse(boolean2);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      String string7 = StringUtils.abbreviate((String) null, 1019);
      assertNull(string7);
      
      String string8 = StringUtils.getDigits("p:h");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 1066);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      String string0 = StringUtils.unwrap("C", 'B');
      assertNotNull(string0);
      assertEquals("C", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "C";
      charSequenceArray0[1] = (CharSequence) "C";
      charSequenceArray0[2] = (CharSequence) "C";
      charSequenceArray0[3] = (CharSequence) "C";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      
      String string2 = StringUtils.substringBefore("Illegal range. The step cannot be zero.", "1@:i\n&1'i6T");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Illegal range. The step cannot be zero.", string2);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<Locale.LanguageRange> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Locale locale0 = arrayDeque0.poll();
      assertNull(locale0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string3 = StringUtils.center(" UMHyP8wO3UyP8", 6017, "C");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("m8\"", " UMHyP8wO3UyP8", charSequenceArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("m8\" UMHyP8wO3UyP8", string4);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsOnly(charSequenceArray0[2], "Vb");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      String string5 = StringUtils.abbreviate("Illegal range. The step cannot be zero.", "m8\"", 3051, 16);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("m8\"nnot be zero.", string5);
      
      String string6 = StringUtils.getDigits("LaunchTime");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      
      boolean boolean2 = StringUtils.isAllLowerCase(charSequenceArray0[1]);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("F%[)vE(>G)rR", "F%[)vE(>G)rR", "!u");
      assertNull(stringArray0);
      
      String string0 = "Search and Replace array lengths don't match: ";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Search and Replace array lengths don't match: ", "C<kj/ XNCq V,WIQz'", 29, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 39
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[2] = (byte)4;
      String string0 = StringUtils.removeEnd("&=B,k>B", "&=B,k>B");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("&=B,k>B", "D", (int) (byte)4, (int) (byte)4);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Dk>B", string1);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("7", "]f");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "]f", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      String string0 = StringUtils.abbreviate("xk:';Gi.W", 4);
      assertNotNull(string0);
      assertEquals("x...", string0);
      
      String string1 = StringUtils.uncapitalize("x...");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("x...", string1);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      char char0 = 'I';
      String string1 = StringUtils.join(shortArray0, 'I');
      assertNotNull(string1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0I0I0I0", string1);
      assertEquals(4, shortArray0.length);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "0I0I0I0";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.stripEnd("", "Q'l*%'%v,X^ FN%<");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.trimToNull("Strings must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Strings must not be null", string4);
      
      Locale locale0 = new Locale("");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      String string5 = StringUtils.upperCase("", locale0);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      String string6 = StringUtils.substringBefore("", "tCP4P$9wtC");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(locale0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayDeque0, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(arrayDeque0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      int int1 = 16;
      String string7 = StringUtils.center(" vs ", 16, "tCP4P$9wtC");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertEquals("tCP4P$ vs tCP4P$", string7);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "tCP4P$9wtC", "");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", " pV}FP:(C&#8", 16, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 25
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "V", (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "V", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      String string0 = StringUtils.chop(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertNotNull(string0);
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details):", string0);
      
      String string1 = StringUtils.chomp(" vs ", " vs ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.strip("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "z\"nf");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      charSequenceArray0[1] = (CharSequence) "z\"nf";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", charSequenceArray0[2], 122);
      assertEquals(95, int0);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.rightPad("", (-2488), 'O');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Vector<Locale> vector1 = null;
      try {
        vector1 = new Vector<Locale>((-164));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -164
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("xh?/");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("blank_blank_blank_2014", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      String string0 = StringUtils.substring("F-q{Es7'r0v", (-2252));
      assertNotNull(string0);
      assertEquals("F-q{Es7'r0v", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "VP_D Z)Pqz3[", (-2252));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeAll("org.junitpioneer.jupiter.params.FloatRange", "org.junitpioneer.jupiter.params.FloatRange");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.getDigits("VP_D Z)Pqz3[");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("3", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.params.FloatRange", "yOLX#7^(?ozN9gqe+");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("org.junitpioneer.jupiter.params.FloatRange");
      assertFalse(boolean0);
      
      int int1 = StringUtils.compareIgnoreCase("org.junitpioneer.jupiter.params.FloatRange", "VP_D Z)Pqz3[");
      assertFalse(int1 == int0);
      assertEquals((-7), int1);
      
      String string3 = StringUtils.trimToNull("/)w [?=B;");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("/)w [?=B;", string3);
      
      String string4 = StringUtils.chop("org.junitpioneer.jupiter.params.Rangedj{t5caY");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.params.Rangedj{t5ca", string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Kz#Hx6^w94bt!y");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = new String[6];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "3";
      stringArray2[1] = "CRHvIT{\"C^$x?d1X{";
      stringArray2[2] = "3";
      stringArray2[3] = "yOLX#7^(?ozN9gqe+";
      stringArray2[4] = "3";
      stringArray2[5] = "org.junitpioneer.jupiter.params.FloatRange";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("org.junitpioneer.jupiter.params.Rangedj{t5caY", stringArray2, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 6 vs 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = StringUtils.CR;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\r", string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "Search and Replace array lengths don't match: ");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.replacePattern("7f xu,k^CXJQm|{FElN", "L8*.EQo:C`P&3", "L8*.EQo:C`P&3");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("7f xu,k^CXJQm|{FElN", string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[0];
      String string5 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string5);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (int) '+';
      intArray0[2] = (-1);
      String string6 = StringUtils.join(intArray0, '+');
      assertNotNull(string6);
      assertArrayEquals(new int[] {0, 43, (-1)}, intArray0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("0+43+-1", string6);
      assertEquals(3, intArray0.length);
      
      String string7 = StringUtils.left("0+43+-1", 43);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("0+43+-1", string7);
      
      String string8 = StringUtils.wrap("org.apache.commons.lang3.Charsets", '+');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertEquals("+org.apache.commons.lang3.Charsets+", string8);
      
      String string9 = StringUtils.removeFirst("81m1(-%4Yvv!", (String) null);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertEquals("81m1(-%4Yvv!", string9);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("A*O])~NuQ9qIb!Ide_%");
      assertNotNull(string0);
      assertEquals("A*O])~NuQ9qIb!Ide_%", string0);
      
      String string1 = StringUtils.strip((String) null, "A*O])~NuQ9qIb!Ide_%");
      assertNull(string1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 71;
      doubleArray0[1] = (-654.9890881);
      doubleArray0[2] = 1.0;
      String string2 = StringUtils.repeat((String) null, (String) null, 56);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.repeat("", (String) null, 959);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      int int0 = (-855);
      String string0 = StringUtils.center((String) null, (-855));
      assertNull(string0);
      
      String string1 = "~9eW4/9";
      String string2 = StringUtils.repeat("~9eW4/9", (String) null, (-855));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int1 = StringUtils.compare("IfJ", "IfJ", true);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("IfJ"));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      assertFalse(stack0.contains("IfJ"));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add("/sKM2B4c");
      assertFalse(stack0.contains("IfJ"));
      assertTrue(stack0.contains("/sKM2B4c"));
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[/sKM2B4c]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      boolean boolean1 = stack0.add("~9eW4/9");
      assertFalse(stack0.contains("IfJ"));
      assertTrue(stack0.contains(string1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("[/sKM2B4c, ~9eW4/9]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      
      int int2 = 194;
      boolean boolean2 = stack0.add("lLJ5[|=1V}TB/|I");
      assertFalse(stack0.contains("IfJ"));
      assertTrue(stack0.contains(string1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(3, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[/sKM2B4c, ~9eW4/9, lLJ5[|=1V}TB/|I]", stack0.toString());
      
      String string3 = "";
      int int3 = 16;
      // Undeclared exception!
      try { 
        stack0.add(16, (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16 > 3
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      String string0 = StringUtils.repeat("\"", "\"", 2700);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("6@Gph_");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("6", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("\"", "6");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      String string0 = " ";
      String string1 = "";
      String string2 = StringUtils.difference(" ", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = (-2215);
      String string3 = StringUtils.repeat("", "H&", (-2215));
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "H&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.wrapIfMissing("2", " ");
      assertNotNull(string0);
      assertEquals(" 2 ", string0);
      
      String[] stringArray0 = StringUtils.split("]+TWYr4", "\r", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.removePattern(" 2 ", "2");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("  ", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) " 2 ", (CharSequence) "  ");
      assertEquals(0, int0);
      
      String string2 = StringUtils.defaultString("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "\r", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      String string3 = StringUtils.join(doubleArray0, 'E', 0, 0);
      assertNotNull(string3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(7, doubleArray0.length);
      
      String string4 = StringUtils.overlay("", "Pwd9nHe'^RGr+2", 0, 32);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Pwd9nHe'^RGr+2", string4);
      
      String string5 = StringUtils.defaultString(" 2 ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals(" 2 ", string5);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("The Character must not be null");
      assertNotNull(string0);
      assertEquals("The Character must not be null", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      String string1 = StringUtils.trimToNull("The Character must not be null");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("The Character must not be null", string1);
      
      String string2 = ":n7i*cB";
      String string3 = "g{=._yR)!Eu";
      int int0 = StringUtils.indexOfAny((CharSequence) "The Character must not be null", "g{=._yR)!Eu");
      assertEquals(15, int0);
      
      String string4 = "}K30>BNA'5RDS5";
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("The Character must not be null", "g{=._yR)!Eu", "}K30>BNA'5RDS5");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // g{=._yR)!Eu
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "codefx", "MzeVGRyd");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("1v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "@FDjAR/`cLC'JV2j";
      char[] charArray0 = new char[8];
      charArray0[7] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'E';
      charArray0[5] = 'Y';
      charArray0[7] = 'Y';
      String string0 = StringUtils.wrapIfMissing((String) null, 'o');
      assertNull(string0);
      
      String string1 = StringUtils.trim((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      String string0 = StringUtils.strip("Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "Threshold must not be negative", (Supplier<CharSequence>) null);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("Threshold must not be negative", charSequence0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "Threshold must not be negative", '[');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "Threshold must not be negative";
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      String string1 = " ";
      String string2 = "[%g5y_cHP";
      String string3 = StringUtils.removeStart("Threshold must not be negative", "[%g5y_cHP");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string0));
      assertEquals("Threshold must not be negative", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.unwrap("Threshold must not be negative", "Threshold must not be negative");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(" ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.chop(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details):", string1);
      
      String string2 = StringUtils.chomp(" vs ", " vs ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase(". The following paths could not be deleted (see suppressed exceptions for details): ", "d%bRx3a3EoYP&<AV", " ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): ", string3);
      
      boolean boolean1 = StringUtils.isEmpty(". The following paths could not be deleted (see suppressed exceptions for details):");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int0);
      
      String string4 = StringUtils.rightPad("<CrkG?at?|$|0+uzV(", 0, "{%w~");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("<CrkG?at?|$|0+uzV(", string4);
      
      String string5 = StringUtils.leftPad(" ", 0, ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" ", string5);
      
      String string6 = StringUtils.deleteWhitespace("d%bRx3a3EoYP&<AV");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("d%bRx3a3EoYP&<AV", string6);
      
      String string7 = StringUtils.right("", 1631);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertEquals("", string7);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertNotNull(stringArray0);
      assertEquals(30, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short) (-1317);
      shortArray0[0] = (short) (-1317);
      String string0 = " ";
      String string1 = StringUtils.strip(" ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      int int0 = 4;
      String string2 = "org.apache.commons.lang3.StringUtils";
      String string3 = "Qn;$]#KY'zpTb]";
      String string4 = StringUtils.center("org.apache.commons.lang3.StringUtils", 3363, "Qn;$]#KY'zpTb]");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      // Undeclared exception!
      StringUtils.containsOnly((CharSequence) string4, "Qn;$]#KY'zpTb]");
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootLowerCase("DefaultTimeZone");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("defaulttimezone", string1);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "";
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[5] = object1;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) locale0;
      String string2 = StringUtils.join(objectArray0, 'a', (-1191), (-1191));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(8, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = StringUtils.LF;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\n", string3);
      
      String string4 = StringUtils.chomp("     ", "A");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("     ", string4);
      
      String string5 = StringUtils.SPACE;
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(" ", string5);
      
      boolean boolean2 = StringUtils.isBlank(" ");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      char[] charArray0 = new char[0];
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      String string0 = StringUtils.unwrap("\n", "\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      String string0 = StringUtils.stripAccents("!:tkIyq,p~k<~lV");
      assertNotNull(string0);
      assertEquals("!:tkIyq,p~k<~lV", string0);
      
      String string1 = StringUtils.truncate("     ", 32);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("     ", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "!:tkIyq,p~k<~lV";
      charSequenceArray0[1] = (CharSequence) "     ";
      charSequenceArray0[2] = (CharSequence) "!:tkIyq,p~k<~lV";
      charSequenceArray0[3] = (CharSequence) "!:tkIyq,p~k<~lV";
      String string2 = StringUtils.abbreviate((String) null, "     ", 20);
      assertNull(string2);
      
      String string3 = StringUtils.replaceChars("     ", "'S>Z$zKXTS", "]!>&`|h{");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("     ", string3);
      
      String string4 = StringUtils.getDigits("]!>&`|h{");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, 'E');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("!:tkIyq,p~k<~lVE     E!:tkIyq,p~k<~lVE!:tkIyq,p~k<~lVEE", string5);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "!:tkIyq,p~k<~lV", (CharSequence) "     ");
      assertEquals((-1), int0);
      
      String string6 = StringUtils.lowerCase("TzeGTST-BGtuS1D");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("tzegtst-bgtus1d", string6);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string7 = StringUtils.center("!:tkIyq,p~k<~lV", 20);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("  !:tkIyq,p~k<~lV   ", string7);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      String string0 = StringUtils.replacePattern("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      String string1 = StringUtils.overlay("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "UotpP", (-900), 16);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("UotpPneer.vintage.ExpectedExceptionExtension", string1);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      String string0 = StringUtils.substringBefore("9%_#c", "9%_#c");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\n";
      String string2 = StringUtils.strip("S*i2");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("S*i2", string2);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string3 = StringUtils.center("S*i2", 4, " ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("S*i2", string3);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "S*i2", "S*i2");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.forLanguageTag("9%_#c");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      
      boolean boolean1 = locale0.hasExtensions();
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string4 = StringUtils.abbreviate("S*i2", 4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("S*i2", string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", 1066);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      String string0 = StringUtils.replacePattern(" ", " ", "!WR(Z-=I");
      assertNotNull(string0);
      assertEquals("!WR(Z-=I", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("!WR(Z-=I");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("!WR(Z-=I");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.join((char[]) null, 'N', (-3508), (-3508));
      assertNull(string1);
      
      boolean boolean2 = StringUtils.isNumericSpace(" ");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "!WR(Z-=I";
      String string2 = StringUtils.defaultString("!WR(Z-=I", "!WR(Z-=I");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("!WR(Z-=I", string2);
      
      charSequenceArray0[4] = (CharSequence) "!WR(Z-=I";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("n;ZzL");
      assertNotNull(string0);
      assertEquals("N;ZZL", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("}\u0006", "N;ZZL");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.substringAfter("<", "Search and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("N;ZZL", '<');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string2 = StringUtils.leftPad("\"|o9{=\"|o9{=", 913, "Ucm0N_;+boN");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Ucm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+bo\"|o9{=\"|o9{=", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Ucm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+bo\"|o9{=\"|o9{=", (-1611));
      assertEquals((-1), int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfBlank("Ucm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+bo\"|o9{=\"|o9{=", supplier0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("Ucm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+bo\"|o9{=\"|o9{=", string3);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '<';
      String string4 = StringUtils.join(longArray0, '2', 46, (-1611));
      assertNotNull(string4);
      assertArrayEquals(new long[] {60L}, longArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals(1, longArray0.length);
      
      String string5 = StringUtils.truncate("...", 0);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "Ucm0N_;+boN");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.firstNonEmpty(stringArray1);
      assertNotNull(string6);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertEquals("N;ZZL", string6);
      assertEquals(1, stringArray1.length);
      
      String string7 = StringUtils.abbreviateMiddle("Search and Replace array lengths don't match: ", "Df+/4-[V$Y`;o]n!=", 46);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match: ", string7);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "@FDjAR/`cLC'JV2j";
      char[] charArray0 = new char[8];
      charArray0[7] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'E';
      charArray0[5] = 'Y';
      charArray0[7] = 'Y';
      String string0 = StringUtils.wrapIfMissing((String) null, 'o');
      assertNull(string0);
      
      String string1 = StringUtils.center(" vs ", 4044, (String) null);
      assertNotNull(string1);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      
      String string2 = StringUtils.abbreviate("\n", 4044);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 13);
      assertEquals(0, int0);
      
      String string1 = StringUtils.reverse("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.left("", 0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      Object[] objectArray0 = new Object[0];
      String string3 = StringUtils.join(objectArray0, '8');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(0, objectArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "~WSQ.N+", (CharSequence) "");
      assertTrue(boolean0);
      
      String string4 = StringUtils.join((float[]) null, '\'');
      assertNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("~WSQ.N+", '}');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("}~WSQ.N+}", string5);
      
      String string6 = StringUtils.rightPad("", 0);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      
      String string7 = StringUtils.remove("6BVf", " ,d((O/Db^w)3+I_[jh");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("6BVf", string7);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", " ,d((O/Db^w)3+I_[jh");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.replacePattern("", "", (String) null);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      
      String[] stringArray0 = StringUtils.substringsBetween("cpDT", "", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(8, stringArray0.length);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      String string0 = StringUtils.strip("Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "Threshold must not be negative", (Supplier<CharSequence>) null);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("Threshold must not be negative", charSequence0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "Threshold must not be negative", '[');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "Threshold must not be negative";
      String string1 = StringUtils.replaceOnceIgnoreCase("Threshold must not be negative", "Threshold must not be negative", "Threshold must not be negative");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("Threshold must not be negative", string1);
      
      String string2 = StringUtils.join((int[]) null, '.');
      assertNull(string2);
      
      String string3 = StringUtils.trimToNull("?&La )JLP");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("?&La )JLP", string3);
      
      String string4 = StringUtils.SPACE;
      assertNotNull(string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" ", string4);
      
      int int2 = StringUtils.indexOfAny((CharSequence) " ", "junit-pioneer");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.join((int[]) null, 'd', (-1171), 1542);
      assertNull(string5);
      
      String string6 = StringUtils.substringAfterLast((String) null, "Array element ");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, 'I');
      assertNotNull(string1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, shortArray0.length);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.stripEnd("", "Q'l*%'%v,X^ FN%<");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.trimToNull("Strings must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Strings must not be null", string4);
      
      Locale locale0 = new Locale("");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      String string5 = StringUtils.upperCase("", locale0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      String string6 = StringUtils.leftPad("13Abl]EfGkq0^b", 0, 'I');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("13Abl]EfGkq0^b", string6);
      
      String string7 = StringUtils.joinWith("d#)mmS", charSequenceArray0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("d#)mmSd#)mmSd#)mmSd#)mmSd#)mmSd#)mmS", string7);
      assertEquals(7, charSequenceArray0.length);
      
      String string8 = StringUtils.stripToNull("d#)mmS");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertEquals("d#)mmS", string8);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string9 = StringUtils.getIfBlank("13Abl]EfGkq0^b", supplier0);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertEquals("13Abl]EfGkq0^b", string9);
      
      String string10 = StringUtils.replaceChars("Array element ", "|*|QaTzDh%K[ako4~", "     ");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertEquals("Arr y element ", string10);
      
      int int1 = StringUtils.indexOfAnyBut(charSequenceArray0[0], charSequenceArray0[6]);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-1), (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceEach(" ", (String[]) null, (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      String string2 = StringUtils.abbreviate(" 3dt", (String) null, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" 3dt", string2);
      
      String string3 = StringUtils.replaceChars(" 3dt", "XHwP3ZN#c|Q5Y $r`B", " 3dt");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("dt", string3);
      
      String string4 = StringUtils.getDigits("XHwP3ZN#c|Q5Y $r`B");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("35", string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, 'L');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("L", string5);
      assertEquals(2, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "L", (CharSequence) "");
      assertEquals(1, int0);
      
      String string6 = StringUtils.lowerCase("");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      String string7 = StringUtils.center("Ff_{", 1);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Ff_{", string7);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      String string0 = StringUtils.center(" HJ_Jzw1JygRI>gm", 11, '^');
      assertNotNull(string0);
      assertEquals(" HJ_Jzw1JygRI>gm", string0);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string0 = "";
      boolean boolean0 = StringUtils.isEmpty("U'o}\"\bWIWv7");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      String string0 = StringUtils.removeAll(", PS>h", ", PS>h");
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string0);
      assertEquals("U'o}\"\bWIWv7", string0);
      assertEquals(2, objectArray0.length);
      
      String string1 = StringUtils.rightPad("\r", 22, "U'o}\"\bWIWv7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\rU'o}\"\bWIWv7U'o}\"\bWIWv", string1);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string2 = locale0.getDisplayScript();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      
      String string3 = StringUtils.lowerCase("\r", locale0);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\r", string3);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "U'o}\"\bWIWv7", (CharSequence) "\r");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.replacePattern("\"]v!nYZbTg", "U'o}\"\bWIWv7", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\"]v!nYZbTg", string4);
      
      String string5 = StringUtils.leftPad("\r", 1, "U'o}\"\bWIWv7");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("\r", string5);
      
      String string6 = StringUtils.deleteWhitespace("U'o}\"\bWIWv7");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("U'o}\"\bWIWv7", string6);
      
      String string7 = StringUtils.right("\r", 0);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("offset cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, 'G');
      assertNull(string0);
      
      String string1 = StringUtils.center("1r/[#]M7zPO8=a 9%{1r/[#]M7zPO8=a 9%{", 4044, (String) null);
      assertNotNull(string1);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      String string2 = StringUtils.right("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", 127);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", string2);
      
      int[] intArray0 = StringUtils.toCodePoints("correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertNotNull(intArray0);
      assertEquals(127, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = "";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("U'o}\"\bWIWv7", 'F');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = "Ucm0N_;+boN";
      String string3 = null;
      String string4 = StringUtils.leftPad((String) null, 0, "Ucm0N_;+boN");
      assertNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "U'o}\"\bWIWv7", (-1611));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("b", supplier0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("b", string5);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (-419L);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '2', (-928), (-921));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -928
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-2158), (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      int int0 = StringUtils.compare("'268`", "T%jF9");
      assertEquals((-45), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.substringBetween("negative", "6P^@`N");
      assertNull(string0);
      
      String string1 = StringUtils.chomp("Minimum abbreviation width is %d");
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width is %d", string1);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStart(" ", "S;");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "T%jF9", 32);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.wrapIfMissing("YR@<CA=C'=jp0DV?0", 'm');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("mYR@<CA=C'=jp0DV?0m", string3);
      
      String string4 = StringUtils.stripToEmpty("?~#/k@.!i,3PB");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("?~#/k@.!i,3PB", string4);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("T%jF9"));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "\u0000MRwm-ks]mJov>Qk'";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(9, charSequenceArray0.length);
      
      String string2 = StringUtils.substringAfter("", "Don't clear/set the same property more than once.");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("", charSequenceArray0[1], charSequenceArray0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(9, charSequenceArray0.length);
      
      String string4 = StringUtils.removeStartIgnoreCase("$o#'m35TRR.I", "\u0000MRwm-ks]mJov>Qk'");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("$o#'m35TRR.I", string4);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string5 = StringUtils.removePattern("\u0000MRwm-ks]mJov>Qk'", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("\u0000MRwm-ks]mJov>Qk'", string5);
      
      String string6 = StringUtils.abbreviateMiddle("", "#,e+b!d)%@MRrY&8*", 32);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      String[] stringArray1 = StringUtils.split("", "", 32);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      String string0 = StringUtils.repeat(';', 549);
      assertNotNull(string0);
      assertEqualsstring0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase
      assertTrue(boolean0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCaseharSequence[]) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEqualsstring1);
      
      int int0 = StringUtils.countMatches((CharSequenceharSequence
      assertEquals(1, int0);
      
      String string2 = StringUtils.normalizeSpace("/A0hA,QnZeXJH;S~1");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("/A0hA,QnZeXJH;S~1", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "/A0hA,QnZeXJH;S~1";
      charSequenceArray0[1] = (CharSequence
      String string3 = StringUtils.center(" ", 22, ';');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(";;;;;;;;;; ;;;;;;;;;;;", string3);
      
      charSequenceArray0[2] = (CharSequence) ";;;;;;;;;; ;;;;;;;;;;;";
      charSequenceArray0[3] = (CharSequence) "FgtT8N";
      charSequenceArray0[4] = (CharSequence) " ";
      boolean boolean1 = StringUtils.startsWithAny("/A0hA,QnZeXJH;S~1", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(5, charSequenceArray0.length);
      
      String string4 = StringUtils.removeIgnoreCase("FgtT8N", "FgtT8N");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.toRootUpperCase(";;;;;;;;;; ;;;;;;;;;;;");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals(";;;;;;;;;; ;;;;;;;;;;;", string5);
      
      String string6 = StringUtils.join((Object[]) null, ';');
      assertNull(string6);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[4] = ';';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {';', ';', ';', ';', ';'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(5, charArray0.length);
      
      String string7 = StringUtils.reverse("/A0hA,QnZeXJH;S~1");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("1~S;HJXeZnQ,Ah0A/", string7);
      
      boolean boolean2 = StringUtils.equals(charSequenceArray0[0], (CharSequence) "1~S;HJXeZnQ,Ah0A/");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(5, charSequenceArray0.length);
      
      String string8 = StringUtils.stripAccents("Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertEquals("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", string8);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceEach(" ", (String[]) null, (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      String string2 = StringUtils.abbreviate(" 3dt", (String) null, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" 3dt", string2);
      
      String string3 = StringUtils.replaceChars(" 3dt", "XHwP3ZN#c|Q5Y $r`B", " 3dt");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("dt", string3);
      
      String string4 = StringUtils.getDigits("XHwP3ZN#c|Q5Y $r`B");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("35", string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, 'L');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("L", string5);
      assertEquals(2, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "L", (CharSequence) "");
      assertEquals(1, int0);
      
      String string6 = StringUtils.lowerCase("");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KOR", locale1.getISO3Country());
      
      boolean boolean1 = StringUtils.isAlphanumeric("L");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.equals(charSequenceArray0[0], (CharSequence) "dt");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("x<lUl{P\"9_I+43le@", "lygyF", "K$F`8p!(AV");
      assertNotNull(string0);
      assertEquals("x<lUl{P\"9_I+43le@", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "x<lUl{P\"9_I+43le@");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(18, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("x<lUl{P\"9_I+43le@", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(18, charBuffer0.length());
      assertEquals(18, charBuffer0.capacity());
      assertEquals(18, charBuffer0.limit());
      
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "x<lUl{P\"9_I+43le@");
      assertTrue(boolean0);
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(18, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("x<lUl{P\"9_I+43le@", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(18, charBuffer0.length());
      assertEquals(18, charBuffer0.capacity());
      assertEquals(18, charBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "3");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("3", 22, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("3                     ", string1);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string2 = locale0.getDisplayScript();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      
      String string3 = StringUtils.lowerCase("Failed to get parent directory from provider", locale0);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("failed to get parent directory from provider", string3);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "3", (CharSequence) "");
      assertEquals(1, int0);
      
      String string4 = StringUtils.substringBetween("", "", "codefx");
      assertNull(string4);
      
      String string5 = StringUtils.upperCase("failed to get parent directory from provider", locale0);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("FAILED TO GET PARENT DIRECTORY FROM PROVIDER", string5);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(string3));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = vector0.add((String) null);
      assertFalse(vector0.contains(string3));
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string6 = StringUtils.leftPad("failed to get parent directory from provider", 48, "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("    failed to get parent directory from provider", string6);
      
      byte[] byteArray0 = StringUtils.getBytes("failed to get parent directory from provider", (String) null);
      assertNotNull(byteArray0);
      assertEquals(44, byteArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("13Abl]EfGkq0^b");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.compare("    failed to get parent directory from provider", "4zxo$JE0S<#6q!Ldz&");
      assertFalse(int1 == int0);
      assertEquals((-20), int1);
      
      String string7 = StringUtils.center("1276-24690646060", 53, '<');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("<<<<<<<<<<<<<<<<<<1276-24690646060<<<<<<<<<<<<<<<<<<<", string7);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string0 = StringUtils.substring("(5'XPYT6){.--", 108, 6);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("fGkq0^b", "Search and Replace array lengths don't match
      assertNull(string1);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      
      String string2 = StringUtils.upperCase("", locale0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      
      String string3 = StringUtils.replaceAll("", "@oyT#F5", "offset cannot be negative");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.leftPad("", 108, 'K');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", string4);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " ";
      String string5 = StringUtils.joinWith("Ob7#z}m2C[i]8'", objectArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" ", string5);
      assertEquals(1, objectArray0.length);
      
      String string6 = StringUtils.stripToNull(" in an array of ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("in an array of", string6);
      
      String string7 = StringUtils.removeIgnoreCase("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", "");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", string7);
      
      String string8 = StringUtils.join(objectArray0, "offset cannot be negative", 128, 108);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertEquals("", string8);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      String string0 = StringUtils.remove("F.$", 'g');
      assertNotNull(string0);
      assertEquals("F.$", string0);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      String string1 = StringUtils.removeStartIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      String string2 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(0, locale_CategoryArray0.length);
      
      String string3 = StringUtils.appendIfMissing("org.junitpioneer.vintage.ExpectedExceptionExtension", "", charSequenceArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string3);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("gqPV|c7A(,\"h*9(");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.junitpioneer.vintage.ExpectedExceptionExtension";
      String string4 = StringUtils.replacePattern("org.junitpioneer.vintage.ExpectedExceptionExtension", "Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string4);
      
      String string5 = StringUtils.remove("offset cannot be negative", '2');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("offset cannot be negative", string5);
      
      boolean boolean1 = StringUtils.isAlpha("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase("11l/LC", "org.junitpioneer.vintage.ExpectedExceptionExtension", false);
      assertEquals((-62), int0);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      String string0 = StringUtils.substringBefore("9%_#c", "9%_#c");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\n";
      String string2 = StringUtils.strip("S*i2");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("S*i2", string2);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string3 = StringUtils.center("S*i2", 4, " ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("S*i2", string3);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "S*i2", "S*i2");
      assertTrue(boolean0);
      
      String string4 = StringUtils.rotate("K`V", 10);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("VK`", string4);
      
      String string5 = StringUtils.rightPad("org.apache.commons.lang3.StringUtils", 4, "offset cannot be negative");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      
      String string6 = StringUtils.appendIfMissingIgnoreCase("org.apache.commons.lang3.StringUtils", "\n", charSequenceArray0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.StringUtils\n", string6);
      assertEquals(5, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "VK`", 4);
      assertEquals((-1), int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode1);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode1));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertEquals(2, enumSet0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_FilteringMode1));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertEquals(2, enumSet0.size());
      
      String string7 = StringUtils.join(iterator0, "org.apache.commons.lang3.StringUtils");
      assertNotNull(string7);
      assertTrue(enumSet0.contains(locale_FilteringMode1));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertEquals("EXTENDED_FILTERINGorg.apache.commons.lang3.StringUtilsREJECT_EXTENDED_RANGES", string7);
      assertEquals(2, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, objectArray0.length);
      
      String string1 = StringUtils.rightPad("\r", 22, "U'o}\"\bWIWv7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\rU'o}\"\bWIWv7U'o}\"\bWIWv", string1);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string2 = locale0.getDisplayScript();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      
      String string3 = StringUtils.lowerCase("\r", locale0);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\r", string3);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "\r");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringBetween((String) null, (String) null, "\"]v!nYZbTg");
      assertNull(string4);
      
      String string5 = StringUtils.replaceAll(";yS", " vs ", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals(";yS", string5);
      
      String string6 = StringUtils.leftPad("v.o3Vax8 uqzA=@3B2E", 2041, '?');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.joinWith("\"]v!nYZbTg", objectArray0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      assertEquals(1, objectArray0.length);
      
      String string8 = StringUtils.stripToNull("`j0hh4pDof/*57N");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertEquals("`j0hh4pDof/*57N", string8);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.reverse("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("~WSQ+", "     ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("~WSQ+", string2);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "*p5$4");
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("     ", "~WSQ+");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rotate("     ", (-2597));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("     ", string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("     ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string4 = StringUtils.getIfBlank("     ", supplier0);
      assertNull(string4);
      
      boolean boolean2 = StringUtils.isEmpty("~WSQ+");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("     "));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      String string5 = StringUtils.join((List<?>) vector0, "C,(zSyv", 6, 6);
      assertNotNull(string5);
      assertFalse(vector0.contains("     "));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      String string0 = StringUtils.repeat(';', 549);
      assertNotNull(string0);
      assertEqualsstring0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase
      assertTrue(boolean0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCaseharSequence[]) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEqualsstring1);
      
      int int0 = StringUtils.countMatches((CharSequenceharSequence
      assertEquals(1, int0);
      
      String string2 = StringUtils.normalizeSpace("/A0hA,QnZeXJH;S~1");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("/A0hA,QnZeXJH;S~1", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "/A0hA,QnZeXJH;S~1";
      charSequenceArray0[1] = (CharSequence
      String string3 = StringUtils.center(" ", 22, ';');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(";;;;;;;;;; ;;;;;;;;;;;", string3);
      
      charSequenceArray0[2] = (CharSequence) ";;;;;;;;;; ;;;;;;;;;;;";
      charSequenceArray0[3] = (CharSequence) "FgtT8N";
      charSequenceArray0[4] = (CharSequence) " ";
      boolean boolean1 = StringUtils.startsWithAny("/A0hA,QnZeXJH;S~1", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(5, charSequenceArray0.length);
      
      String string4 = StringUtils.removeIgnoreCase("FgtT8N", "FgtT8N");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.toRootUpperCase(";;;;;;;;;; ;;;;;;;;;;;");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals(";;;;;;;;;; ;;;;;;;;;;;", string5);
      
      String string6 = StringUtils.rightPad("RepeatFailedTestExtension", 1, ';');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("RepeatFailedTestExtension", string6);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "RepeatFailedTestExtension", charSequenceArray0[0]);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      String string0 = StringUtils.strip("Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "Threshold must not be negative", (Supplier<CharSequence>) null);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("Threshold must not be negative", charSequence0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "Threshold must not be negative", '[');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "Threshold must not be negative";
      String string1 = StringUtils.replaceOnceIgnoreCase("Threshold must not be negative", "Threshold must not be negative", "Threshold must not be negative");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("Threshold must not be negative", string1);
      
      String string2 = StringUtils.join((int[]) null, '.');
      assertNull(string2);
      
      String string3 = StringUtils.trimToNull("?&La )JLP");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("?&La )JLP", string3);
      
      String string4 = StringUtils.SPACE;
      assertNotNull(string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" ", string4);
      
      int int2 = StringUtils.indexOfAny((CharSequence) " ", "junit-pioneer");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.replacePattern((String) null, (String) null, "q~.=OE?,)aLe:FWL");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      String string0 = StringUtils.replaceChars("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceEach("ExpectedException", (String[]) null, (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ExpectedException", string1);
      
      String string2 = StringUtils.capitalize("\r");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\r", string2);
      
      String string3 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", "", (-1211));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      
      String string4 = StringUtils.replaceChars(",{ ", "/)w [?=B;", "Minimum abbreviation width with offset is %d");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(",{i", string4);
      
      String string5 = StringUtils.getDigits("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "lpid$^5hwnD|KsX?", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals((-1), int0);
      
      String string6 = StringUtils.lowerCase(";=Q7'G+]*= }IYQi");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals(";=q7'g+]*= }iyqi", string6);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KR", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      
      boolean boolean1 = locale0.hasExtensions();
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("x;kU", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("1>w0-zMr_J7uRg!F", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      int int0 = 0;
      String string0 = "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension";
      String string1 = StringUtils.replacePattern("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension");
      assertTrue(boolean0);
      
      String string2 = "org.junitpioneer.jupiter.params.IntRange";
      String string3 = StringUtils.replaceEach("org.junitpioneer.jupiter.params.IntRange", (String[]) null, (String[]) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.params.IntRange", string3);
      
      String string4 = StringUtils.capitalize("");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.junitpioneer.jupiter.params.IntRange", "lpid$^5hwnD|KsX?", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 18
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      String string0 = StringUtils.removeEnd("y", "\r");
      assertNotNull(string0);
      assertEquals("y", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "\r");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.chomp("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", string1);
      
      boolean boolean0 = StringUtils.isEmpty("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("y", "I^ZyV<\"EAKcw6e)", "...");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("y", string2);
      
      String string3 = StringUtils.toRootLowerCase("Locale must not be null13Abl]E");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("locale must not be null13abl]e", string3);
      
      String string4 = StringUtils.replace("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", "...", "^:0'aYa");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", string4);
      
      boolean boolean1 = StringUtils.startsWithAny("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.deleteWhitespace("y");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("y", string5);
      
      String string6 = StringUtils.replacePattern("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", "\r", (String) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string7 = StringUtils.wrap("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", '5');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("5Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range5", string7);
      
      charSequenceArray0[0] = (CharSequence) "5Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range5";
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = (CharSequence) "\r";
      CharSequence charSequence1 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNotNull(charSequence1);
      assertTrue(charSequence1.equals((Object)string7));
      assertFalse(charSequence1.equals((Object)string0));
      assertFalse(charSequence1.equals((Object)string4));
      assertFalse(charSequence1.equals((Object)string2));
      assertFalse(charSequence1.equals((Object)string3));
      assertFalse(charSequence1.equals((Object)string5));
      assertFalse(charSequence1.equals((Object)string1));
      assertFalse(charSequence1.equals((Object)string6));
      assertEquals("5Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range5", charSequence1);
      assertEquals(3, charSequenceArray0.length);
      
      String string8 = StringUtils.substringAfterLast("@4[%8pRv", "9h");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)charSequence1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "5Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range5", (CharSequence) "");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range");
      assertNotNull(intArray0);
      assertEquals(108, intArray0.length);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string9 = StringUtils.EMPTY;
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)charSequence1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertEquals("", string9);
      
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "^:0'aYa";
      charSequenceArray1[2] = (CharSequence) "...";
      charSequenceArray1[3] = (CharSequence) "y";
      charSequenceArray1[4] = (CharSequence) "y";
      int int1 = StringUtils.indexOfDifference(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(6, charSequenceArray1.length);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      String string0 = StringUtils.unwrap("Object varargs must not be null", "");
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      String string0 = StringUtils.removeEnd("W%nSgT|A", "\r");
      assertNotNull(string0);
      assertEquals("W%nSgT|A", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "\r");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.chomp("Expected exactly one anno:ation to provide an ArgumentSourcr, found %d.org.junitpioneer.jupiter.params.Jange", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exactly one anno:ation to provide an ArgumentSourcr, found %d.org.junitpioneer.jupiter.params.Jange", string1);
      
      boolean boolean0 = StringUtils.isEmpty("Expected exactly one anno:ation to provide an ArgumentSourcr, found %d.org.junitpioneer.jupiter.params.Jange");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((int[]) null, 'L');
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("I^ZyV<\"EAKcw6e)", '\\');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\\I^ZyV<\"EAKcw6e)\\", string3);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("FF[", "v.o3Vax8 uqzA=@3B2E", 20);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      int int0 = StringUtils.indexOfAny((CharSequence) "I^ZyV<\"EAKcw6e)", charArray0);
      assertArrayEquals(new char[] {'L', 'L', '\\', '\\'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("A(~f48", ".;_@o{");
      assertNotNull(string0);
      assertEquals("A(~f48", string0);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "y\r";
      stringArray0[1] = "Minimum abbreviation width with offset is %d";
      stringArray0[2] = "Test '%s' was supposed to run no longer than %d ms but ran %d ms.";
      stringArray0[3] = ", Length: ";
      stringArray0[4] = "Array element ";
      stringArray0[5] = "Minimum abbreviation width is %d";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string0);
      assertEquals("y\r", string0);
      assertEquals(6, stringArray0.length);
      
      String string1 = StringUtils.truncate("io", 2, 2);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.left((String) null, 2);
      assertNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Array element ", "Minimum abbreviation width with offset is %d", 9);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width with offset is %d", 2);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) null);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "io", (String) null);
      assertTrue(boolean0);
      
      int int3 = StringUtils.countMatches((CharSequence) "y\r", 'T');
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("Minimum abbreviation width with offset is %d"));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      String string3 = StringUtils.join((List<?>) vector0, 'T', 9, (-1));
      assertNotNull(string3);
      assertFalse(vector0.contains("Minimum abbreviation width with offset is %d"));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      String string0 = StringUtils.rotate("", (-1915));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "x|y]", (CharSequence) "");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 13);
      assertEquals(0, int0);
      
      String string1 = StringUtils.reverse("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("~WSQ+", "     ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("~WSQ+", string2);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.LF;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\n", string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "~WSQ+", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string4);
      assertEquals(0, stringArray0.length);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 13;
      intArray0[1] = 5;
      intArray0[2] = (-1);
      intArray0[3] = 13;
      intArray0[4] = (-1);
      intArray0[5] = 5;
      intArray0[6] = 0;
      intArray0[7] = 5;
      String string5 = StringUtils.join(intArray0, '(');
      assertNotNull(string5);
      assertArrayEquals(new int[] {13, 5, (-1), 13, (-1), 5, 0, 5}, intArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("13(5(-1(13(-1(5(0(5", string5);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      String string0 = " ";
      String string1 = "";
      String string2 = StringUtils.difference(" ", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string3 = "maxWith cannot beDnegative";
      String string4 = StringUtils.abbreviateMiddle("{}", "maxWith cannot beDnegative", (-468));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("{}", string4);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      int int1 = (-1540);
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((-1540));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("13Abl]E", "13Abl]E");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "13Abl]E", (String) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("org.apache.commons.lang3.RegExUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.RegExUtils", string1);
      
      String string2 = StringUtils.stripStart((String) null, "13Abl]E");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("FtGTp", "FtGTp", 56);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string3 = StringUtils.strip((String) null, "Comparator should not be null.");
      assertNull(string3);
      
      String string4 = StringUtils.center("13Abl]E", (-440), "J=7wy&");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("13Abl]E", string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, "|h~`M{ciP6");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("|h~`M{ciP6", string5);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "|h~`M{ciP6", (CharSequence) "Q'l*%'%v", 71);
      assertEquals(10, int0);
      
      boolean boolean1 = StringUtils.containsWhitespace("J=7wy&");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "|h~`M{ciP6", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.leftPad("lh)rGR]X|rn", (-1337), '5');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("lh)rGR]X|rn", string6);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1582));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootLowerCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = StringUtils.join((int[]) null, '=', 899, 9);
      assertNull(string2);
      
      String string3 = StringUtils.prependIfMissing("", charSequenceArray0[5], charSequenceArray0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(6, charSequenceArray0.length);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(""));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      assertFalse(arrayDeque0.contains(""));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0, locale_FilteringMode0);
      assertNotNull(list1);
      assertFalse(list1.contains(""));
      assertFalse(arrayDeque0.contains(""));
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) stack0);
      assertNotNull(list2);
      assertFalse(stack0.contains(""));
      assertFalse(list2.contains(""));
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotSame(vector0, vector1);
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(vector0.equals((Object)vector1));
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        arrayList0.subList((-1), 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string0 = StringUtils.swapCase("_Ui<A#42>5Z/3yEqQ ");
      assertNotNull(string0);
      assertEquals("_uI<a#42>5z/3YeQq ", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("_uI<a#42>5z/3YeQq ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_uI<a#42>5z/3YeQq ";
      stringArray0[1] = "_uI<a#42>5z/3YeQq ";
      stringArray0[2] = "_uI<a#42>5z/3YeQq ";
      stringArray0[3] = "_Ui<A#42>5Z/3yEqQ ";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_", string1);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      int int0 = StringUtils.compare("'268`", "T%jF9");
      assertEquals((-45), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.prependIfMissingIgnoreCase("\u0000MRwm-ks]mJov>Qk'", "\u0000MRwm-ks]mJov>Qk'", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("\u0000MRwm-ks]mJov>Qk'", string0);
      assertEquals(7, charSequenceArray0.length);
      
      charSequenceArray0[0] = (CharSequence) "\u0000MRwm-ks]mJov>Qk'";
      charSequenceArray0[1] = (CharSequence) "'268`";
      charSequenceArray0[2] = (CharSequence) "'268`";
      charSequenceArray0[3] = (CharSequence) "T%jF9";
      charSequenceArray0[4] = (CharSequence) "T%jF9";
      charSequenceArray0[5] = (CharSequence) "T%jF9";
      String string1 = StringUtils.substringAfter("'268`", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[6] = (CharSequence) "";
      String string2 = StringUtils.appendIfMissingIgnoreCase("'268`", "T%jF9", charSequenceArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("'268`", string2);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.removeStartIgnoreCase((String) null, "#:*it1?C%");
      assertNull(string3);
      
      String string4 = StringUtils.center("3dt}x$,k{`", 2455, "T%jF9");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isMixedCase("'268`");
      assertFalse(boolean0);
      
      String string5 = StringUtils.rightPad((String) null, 8, '/');
      assertNull(string5);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(charSequenceArray0[3], (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      String string0 = StringUtils.stripStart("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", (-3607));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1115);
      String string2 = StringUtils.toRootLowerCase("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.replace("", "", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string4 = StringUtils.removePattern("", "^bkf*s}%NXH%ARh");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.abbreviateMiddle((String) null, (String) null, (short) (-1115));
      assertNull(string5);
      
      String[] stringArray1 = StringUtils.split("", "LX*&9AI3q/vC", 635);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", ";9O&;y2$>ak", (-4031));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      String string0 = StringUtils.substring("F-q{Es7'r0v", (-2252));
      assertNotNull(string0);
      assertEquals("F-q{Es7'r0v", string0);
      
      String string1 = StringUtils.leftPad("VP_D Z)Pqz3[", (-2252));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("VP_D Z)Pqz3[", string1);
      
      int[] intArray0 = new int[4];
      intArray0[1] = (-2252);
      intArray0[1] = (-2252);
      intArray0[2] = (-2252);
      intArray0[3] = (-2252);
      boolean boolean0 = StringUtils.isEmpty("VP_D Z)Pqz3[");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "F-q{Es7'r0v", (CharSequence) "VP_D Z)Pqz3[");
      assertEquals(12, int0);
      
      String string2 = StringUtils.rightPad("13Abl]E13Abl]E", (-2252), "F-q{Es7'r0v");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("13Abl]E13Abl]E", string2);
      
      String string3 = StringUtils.leftPad("/)w [?=B;", (-1119), "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("/)w [?=B;", string3);
      
      String string4 = StringUtils.deleteWhitespace("F-q{Es7'r0v");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("F-q{Es7'r0v", string4);
      
      String string5 = StringUtils.right("offset cannot be negative", 256);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("offset cannot be negative", string5);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("     offset cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      String string0 = StringUtils.toRootLowerCase("<Arm>!%su");
      assertNotNull(string0);
      assertEquals("<arm>!%su", string0);
      
      String string1 = StringUtils.replace("<arm>!%su", "~@Y9MW+C!uAzbT=", "Locale must not be null13Abl]E");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("<arm>!%su", string1);
      
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrap("~@Y9MW+C!uAzbT=", 'g');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("g~@Y9MW+C!uAzbT=g", string2);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence1);
      
      String string3 = StringUtils.substringAfterLast("~@Y9MW+C!uAzbT=", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\r", (CharSequence) "...");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string4 = StringUtils.EMPTY;
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The Character must not be null";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("The Character must not be null", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("tk4dR<r>-_");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("tk4dR<r>-_", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("ArMK+<p6{|=;nRv} 5");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      String string0 = StringUtils.deleteWhitespace("Minimum abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("Minimumabbreviationwidthis%d", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Minimumabbreviationwidthis%d", (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Minimumabbreviationwidthis%d", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("The Character must not be null");
      assertNotNull(string0);
      assertEquals("The Character must not be null", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.substring("The Character must not be null", 6, 10);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("arac", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "6o8F-";
      stringArray0[0] = "arac";
      stringArray0[2] = "Object varargs must not be null";
      stringArray0[3] = "arac";
      String string2 = StringUtils.replaceEachRepeatedly("6o8F-", stringArray0, stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("6o8F-", string2);
      assertEquals(4, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("6o8F-", "", "Oy711q|o.c");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.replaceEachRepeatedly("po", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("po", string0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string0 = StringUtils.substring("(5'XPYT6){.--", 108, 6);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = " ";
      stringArray0[1] = "(5'XPYT6){.--";
      stringArray0[2] = "";
      stringArray0[3] = "(5'XPYT6){.--";
      stringArray0[4] = " ";
      stringArray0[5] = "(5'XPYT6){.--";
      stringArray0[6] = "(5'XPYT6){.--";
      stringArray0[7] = "Object varargs must not be null";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("hDefaultLocale", "!xQ0SgLj3M|O7{");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("!xQ0SgLj3M|O7{", '!');
      assertNotNull(string0);
      assertEquals("!xQ0SgLj3M|O7{!", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("\"52GC7\"1!");
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((Object[]) null, 'B', 53, 53);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1115);
      shortArray0[1] = (short) (-2342);
      shortArray0[2] = (short) (-1306);
      String string2 = StringUtils.stripStart("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", (int) (short) (-1115));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.strip("lh)rGR]X|rn", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("lh)rGR]X|rn", string3);
      
      char[] charArray0 = new char[0];
      String string4 = StringUtils.join(charArray0, '`');
      assertNotNull(string4);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals(0, charArray0.length);
      
      boolean boolean1 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      
      String string5 = StringUtils.deleteWhitespace("");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.StringUtils", "", 171);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string6);
      
      String[] stringArray1 = StringUtils.split((String) null, "org.apache.commons.lang3.StringUtils", (int) (short) (-1306));
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(74, 74);
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(74));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = hashSet0.add("ArMK+<p6{|=;n`v}45");
      assertFalse(hashSet0.contains(74));
      assertTrue(hashSet0.contains("ArMK+<p6{|=;n`v}45"));
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = hashSet0.add("ArMK+<p6{|=;n`v}45");
      assertFalse(hashSet0.contains(object1));
      assertTrue(hashSet0.contains("ArMK+<p6{|=;n`v}45"));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      boolean boolean2 = hashSet0.add(object0);
      assertFalse(hashSet0.contains(object1));
      assertTrue(hashSet0.contains("ArMK+<p6{|=;n`v}45"));
      assertNotSame(object0, object1);
      assertFalse(object0.equals((Object)object1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      Locale.Category[] locale_CategoryArray0 = Locale.Category.values();
      assertNotNull(locale_CategoryArray0);
      assertEquals(2, locale_CategoryArray0.length);
      
      Locale.Category[] locale_CategoryArray1 = Locale.Category.values();
      assertNotNull(locale_CategoryArray1);
      assertNotSame(locale_CategoryArray1, locale_CategoryArray0);
      assertFalse(locale_CategoryArray1.equals((Object)locale_CategoryArray0));
      assertEquals(2, locale_CategoryArray1.length);
      
      boolean boolean3 = hashSet0.add("ArMK+<p6{|=;n`v}45");
      assertFalse(hashSet0.contains(object1));
      assertTrue(hashSet0.contains("ArMK+<p6{|=;n`v}45"));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, '^');
      assertNotNull(string0);
      assertFalse(hashSet0.contains(object1));
      assertTrue(hashSet0.contains("ArMK+<p6{|=;n`v}45"));
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      
      boolean boolean4 = hashSet0.add(object1);
      assertFalse(hashSet0.contains(74));
      assertTrue(hashSet0.contains(object1));
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      assertFalse(hashSet0.isEmpty());
      assertEquals(3, hashSet0.size());
      
      char[] charArray0 = new char[0];
      boolean boolean5 = StringUtils.containsOnly((CharSequence) "ArMK+<p6{|=;n`v}45", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5);
      assertEquals(0, charArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = object1;
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "java.lang.Object@5384120b^ArMK+<p6{|=;n`v}45";
      objectArray0[4] = (Object) locale_Category0;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[5] = object2;
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceEach(" ", (String[]) null, (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      String string2 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split("@FDjAR/`cLC'JV2j", 'H');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) null, charSequenceArray0[1]);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, "Don't clear/set the same property more than once.", 623);
      assertNull(stringArray2);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparator("-p=&8gvMYTZ9b]kwXE", " ", 623);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray0);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(1, stringArray3.length);
      
      String string3 = StringUtils.rotate("maxWith cannot be negative", 322);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("e negativemaxWith cannot b", string3);
      
      int int1 = StringUtils.compare("@FDjAR/`cLC'JV2j", (String) null);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "The Character must not be null", (CharSequence) "The Character must not be null");
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Vector<String> vector0 = new Vector<String>(0, 1610);
      assertNotNull(vector0);
      assertFalse(vector0.contains(""));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      
      String string1 = StringUtils.normalizeSpace("Failed to delete temp directory ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Failed to delete temp directory", string1);
      
      String string2 = StringUtils.truncate("FgtT8N", (int) (byte)4);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("FgtT", string2);
      
      String string3 = StringUtils.CR;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\r", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      boolean boolean0 = StringUtils.startsWithAny("\r", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string4 = StringUtils.deleteWhitespace("Failed to create custom temp directory");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Failedtocreatecustomtempdirectory", string4);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      String string0 = StringUtils.trimToNull(";");
      assertNotNull(string0);
      assertEquals(";", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "n", "n");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "n", (CharSequence) ";", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      String string0 = StringUtils.removeEnd("y", "\r");
      assertNotNull(string0);
      assertEquals("y", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "\r");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.chomp("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", string1);
      
      boolean boolean0 = StringUtils.isEmpty("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("N;ZZL", "Hw@=I9(r");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.stripStart("```````````````````````````````````````````````````````maxWith cannot beDnegative", "N;ZZL");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("```````````````````````````````````````````````````````maxWith cannot beDnegative", string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Hw@=I9(r", "     offset cannot be negative", 321);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.strip("```````````````````````````````````````````````````````maxWith cannot beDnegative", "Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("```````````````````````````````````````````````````````maxWith cannot beDneg", string3);
      
      String string4 = StringUtils.center("I^ZyV<\"EAKcw6e)", 321, "\"|o9{=\"|o9{=");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|oI^ZyV<\"EAKcw6e)\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o9{=\"|o", string4);
      
      String string5 = StringUtils.join((Object[]) stringArray1, "Minimum abbreviation width with offset is %d");
      assertNotNull(string5);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Hw@=I9(r", string5);
      assertEquals(1, stringArray1.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("v'aEi:KdOw(H*#^|<e", supplier0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("v'aEi:KdOw(H*#^|<e", string6);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "N;ZZL", (CharSequence) "L>yG", 1);
      assertEquals((-1), int0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("Hw@=I9(r", "Search and Replace array lengths don't match: ");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      
      String string7 = StringUtils.rotate("Aborting to protect against StackOverflowError - output of one loop is the input of another", 59);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("kOverflowError - output of one loop is the input of anotherAborting to protect against Stac", string7);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ")|D{.eqKl2mwQn", (CharSequence) ")|D{.eqKl2mwQn", 5);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceEach(" ", (String[]) null, (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      String string2 = StringUtils.abbreviate(" 3dt", (String) null, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" 3dt", string2);
      
      String string3 = StringUtils.replaceChars(" 3dt", "", " 3dt");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" 3dt", string3);
      
      String string4 = StringUtils.getDigits("");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, 'L');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("L", string5);
      assertEquals(2, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "L", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.lowerCase("");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("KR", locale1.getCountry());
      
      String string7 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string7);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "@FDjAR/`cLC'JV2j", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      String string0 = StringUtils.chomp("S*i2");
      assertNotNull(string0);
      assertEquals("S*i2", string0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String[] stringArray0 = new String[1];
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.swapCase("f9\"EdBfTq6FO!");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("F9\"eDbFtQ6fo!", string2);
      
      String string3 = "\\u\\uExceptionWasThrown";
      String string4 = StringUtils.replaceChars("JqQ#c", "Failed to delete temp directory ", string3);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("JqQ#", string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "JqQ#c", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.chomp(",9ZTKM.1t{f", "2s/WDXL,v62PB9");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(",9ZTKM.1t{f", string5);
      
      String string6 = StringUtils.appendIfMissing("p?", "p?", stringArray0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("p?", string6);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      String string0 = StringUtils.joinWith((String) null, objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeFirst("Strings must not be null", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      
      String string2 = StringUtils.strip("Strings must not be null", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Strings must not be null", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Strings must not be null", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.replaceFirst("cyH0]99i:#gea E9'&", "", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("cyH0]99i:#gea E9'&", string3);
      
      String string4 = StringUtils.joinWith("Strings must not be null", charSequenceArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", "org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(""));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean3 = hashSet0.add("");
      assertTrue(hashSet0.contains(""));
      assertFalse(hashSet0.contains("Strings must not be null"));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      String string5 = StringUtils.join((Iterable<?>) hashSet0, '^');
      assertNotNull(string5);
      assertTrue(hashSet0.contains(""));
      assertFalse(hashSet0.contains("Strings must not be null"));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("Strings must not be null"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean4 = linkedHashSet0.add(object1);
      assertFalse(linkedHashSet0.contains("Strings must not be null"));
      assertTrue(linkedHashSet0.contains(object1));
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = '^';
      boolean boolean5 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'S', '^'}, charArray0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      assertEquals(2, charArray0.length);
      
      String string6 = StringUtils.joinWith("TST~vdf%QE_@", charSequenceArray0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertEquals(1, charSequenceArray0.length);
      
      String string7 = StringUtils.stripToNull("");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.substringBetween("\r", "c?i<RVDVM)a");
      assertNull(string1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "lgj<D@^ROE.+", (CharSequence) "lgj<D@^ROE.+");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      String string0 = StringUtils.chop("Cg5;oO2Ab-uf!iF8xO");
      assertNotNull(string0);
      assertEquals("Cg5;oO2Ab-uf!iF8x", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Cg5;oO2Ab-uf!iF8xO", (CharSequence) "Cg5;oO2Ab-uf!iF8x");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 13);
      assertEquals(0, int0);
      
      String string1 = StringUtils.reverse("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("~WSQ+", "     ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("~WSQ+", string2);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "*p5$4");
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("     ", "~WSQ+");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rotate("     ", (-2597));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("     ", string3);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("", "     ");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
      
      String string4 = StringUtils.substringAfter("tDe", "Illegal range. Equal from and to will produce an empty range.");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String[] stringArray3 = new String[6];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      stringArray3[0] = "tDe";
      stringArray3[1] = "/>UN*&< ASEyH";
      stringArray3[2] = "";
      stringArray3[3] = "";
      stringArray3[4] = "";
      stringArray3[5] = "";
      String[] stringArray4 = StringUtils.stripAll(stringArray3);
      assertNotNull(stringArray4);
      assertNotSame(stringArray4, stringArray1);
      assertNotSame(stringArray4, stringArray0);
      assertNotSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray2);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray4);
      assertNotSame(stringArray3, stringArray1);
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray0));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertEquals(6, stringArray4.length);
      assertEquals(6, stringArray3.length);
      
      String string5 = StringUtils.rightPad("", 0);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.upperCase("[e l'p'KE,{'ju");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("[E L'P'KE,{'JU", string6);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      String string0 = StringUtils.right((String) null, 0);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("2FY(f}cv.W.Td9^");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      String string1 = StringUtils.right("1,", (-1836));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      String string0 = StringUtils.right("", 57);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 57);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      String string0 = StringUtils.right("%_mqN#XoVq\"w?#", (-1352));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "%_mqN#XoVq\"w?#", (-1352));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      String string0 = StringUtils.center("Array and element cannot both be null", 321);
      assertNotNull(string0);
      assertEquals("                                                                                                                                              Array and element cannot both be null                                                                                                                                              ", string0);
      
      int int0 = StringUtils.compareIgnoreCase("lqzAhh620\":\"", "                                                                                                                                              Array and element cannot both be null                                                                                                                                              ", false);
      assertEquals(76, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("lqzAhh620\":\"");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("lqzAhh620\":\"", "lqzAhh620\":\"", " 3dt");
      assertNull(stringArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("Array and element cannot both be null", supplier0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Array and element cannot both be null", string1);
      
      String string2 = StringUtils.strip("\r");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isEmpty("Array and element cannot both be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.rightPad(" ", 321, "\r");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" \r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", string3);
      
      String string4 = StringUtils.leftPad("`n[Zb4C$T*QKI", 782, " ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals`n[Zb4C$T*QKI", string4);
      
      String string5 = StringUtils.deleteWhitespace(" \r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      String string6 = StringUtils.right("=CHt!I^<2xt&&)X]H", 782);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("=CHt!I^<2xt&&)X]H", string6);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("a<xB}^S");
      assertNotNull(stringArray1);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      String string0 = StringUtils.mid("2A", Integer.MIN_VALUE, 129);
      assertNotNull(string0);
      assertEquals("2A", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("2A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rotate("uss|$-&,|6WX", 6);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("&,|6WXuss|$-", string1);
      
      String string2 = StringUtils.toRootLowerCase("&,|6WXuss|$-");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("&,|6wxuss|$-", string2);
      
      String string3 = StringUtils.replace("!a%UJf", "", "nSY'^f{0_H/");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("!a%UJf", string3);
      
      String string4 = StringUtils.LF;
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\n", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "&,|6WXuss|$-";
      charSequenceArray0[1] = (CharSequence) "nSY'^f{0_H/";
      boolean boolean0 = StringUtils.startsWithAny("\n", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string5 = StringUtils.deleteWhitespace("nSY'^f{0_H/");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("nSY'^f{0_H/", string5);
      
      String string6 = StringUtils.replacePattern("", "\r", " 3dt");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "!a%UJf", (CharSequence) "nSY'^f{0_H/");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("!a%UJf");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {33, 97, 37, 85, 74, 102}, intArray0);
      assertEquals(6, intArray0.length);
      
      String string7 = StringUtils.mid("&4(JQ+", 6, 122);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "&4(JQ+");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.substringsBetween("3dt}x$,k{`", " but was: ", "pD/6K;3");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootLowerCase("13Abl]E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("13abl]e", string1);
      
      String string2 = StringUtils.stripToNull("13abl]e");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("13abl]e", string2);
      
      String string3 = StringUtils.wrap("13abl]e", "28,NtLJz/)w [?=B;");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "13abl]e";
      charSequenceArray0[1] = (CharSequence) "28,NtLJz/)w [?=B;";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      String string4 = StringUtils.removeStart((String) null, "13abl]e");
      assertNull(string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) "3dt", 20);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.wrapIfMissing((String) null, 'm');
      assertNull(string5);
      
      String string6 = StringUtils.stripToEmpty("3dt");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("3dt", string6);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "{", (CharSequence) "{");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[1] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[2] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[3] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[4] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[5] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[6] = (CharSequence) "F-q{Es7'r0v";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[5], (CharSequence) "\n");
      assertEquals(11, int0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(""));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = stack0.retainAll(vector0);
      assertFalse(stack0.contains(""));
      assertFalse(vector0.contains(""));
      assertFalse(boolean0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      String string1 = StringUtils.join((List<?>) stack0, '2', 0, 0);
      assertNotNull(string1);
      assertFalse(stack0.contains(""));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      assertNotNull(predicate0);
      
      String string2 = StringUtils.toRootLowerCase("Strings must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("strings must not be null", string2);
      
      boolean boolean1 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.deleteWhitespace("Minimum abbreviation width is %d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Minimumabbreviationwidthis%d", string3);
      
      String string4 = StringUtils.replacePattern("", "", "hfov.~}8F7");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("hfov.~}8F7", string4);
      
      String string5 = StringUtils.replace("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", "hfov.~}8F7", "Arguments cannot both be null");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isEmpty("hfov.~}8F7");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Minimumabbreviationwidthis%d");
      assertFalse(int1 == int0);
      assertEquals(28, int1);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("org.junipioneer.jupiter.params.RngeSourceProvider", (String) null);
      assertNotNull(string0);
      assertEquals("org.junipioneer.jupiter.params.RngeSourceProvider", string0);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      String string0 = StringUtils.chomp("org.apache.commons.lang3.CharUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.CharUtils";
      String string1 = StringUtils.strip("@~.hGC{", "t+7eLxy\"yO-t!4a");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("@~.hGC{", string1);
      
      charSequenceArray0[1] = (CharSequence) "@~.hGC{";
      charSequenceArray0[2] = (CharSequence) "t+7eLxy\"yO-t!4a";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.CharUtils";
      charSequenceArray0[4] = (CharSequence) "t+7eLxy\"yO-t!4a";
      charSequenceArray0[5] = (CharSequence) "@~.hGC{";
      charSequenceArray0[6] = (CharSequence) "org.apache.commons.lang3.CharUtils";
      charSequenceArray0[7] = (CharSequence) "org.apache.commons.lang3.CharUtils";
      charSequenceArray0[8] = (CharSequence) "org.apache.commons.lang3.CharUtils";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[1], charSequenceArray0[7], (-1272));
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      String string2 = StringUtils.appendIfMissing("org.apache.commons.lang3.CharUtils", charSequenceArray0[5], charSequenceArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.CharUtils", string2);
      assertEquals(9, charSequenceArray0.length);
      
      String string3 = StringUtils.substringBefore("maxWith cannot be negative", "org.apache.commons.lang3.CharUtils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("maxWith cannot be negative", string3);
      
      String string4 = StringUtils.overlay("9jER0}P:0+", "maxWith cannot be negative", 7, 64);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("9jER0}maxWith cannot be negative", string4);
      
      boolean boolean1 = StringUtils.isAlpha(charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "9jER0}P:0+";
      stringArray0[1] = "maxWith cannot be negative";
      stringArray0[2] = "org.apache.commons.lang3.CharUtils";
      stringArray0[3] = "org.apache.commons.lang3.CharUtils";
      stringArray0[4] = "9jER0}P:0+";
      stringArray0[5] = "org.apache.commons.lang3.CharUtils";
      stringArray0[6] = "@~.hGC{";
      stringArray0[7] = "org.apache.commons.lang3.CharUtils";
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      String string0 = "F-q{Es7'r0v";
      String string1 = StringUtils.substring("F-q{Es7'r0v", (-2252));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("F-q{Es7'r0v", string1);
      
      String string2 = "VP_D Z)Pqz3[";
      String string3 = StringUtils.leftPad("VP_D Z)Pqz3[", (-2252));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("VP_D Z)Pqz3[", string3);
      
      int[] intArray0 = new int[4];
      intArray0[1] = (-2252);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      locale_CategoryArray0[0] = locale_Category0;
      String string4 = "dB!55L* 9{";
      String string5 = StringUtils.replacePattern("VP_D Z)Pqz3[", "dB!55L* 9{", (String) null);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("VP_D Z)Pqz3[", string5);
      
      String[] stringArray0 = null;
      String string6 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string6);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string7 = StringUtils.upperCase((String) null, locale0);
      assertNull(string7);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = (-4147);
      String string8 = StringUtils.leftPad((String) null, (-4147), '\u0088');
      assertNull(string8);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith((String) null, (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "j8", "j8");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "j8", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'g';
      floatArray0[1] = (-4600.7197F);
      floatArray0[2] = (float) 'g';
      floatArray0[3] = (float) 'g';
      floatArray0[4] = (float) 'g';
      floatArray0[5] = (float) 'g';
      String string1 = StringUtils.join(floatArray0, 'g');
      assertNotNull(string1);
      assertArrayEquals(new float[] {103.0F, (-4600.7197F), 103.0F, 103.0F, 103.0F, 103.0F}, floatArray0, 0.01F);
      assertFalse(string1.equals((Object)string0));
      assertEquals("103.0g-4600.7197g103.0g103.0g103.0g103.0", string1);
      assertEquals(6, floatArray0.length);
      
      String string2 = StringUtils.substringBeforeLast("=2J0$@Bm", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("=2J0$@Bm", string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("=2J0$@Bm");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "=2J0$@Bm");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.removeIgnoreCase("=2J0$@Bm", "=2J0$@Bm");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("org.junitpioneer.vintage.ExpectedExceptionExtension", "fGkq0^b", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("wT3c@|k", 'g');
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("',has a lenth less than 2', has a lenth less than 2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      String string0 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chomp((String) null, "F6h!|");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("fGkq0^b", "", "lm1T@-`!Y");
      assertNotNull(string2);
      assertEquals("fGkq0^b", string2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2001);
      intArray0[1] = (int) 'f';
      intArray0[2] = (int) 'f';
      String string3 = StringUtils.join(intArray0, 'R');
      assertNotNull(string3);
      assertArrayEquals(new int[] {(-2001), 102, 102}, intArray0);
      assertFalse(string3.equals((Object)string2));
      assertEquals("-2001R102R102", string3);
      assertEquals(3, intArray0.length);
      
      String string4 = StringUtils.trimToNull("Locale must not be null13Abl]E");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Locale must not be null13Abl]E", string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "fGkq0^b", (String) null);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.replacePattern("org.junitpioneer.jupiter.DefaultTimeZoneExtension", "Locale must not be null", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string5);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "UqLN(V>},n", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.rotate(" ", Integer.MIN_VALUE);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = arrayDeque0.add(locale_FilteringMode0);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertTrue(boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      ArrayDeque<Locale.FilteringMode> arrayDeque1 = new ArrayDeque<Locale.FilteringMode>();
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.contains(locale_FilteringMode0));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      
      boolean boolean1 = arrayDeque1.add(locale_FilteringMode0);
      assertTrue(arrayDeque1.contains(locale_FilteringMode0));
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayDeque1.isEmpty());
      assertEquals(1, arrayDeque1.size());
      
      boolean boolean2 = arrayDeque1.add(locale_FilteringMode0);
      assertTrue(arrayDeque1.contains(locale_FilteringMode0));
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(arrayDeque1.isEmpty());
      assertEquals(2, arrayDeque1.size());
      
      boolean boolean3 = arrayDeque0.add(locale_FilteringMode0);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(locale_FilteringMode0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      HashSet<Locale.FilteringMode> hashSet1 = new HashSet<Locale.FilteringMode>(hashSet0);
      assertNotNull(hashSet1);
      assertFalse(hashSet0.contains(locale_FilteringMode0));
      assertFalse(hashSet1.contains(locale_FilteringMode0));
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      
      boolean boolean4 = hashSet0.add(locale_FilteringMode0);
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertNotSame(hashSet0, hashSet1);
      assertFalse(hashSet0.equals((Object)hashSet1));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      String string1 = StringUtils.join((Iterable<?>) arrayDeque0, " ");
      assertNotNull(string1);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("AUTOSELECT_FILTERING AUTOSELECT_FILTERING", string1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      
      boolean boolean5 = StringUtils.isAlphaSpace("AUTOSELECT_FILTERING AUTOSELECT_FILTERING");
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5);
      
      int int0 = StringUtils.compare("MoGS?s}_X?Y\"=f;GKJ", " ");
      assertEquals(45, int0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '%', (-2971), 1576);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2971
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      boolean boolean0 = arrayDeque0.add("u&0J`Yw");
      assertTrue(arrayDeque0.contains("u&0J`Yw"));
      assertTrue(boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      boolean boolean1 = arrayDeque0.add("u&0J`Yw");
      assertTrue(arrayDeque0.contains("u&0J`Yw"));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertNotNull(iterator0);
      assertTrue(arrayDeque0.contains("u&0J`Yw"));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      
      String string0 = StringUtils.join(iterator0, "u&0J`Yw");
      assertNotNull(string0);
      assertTrue(arrayDeque0.contains("u&0J`Yw"));
      assertFalse(arrayDeque0.contains(string0));
      assertEquals("u&0J`Ywu&0J`Ywu&0J`Yw", string0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      String string0 = StringUtils.unwrap("ArMK+<p6{|=;n`v}45", 'x');
      assertNotNull(string0);
      assertEquals("ArMK+<p6{|=;n`v}45", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "ArMK+<p6{|=;n`v}45", (CharSequence) "ArMK+<p6{|=;n`v}45");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "ArMK+<p6{|=;n`v}45", 2810);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.uncapitalize("ArMK+<p6{|=;n`v}45");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("arMK+<p6{|=;n`v}45", string1);
      
      String string2 = "F6h!|";
      String string3 = StringUtils.uncapitalize("F6h!|");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("f6h!|", string3);
      
      String string4 = StringUtils.removeAll("F6h!|", "f6h!|");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("F6h!|", string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'Z';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      charArray0[7] = 'x';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'l', (-729), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -729
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("F&m<q$+\u0006mU%");
      assertNotNull(string0);
      assertEquals("f&m<q$+\u0006mU%", string0);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      String string0 = "VZ";
      String string1 = StringUtils.defaultString("VZ");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("VZ", string1);
      
      boolean boolean0 = StringUtils.isWhitespace("VZ");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, 'I');
      assertNotNull(string2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(0, shortArray0.length);
      
      String string3 = StringUtils.trimToNull("VZ");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("VZ", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "VZ";
      charSequenceArray0[1] = (CharSequence) "VZ";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "VZ";
      charSequenceArray0[4] = (CharSequence) "VZ";
      charSequenceArray0[5] = (CharSequence) "VZ";
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      String string4 = StringUtils.lowerCase("junit", locale0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("junit", string4);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[4], charSequenceArray0[0]);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("/WliOL-QUN5dLDr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=/wliol-qun5dldr
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'Z', 'Z');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2025);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '_', (-2025), 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2025
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2803.475);
      doubleArray0[1] = 1692.13;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 684.1898603;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 3.0;
      doubleArray0[7] = 0.7;
      int int0 = 102;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'L', 1, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      String string1 = StringUtils.left("'Ll6k", (-644));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "'Ll6k", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((float[]) null, ':');
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", ':');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(":6BVforg.junitpioneer.vintage.ExpectedExceptionExtension:", string3);
      
      String string4 = StringUtils.rightPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-644));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      
      String string5 = StringUtils.remove("org.apache.commons.lang3.StringUtils", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.removeIgnoreCase("'Ll6k", "@SQm6B%0dK=a\"`ng<4");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("'Ll6k", string6);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("LaunchTime");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean2 = StringUtils.isWhitespace("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string7 = StringUtils.swapCase(":6BVforg.junitpioneer.vintage.ExpectedExceptionExtension:");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals(":6bvFORG.JUNITPIONEER.VINTAGE.eXPECTEDeXCEPTIONeXTENSION:", string7);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(":6BVforg.junitpioneer.vintage.ExpectedExceptionExtension:", "W%nSgT|A\r");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("Don't clear/set the same property more than once.");
      assertNotNull(string0);
      assertEquals("DON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.", string0);
      
      String string1 = StringUtils.wrapIfMissing("(spy;Y12L5pBHw", "DON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.(spy;Y12L5pBHwDON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("DON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.", "Don't clear/set the same property more than once.", (-2856));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "_n%m3ruCW!");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      String string2 = StringUtils.left("DON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.(spy;Y12L5pBHwDON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate("y", (String) null, (-219), 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("y", string3);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("Don't clear/set the same property more than once."));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Stack<Object> stack1 = new Stack<Object>();
      assertNotNull(stack1);
      assertFalse(stack1.contains("Don't clear/set the same property more than once."));
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      
      ListIterator<Object> listIterator0 = stack1.listIterator();
      assertNotNull(listIterator0);
      assertFalse(stack1.contains("Don't clear/set the same property more than once."));
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, '^');
      assertNotNull(string4);
      assertFalse(stack1.contains("Don't clear/set the same property more than once."));
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 10, ',');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("K}", (String[]) null, (String[]) null);
      assertNotNull(string0);
      assertEquals("K}", string0);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      String string0 = StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("@FDjAR/`cLC'JV2j");
      assertTrue(boolean0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = "j+iH\"Gv";
      String string2 = StringUtils.capitalize("j+iH\"Gv");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("J+iH\"Gv", string2);
      
      String string3 = StringUtils.truncate("J+iH\"Gv", 2618, 2618);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceChars("@FDjAR/`cLC'JV2j", "\n", "@4[%8pRvDefaultTimeZone");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("@FDjAR/`cLC'JV2j", string4);
      
      String string5 = StringUtils.lowerCase("");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      Locale locale1 = Locale.GERMAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.toString());
      
      Locale locale2 = Locale.GERMAN;
      assertNotNull(locale2);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("", locale2.getISO3Country());
      assertEquals("de", locale2.toString());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      
      Locale locale3 = (Locale)locale2.clone();
      assertNotNull(locale3);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale3);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale0));
      assertTrue(locale3.equals((Object)locale2));
      assertTrue(locale3.equals((Object)locale1));
      assertEquals("", locale2.getISO3Country());
      assertEquals("de", locale2.toString());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale3.getISO3Country());
      assertEquals("", locale3.getCountry());
      assertEquals("de", locale3.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("de", locale3.getLanguage());
      
      boolean boolean1 = locale0.hasExtensions();
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale3);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      int int0 = 46;
      String string6 = StringUtils.rightPad("@4[%8pRvDefaultTimeZone", 1803);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.remove((String) null, "=Rp4X;g.YT],z");
      assertNull(string7);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Arguments cannot both be null");
      assertNotNull(charBuffer0);
      assertEquals(29, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(29, charBuffer0.remaining());
      assertEquals(29, charBuffer0.length());
      assertEquals("Arguments cannot both be null", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(29, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      String string0 = "n;ZzL";
      String string1 = StringUtils.toRootUpperCase("n;ZzL");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("N;ZZL", string1);
      
      boolean boolean0 = StringUtils.endsWith("n;ZzL", "N;ZZL");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "n;ZzL", (-1582));
      assertEquals((-1), int0);
      
      String string2 = "junit";
      String string3 = StringUtils.toRootLowerCase("junit");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("junit", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "junit";
      charSequenceArray0[1] = (CharSequence) "n;ZzL";
      charSequenceArray0[2] = (CharSequence) "junit";
      charSequenceArray0[3] = (CharSequence) "n;ZzL";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      String string4 = StringUtils.join((int[]) null, 'T', 1566, 160);
      assertNull(string4);
      
      String string5 = StringUtils.prependIfMissing("n;ZzL", "junit", charSequenceArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("n;ZzL", string5);
      assertEquals(4, charSequenceArray0.length);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0, locale_FilteringMode0);
      assertNotNull(list1);
      assertFalse(list1.contains(string0));
      assertFalse(arrayDeque0.contains(string0));
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) vector1, (Collection<String>) list1);
      assertNotNull(list2);
      assertFalse(list1.contains(string0));
      assertFalse(list2.contains(string0));
      assertFalse(arrayDeque0.contains(string0));
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(vector1, vector0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotSame(vector0, vector1);
      assertTrue(list1.equals((Object)list0));
      assertTrue(vector1.equals((Object)vector0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join(list1, 'T', (-1), 1566);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'V', 20, 20);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("W,vl>K^YiB5l)", "s");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.substringAfter("]BX^J0Vgk):#", "W,vl>K^YiB5l)");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("}\u0006", '<');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string2 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-5), 'm');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "]BX^J0Vgk):#", (CharSequence) "Search and Replace array lengths don't match: ", 101);
      assertEquals((-1), int0);
      
      String string3 = "\\u";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank(string3, supplier0);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\\u", string4);
      
      String string5 = StringUtils.join((long[]) null, 'm', 0, 7);
      assertNull(string5);
      
      String string6 = StringUtils.truncate("6u\"UC5|sm])Nha^KhY", 101);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("6u\"UC5|sm])Nha^KhY", string6);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "...", (CharSequence) "Ucm0N_;+boN");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.firstNonEmpty(stringArray1);
      assertNotNull(string7);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("}\u0006", string7);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      String string0 = StringUtils.substring("F-q{Es7'r0v", (-2252));
      assertNotNull(string0);
      assertEquals("F-q{Es7'r0v", string0);
      
      String string1 = StringUtils.leftPad("VP_D Z)Pqz3[", (-2252));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("VP_D Z)Pqz3[", string1);
      
      int[] intArray0 = new int[4];
      intArray0[1] = (-2252);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      String string2 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("FORMATFORMATFORMATFORMATFORMATFORMATFORMAT", string2);
      assertEquals(7, locale_CategoryArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "F-q{Es7'r0v";
      String string3 = StringUtils.appendIfMissing("FORMATFORMATFORMATFORMATFORMATFORMATFORMAT", "Arguments cannot both be null", charSequenceArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("FORMATFORMATFORMATFORMATFORMATFORMATFORMATArguments cannot both be null", string3);
      assertEquals(1, charSequenceArray0.length);
      
      String string4 = StringUtils.substringBefore((String) null, "}W");
      assertNull(string4);
      
      String string5 = StringUtils.rotate("}W", 2474);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("}W", string5);
      
      boolean boolean0 = StringUtils.isAlpha("}W");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'e';
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[0], charArray0);
      assertArrayEquals(new char[] {'L', 'e'}, charArray0);
      assertEquals(0, int0);
      assertEquals(2, charArray0.length);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, 'P');
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissingIgnoreCase("'Ll6k", "U'o}\"\bWIWv7", charSequenceArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'Ll6k", string1);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStartIgnoreCase("'Ll6k", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("'Ll6k", string2);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '!';
      intArray0[1] = (int) '!';
      intArray0[2] = (int) '!';
      String string3 = StringUtils.join(intArray0, '^', 25, 19);
      assertNotNull(string3);
      assertArrayEquals(new int[] {33, 33, 33}, intArray0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(3, intArray0.length);
      
      String[] stringArray0 = StringUtils.split("Strings must not be null", "Strings must not be null", 2472);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("\"|o9{=", "'Ll6k", (-2863));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      boolean boolean0 = StringUtils.isWhitespace("y");
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrap((String) null, '^');
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replace("uvUZP_Tj1OJ>}aU", "5rqpV|-\"gOxM&NM1-S\"", "Zq=(/i", 25);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("uvUZP_Tj1OJ>}aU", string5);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      String string0 = StringUtils.rotate("Extension context \"", 32);
      assertNotNull(string0);
      assertEquals("ion context \"Extens", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("Extension context \"");
      assertTrue(boolean0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.capitalize("Extension context \"");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Extension context \"", string1);
      
      String string2 = StringUtils.truncate("Arguments cannot both be null", 32, 32);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceChars("ion context \"Extens", "Extension context \"", "ion context \"Extens");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ntcxttcn onxsion co", string3);
      
      String string4 = StringUtils.lowerCase((String) null);
      assertNull(string4);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      Locale locale1 = Locale.GERMAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotNull(locale2);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      
      boolean boolean1 = locale1.hasExtensions();
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(locale2));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(locale2));
      assertEquals(0, linkedList1.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedList1);
      assertNotNull(list0);
      assertFalse(linkedList1.contains(locale2));
      assertFalse(list0.contains(locale2));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string5 = StringUtils.upperCase("Raa\"X<d.D#=k", locale1);
      assertNotNull(string5);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("RAA\"X<D.D#=K", string5);
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      
      String string6 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string0 = StringUtils.center((String) null, (-1940));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'g';
      floatArray0[1] = (-4600.7197F);
      floatArray0[2] = (float) 'g';
      floatArray0[3] = (float) 'g';
      floatArray0[4] = (float) 'g';
      floatArray0[5] = (float) 'g';
      String string1 = StringUtils.join(floatArray0, 'g');
      assertNotNull(string1);
      assertArrayEquals(new float[] {103.0F, (-4600.7197F), 103.0F, 103.0F, 103.0F, 103.0F}, floatArray0, 0.01F);
      assertFalse(string1.equals((Object)string0));
      assertEquals("103.0g-4600.7197g103.0g103.0g103.0g103.0", string1);
      assertEquals(6, floatArray0.length);
      
      String string2 = StringUtils.substringBeforeLast("=2J0$@Bm", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("=2J0$@Bm", string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("=2J0$@Bm");
      assertTrue(boolean0);
      
      String string3 = StringUtils.strip("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, "=2J0$@Bm");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "103.0g-4600.7197g103.0g103.0g103.0g103.0", (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.defaultIfBlank("5&Po9?j[oN|7P", " 28?{'\"7%");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("5&Po9?j[oN|7P", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "=2J0$@Bm";
      String string5 = StringUtils.join((Object[]) charSequenceArray0, "/niRw9?ERCPKQ@m", 2561, 2561);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertEquals(3, charSequenceArray0.length);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) " 28?{'\"7%";
      boolean boolean2 = StringUtils.endsWithAny("=2J0$@Bm", charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("G<*", "", 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      String string0 = StringUtils.repeat('1', 650);
      assertNotNull(string0);
      assertEqualsstring0);
      
      int int0 = StringUtils.countMatches((CharSequenceharSequence) "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)4;
      byte byte0 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      String string1 = StringUtils.removeStart
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("AlyCNc>n;-Ynf9", supplier0);
      assertNotNull(string0);
      assertEquals("AlyCNc>n;-Ynf9", string0);
      
      String string1 = StringUtils.strip("AlyCNc>n;-Ynf9");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("AlyCNc>n;-Ynf9", string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.junitpioneer.jupiter.DefaultLocaleExtension";
      stringArray0[1] = "AlyCNc>n;-Ynf9";
      stringArray0[2] = "AlyCNc>n;-Ynf9";
      stringArray0[3] = "AlyCNc>n;-Ynf9";
      stringArray0[4] = "AlyCNc>n;-Ynf9";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string2);
      assertEquals(5, stringArray0.length);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      String string3 = StringUtils.lowerCase("......", locale0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("......", string3);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "AlyCNc>n;-Ynf9", (CharSequence) "AlyCNc>n;-Ynf9");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringBetween("AlyCNc>n;-Ynf9", "}s", "XgZeswhN(JbK<1Syxb&");
      assertNull(string4);
      
      String string5 = StringUtils.rotate((String) null, 0);
      assertNull(string5);
      
      String string6 = StringUtils.replaceIgnoreCase("......", "AlyCNc>n;-Ynf9", "p{InCombiningDiacriticalMarks}+", 0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("......", string6);
      
      String string7 = StringUtils.defaultString("9,@!9Bj", "AlyCNc>n;-Ynf9");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("9,@!9Bj", string7);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string0 = StringUtils.replace(">LbhEQ", ">LbhEQ", ">LbhEQ", 0);
      assertNotNull(string0);
      assertEquals(">LbhEQ", string0);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, '\'');
      assertNull(string0);
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "13Abl]E", supplier0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("13Abl]E", charSequence0);
      
      String string1 = StringUtils.SPACE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals(" ", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Locale must not be null", " ");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.join((char[]) null, 'v');
      assertNull(string2);
      
      boolean boolean1 = StringUtils.startsWithAny("13Abl]E", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5, stringArray0.length);
      
      String string3 = StringUtils.deleteWhitespace("13Abl]E");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)charSequence0));
      assertEquals("13Abl]E", string3);
      
      String string4 = StringUtils.abbreviateMiddle("\"|o9{=\"|o9{=", "g9ZO+EQU", 6);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\"|o9{=\"|o9{=", string4);
      
      String[] stringArray1 = StringUtils.split("\"|o9{=\"|o9{=", "1U-q{3", 6);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "vrx5Od", (CharSequence) "V", 823);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootLowerCase("13Abl]E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("13abl]e", string1);
      
      String string2 = StringUtils.stripToNull("13abl]e");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("13abl]e", string2);
      
      String string3 = StringUtils.wrap("13abl]e", "28,NtLJz/)w [?=B;");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", (String) null, "The character ", 55);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string5 = StringUtils.strip("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", string5);
      
      String string6 = StringUtils.center("v\"j&=a`L'", (-1582), "The character ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("v\"j&=a`L'", string6);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "p{InCombiningDiacriticalMarks}+";
      objectArray0[1] = (Object) "13abl]e";
      String string7 = StringUtils.join(objectArray0, "13Abl]E");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals("p{InCombiningDiacriticalMarks}+13Abl]E13abl]e", string7);
      assertEquals(2, objectArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string8 = StringUtils.getIfEmpty("p{InCombiningDiacriticalMarks}+", supplier0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertEquals("p{InCombiningDiacriticalMarks}+", string8);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "13Abl]E", 55);
      assertFalse(int1 == int0);
      assertEquals(29, int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("_^5ou", " ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+", 17);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'u', 100, 1956);
      assertNull(string0);
      
      String string1 = StringUtils.stripStart("E", "E");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat('\'', (-606));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.chop("L>yG");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("L>y", string3);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.repeat("E", 353);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string4);
      
      String string5 = StringUtils.chomp("", "=j^i54L");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string6 = StringUtils.lowerCase("", locale0);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "L>y";
      stringArray0[3] = "E";
      stringArray0[4] = "";
      String string7 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertEquals("L>y", string7);
      assertEquals(5, stringArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-34);
      String string8 = StringUtils.join(byteArray0, '\'', (int) (byte) (-34), (-606));
      assertNotNull(string8);
      assertArrayEquals(new byte[] {(byte) (-34)}, byteArray0);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string6));
      assertEquals("", string8);
      assertEquals(1, byteArray0.length);
      
      String string9 = StringUtils.substringBetween("H", "L>y", "=j^i54L");
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 13);
      assertNull(string0);
      
      String string1 = StringUtils.overlay("F%[)vE(>G)rR", (String) null, 13, (-1436));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      String string0 = StringUtils.strip("Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "Threshold must not be negative", (Supplier<CharSequence>) null);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("Threshold must not be negative", charSequence0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "Threshold must not be negative", '[');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "Threshold must not be negative";
      stringArray0[2] = "Threshold must not be negative";
      stringArray0[3] = "Threshold must not be negative";
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[7];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.FORMAT;
      locale_CategoryArray0[6] = locale_Category6;
      String string1 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("DISPLAYFORMATDISPLAYDISPLAYFORMATFORMAT", string1);
      assertEquals(7, locale_CategoryArray0.length);
      
      String string2 = StringUtils.appendIfMissing("Threshold must not be negative", "Threshold must not be negative", stringArray0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Threshold must not be negative", string2);
      assertEquals(5, stringArray0.length);
      
      String string3 = StringUtils.substringBefore("Threshold must not be negative", "Threshold must not be negative");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.overlay("DISPLAYFORMATDISPLAYDISPLAYFORMATFORMAT", "Threshold must not be negative", 7, (-1));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Threshold must not be negativeFORMATDISPLAYDISPLAYFORMATFORMAT", string4);
      
      boolean boolean0 = StringUtils.isAlpha("Threshold must not be negativeFORMATDISPLAYDISPLAYFORMATFORMAT");
      assertFalse(boolean0);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      String string0 = StringUtils.overlay("excMT=M=u{|CJZ6i", "excMT=M=u{|CJZ6i", 2312, 16);
      assertNotNull(string0);
      assertEquals("excMT=M=u{|CJZ6iexcMT=M=u{|CJZ6i", string0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      String string0 = StringUtils.chomp("\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((byte[]) null, '/', 28, 2217);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1115);
      shortArray0[1] = (short) (-2342);
      shortArray0[2] = (short) (-1306);
      String string2 = StringUtils.stripStart("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", (int) (short) (-1115));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>(arrayDeque0);
      assertNotNull(hashSet0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean1 = hashSet0.add(locale_FilteringMode0);
      assertFalse(arrayDeque0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      String string3 = StringUtils.join((Iterable<?>) arrayDeque0, "");
      assertNotNull(string3);
      assertFalse(arrayDeque0.contains(locale_FilteringMode0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int0 = StringUtils.compare("", (String) null);
      assertEquals(1, int0);
      
      String string4 = StringUtils.join((byte[]) null, 'k', (-2971), 2344);
      assertNull(string4);
      
      String string5 = StringUtils.stripStart("`Qm)24up8", "_)= c7)f78 [k6_3");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("`Qm)24up8", string5);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("z\"nf");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compare("z\"nf", (String) null, true);
      assertEquals(1, int0);
      
      String string0 = StringUtils.chomp("z\"nf");
      assertNotNull(string0);
      assertEquals("z\"nf", string0);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replacePattern(":[CG;,H::", ":[CG;,H::", "offset cannot be negative");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 8
         // :[CG;,H::
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "3");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("3", 22, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("3                     ", string1);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string2 = locale0.getDisplayScript();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      
      String string3 = StringUtils.lowerCase("Failed to get parent directory from provider", locale0);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("failed to get parent directory from provider", string3);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "3", (CharSequence) "");
      assertEquals(1, int0);
      
      String string4 = StringUtils.substringBetween("", "", "codefx");
      assertNull(string4);
      
      String string5 = StringUtils.upperCase("failed to get parent directory from provider", locale0);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("FAILED TO GET PARENT DIRECTORY FROM PROVIDER", string5);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string6 = StringUtils.replaceAll("`j0hh4pDof/*57N", "failed to get parent directory from provider", " vs ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("`j0hh4pDof/*57N", string6);
      
      String string7 = StringUtils.leftPad("FAILED TO GET PARENT DIRECTORY FROM PROVIDER", 22, '?');
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("FAILED TO GET PARENT DIRECTORY FROM PROVIDER", string7);
      
      String string8 = StringUtils.stripEnd("7Ra4!!b^P{G:io", "n]6J|K/");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertEquals("7Ra4!!b^P{G:io", string8);
      
      String string9 = "\\u";
      String string10 = StringUtils.removeIgnoreCase((String) null, string9);
      assertNull(string10);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'q');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string11 = StringUtils.substring((String) null, 1);
      assertNull(string11);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      String string0 = StringUtils.stripAccents(")P");
      assertNotNull(string0);
      assertEquals(")P", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(")P");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("&OI]ngFwFPVh^M&", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("&OI]ngFwFPVh^M&", string1);
      
      String string2 = StringUtils.substring((String) null, (-1104));
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 'R');
      assertNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("\"|o9{=\"|o9{=");
      assertNotNull(string1);
      assertEquals("\"|o9{=\"|o9{=", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "Minimum abbreviation width is %d");
      assertEquals(1, int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Object varargs must not be null";
      String string2 = StringUtils.replaceEachRepeatedly("\"|o9{=\"|o9{=", stringArray0, (String[]) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("\"|o9{=\"|o9{=", string2);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      String string0 = StringUtils.strip("Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "Threshold must not be negative", (Supplier<CharSequence>) null);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("Threshold must not be negative", charSequence0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "Threshold must not be negative", '^');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "Threshold must not be negative";
      stringArray0[2] = "Threshold must not be negative";
      stringArray0[3] = "Threshold must not be negative";
      stringArray0[4] = "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.replaceEach("Threshold must not be negative", stringArray0, stringArray1);
      assertNotNull(string1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("Threshold must not be negative", string1);
      assertEquals(5, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string2 = StringUtils.truncate("Threshold must not be negative", 0, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("", string2);
      
      String string3 = "offset cannot be negative";
      String string4 = StringUtils.replaceChars("offset cannot be negative", 't', 'O');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("offseO cannoO be negaOive", string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string5 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string5);
      
      String[] stringArray2 = StringUtils.split("Threshold must not be negative");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(5, stringArray2.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Threshold must not be negative", stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(boolean0);
      assertEquals(5, stringArray2.length);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Charset.forName("Threshold must not be negative");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Threshold must not be negative
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'o');
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 32);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "Strings must not be null");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.substringsBetween("DefaultLocale", "$IPV!fKC[NOk+g/.", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.wrap("DefaultLocale", 'o');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("oDefaultLocaleo", string1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("$IPV!fKC[NOk+g/.");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)57;
      String string2 = StringUtils.join(shortArray0, 'o');
      assertNotNull(string2);
      assertArrayEquals(new short[] {(short)57}, shortArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("57", string2);
      assertEquals(1, shortArray0.length);
      
      String string3 = StringUtils.join((Object[]) null);
      assertNull(string3);
      
      boolean boolean3 = StringUtils.startsWithAny("Strings must not be null", (CharSequence[]) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int2 = StringUtils.compare((String) null, (String) null, true);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      int int0 = StringUtils.compare("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2803.475);
      doubleArray0[1] = 1692.13;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 684.1898603;
      doubleArray0[5] = (-4397.62155080162);
      doubleArray0[6] = 3.0;
      doubleArray0[7] = 0.7;
      String string0 = StringUtils.join(doubleArray0, 'L', 1, (-4196));
      assertNotNull(string0);
      assertArrayEquals(new double[] {(-2803.475), 1692.13, 3.0, 0.0, 684.1898603, (-4397.62155080162), 3.0, 0.7}, doubleArray0, 0.01);
      assertEquals("", string0);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "DefaultTimeZone");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      String string0 = StringUtils.rotate("Extension context \"", 32);
      assertNotNull(string0);
      assertEquals("ion context \"Extens", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("Extension context \"");
      assertTrue(boolean0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.capitalize("Extension context \"");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Extension context \"", string1);
      
      String string2 = StringUtils.substringAfter("Arguments cannot both be null", "Minimum abbreviation width is %d");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ion context \"Extens", '<');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.leftPad("eIO-@ETs:5", 712, (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEqualseIO-@ETs:5", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "Extension context \"", 897);
      assertEquals((-1), int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("Arguments cannot both be null").when(supplier0).get();
      String string4 = StringUtils.getIfBlank("", supplier0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Arguments cannot both be null", string4);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      
      int int1 = StringUtils.getFuzzyDistance("Arguments cannot both be null", "Extension context \"", locale0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      
      String string5 = StringUtils.replaceAll((String) null, "eIO-@ETs:5", "ion context \"Extens");
      assertNull(string5);
      
      boolean boolean1 = StringUtils.startsWith("Ucm0N_;+boN", "eIO-@ETs:5");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("A");
      assertNotNull(string0);
      assertEquals("A", string0);
      
      String string1 = StringUtils.truncate("A", 13);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("A", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "A", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.capitalize("A");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("A", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "     ", (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("A"));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      boolean boolean1 = stack0.add((Object) "~WSQ+");
      assertFalse(stack0.contains("A"));
      assertTrue(stack0.contains("~WSQ+"));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[~WSQ+]", stack0.toString());
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(stack0.contains("A"));
      assertTrue(stack0.contains("~WSQ+"));
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[~WSQ+]", stack0.toString());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, '7');
      assertNotNull(string3);
      assertFalse(stack0.contains('7'));
      assertTrue(stack0.contains("~WSQ+"));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("~WSQ+", string3);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[~WSQ+]", stack0.toString());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "A", 203, (-1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean2 = StringUtils.isAllUpperCase("A");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("Bz7]}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      String string0 = StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "@FDjAR/`cLC'JV2j";
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'E';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      charArray0[6] = 'Y';
      charArray0[7] = 'Y';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y', 'E', 'Y', 'Y', 'Y', 'Y'}, charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.joinWith("@CQ7mL^-i~p\"-8!y3", charSequenceArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("@CQ7mL^-i~p\"-8!y3@FDjAR/`cLC'JV2j@CQ7mL^-i~p\"-8!y3@CQ7mL^-i~p\"-8!y3@CQ7mL^-i~p\"-8!y3", string2);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.stripToNull("@FDjAR/`cLC'JV2j");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("@FDjAR/`cLC'JV2j", string3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "@FDjAR/`cLC'JV2j";
      stringArray0[5] = "@CQ7mL^-i~p\"-8!y3";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertEquals(6, stringArray0.length);
      
      CharSequence[] charSequenceArray1 = new CharSequence[9];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "@FDjAR/`cLC'JV2j";
      charSequenceArray1[1] = (CharSequence) "@CQ7mL^-i~p\"-8!y3@FDjAR/`cLC'JV2j@CQ7mL^-i~p\"-8!y3@CQ7mL^-i~p\"-8!y3@CQ7mL^-i~p\"-8!y3";
      charSequenceArray1[2] = (CharSequence) "@CQ7mL^-i~p\"-8!y3@FDjAR/`cLC'JV2j@CQ7mL^-i~p\"-8!y3@CQ7mL^-i~p\"-8!y3@CQ7mL^-i~p\"-8!y3";
      charSequenceArray1[3] = (CharSequence) "@FDjAR/`cLC'JV2j";
      charSequenceArray1[4] = (CharSequence) string1;
      charSequenceArray1[5] = (CharSequence) "";
      charSequenceArray1[6] = (CharSequence) "@CQ7mL^-i~p\"-8!y3";
      String string5 = StringUtils.replace("@CQ7mL^-i~p\"-8!y3", "y~iT", "@FDjAR/`cLC'JV2j");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("@CQ7mL^-i~p\"-8!y3", string5);
      
      charSequenceArray1[7] = (CharSequence) "@CQ7mL^-i~p\"-8!y3";
      charSequenceArray1[8] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray1.length);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "3");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("3", 22, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("3                     ", string1);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string2 = locale0.getDisplayScript();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      
      String string3 = StringUtils.lowerCase("Failed to get parent directory from provider", locale0);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("failed to get parent directory from provider", string3);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "3", (CharSequence) "");
      assertEquals(1, int0);
      
      String string4 = StringUtils.substringBetween("", "", "codefx");
      assertNull(string4);
      
      String string5 = StringUtils.upperCase("failed to get parent directory from provider", locale0);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("FAILED TO GET PARENT DIRECTORY FROM PROVIDER", string5);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string6 = StringUtils.replaceAll("`j0hh4pDof/*57N", "failed to get parent directory from provider", " vs ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("`j0hh4pDof/*57N", string6);
      
      String string7 = StringUtils.leftPad("FAILED TO GET PARENT DIRECTORY FROM PROVIDER", 22, '?');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("FAILED TO GET PARENT DIRECTORY FROM PROVIDER", string7);
      
      String string8 = StringUtils.wrapIfMissing("rUsjA:6<`;", 'h');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertEquals("hrUsjA:6<`;h", string8);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string9 = StringUtils.center("", 3, "OP4Z/o%mx/S)TS~n~%}");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertEquals("OOP", string9);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "3", "-b&m|3p6uI{7A=Y=");
      assertTrue(boolean0);
      
      String string10 = StringUtils.rotate("2AR]Fsr]ED", 3558);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertEquals("R]Fsr]ED2A", string10);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      String string0 = StringUtils.removeEnd("y", "\r");
      assertNotNull(string0);
      assertEquals("y", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "\r");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.chomp("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", string1);
      
      boolean boolean0 = StringUtils.isEmpty("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("y", "I^ZyV<\"EAKcw6e)", "...");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("y", string2);
      
      String string3 = StringUtils.toRootLowerCase("Locale must not be null13Abl]E");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("locale must not be null13abl]e", string3);
      
      String string4 = StringUtils.replace("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", "...", "^:0'aYa");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", string4);
      
      boolean boolean1 = StringUtils.startsWithAny("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.deleteWhitespace("y");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("y", string5);
      
      String string6 = StringUtils.replacePattern("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", "\r", (String) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string7 = StringUtils.wrap("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", '5');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("5Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range5", string7);
      
      charSequenceArray0[0] = (CharSequence) "5Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range5";
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = (CharSequence) "\r";
      CharSequence charSequence1 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNotNull(charSequence1);
      assertFalse(charSequence1.equals((Object)string0));
      assertTrue(charSequence1.equals((Object)string7));
      assertFalse(charSequence1.equals((Object)string6));
      assertFalse(charSequence1.equals((Object)string2));
      assertFalse(charSequence1.equals((Object)string4));
      assertFalse(charSequence1.equals((Object)string5));
      assertFalse(charSequence1.equals((Object)string3));
      assertFalse(charSequence1.equals((Object)string1));
      assertEquals("5Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range5", charSequence1);
      assertEquals(3, charSequenceArray0.length);
      
      String string8 = StringUtils.substringAfterLast("@4[%8pRv", "9h");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)charSequence1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "5Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range5", (CharSequence) "");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range");
      assertNotNull(intArray0);
      assertEquals(108, intArray0.length);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string9 = StringUtils.EMPTY;
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)charSequence1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertEquals("", string9);
      
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "^:0'aYa";
      charSequenceArray1[2] = (CharSequence) "...";
      charSequenceArray1[3] = (CharSequence) "y";
      charSequenceArray1[4] = (CharSequence) "y";
      charSequenceArray1[5] = (CharSequence) "y";
      int int1 = StringUtils.indexOfDifference(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(6, charSequenceArray1.length);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.replace("", "", "&q,am';");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp("6BVforg.junitpioneer.vintage.ExpectedExceptionExtensionRepeatFailedTestExtension");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("6BVforg.junitpioneer.vintage.ExpectedExceptionExtensionRepeatFailedTestExtension", string2);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.substringAfterLast((String) null, "@4[%8pRv");
      assertNull(string3);
      
      String string4 = StringUtils.uncapitalize("6BVforg.junitpioneer.vintage.ExpectedExceptionExtensionRepeatFailedTestExtension");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("6BVforg.junitpioneer.vintage.ExpectedExceptionExtensionRepeatFailedTestExtension", string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "@4[%8pRv", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String string5 = StringUtils.EMPTY;
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = StringUtils.endsWith("", "U'o}\"\bWIWv7");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "U'o}\"\bWIWv7", (-5164));
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.strip("U'o}\"\bWIWv7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("U'o}\"\bWIWv7", string1);
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.join(intArray0, 'k', 106, 26);
      assertNotNull(string2);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (Charset) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1115);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1115);
      intArray0[1] = (int) (short) (-1115);
      intArray0[2] = (int) (short) (-1115);
      intArray0[3] = (int) (short) (-1115);
      intArray0[4] = (int) (short) (-1115);
      intArray0[5] = 4;
      intArray0[6] = (int) (short) (-1115);
      String string2 = StringUtils.join(intArray0, 'B');
      assertNotNull(string2);
      assertArrayEquals(new int[] {(-1115), (-1115), (-1115), (-1115), (-1115), 4, (-1115)}, intArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-1115B-1115B-1115B-1115B-1115B4B-1115", string2);
      assertEquals(7, intArray0.length);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.replacePattern((String) null, "cIs7R2XzE)s", "a@H $7`<J`4}IdB8");
      assertNull(string4);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "a@H $7`<J`4}IdB8", (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isNumeric("-1115B-1115B-1115B-1115B-1115B4B-1115");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replace("ZQGHeAXm|", "ZQGHeAXm|", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      byte[] byteArray0 = StringUtils.getBytes("sU=3,)wPa@39O,=P'=3", (Charset) null);
      assertNotNull(byteArray0);
      assertEquals(19, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = StringUtils.getBytes("Threshold must not be negative", charset0);
      assertNotNull(byteArray0);
      assertEquals(30, byteArray0.length);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      String string0 = StringUtils.lowerCase("The Character must not be null");
      assertNotNull(string0);
      assertEquals("the character must not be null", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.apache.commons.lang3.ArrayUtils", "org.apache.commons.lang3.ArrayUtils", (-3268));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 36
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "F", (CharSequence) "F");
      assertEquals(0, int0);
      
      String string0 = StringUtils.rightPad("", (int) 'b');
      assertNotNull(string0);
      assertEquals("                                                                                                  ", string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'b';
      String string1 = StringUtils.substringBefore("F", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("hK<jh]{ou", 19);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("hK<jh]{ou          ", string2);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      
      String string3 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\u6CD5\u6587", string3);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      
      String string4 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string4);
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string5 = StringUtils.replaceChars("(spy;Y12L5pBHwDON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.", "(spy;Y12L5pBHwDON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.", "%7otr@Od&");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("%7otr@Od&o&@", string5);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("\"52GC7\"1!", "\"52GC7\"1!");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat('X', 32);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", string1);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains("\"52GC7\"1!"));
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(set0);
      assertNotNull(priorityQueue0);
      assertFalse(set0.contains("\"52GC7\"1!"));
      assertFalse(priorityQueue0.contains("\"52GC7\"1!"));
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(2, priorityQueue0.size());
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue0, 'X');
      assertNotNull(string3);
      assertFalse(set0.contains("\"52GC7\"1!"));
      assertFalse(priorityQueue0.contains("\"52GC7\"1!"));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("UTF8Xunicode-1-1-utf-8", string3);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(2, priorityQueue0.size());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      String string4 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string4);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "UTF8Xunicode-1-1-utf-8", (CharSequence) null, 32);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-2342);
      shortArray0[2] = (short) (-1306);
      String string2 = StringUtils.join(shortArray0, '&', 2909, (-2229));
      assertNotNull(string2);
      assertArrayEquals(new short[] {(short)0, (short) (-2342), (short) (-1306)}, shortArray0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(3, shortArray0.length);
      
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.params.ShortRange");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2909;
      String string3 = StringUtils.join(floatArray0, '&');
      assertNotNull(string3);
      assertArrayEquals(new float[] {2909.0F}, floatArray0, 0.01F);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("2909.0", string3);
      assertEquals(1, floatArray0.length);
      
      String string4 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("org.junitpioneer.jupiter.params.ShortRange");
      assertTrue(boolean0);
      
      String string5 = StringUtils.strip("", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "2909.0");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.left("8IwhXmXxB-'1i?e", (-1));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-1302);
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[1]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((CharSequence) null).when(supplier0).get();
      CharSequence charSequence1 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence1);
      
      charSequenceArray0[0] = null;
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.wrap("@4[%8pRv", (String) null);
      assertNotNull(string1);
      assertEquals("@4[%8pRv", string1);
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, "@4[%8pRv", "The String must not be empty", 55);
      assertNull(string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string3 = StringUtils.repeat('`', 55);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertEquals("```````````````````````````````````````````````````````", string3);
      
      String string4 = StringUtils.chop("\n");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isMixedCase("The String must not be empty");
      assertTrue(boolean0);
      
      String string5 = StringUtils.joinWith("\n", charSequenceArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("\n", string5);
      assertEquals(2, charSequenceArray0.length);
      
      String string6 = StringUtils.repeat("", (-606));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.chomp("```````````````````````````````````````````````````````", "maxWith cannot beDnegative");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("```````````````````````````````````````````````````````", string7);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, 'I');
      assertNotNull(string1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, shortArray0.length);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.stripEnd("", "Q'l*%'%v,X^ FN%<");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.trimToNull("Strings must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Strings must not be null", string4);
      
      Locale locale0 = new Locale("");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string5 = StringUtils.upperCase("", locale0);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string6 = locale0.getDisplayCountry();
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(locale0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayDeque0, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(arrayDeque0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string7 = StringUtils.center(" vs ", 16, "tCP4P$9wtC");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("tCP4P$ vs tCP4P$", string7);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "tCP4P$9wtC", "");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String string0 = StringUtils.rightPad("J&", 8, "Object varargs must not be null");
      assertNotNull(string0);
      assertEquals("J&Object", string0);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 8);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      String string0 = StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "@FDjAR/`cLC'JV2j";
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'E';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      charArray0[6] = 'Y';
      charArray0[7] = 'Y';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y', 'E', 'Y', 'Y', 'Y', 'Y'}, charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing((String) null, 'o');
      assertNull(string2);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string3 = StringUtils.center("gD:~fy0", (-3649), "Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("gD:~fy0", string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) " vs ", "Cannot store ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.rotate("Timeout", Integer.MAX_VALUE);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("tTimeou", string4);
      
      String string5 = StringUtils.repeat((String) null, (-3649));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Don't clear/set the same property more than once.");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("Don't clear/set the same property more than once.", supplier0);
      assertNotNull(string0);
      assertEquals("Don't clear/set the same property more than once.", string0);
      
      String string1 = StringUtils.truncate("Don't clear/set the same property more than once.", 3131, 3131);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '=';
      charArray0[1] = 'u';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'=', 'u'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Don't clear/set the same property more than once.", (CharSequence) "Don't clear/set the same property more than once.");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny("Don't clear/set the same property more than once.", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, stringArray0.length);
      
      boolean boolean2 = StringUtils.endsWith("Don't clear/set the same property more than once.", "Don't clear/set the same property more than once.");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Don't clear/set the same property more than once.", (CharSequence) "Don't clear/set the same property more than once.", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)32;
      try { 
        StringUtils.toString(byteArray0, "pbl%8:1p");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      String string0 = StringUtils.removeStart("#4TOz$r", "#4TOz$r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = StringUtils.isBlank("#4TOz$r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEndIgnoreCase((String) null, "");
      assertNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = "*p5$4";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("", "Minimum abbreviation width with offset is %d", 0);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
      
      String string2 = StringUtils.rightPad("Minimum abbreviation width with offset is %d", 24, (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "*p5$4", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '!', (-1613), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1613
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      String string0 = "org.junitpioneer.vintage.ExpectedExceptionExtension";
      String string1 = StringUtils.center("org.junitpioneer.vintage.ExpectedExceptionExtension", (-1891));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      int int0 = StringUtils.lastIndexOfAny("org.junitpioneer.vintage.ExpectedExceptionExtension", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.left("", (-1302));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      long[] longArray0 = new long[0];
      String string3 = StringUtils.join(longArray0, 'L');
      assertNotNull(string3);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(0, longArray0.length);
      
      String string4 = StringUtils.lowerCase("");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1891));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (-1891);
      floatArray0[5] = (float) (-1891);
      floatArray0[6] = (float) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '3', 13, 30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      String string0 = StringUtils.stripAccents("!:tkIyq,p~k<~lV");
      assertNotNull(string0);
      assertEquals("!:tkIyq,p~k<~lV", string0);
      
      String string1 = StringUtils.truncate("     ", 32);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("     ", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "!:tkIyq,p~k<~lV";
      charSequenceArray0[1] = (CharSequence) "     ";
      charSequenceArray0[2] = (CharSequence) "!:tkIyq,p~k<~lV";
      charSequenceArray0[3] = (CharSequence) "!:tkIyq,p~k<~lV";
      char[] charArray0 = new char[6];
      String string2 = StringUtils.join(charArray0, '\\');
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\u0000\\\u0000\\\u0000\\\u0000\\\u0000\\\u0000", string2);
      assertEquals(6, charArray0.length);
      
      charSequenceArray0[4] = (CharSequence) "\u0000\u0000\u0000\u0000\u0000\u0000";
      charSequenceArray0[5] = (CharSequence) "     ";
      boolean boolean0 = StringUtils.startsWithAny("     ", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.deleteWhitespace("     ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.abbreviateMiddle("!:tkIyq,p~k<~lV", "Locale must not be null", 32);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("!:tkIyq,p~k<~lV", string4);
      
      String[] stringArray0 = StringUtils.split("     ", "Y ,\"['-", 289);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.abbreviateMiddle("\"", (String) null, (-1));
      assertNotNull(string0);
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      String string2 = StringUtils.normalizeSpace((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.truncate("y", 50);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("y", string3);
      
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.deleteWhitespace((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("}8wjaAb9niY!9#CJzv", "", (-1419));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("}8wjaAb9niY!9#CJzv", string5);
      
      String[] stringArray0 = StringUtils.split(" 3dt", " Ph,G9G5-", 4401);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      String string0 = "\\p8b}OQjYd\"";
      String string1 = StringUtils.replaceAll("p8b}OQjYd\"", "p8b}OQjYd\"", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = 11;
      int int1 = (-500);
      int int2 = StringUtils.indexOf((CharSequence) string0, int0, int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "13Abl]E", supplier0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("13Abl]E", charSequence0);
      
      String string1 = StringUtils.SPACE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals(" ", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Locale must not be null", " ");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(" ", 'v');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string2 = StringUtils.chomp((String) null, "6");
      assertNull(string2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1800);
      String string3 = StringUtils.join(doubleArray0, '\'');
      assertNotNull(string3);
      assertArrayEquals(new double[] {(-1800.0)}, doubleArray0, 0.01);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-1800.0", string3);
      assertEquals(1, doubleArray0.length);
      
      String string4 = StringUtils.substring("\r", (-10), (int) (short)101);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\r", string4);
      
      int int0 = StringUtils.compareIgnoreCase("6", "\r", true);
      assertEquals(41, int0);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 127);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      String string0 = StringUtils.trimToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      String string1 = StringUtils.removeStartIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      String string2 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(0, locale_CategoryArray0.length);
      
      String string3 = StringUtils.appendIfMissing("org.junitpioneer.vintage.ExpectedExceptionExtension", "", charSequenceArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string3);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = new String[3];
      String string4 = StringUtils.strip("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string4);
      
      String string5 = StringUtils.center(stringArray0[0], 3, "@ukp5VR9^);21?odb$H");
      assertNull(string5);
      assertEquals(3, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string6 = StringUtils.substringBefore("UR>{edU", "Cp28$A,GirrTWkw");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("UR>{edU", string6);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("temp.dir", "2@M~.hGC{");
      assertNotNull(string0);
      assertEquals("temp.dir", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "2@M~.hGC{", (CharSequence) "temp.dir", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      String string0 = StringUtils.repeat('?', 102);
      assertNotNull(string0);
      assertEquals("??????????????????????????????????????????????????????????????????????????????????????????????????????", string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chomp("0X!66");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0X!66", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "??????????????????????????????????????????????????????????????????????????????????????????????????????";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStart("}x$,k{`", "3dt");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}x$,k{`", string2);
      
      String string3 = StringUtils.unwrap(")sX2T1W", " ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(")sX2T1W", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ")sX2T1W", (CharSequence) "}x$,k{`", 4147);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.wrapIfMissing(" ", '#');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("# #", string4);
      
      String string5 = StringUtils.stripToEmpty(")sX2T1W");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertEquals(")sX2T1W", string5);
      
      String string6 = StringUtils.replaceIgnoreCase("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B; 28?{'\"7%", "28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B; 28?{'\"7%", "e}C");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("e}C", string6);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '_');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string1 = StringUtils.strip("be null", "be null");
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string2 = StringUtils.join((char[]) null, ':', 4, 235);
      assertNull(string2);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(":s]j9E");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.stripEnd((String) null, "<Qh~y#");
      assertNull(string3);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 235;
      floatArray0[1] = (float) 4;
      floatArray0[2] = (float) ':';
      String string4 = StringUtils.join(floatArray0, '~', 4, (-2));
      assertNotNull(string4);
      assertArrayEquals(new float[] {235.0F, 4.0F, 58.0F}, floatArray0, 0.01F);
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(3, floatArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) ":s]j9E", (-2026));
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "be null", (String) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '<');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1151);
      String string2 = StringUtils.removePattern("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.replace("", "", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replacePattern("", "", "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string5 = StringUtils.join((Iterator<?>) null, 'h');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("Don't clear/set the same property more than once.");
      assertNotNull(string0);
      assertEquals("DON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.", string0);
      
      String string1 = StringUtils.wrapIfMissing("(spy;Y12L5pBHw", "DON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.(spy;Y12L5pBHwDON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.", string1);
      
      String[] stringArray0 = StringUtils.split("Don't clear/set the same property more than once.", "Don't clear/set the same property more than once.", (-2856));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.unwrap("IF^*6CE]0TQl", "\"|o9{=\"|o9{=");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("IF^*6CE]0TQl", string2);
      
      int int0 = StringUtils.ordinalIndexOf("DON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.", "\"|o9{=\"|o9{=", (-2856));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = '\\';
      charArray0[2] = 's';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '\\';
      String string3 = StringUtils.join(charArray0, '.', 76, 52);
      assertNotNull(string3);
      assertArrayEquals(new char[] {'Z', '\\', 's', '', '', '\\', '\u0000'}, charArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(7, charArray0.length);
      
      String string4 = StringUtils.defaultIfBlank("\"|o9{=\"|o9{=", "maxWith cannot be negative");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\"|o9{=\"|o9{=", string4);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)10;
      String string5 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertNotNull(string5);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)0, (byte)27, (byte)55, (byte) (-67), (byte)107, (byte)10}, byteArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("\uFFFD\u0000\u001B7\uFFFDk\n", string5);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
      assertEquals(4, byteArray0.length);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\u0000\u0000\u0000\u0000", (CharSequence) "\u0000\u0000\u0000\u0000");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.stripEnd("", "Q'l*%'%v,X^ FN%<");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd("", (String) null);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'h');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[1], charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.strip("");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.repeat('\'', 0);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.chop("Q'l*%'%v,X^ FN%<");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Q'l*%'%v,X^ FN%", string6);
      
      String string7 = StringUtils.joinWith("", charSequenceArray0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertEquals("", string7);
      assertEquals(7, charSequenceArray0.length);
      
      String string8 = StringUtils.chomp("", (String) null);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertEquals("", string8);
      
      String string9 = StringUtils.removeEndIgnoreCase("KdP", "o=#Y}$Rgz");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertEquals("KdP", string9);
      
      String string10 = StringUtils.deleteWhitespace("");
      assertNotNull(string10);
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string0));
      assertEquals("", string10);
      
      String string11 = StringUtils.replace("9/fN}TL0yBAV@\"", "", "sW", 99);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string10));
      assertEquals("9/fN}TL0yBAV@\"", string11);
      
      String string12 = StringUtils.normalizeSpace("|)chy8=HU?~n");
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string2));
      assertEquals("|)chy8=HU?~n", string12);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      String string0 = StringUtils.normalizeSpace("y");
      assertNotNull(string0);
      assertEquals("y", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.truncate("y", 32);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("y", string1);
      
      charSequenceArray0[0] = (CharSequence) "y";
      boolean boolean0 = StringUtils.startsWithAny("y", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.deleteWhitespace("jl");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("jl", string2);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 256;
      floatArray1[1] = 1.0F;
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (float) 32;
      floatArray1[4] = (float) 32;
      floatArray1[5] = (-1.0F);
      floatArray1[6] = 1.0F;
      floatArray1[7] = (float) 256;
      String string3 = StringUtils.join(floatArray1, '~', (-1084), (-1084));
      assertNotNull(string3);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {256.0F, 1.0F, (-1.0F), 32.0F, 32.0F, (-1.0F), 1.0F, 256.0F}, floatArray1, 0.01F);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals("", string3);
      assertEquals(8, floatArray1.length);
      
      String string4 = StringUtils.removeAll("codefx", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("codefx", string4);
      
      String string5 = StringUtils.prependIfMissing("Failed to create custom temp directory", "y", charSequenceArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("yFailed to create custom temp directory", string5);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "3");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("3", 22, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("3                     ", string1);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string2 = locale0.getDisplayScript();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      
      String string3 = StringUtils.lowerCase("Failed to get parent directory from provider", locale0);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("failed to get parent directory from provider", string3);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "3", (CharSequence) "");
      assertEquals(1, int0);
      
      String string4 = StringUtils.substringBetween("", "", "codefx");
      assertNull(string4);
      
      String string5 = StringUtils.upperCase("failed to get parent directory from provider", locale0);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("FAILED TO GET PARENT DIRECTORY FROM PROVIDER", string5);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string6 = StringUtils.replaceAll("`j0hh4pDof/*57N", "failed to get parent directory from provider", " vs ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("`j0hh4pDof/*57N", string6);
      
      String string7 = StringUtils.replace("\"|o9{=\"|o9{=", "3                     ", "3                     ");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("\"|o9{=\"|o9{=", string7);
      
      String string8 = StringUtils.reverseDelimited("FAILED TO GET PARENT DIRECTORY FROM PROVIDER", '?');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertEquals("FAILED TO GET PARENT DIRECTORY FROM PROVIDER", string8);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "codefx";
      charSequenceArray0[1] = (CharSequence) "FAILED TO GET PARENT DIRECTORY FROM PROVIDER";
      charSequenceArray0[2] = (CharSequence) "";
      String string9 = StringUtils.removeEnd("", (String) null);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      assertEquals("", string9);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string10 = StringUtils.prependIfMissingIgnoreCase("Arguments cannot both be null", "3-XNT*,L:;", charSequenceArray0);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertEquals("Arguments cannot both be null", string10);
      assertEquals(4, charSequenceArray0.length);
      
      String string11 = StringUtils.repeat(']', 1);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string1));
      assertEquals("]", string11);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("", "", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("\n", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootLowerCase("DefaultTimeZone");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("defaulttimezone", string1);
      
      String string2 = StringUtils.stripToNull("DefaultTimeZone");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("DefaultTimeZone", string2);
      
      String string3 = StringUtils.swapCase("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("@dEFAULTlOCALE NOT CONFIGURED CORRECTLY. wHEN NOT USING A LANGUAGE TAG, SPECIFY EITHERLANGUAGE, OR LANGUAGE AND COUNTRY, OR LANGUAGE AND COUNTRY AND VARIANT.", string3);
      
      String string4 = StringUtils.abbreviate("DefaultTimeZone", "defaulttimezone", 52);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("DefaultTimeZone", string4);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String[] stringArray0 = StringUtils.substringsBetween("DefaultTimeZone", ")WF.y}{3*>zz<21UO4D", "@dEFAULTlOCALE NOT CONFIGURED CORRECTLY. wHEN NOT USING A LANGUAGE TAG, SPECIFY EITHERLANGUAGE, OR LANGUAGE AND COUNTRY, OR LANGUAGE AND COUNTRY AND VARIANT.");
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "@dEFAULTlOCALE NOT CONFIGURED CORRECTLY. wHEN NOT USING A LANGUAGE TAG, SPECIFY EITHERLANGUAGE, OR LANGUAGE AND COUNTRY, OR LANGUAGE AND COUNTRY AND VARIANT.", 52);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.rotate(" ", 2);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(" ", string5);
      
      String string6 = StringUtils.substring("'/s^EpSsrZSXO93%/w", 1, 44);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("/s^EpSsrZSXO93%/w", string6);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("gR7=zVL96yO<", "!u", "!u");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      String string0 = StringUtils.rotate("Extension context \"", 32);
      assertNotNull(string0);
      assertEquals("ion context \"Extens", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("Extension context \"");
      assertTrue(boolean0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.capitalize("Extension context \"");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Extension context \"", string1);
      
      String string2 = StringUtils.truncate("Arguments cannot both be null", 32, 32);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceChars("ion context \"Extens", "Extension context \"", "ion context \"Extens");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ntcxttcn onxsion co", string3);
      
      String string4 = StringUtils.lowerCase((String) null);
      assertNull(string4);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      Locale locale1 = Locale.GERMAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotNull(locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("de", locale2.toString());
      
      boolean boolean1 = locale1.hasExtensions();
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale1.equals((Object)locale2));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      String string5 = StringUtils.rightPad("offset cannot be negative", 46);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("offset cannot be negative                     ", string5);
      
      String string6 = StringUtils.remove("Raa\"X<d.D#=k", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Raa\"X<d.D#=k", string6);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      
      boolean boolean2 = StringUtils.equalsIgnoreCase(charBuffer0, "=Rp4X;g.YT],z");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      
      String string7 = StringUtils.removeIgnoreCase("maxWith cannot be negative", (String) null);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("maxWith cannot be negative", string7);
      
      String[] stringArray0 = StringUtils.substringsBetween("Extension context \"", "offset cannot be negative", "9^kEud{1r 1kLdls");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      String string0 = StringUtils.remove("iA(~4Xf4j8", (String) null);
      assertNotNull(string0);
      assertEquals("iA(~4Xf4j8", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "A(~4Xf4j8", "iA(~4Xf4j8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string0);
      assertEquals("U'o}\"\bWIWv7", string0);
      assertEquals(2, objectArray0.length);
      
      String string1 = StringUtils.rightPad("\r", 22, "U'o}\"\bWIWv7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\rU'o}\"\bWIWv7U'o}\"\bWIWv", string1);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string2 = StringUtils.replaceEach("[%", (String[]) null, (String[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[%", string2);
      
      String string3 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.split("09Y@=|", 'H');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 22;
      doubleArray0[2] = (double) 22;
      doubleArray0[3] = (double) 'H';
      String string4 = StringUtils.join(doubleArray0, 'H');
      assertNotNull(string4);
      assertArrayEquals(new double[] {0.0, 22.0, 22.0, 72.0}, doubleArray0, 0.01);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("0.0H22.0H22.0H72.0", string4);
      assertEquals(4, doubleArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "0.0H22.0H22.0H72.0", (CharSequence) "\rU'o}\"\bWIWv7U'o}\"\bWI");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("U'o}\"\bWIWv7");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("[%", (String) null, 0);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparator("U'o}\"\bWIWv7", "[%", 22);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertEquals(1, stringArray3.length);
      
      String string5 = StringUtils.rotate("', is neither of type Map.Entry nor an Array", (-1));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(", is neither of type Map.Entry nor an Array'", string5);
      
      int int1 = StringUtils.compare("org.junitpioneer.jupiter.params.DoubleRange", "09Y@=|");
      assertFalse(int1 == int0);
      assertEquals(63, int1);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      String string0 = "org.junitpioneer.vintage.ExpectedExceptionExtension";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      String string1 = StringUtils.replaceChars("org.junitpioneer.vintage.ExpectedExceptionExtension", "Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string1);
      
      boolean boolean0 = StringUtils.isNotBlank("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertTrue(boolean0);
      
      String string2 = StringUtils.abbreviateMiddle("Cannot store ", "Minimum abbreviation width is %d", (-81));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Cannot store ", string2);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((-81));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("3VY$A9Vt~4D^tXb>k~", "3", (-467));
      assertNotNull(string0);
      assertEquals("3VY$A9Vt~4D^tXb>k~", string0);
      
      boolean boolean0 = StringUtils.isAlpha("3VY$A9Vt~4D^tXb>k~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, "`Ne}Ta2\"pU@>\"C");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, '\u0001');
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("`Ne}Ta2\"pU@>\"C", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, '>', 82, 82);
      assertNull(string0);
      
      String string1 = StringUtils.truncate((String) null, 82);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = StringUtils.LF;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\n", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "3dt", 20);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.wrapIfMissing("", 'm');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.uncapitalize("");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = StringUtils.replaceIgnoreCase(" ", "3dt", "=-FCbH");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals(" ", string6);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'm');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = "_Ui<A#42>5Z/3yEqQ ";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Aborting to protect against StackOverflowError - output of one loop is the input of another", supplier0);
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'w');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Failed to create default temp directory", " ");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.replaceEachRepeatedly("A%D=}>YZ#l.ob", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("A%D=}>YZ#l.ob", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("\n");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("\n", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.substring("(5'XPYT6){.--", 6, 108);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("T6){.--", string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string2 = StringUtils.replaceEachRepeatedly("T6){.--", stringArray0, stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("T6){.--", string2);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.replaceEachRepeatedly("The CharacterxmuVt not be null", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("The CharacterxmuVt not be null", string0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      String string0 = StringUtils.removeEnd("$:wZ8&0b:(jg_ct", "");
      assertNotNull(string0);
      assertEquals("$:wZ8&0b:(jg_ct", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "$:wZ8&0b:(jg_ct", (CharSequence) "$:wZ8&0b:(jg_ct", (-2602));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.reverse("p#|%Ozij>p?#=");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("=#?p>jizO%|#p", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("p#|%Ozij>p?#=", "aMhF+A.;,RhEa.s~");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("p#|%Ozij>p?#=", string2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "p#|%Ozij>p?#=";
      stringArray0[1] = "p#|%Ozij>p?#=";
      stringArray0[2] = "~WSQ+";
      stringArray0[3] = "~WSQ+";
      stringArray0[4] = "aMhF+A.;,RhEa.s~";
      stringArray0[5] = "";
      stringArray0[6] = "-cFdh6fL5}E-cFdh6fL5}E";
      stringArray0[7] = "CQ4(dAa1NBQBgH8]T";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "p{InCombiningD");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("p#|%Ozij>p?#=", "p#|%Ozij>p?#=");
      assertTrue(boolean0);
      
      String string3 = StringUtils.rotate("$:wZ8&0b:(jg_ct", (-2597));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("wZ8&0b:(jg_ct$:", string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("-cFdh6fL5}E-cFdh6fL5}E");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.removeEndIgnoreCase("", "maxWith cannot be negative");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("CQ4(dAa1NBQBgH8]T"));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(stack0.contains("CQ4(dAa1NBQBgH8]T"));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, '_');
      assertNotNull(string5);
      assertFalse(stack0.contains("CQ4(dAa1NBQBgH8]T"));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      String string0 = StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, "@FDjAR/`cLC'JV2j");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("BkJBDL+", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("BkJBDL+", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("[!TY", "[!TY");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string0 = StringUtils.swapCase("_Ui<A#42>5Z/3yEqQ ");
      assertNotNull(string0);
      assertEquals("_uI<a#42>5z/3YeQq ", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("_uI<a#42>5z/3YeQq ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_uI<a#42>5z/3YeQq ";
      boolean boolean2 = StringUtils.isEmpty("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("j_D8-Qo2pE23vCXc+n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      String string1 = StringUtils.appendIfMissingIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension", charSequenceArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string1);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStartIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      String string3 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(0, locale_CategoryArray0.length);
      
      String string4 = StringUtils.appendIfMissing("org.junitpioneer.vintage.ExpectedExceptionExtension", "", charSequenceArray0);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string4);
      assertEquals(2, charSequenceArray0.length);
      
      String string5 = StringUtils.substringBefore("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "gqPV|c7A(,\"h*9(");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", string5);
      
      boolean boolean0 = StringUtils.isAlpha("gqPV|c7A(,\"h*9(");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.junitpioneer.vintage.ExpectedExceptionExtension";
      stringArray0[1] = "Test '%s' was supposed to run no longer than %d ms but ran %d ms.";
      stringArray0[2] = ",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3@FDjAR/`cLC'JV2j";
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "&*eTgb[$jUzvwJO{", 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string0 = StringUtils.rotate(" ", Integer.MIN_VALUE);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      String string1 = StringUtils.toRootLowerCase(" ");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      String string2 = StringUtils.replace(" ", " ", "!a%UJf");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("!a%UJf", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) " ";
      String string3 = StringUtils.LF;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\n", string3);
      
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "!a%UJf";
      charSequenceArray0[3] = (CharSequence) " ";
      boolean boolean0 = StringUtils.startsWithAny(" ", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string4 = StringUtils.deleteWhitespace("\"|o9{=28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B; 28?{'\"7%");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\"|o9{=28,NtLJz/)w[?=B;13abl]e28,NtLJz/)w[?=B;28?{'\"7%", string4);
      
      String string5 = StringUtils.replacePattern(" ", "!a%UJf", " 3dt");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" ", string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", charSequenceArray0[0]);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints(" ");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {32}, intArray0);
      assertEquals(1, intArray0.length);
      
      String string6 = StringUtils.mid("JIwYJN{p2%w'7FT5&Y", 0, 18);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("JIwYJN{p2%w'7FT5&Y", string6);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      String string0 = StringUtils.substringAfter("maxWith cannot be negative", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      int int0 = StringUtils.compare("'268`", "T%jF9");
      assertEquals((-45), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.prependIfMissingIgnoreCase("\u0000MRwm-ks]mJov>Qk'", "\u0000MRwm-ks]mJov>Qk'", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("\u0000MRwm-ks]mJov>Qk'", string0);
      assertEquals(7, charSequenceArray0.length);
      
      charSequenceArray0[0] = (CharSequence) "\u0000MRwm-ks]mJov>Qk'";
      charSequenceArray0[1] = (CharSequence) "'268`";
      charSequenceArray0[2] = (CharSequence) "'268`";
      charSequenceArray0[3] = (CharSequence) "T%jF9";
      charSequenceArray0[4] = (CharSequence) "T%jF9";
      charSequenceArray0[5] = (CharSequence) "T%jF9";
      String string1 = StringUtils.substringAfter("'268`", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[6] = (CharSequence) "";
      String string2 = StringUtils.appendIfMissingIgnoreCase("'268`", "T%jF9", charSequenceArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("'268`", string2);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.removeStartIgnoreCase((String) null, "#:*it1?C%");
      assertNull(string3);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string4 = StringUtils.removePattern("T%jF9", "'268`");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("T%jF9", string4);
      
      String string5 = StringUtils.join((float[]) null, 't', 8, 256);
      assertNull(string5);
      
      String string6 = StringUtils.removeAll(".", (String) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals(".", string6);
      
      String string7 = StringUtils.prependIfMissing("#:*it1?C%", "T%jF9", charSequenceArray0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("#:*it1?C%", string7);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.substringBetween("_", "_");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, 'I');
      assertNotNull(string1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, shortArray0.length);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "";
      int int0 = StringUtils.indexOf(charSequenceArray0[3], 1017);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.defaultIfBlank("", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.uncapitalize((String) null);
      assertNull(string4);
      
      String string5 = "maxWith cannot be negative";
      String string6 = StringUtils.getDigits((String) null);
      assertNull(string6);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[0]);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAny(charSequenceArray0[4], charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(7, charSequenceArray0.length);
      
      int int2 = 290;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("S(P/28", "Locale must not be null", 290, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 24
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("g{=._yR)!u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "MuK");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = "28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B; 28?{'\"7%";
      try { 
        StringUtils.toString(byteArray0, "28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B; 28?{'\"7%");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, 'I');
      assertNotNull(string1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, shortArray0.length);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.stripEnd("", "Q'l*%'%v,X^ FN%<");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.trimToNull("Strings must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Strings must not be null", string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      String string5 = StringUtils.join(charArray0, 'I', 9, (-2771));
      assertNotNull(string5);
      assertArrayEquals(new char[] {'I', 'I', 'I'}, charArray0);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertEquals(3, charArray0.length);
      
      String string6 = StringUtils.rightPad("", (-2335), '/');
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String[] stringArray0 = StringUtils.split("", "", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int1 = StringUtils.indexOfAnyBut(charSequenceArray0[1], charArray0);
      assertArrayEquals(new char[] {'I', 'I', 'I'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(3, charArray0.length);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "', has a length less than 2", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(1756, 1175.2393F);
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(1756));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = hashSet0.add(object0);
      assertFalse(hashSet0.contains(1756));
      assertTrue(hashSet0.contains(object0));
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      boolean boolean1 = hashSet0.add(object0);
      assertFalse(hashSet0.contains(1756));
      assertTrue(hashSet0.contains(object0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean2 = hashSet0.add(object1);
      assertFalse(hashSet0.contains(1756));
      assertTrue(hashSet0.contains(object1));
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      
      boolean boolean3 = hashSet0.add(object0);
      assertFalse(hashSet0.contains(1756));
      assertTrue(hashSet0.contains(object1));
      assertNotSame(object0, object1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      boolean boolean4 = StringUtils.startsWithAny("Strings must not be null", (CharSequence[]) null);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string1 = StringUtils.deleteWhitespace("...");
      assertNotNull(string1);
      assertEquals("...", string1);
      
      String string2 = StringUtils.replacePattern("Rl2b /yFry{O~@", "Strings must not be null", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Rl2b /yFry{O~@", string2);
      
      String string3 = StringUtils.replace((String) null, "Strings must not be null", (String) null);
      assertNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "hfov.~}8F7", (CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      assertEquals(0, int0);
      
      String string4 = StringUtils.leftPad("Locale must not be null13Abl]E", 0, '{');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Locale must not be null13Abl]E", string4);
      
      boolean boolean5 = StringUtils.containsNone((CharSequence) "F>\"c-dg)OWY\"y!", (String) null);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '{';
      String string5 = StringUtils.valueOf(charArray0);
      assertNotNull(string5);
      assertArrayEquals(new char[] {'8', '8', '{'}, charArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("88{", string5);
      assertEquals(3, charArray0.length);
      
      String string6 = StringUtils.removeFirst((String) null, "...");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      String string0 = StringUtils.repeat("\n", 2708);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) string0;
      String string1 = StringUtils.toRootLowerCase((String) null);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) string0;
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      String string1 = StringUtils.join((List<?>) stack0, '2', 0, 0);
      assertNotNull(string1);
      assertFalse(stack0.contains(0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      assertNotNull(predicate0);
      
      boolean boolean0 = stack0.add((Object) predicate0);
      assertFalse(stack0.contains(0));
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      Locale.Category[] locale_CategoryArray0 = Locale.Category.values();
      assertNotNull(locale_CategoryArray0);
      assertEquals(2, locale_CategoryArray0.length);
      
      Locale.Category[] locale_CategoryArray1 = Locale.Category.values();
      assertNotNull(locale_CategoryArray1);
      assertNotSame(locale_CategoryArray1, locale_CategoryArray0);
      assertFalse(locale_CategoryArray1.equals((Object)locale_CategoryArray0));
      assertEquals(2, locale_CategoryArray1.length);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(0));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = hashSet0.add(object0);
      assertFalse(hashSet0.contains(0));
      assertTrue(hashSet0.contains(object0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      String string2 = StringUtils.join((Iterable<?>) stack0, 'c');
      assertNotNull(string2);
      assertFalse(stack0.contains('c'));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean2 = hashSet0.add(object1);
      assertFalse(hashSet0.contains('c'));
      assertTrue(hashSet0.contains(object0));
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'U';
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'2', 'U'}, charArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(2, charArray0.length);
      
      String string3 = StringUtils.stripEnd("", "java.util.function.Predicate$$Lambda$135/1612072765@3cd9010");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "java.util.function.Predicate$$Lambda$135/1612072765@3cd9010", (int) 'U');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string5 = StringUtils.substring("P", (-544));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("P", string5);
      
      String string6 = StringUtils.strip(" 3dt", " 3dt");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      
      boolean boolean4 = StringUtils.isNumericSpace("");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("*ZS3JV=~<^&.5SxR", "*ZS3JV=~<^&.5SxR", "*ZS3JV=~<^&.5SxR");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *ZS3JV=~<^&.5SxR
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.center("lgj<D@^ROE.+", 14, "lgj<D@^ROE.+");
      assertNotNull(string0);
      assertEquals("llgj<D@^ROE.+l", string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("<F?k$_", "llgj<D@^ROE.+l", stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<F?k$_llgj<D@^ROE.+l", string1);
      assertEquals(3, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("lgj<D@^ROE.+", "<F?k$_llgj<D@^ROE.+l", 14);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(13, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      String string0 = StringUtils.replacePattern("F", "F", "F");
      assertNotNull(string0);
      assertEquals("F", string0);
      
      String string1 = StringUtils.stripEnd("F", "F");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("", (int) 'b');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("                                                                                                  ", string2);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string3 = locale0.getDisplayScript();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      String string4 = StringUtils.lowerCase("Failed to get parent directory from provider", locale0);
      assertNotNull(string4);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("failed to get parent directory from provider", string4);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "failed to get parent directory from provider", (CharSequence) "failed to get parent directory from provider");
      assertEquals(0, int0);
      
      String string5 = StringUtils.substringBetween("rUsjA:6<`;", "DefaultLocale", "                                                                                                  ");
      assertNull(string5);
      
      String string6 = StringUtils.upperCase("                                                                                                  ", locale0);
      assertNotNull(string6);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("                                                                                                  ", string6);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string7 = StringUtils.replaceAll("Locale must not be null", "Illegal range. Equal from and to will produce an empty range.", "                                                                                                  ");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("Locale must not be null", string7);
      
      int[] intArray0 = StringUtils.toCodePoints("                                                                                                  ");
      assertNotNull(intArray0);
      assertEquals(98, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("I3", "Illegal range. Equal from and to will produce an empty range.", 0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", '$');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeAll("13Abl]E", "13Abl]E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate("", "", 693, 693);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceIgnoreCase("", "N", "                                                                                                           qZjLcF6DbA|", 47);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string4 = StringUtils.replaceIgnoreCase("R;0]-{b5", "6~A6Ok+th(O", " ", 3512);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("R;0]-{b5", string4);
      
      String string5 = StringUtils.unwrap("", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      int int1 = StringUtils.ordinalIndexOf("                                                                                                           qZjLcF6DbA|", "", 693);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.getDigits("N");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.join((float[]) null, '');
      assertNull(string7);
      
      String string8 = StringUtils.wrapIfMissing(" ", '=');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertEquals("= =", string8);
      
      String string9 = StringUtils.rightPad("ExpectedException", (-1582));
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertEquals("ExpectedException", string9);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "ExpectedException");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.abbreviate("AV", "AV", Integer.MAX_VALUE);
      assertNotNull(string0);
      assertEquals("AV", string0);
      
      String string1 = StringUtils.replaceChars("AV", "AV", " dT=T");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" d", string1);
      
      String string2 = StringUtils.truncate("Minimum abbreviation width with offset is %d", Integer.MAX_VALUE);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.lowerCase(" dT=T");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" dt=t", string3);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      boolean boolean1 = locale0.hasExtensions();
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String string4 = StringUtils.substringBefore("AV", "AV");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "AV", Integer.MAX_VALUE);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "4oRV", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      stack0.addElement("");
      assertTrue(stack0.contains(""));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(stack0.contains(""));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      stack0.replaceAll(unaryOperator0);
      assertTrue(stack0.contains(""));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, 'f');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      String string0 = StringUtils.replaceChars("-cFdh6fL5}E", "", "");
      assertNotNull(string0);
      assertEquals("-cFdh6fL5}E", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("*p5$4", "-cFdh6fL5}E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("*p5$4", string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-cFdh6fL5}E";
      stringArray0[1] = "-cFdh6fL5}E";
      stringArray0[3] = "d%Z_";
      stringArray0[4] = "*p5$4";
      stringArray0[5] = "*p5$4";
      stringArray0[6] = "";
      stringArray0[7] = "*p5$4";
      stringArray0[8] = "\n";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "*p5$4");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      
      int int0 = 8;
      String string2 = StringUtils.rotate("The character must not be null", 8);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" be nullThe character must not", string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("The character must not be null"));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(stack0.contains("The character must not be null"));
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      boolean boolean1 = stack0.add((Object) locale_FilteringMode0);
      assertFalse(stack0.contains("The character must not be null"));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[EXTENDED_FILTERING]", stack0.toString());
      assertFalse(stack0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, 'N');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      String string0 = StringUtils.lowerCase("The Character must not be null");
      assertNotNull(string0);
      assertEquals("the character must not be null", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      String string1 = StringUtils.trimToNull("the character must not be null");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("the character must not be null", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "the character must not be null", ":n7i*cB");
      assertEquals(4, int0);
      
      String string2 = StringUtils.replacePattern("-E6K9", "org.junitpioneer.jupiter.DefaultTimeZoneExtension", "QDYVp=#L(wG]S+~");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-E6K9", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isNumeric("the character must not be null");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("b", "3-XNT*,L:;", "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("b", string3);
      
      String string4 = StringUtils.reverseDelimited("the character must not be null", '{');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("the character must not be null", string4);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "the character must not be null", (CharSequence) "the character must not be null");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("Arguments cannot both be null", (CharSequence) null, (CharSequence[]) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Arguments cannot both be null", string5);
      
      String string6 = StringUtils.repeat('o', 4);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("oooo", string6);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      String[] stringArray0 = new String[17];
      String string0 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertNull(string0);
      assertEquals(17, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((CharSequence) null).when(supplier0).get();
      CharSequence charSequence1 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence1);
      
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'T';
      intArray0[1] = 2909;
      intArray0[2] = 2909;
      String string0 = StringUtils.join(intArray0, 'O', 2909, 2909);
      assertNotNull(string0);
      assertArrayEquals(new int[] {84, 2909, 2909}, intArray0);
      assertEquals("", string0);
      assertEquals(3, intArray0.length);
      
      String string1 = StringUtils.prependIfMissing((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      assertNotNull(list1);
      assertFalse(list1.contains(string0));
      assertFalse(arrayDeque0.contains(string0));
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string2 = StringUtils.join((List<?>) vector0, 'O', 2909, 26);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.split(" ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      String string0 = StringUtils.repeat("\"\"cBLH'", 34);
      assertNotNull(string0);
      assertEquals("\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'\"\"cBLH'", string0);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      String string0 = StringUtils.repeat("io", 3);
      assertNotNull(string0);
      assertEquals("ioioio", string0);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootLowerCase("13Abl]E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("13abl]e", string1);
      
      String string2 = StringUtils.stripToNull("13abl]e");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("13abl]e", string2);
      
      String string3 = StringUtils.wrap("13abl]e", "28,NtLJz/)w [?=B;");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", (String) null, "The character ", 55);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string5 = StringUtils.strip("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", string5);
      
      String string6 = StringUtils.repeat('\'', (-606));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      
      String string7 = StringUtils.chop("");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      
      boolean boolean1 = StringUtils.isMixedCase("The character ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[0];
      String string8 = StringUtils.joinWith("", objectArray0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      assertEquals(0, objectArray0.length);
      
      String string9 = StringUtils.repeat("13Abl]E", 55);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertEquals("13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E13Abl]E", string9);
      
      String string10 = StringUtils.chomp("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", " 28?{'\"7%");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string5));
      assertEquals("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", string10);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      String string0 = StringUtils.repeat("_", 2704);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Vector<String> vector0 = new Vector<String>(0, 1610);
      assertNotNull(vector0);
      assertFalse(vector0.contains(""));
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.add("G1j-\"");
      assertTrue(vector0.contains("G1j-\""));
      assertFalse(vector0.contains(""));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals("[G1j-\"]", vector0.toString());
      assertEquals(1610, vector0.capacity());
      assertEquals(1, vector0.size());
      
      boolean boolean1 = vector0.add("G1j-\"");
      assertTrue(vector0.contains("G1j-\""));
      assertFalse(vector0.contains(""));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals("[G1j-\", G1j-\"]", vector0.toString());
      assertEquals(2, vector0.size());
      assertEquals(1610, vector0.capacity());
      
      vector0.trimToSize();
      assertTrue(vector0.contains("G1j-\""));
      assertFalse(vector0.contains(""));
      assertFalse(vector0.isEmpty());
      assertEquals("[G1j-\", G1j-\"]", vector0.toString());
      assertEquals(2, vector0.capacity());
      assertEquals(2, vector0.size());
      
      String string1 = "\r";
      boolean boolean2 = vector0.add("\r");
      assertTrue(vector0.contains(string1));
      assertFalse(vector0.contains(""));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(vector0.isEmpty());
      assertEquals("[G1j-\", G1j-\", \r]", vector0.toString());
      assertEquals(1612, vector0.capacity());
      assertEquals(3, vector0.size());
      
      boolean boolean3 = vector0.add("'AWh~X]T)");
      assertTrue(vector0.contains(string1));
      assertFalse(vector0.contains(""));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertFalse(vector0.isEmpty());
      assertEquals(4, vector0.size());
      assertEquals(1612, vector0.capacity());
      assertEquals("[G1j-\", G1j-\", \r, 'AWh~X]T)]", vector0.toString());
      
      boolean boolean4 = vector0.add("Failed to delete temp directory ");
      assertTrue(vector0.contains(string1));
      assertFalse(vector0.contains(""));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertFalse(vector0.isEmpty());
      assertEquals(5, vector0.size());
      assertEquals(1612, vector0.capacity());
      assertEquals("[G1j-\", G1j-\", \r, 'AWh~X]T), Failed to delete temp directory ]", vector0.toString());
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string2 = StringUtils.leftPad("'AWh~X]T)", 2320, (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      try { 
        StringUtils.getBytes("$.?U[c:.m:", "SmADKtXkkfe+3<O");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-817);
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = (int) 'x';
      intArray0[4] = 26;
      intArray0[5] = (-817);
      intArray0[6] = (int) 'x';
      String string0 = StringUtils.join(intArray0, 's', 101, (-817));
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-817), 3, 0, 120, 26, (-817), 120}, intArray0);
      assertEquals("", string0);
      assertEquals(7, intArray0.length);
      
      String string1 = StringUtils.leftPad("rt", (-30), "Locale must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("rt", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Locale must not be null", 120);
      assertFalse(boolean0);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      String string2 = StringUtils.join((List<?>) stack0, 'x', 2583, 560);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      String string3 = StringUtils.substringBetween("ExceptionWasThrown", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, 'I');
      assertNotNull(string1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, shortArray0.length);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.stripEnd("", "Q'l*%'%v,X^ FN%<");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.trimToNull("Strings must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Strings must not be null", string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Q'l*%'%v,X^ FN%<", "wT3c@|k", 1941);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Object varargs must not be null");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      String string5 = StringUtils.join(byteArray0, '5');
      assertNotNull(string5);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("-1", string5);
      assertEquals(1, byteArray0.length);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase(charSequenceArray0[6], "Strings must not be null");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      String string0 = StringUtils.rotate("Extension context \"", 32);
      assertNotNull(string0);
      assertEquals("ion context \"Extens", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("Extension context \"");
      assertTrue(boolean0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.capitalize("Extension context \"");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Extension context \"", string1);
      
      String string2 = StringUtils.substringAfter("Arguments cannot both be null", "Minimum abbreviation width is %d");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ion context \"Extens", '<');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = "Ucm0N_;+boN";
      String string4 = "eIO-@ETs:5";
      String string5 = StringUtils.leftPad("eIO-@ETs:5", 712, (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEqualseIO-@ETs:5", string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "Extension context \"", 897);
      assertEquals((-1), int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string6 = StringUtils.getIfBlank("", supplier0);
      assertNull(string6);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "Extension context \"", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string0 = StringUtils.getIfBlank("", (Supplier<String>) null);
      assertNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, (-1), (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      String string0 = StringUtils.removeStart("g61VR:^", "g61VR:^");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfBlank("", supplier0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.wrapIfMissing("", "3");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("3", 22, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("3                     ", string2);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string3 = locale0.getDisplayScript();
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      String string4 = StringUtils.lowerCase("Failed to get parent directory from provider", locale0);
      assertNotNull(string4);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("failed to get parent directory from provider", string4);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "3", (CharSequence) "");
      assertEquals(1, int0);
      
      String string5 = "codefx";
      String string6 = StringUtils.substringBetween("", "", "codefx");
      assertNull(string6);
      
      String string7 = null;
      String string8 = StringUtils.leftPad("maxWith cannot be negative", 1, "Ucm0N_;+boN");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertEquals("maxWith cannot be negative", string8);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 22);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string9 = StringUtils.getIfBlank("eIO-@ETs:5", (Supplier<String>) null);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertEquals("eIO-@ETs:5", string9);
      
      Locale locale2 = Locale.JAPAN;
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("", locale2.getVariant());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("JP", locale2.getCountry());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      
      int int2 = StringUtils.getFuzzyDistance("failed to get parent directory from provider", "3", locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals("", locale2.getVariant());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("JP", locale2.getCountry());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      String string0 = StringUtils.substringAfter(";", ";");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ";", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("n;ZzL");
      assertNotNull(string0);
      assertEquals("N;ZZL", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("}\u0006", "N;ZZL");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.truncate("<", 2616, 2616);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceChars("offset cannot be negative", (String) null, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("offset cannot be negative", string2);
      
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.lowerCase((String) null);
      assertNull(string4);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      Locale locale1 = Locale.GERMAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotNull(locale2);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("de", locale2.toString());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      
      boolean boolean0 = locale0.hasExtensions();
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(boolean0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(locale1));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(locale1));
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList0);
      assertNotNull(list0);
      assertFalse(linkedList0.contains(locale1));
      assertFalse(list0.contains(locale1));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Locale locale3 = Locale.FRANCE;
      assertNotNull(locale3);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertEquals("fr_FR", locale3.toString());
      assertEquals("FRA", locale3.getISO3Country());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("FR", locale3.getCountry());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      
      String string5 = locale3.getDisplayScript();
      assertNotNull(string5);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertEquals("", string5);
      assertEquals("fr_FR", locale3.toString());
      assertEquals("FRA", locale3.getISO3Country());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("FR", locale3.getCountry());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      
      String string6 = StringUtils.upperCase("org.junitpioneer.jupiter.params.Range", locale0);
      assertNotNull(string6);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale2));
      assertEquals("ORG.JUNITPIONEER.JUPITER.PARAMS.RANGE", string6);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      String string7 = "\\u";
      String string8 = StringUtils.center("Don't clear/set the same property more than once.", 1125, "rA.&m-D`A!(");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) string7, "");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, ':', 1893, 1893);
      assertNull(string0);
      
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1115);
      shortArray0[1] = (short) (-2342);
      shortArray0[2] = (short) (-1306);
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.strip("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.join((int[]) null, 'k', (int) (short) (-1306), 76);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("maxWith cannot be negative", "ta8&:O N");
      assertNotNull(string0);
      assertEquals("ta8&:O NmaxWith cannot be negativeta8&:O N", string0);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("OWI~Le&CkX", "OWI~Le&CkX");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "OWI~Le&CkX", "OWI~Le&CkX");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "", 3585);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      String string0 = StringUtils.center("org.junitpioneer.vintage.ExpectedExceptionExtension", (-1891));
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      int int0 = StringUtils.lastIndexOfAny("org.junitpioneer.vintage.ExpectedExceptionExtension", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.left("", (-1302));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "U0C]\u0002^Rs", "org.junitpioneer.vintage.ExpectedExceptionExtension", 0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.defaultString("9&0M2t{YGe", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("9&0M2t{YGe", string3);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("DefaultTimeZone");
      assertNotNull(string1);
      assertEquals("defaulttimezone", string1);
      
      String string2 = StringUtils.stripToNull("DefaultTimeZone");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("DefaultTimeZone", string2);
      
      String string3 = StringUtils.wrap((String) null, "{Ltl)h,dQRx6=ci 8)");
      assertNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "DefaultTimeZone", "`l_UkB5", 55);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "DefaultTimeZone", (-669));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.unwrap("f`R$x8r)`8y.md", "Minimum abbreviation width is %d");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("f`R$x8r)`8y.md", string5);
      
      int int1 = StringUtils.ordinalIndexOf("DefaultTimeZone", (CharSequence) null, 55);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.join((float[]) null, '');
      assertNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("", '=');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      
      String string8 = StringUtils.rightPad("org.junitpioneer.jupiter.params.Range", 15);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertEquals("org.junitpioneer.jupiter.params.Range", string8);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("org.junitpioneer.jupiter.params.Range", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((CharSequence) null).when(supplier0).get();
      CharSequence charSequence1 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence1);
      
      charSequenceArray0[0] = null;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-804);
      shortArray0[1] = (short)65;
      shortArray0[2] = (short) (-1800);
      shortArray0[3] = (short)101;
      shortArray0[4] = (short)2292;
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.split("Locale must not be null");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("\r", 'o');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string1 = StringUtils.chomp("\"|o9{=", "28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B; 28?{'\"7%");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"|o9{=", string1);
      
      double[] doubleArray0 = new double[0];
      String string2 = StringUtils.join(doubleArray0, 'o');
      assertNotNull(string2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(0, doubleArray0.length);
      
      String string3 = StringUtils.substring("/{o[P:jo!z7jz9in|t<", 12, (-2811));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int0 = StringUtils.compareIgnoreCase("vn4Po", "aQL.yB-6l84q-fo", false);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("org", (String) null, false);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      int int1 = (-895);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'p', (-895), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -895
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, ':', ':');
      assertNull(string0);
      
      String string1 = StringUtils.stripStart("``````````````````````````", (String) null);
      assertNotNull(string1);
      assertEquals("``````````````````````````", string1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "``````````````````````````", false);
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("``````````````````````````");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.stripAccents("E]@m^\"Gtm8Zm");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("E]@m^\"Gtm8Zm", string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripAccents("|Dy");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("|Dy", string3);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("%.C+*V6qN5@R", "F6h!|", 1);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("``````````````````````````", ':');
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      
      String string4 = StringUtils.truncate("|Dy", 27);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("|Dy", string4);
      
      String string5 = StringUtils.getDigits("xP~HuF}|B*3x:I");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("3", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "``````````````````````````";
      charSequenceArray0[1] = (CharSequence) "%.C+*V6qN5@R";
      charSequenceArray0[2] = (CharSequence) "E]@m^\"Gtm8Zm";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "E]@m^\"Gtm8Zm";
      String string6 = StringUtils.prependIfMissing("Don't clear/set the same property more than once.", (CharSequence) null, charSequenceArray0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Don't clear/set the same property more than once.", string6);
      assertEquals(5, charSequenceArray0.length);
      
      String string7 = StringUtils.trimToNull("F6h!|");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("F6h!|", string7);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string1 = StringUtils.toRootLowerCase("DefaultTimeZone");
      assertNotNull(string1);
      assertEquals("defaulttimezone", string1);
      
      String string2 = StringUtils.stripToNull("DefaultTimeZone");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("DefaultTimeZone", string2);
      
      String string3 = StringUtils.wrap((String) null, "{Ltl)h,dQRx6=ci 8)");
      assertNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "DefaultTimeZone", "`l_UkB5", 55);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string5 = StringUtils.unwrap("f`R$x8r)`8y.md", "Minimum abbreviation width is %d");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("f`R$x8r)`8y.md", string5);
      
      int int0 = StringUtils.ordinalIndexOf("DefaultTimeZone", (CharSequence) null, 55);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.rightPad("\n", 55, '');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("\n", string6);
      
      String string7 = StringUtils.wrapIfMissing("", '=');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      
      String string8 = StringUtils.rightPad("org.junitpioneer.jupiter.params.Range", 15);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertEquals("org.junitpioneer.jupiter.params.Range", string8);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("org.junitpioneer.jupiter.params.Range", "");
      assertFalse(boolean0);
      
      String string9 = StringUtils.substringAfterLast("defaulttimezone", (String) null);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertEquals("", string9);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "{Ltl)h,dQRx6=ci 8)");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("q\"-FN", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'f');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("\"", "\"", "\"");
      assertNotNull(string0);
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) " in n array of ", (CharSequence[]) stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      String string0 = StringUtils.upperCase("j_D8-Qo2pE23vCXc+n");
      assertNotNull(string0);
      assertEquals("J_D8-QO2PE23VCXC+N", string0);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "Test '%s' was supposed to run no longer than %d ms but ran %d ms.", 102);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.rightPad("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", 102, 'O');
      assertNotNull(string0);
      assertEquals("Test '%s' was supposed to run no longer than %d ms but ran %d ms.OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", string0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      String string1 = StringUtils.upperCase("Test '%s' was supposed to run no longer than %d ms but ran %d ms.OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", locale0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("TEST '%S' WAS SUPPOSED TO RUN NO LONGER THAN %D MS BUT RAN %D MS.OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", string1);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      String string2 = StringUtils.upperCase("3");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("3", string2);
      
      boolean boolean0 = StringUtils.isAlpha("Test '%s' was supposed to run no longer than %d ms but ran %d ms.OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "Strings must not be null");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("/'~d>zp#E#LC_]G");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/'~d>zp#E#LC_]G", string1);
      
      String string2 = StringUtils.toRootLowerCase(" 28?{'\"7%");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" 28?{'\"7%", string2);
      
      String string3 = StringUtils.replace("", "", "Strings must not be null");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.deleteWhitespace("Jg/_AB?iP].c>{");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Jg/_AB?iP].c>{", string4);
      
      String string5 = StringUtils.replacePattern("SnW?OU", " ", "Comparator should not be null.");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("SnW?OU", string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "SnW?OU", (CharSequence) "");
      assertEquals(0, int0);
      
      String string6 = StringUtils.leftPad("N;ZZL", 0, 'P');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("N;ZZL", string6);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[16];
      charSequenceArray0[0] = (CharSequence) "u9j#vd=9$SWj3%%f?K";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "u9j#vd=9$SWj3%%f?K";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "u9j#vd=9$SWj3%%f?K";
      String string0 = StringUtils.appendIfMissingIgnoreCase("u9j#vd=9$SWj3%%f?K", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("u9j#vd=9$SWj3%%f?K", string0);
      assertEquals(16, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(charSequenceArray0[2], charSequenceArray0[1]);
      assertFalse(boolean0);
      assertEquals(16, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsIgnoreCase(charSequenceArray0[1], charSequenceArray0[0]);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase(charSequenceArray0[2]);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 13);
      assertEquals(0, int0);
      
      String string1 = StringUtils.reverse("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("~WSQ+", "     ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("~WSQ+", string2);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "*p5$4");
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("     ", "~WSQ+");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rotate("     ", (-2597));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("     ", string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("     ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.removeEndIgnoreCase("The Character must not be null", "RepeatFailedTestExtension");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("The Character must not be null", string4);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("~WSQ+"));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(stack0.contains("~WSQ+"));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, '?');
      assertNotNull(string5);
      assertFalse(stack0.contains("~WSQ+"));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("R", "\n");
      assertNotNull(string0);
      assertEquals("R", string0);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("The Character must not be null", "The Character must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[0] = 'Y';
      String string1 = StringUtils.wrapIfMissing(" vs ", '\u0000');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs ", string1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("!sD9pV??$KjznIhL", "!sD9pV??$KjznIhL");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBeforeLast("Search and Replace array lengths don't match: ", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ", string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.strip("Search and Replace array lengths don't match: ", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("", "Search and Replace array lengths don't match: ");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ");
      assertEquals(0, int0);
      
      String string4 = StringUtils.appendIfMissing("hj,-,i2=NW[", "Search and Replace array lengths don't match: ", (CharSequence[]) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("hj,-,i2=NW[Search and Replace array lengths don't match: ", string4);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("", "X_zp", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.join((int[]) null, 'R');
      assertNull(string4);
      
      String string5 = StringUtils.trimToNull("");
      assertNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "X_zp", "Failed to delete temp directory ");
      assertEquals(3, int0);
      
      String string6 = StringUtils.replacePattern("y\r", "Failed to delete temp directory ", "9");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("y\r", string6);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another", false);
      assertEquals(1, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charArray0);
      assertArrayEquals(new char[] {'2', '2', '2', '2'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      
      String string0 = StringUtils.stripToNull("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 13);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-560), 'j');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      String string0 = StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.mid("", (-3649), (-3649));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.replaceFirst(",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3", (String) null, ":tTQQB. 3}HU<.");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3", string2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 'q';
      doubleArray0[2] = (double) 'q';
      doubleArray0[3] = 825.26;
      doubleArray0[4] = 0.0;
      String string3 = StringUtils.join(doubleArray0, 'q');
      assertNotNull(string3);
      assertArrayEquals(new double[] {0.0, 113.0, 113.0, 825.26, 0.0}, doubleArray0, 0.01);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("0.0q113.0q113.0q825.26q0.0", string3);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.substringBefore("^lpo4XuvSf\"5&jC!,]", "org.junitpioneer.jupiter.params.Rangedj{t5caY");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("^lpo4XuvSf\"5&jC!,]", string4);
      
      String string5 = StringUtils.trimToNull(",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals(",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3", string5);
      
      String string6 = StringUtils.center("^lpo4XuvSf\"5&jC!,]", 16, "org.junitpioneer.jupiter.params.Rangedj{t5caY");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("^lpo4XuvSf\"5&jC!,]", string6);
      
      String string7 = StringUtils.removeEnd(",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3", "@FDjAR/`cLC'JV2j");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals(",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3", string7);
      
      String string8 = StringUtils.stripStart("Minimum abbreviation width with offset is %d", "org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertEquals("Minimum abbreviation width with offset is %d", string8);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      String string0 = StringUtils.center("Minimum abbreviation width with offset is %d", 10, "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      String string0 = StringUtils.swapCase(" vs ");
      assertNotNull(string0);
      assertEquals(" VS ", string0);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "The Character must not be null";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      String string0 = StringUtils.swapCase("H8PX");
      assertNotNull(string0);
      assertEquals("h8px", string0);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.abbreviate("Threshold must not be negative", "Threshold must not be negative", 82);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Threshold must not be negative", string1);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string0 = StringUtils.swapCase("_Ui<A#42>5Z/3yEqQ ");
      assertNotNull(string0);
      assertEquals("_uI<a#42>5z/3YeQq ", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("_uI<a#42>5z/3YeQq ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_uI<a#42>5z/3YeQq ";
      stringArray0[1] = "";
      stringArray0[2] = "_uI<a#42>5z/3YeQq ";
      stringArray0[3] = "_Ui<A#42>5Z/3yEqQ ";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'D', 21, 1213);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      String string0 = "@~.hGC{";
      char char0 = 'B';
      String string1 = StringUtils.unwrap("@~.hGC{", 'B');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("@~.hGC{", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "@~.hGC{", (CharSequence) "@~.hGC{");
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      
      String string2 = locale0.getDisplayCountry();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Japan", string2);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 46;
      longArray0[3] = (long) 'B';
      longArray0[4] = (long) 'B';
      longArray0[5] = (long) 'B';
      char char1 = 'p';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'p', (-1), 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) charBuffer0, (CharSequence) null);
      assertFalse(boolean0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("n;ZzL");
      assertNotNull(string0);
      assertEquals("N;ZZL", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("}\u0006", "N;ZZL");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.substringAfter("<", "Search and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("N;ZZL", '<');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string2 = StringUtils.leftPad("\"|o9{=\"|o9{=", 913, "Ucm0N_;+boN");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Ucm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+bo\"|o9{=\"|o9{=", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Ucm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+bo\"|o9{=\"|o9{=", (-1611));
      assertEquals((-1), int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfBlank("Ucm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+bo\"|o9{=\"|o9{=", supplier0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("Ucm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+bo\"|o9{=\"|o9{=", string3);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '<';
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      
      int int1 = StringUtils.getFuzzyDistance("\"|o9{=\"|o9{=", "Ucm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+bo\"|o9{=\"|o9{=", locale0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      
      boolean boolean0 = StringUtils.startsWith("Search and Replace array lengths don't match: ", "Ucm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+boNUcm0N_;+bo\"|o9{=\"|o9{=");
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.reverse("*p5$4");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("4$5p*", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase((String) null, "");
      assertNull(string2);
      
      String string3 = StringUtils.left("Strings must not be null", (-1456));
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 'L';
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 'L';
      longArray0[5] = (long) 0;
      String string4 = StringUtils.join(longArray0, 'n');
      assertNotNull(string4);
      assertArrayEquals(new long[] {0L, 76L, 0L, 0L, 76L, 0L}, longArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("0n76n0n0n76n0", string4);
      assertEquals(6, longArray0.length);
      
      String string5 = StringUtils.lowerCase("dj{t5caY");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("dj{t5cay", string5);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)1;
      String string6 = StringUtils.removePattern("0n76n0n0n76n0", (String) null);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("0n76n0n0n76n0", string6);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("*p5$4", "0n76n0n0n76n0");
      assertFalse(boolean0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "dj{t5caY", (CharSequence) null);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string6));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string3));
      assertEquals("dj{t5caY", charSequence0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "dj{t5caY", (CharSequence) "dj{t5caY", (int) (byte)93);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string7 = StringUtils.removePattern("", "pUB");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, "dj{t5caY");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.replaceIgnoreCase((String) null, " ", "");
      assertNull(string8);
      
      String string9 = StringUtils.center((String) null, (int) (byte)1, "");
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      String string0 = StringUtils.rotate("/p14jO6$l", 36);
      assertNotNull(string0);
      assertEquals("/p14jO6$l", string0);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("gO!l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.rotate("Minimum abbreviation width is %d", 321);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dMinimum abbreviation width is %", string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "dMinimum abbreviation width is %", charArray0);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.abbreviate("dMinimum abbreviation width is %", 598, 47);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("dMinimum abbreviation width is %", string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("dMinimum abbreviation width is %");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.unwrap("dMinimum abbreviation width is %", "Minimum abbreviation width is %d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("dMinimum abbreviation width is %", string3);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("\nM?k$#_", "rRng2mXdBSTN");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("\nM?k$#_", "rRng2mXdBSTN");
      assertEquals((-104), int0);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "1v", 'v');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String string0 = StringUtils.abbreviate("", "", 51, 5);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("DefaultTimeZone");
      assertNotNull(string1);
      assertEquals("defaulttimezone", string1);
      
      String string2 = StringUtils.stripToNull("DefaultTimeZone");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("DefaultTimeZone", string2);
      
      String string3 = StringUtils.wrap((String) null, "{Ltl)h,dQRx6=ci 8)");
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("DefaultTimeZone", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = ",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3@FDjAR/`cLC'JV2j";
      int int0 = StringUtils.compareIgnoreCase(",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3@FDjAR/`cLC'JV2j", "a3>qFH8@<eeTy]");
      assertEquals((-53), int0);
      
      String string5 = StringUtils.trimToNull("tEi*aRaBLddf?");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("tEi*aRaBLddf?", string5);
      
      String string6 = ".+";
      String string7 = StringUtils.chop(".+");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals(".", string7);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray1);
      
      String string8 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string8);
      
      char char0 = '0';
      int int1 = StringUtils.countMatches((CharSequence) null, '0');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray2 = StringUtils.split("k=`P_i6([Y,N;*50y", 'V');
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("tEi*aRaBLddf?", (-3512));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.params.RangeSourceProvider\r");
      assertNotNull(stringArray0);
      assertEquals(15, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeAll("13Abl]E", "13Abl]E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate("", "", 693, 693);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "CRHvIT{\"C^$x?d1X{");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("yOLX#7^(?ozN9gqe+");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.compareIgnoreCase("org.junitpioneer.jupiter.params.Rangedj{t5caY", "The Character must not be null");
      assertFalse(int1 == int0);
      assertEquals((-5), int1);
      
      String string3 = StringUtils.trimToNull("13Abl]E");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("13Abl]E", string3);
      
      String string4 = StringUtils.chop("org.junitpioneer.jupiter.params.Rangedj{t5caY");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.Rangedj{t5ca", string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(">oWGd");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string5 = StringUtils.firstNonBlank(stringArray1);
      assertNotNull(string5);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(">oWGd", string5);
      assertEquals(1, stringArray1.length);
      
      int int2 = StringUtils.countMatches((CharSequence) "org.junitpioneer.jupiter.params.IntRange", '3');
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String[] stringArray2 = StringUtils.split("$?bT~G%9", '3');
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      
      String string6 = StringUtils.truncate("", 693);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      int int3 = StringUtils.countMatches((CharSequence) "13Abl]E", '3');
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      
      String[] stringArray3 = StringUtils.splitByCharacterType(">oWGd");
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertEquals(4, stringArray3.length);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootLowerCase("13Abl]E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("13abl]e", string1);
      
      String string2 = StringUtils.stripToNull("13abl]e");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("13abl]e", string2);
      
      String string3 = StringUtils.wrap("13abl]e", "28,NtLJz/)w [?=B;");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", (String) null, "The character ", 55);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string5 = StringUtils.replaceChars("p{InCombiningDiacriticalMarks}+", "\r", "13abl]e");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("p{InCombiningDiacriticalMarks}+", string5);
      
      String string6 = StringUtils.strip("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", string6);
      
      String string7 = StringUtils.repeat('\'', (-606));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      
      String string8 = StringUtils.chop("");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      
      boolean boolean1 = StringUtils.isMixedCase("The character ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[0];
      String string9 = StringUtils.joinWith("", objectArray0);
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertEquals("", string9);
      assertEquals(0, objectArray0.length);
      
      String string10 = StringUtils.removeStart("p{InCombiningDiacriticalMarks}+", "F>\"c-dg)OWY\"y!");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertEquals("p{InCombiningDiacriticalMarks}+", string10);
      
      String string11 = StringUtils.chomp("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", " 28?{'\"7%");
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertTrue(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string5));
      assertTrue(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertEquals("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", string11);
      
      int int1 = StringUtils.compare("", "\"|o9{=28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B; 28?{'\"7%");
      assertFalse(int1 == int0);
      assertEquals((-56), int1);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      String string0 = StringUtils.removeAll("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("i+H!{&-7.A1@@@V");
      assertNotNull(string0);
      assertEquals("i+H!{&-7.A1@@@V", string0);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("(spy;Y12L5pBHw", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(spy;Y12L5pBHw", string1);
      
      String[] stringArray0 = StringUtils.split("", "", (-2856));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.removePattern("]+TWYr4", "2");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("]+TWYr4", string2);
      
      String string3 = StringUtils.join((float[]) null, 'F', (-2856), 32);
      assertNull(string3);
      
      String string4 = StringUtils.removeAll("Ecj%'kQ9 ", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Ecj%'kQ9 ", string4);
      
      String string5 = StringUtils.uncapitalize("(spy;Y12L5pBHw");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("(spy;Y12L5pBHw", string5);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "UqLN(V},n";
      String string0 = StringUtils.prependIfMissingIgnoreCase("UqLN(V},n", "\"", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("UqLN(V},n", string0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[13];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissingIgnoreCase("'Ll6k", "U'o}\"\bWIWv7", charSequenceArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'Ll6k", string1);
      assertEquals(13, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStartIgnoreCase("'Ll6k", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("'Ll6k", string2);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string3 = StringUtils.removePattern("]2LO,&", "org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("]2LO,&", string3);
      
      String string4 = StringUtils.join((float[]) null, 't', 0, 2950);
      assertNull(string4);
      
      String string5 = StringUtils.removeAll("-cFdh6fL5}E-cFdh6fL5}E", "'Ll6k");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("-cFdh6fL5}E-cFdh6fL5}E", string5);
      
      String string6 = StringUtils.prependIfMissing("g_3/oOih-y?:z?v'X", "'Ll6k", charSequenceArray0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("g_3/oOih-y?:z?v'X", string6);
      assertEquals(13, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, "2");
      assertNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '%';
      charArray0[2] = 't';
      String[] stringArray0 = StringUtils.split("maxWith cannot be negative", "]+TWYr4", 0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.removePattern((String) null, "");
      assertNull(string1);
      
      String string2 = StringUtils.join((float[]) null, '%', 0, 0);
      assertNull(string2);
      
      String string3 = StringUtils.removeAll("", ".un\"a_34QRhb2>^");
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals(2, stringArray0.length);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      String string5 = StringUtils.lowerCase("org.junitpioneer.jupiter.params.Rangedj{t5caY", locale0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("org.junitpioneer.jupiter.params.rangedj{t5cay", string5);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      String string0 = StringUtils.repeat('1', 650);
      assertNotNull(string0);
      assertEqualsstring0);
      
      int int0 = StringUtils.countMatches((CharSequenceharSequence
      assertEquals(1, int0);
      
      int int1 = StringUtils.indexOf((CharSequence
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.strip("Locale must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Locale must not be null", string1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 1;
      intArray0[2] = 26;
      intArray0[3] = 26;
      intArray0[4] = (int) 'T';
      String string2 = StringUtils.join(intArray0, '$', 53, (-1));
      assertNotNull(string2);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 1, 26, 26, 84}, intArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(5, intArray0.length);
      
      String string3 = StringUtils.left("Expected exactly one annotation to provide an ArgumentSource, found %d.", 30);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Expected exactly one annotatio", string3);
      
      String string4 = StringUtils.prependIfMissing("", "Locale must not be null", (CharSequence[]) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("Locale must not be null", string4);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(string0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      assertFalse(arrayDeque0.contains(string0));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) list0);
      assertNotNull(list1);
      assertFalse(list0.contains(string0));
      assertFalse(list1.contains(string0));
      assertFalse(arrayDeque0.contains(string0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join(list0, 'e', 1, 33);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 33
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      String string0 = StringUtils.replacePattern("The Character must not be null", "", "");
      assertNotNull(string0);
      assertEquals("The Character must not be null", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "The Character must not be null", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.left("vm|nw", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "The Character must not be null", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertFalse(stack0.contains(""));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      String string1 = StringUtils.join((List<?>) stack0, '2', 0, 0);
      assertNotNull(string1);
      assertFalse(stack0.contains(0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      assertNotNull(predicate0);
      
      String string2 = StringUtils.toRootLowerCase("Strings must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("strings must not be null", string2);
      
      boolean boolean0 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.deleteWhitespace("Minimum abbreviation width is %d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Minimumabbreviationwidthis%d", string3);
      
      String string4 = StringUtils.replacePattern("", "", "hfov.~}8F7");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("hfov.~}8F7", string4);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.0;
      String string5 = StringUtils.join(doubleArray0, '2');
      assertNotNull(string5);
      assertArrayEquals(new double[] {(-1.0), 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("-1.020.021.0", string5);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = StringUtils.endsWithAny("", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Vector<String> vector0 = new Vector<String>(0, 1610);
      assertNotNull(vector0);
      assertFalse(vector0.contains(string0));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      String string1 = StringUtils.normalizeSpace("Failed to delete temp directory ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Failed to delete temp directory", string1);
      
      String string2 = StringUtils.CR;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string3 = StringUtils.deleteWhitespace("Failed to create custom temp directory");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Failedtocreatecustomtempdirectory", string3);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1610;
      intArray0[1] = 1610;
      intArray0[2] = 1610;
      intArray0[3] = 0;
      intArray0[4] = 1610;
      String string4 = StringUtils.join(intArray0, '$');
      assertNotNull(string4);
      assertArrayEquals(new int[] {1610, 1610, 1610, 0, 1610}, intArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("1610$1610$1610$0$1610", string4);
      assertEquals(5, intArray0.length);
      
      String string5 = StringUtils.normalizeSpace("%IA%>n!v5Q;%{ocGQ .");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("%IA%>n!v5Q;%{ocGQ .", string5);
      
      boolean boolean0 = StringUtils.endsWithAny("%IA%>n!v5Q;%{ocGQ .", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(6, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removePattern("(8/YCB", "(8/YCB");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 6
         // (8/YCB
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 0, (-2399));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0, 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat("uG", (-456));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = linkedHashSet0.add(locale_Category0);
      assertTrue(linkedHashSet0.contains(locale_Category0));
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Iterator<Locale.Category> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(linkedHashSet0.contains(locale_Category0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      String string2 = StringUtils.join(iterator0, "rUsjA:6<`;");
      assertNotNull(string2);
      assertTrue(linkedHashSet0.contains(locale_Category0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("DISPLAY", string2);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      String string3 = StringUtils.trimToNull("DISPLAY");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("DISPLAY", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("DISPLAY", "rUsjA:6<`;", 1941);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      String string4 = StringUtils.join(byteArray0, '$');
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("-1$0", string4);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(" ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.stripEnd(" >9*k%O,5", " >9*k%O,5");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " >9*k%O,5", (CharSequence) " >9*k%O,5", 3017);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.chomp(" ");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      
      String string3 = StringUtils.removeIgnoreCase(" ", "n;ZzL");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals(" ", string3);
      
      String string4 = StringUtils.unwrap(" >9*k%O,5", " ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" >9*k%O,5", string4);
      
      String string5 = StringUtils.truncate("P.W>br", 683);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("P.W>br", string5);
      
      boolean boolean1 = StringUtils.isAlpha("P.W>br");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string6 = StringUtils.normalizeSpace(" ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean2 = StringUtils.containsAny((CharSequence) "P.W>br", charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(1, charSequenceArray0.length);
      
      String string7 = StringUtils.stripEnd(" ", " ");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertEquals("", string7);
      
      boolean boolean3 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.ordinalIndexOf("", (CharSequence) null, 415);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("97M2+$i8A_Idg", "97M2+$i8A_Idg");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      String string0 = StringUtils.leftPad("97M2+$i8A_Idg", 564, "97M2+$i8A_Idg");
      assertNotNull(string0);
      assertEquals("97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+$i8A_Idg97M2+97M2+$i8A_Idg", string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("97M2+$i8A_Idg", stringArray0);
      assertFalse(boolean0);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string1 = StringUtils.toRootLowerCase("DefaultTimeZone");
      assertNotNull(string1);
      assertEquals("defaulttimezone", string1);
      
      String string2 = StringUtils.stripToNull("DefaultTimeZone");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("DefaultTimeZone", string2);
      
      String string3 = StringUtils.wrap((String) null, "{Ltl)h,dQRx6=ci 8)");
      assertNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "DefaultTimeZone", "`l_UkB5", 55);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string5 = StringUtils.unwrap("f`R$x8r)`8y.md", "Minimum abbreviation width is %d");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("f`R$x8r)`8y.md", string5);
      
      int int0 = StringUtils.ordinalIndexOf("DefaultTimeZone", (CharSequence) null, 55);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.join((float[]) null, '');
      assertNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("", '=');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      
      String string8 = StringUtils.rightPad("org.junitpioneer.jupiter.params.Range", 15);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.params.Range", string8);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("org.junitpioneer.jupiter.params.Range", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootLowerCase("13Abl]E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("13abl]e", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("13abl]e", "13abl]e");
      assertEquals(1.0, double0, 0.01);
      
      String string2 = StringUtils.chomp((String) null, "13Abl]E");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isEmpty("13Abl]E");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.join((int[]) null, 'L');
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("I^ZyV<\"EAKcw6e)", '\\');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\\I^ZyV<\"EAKcw6e)\\", string4);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string5 = StringUtils.unwrap("I^ZyV<\"EAKcw6e)", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("I^ZyV<\"EAKcw6e)", string5);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("f$wnJ>m");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("f$wnJ>m", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "f$wnJ>m");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrap("o=6@,k-", "#Gh$p3GbbZcPe!");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#Gh$p3GbbZcPe!o=6@,k-#Gh$p3GbbZcPe!", string2);
      
      String string3 = StringUtils.toRootLowerCase("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.startsWithAny("#Gh$p3GbbZcPe!o=6@,k-#Gh$p3GbbZcPe!", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replacePattern("YAh!SkU:W", "", "dj{t5caY");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("dj{t5caYYdj{t5caYAdj{t5caYhdj{t5caY!dj{t5caYSdj{t5caYkdj{t5caYUdj{t5caY:dj{t5caYWdj{t5caY", string4);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) ')';
      String string5 = StringUtils.join(floatArray0, 'p');
      assertNotNull(string5);
      assertArrayEquals(new float[] {41.0F}, floatArray0, 0.01F);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("41.0", string5);
      assertEquals(1, floatArray0.length);
      
      String string6 = StringUtils.wrapIfMissing("o=6@,k-", '\u0015');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("\u0015o=6@,k-\u0015", string6);
      
      String string7 = StringUtils.rightPad("Zh@d~BALYBp%7\":", 438);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      int[] intArray0 = new int[8];
      intArray0[0] = (-1200);
      intArray0[1] = (-1200);
      intArray0[2] = (int) 'k';
      intArray0[3] = (-1200);
      intArray0[4] = (int) 'k';
      intArray0[5] = 5331;
      intArray0[6] = (int) 'k';
      intArray0[7] = 0;
      String string0 = StringUtils.join(intArray0, 'k', 1654, (-1200));
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-1200), (-1200), 107, (-1200), 107, 5331, 107, 0}, intArray0);
      assertEquals("", string0);
      assertEquals(8, intArray0.length);
      
      String string1 = StringUtils.trim("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 4476);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B; 28?{'\"7%";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "^/>?[b^3[S";
      stringArray0[5] = "";
      String string2 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.prependIfMissingIgnoreCase("Mndticr", "UqLN(V},n", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("UqLN(V},nMndticr", string0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.prependIfMissingIgnoreCase("UqLN(V},n", "\n", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("\nUqLN(V},n", string0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("ExceptionWasThrown", "ExceptionWasThrown", stringArray0);
      assertNotNull(string0);
      assertEquals("ExceptionWasThrown", string0);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.strip("y\r");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("y", string1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 26;
      String string2 = StringUtils.join(intArray0, 'T', (-1582), (-1582));
      assertNotNull(string2);
      assertArrayEquals(new int[] {26}, intArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(1, intArray0.length);
      
      String string3 = StringUtils.left("0gw", (-2061));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.prependIfMissing("", "y\r", (CharSequence[]) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("y\r", string4);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("13Abl]E"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(arrayDeque0.contains("13Abl]E"));
      assertFalse(list0.contains("13Abl]E"));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) list0);
      assertNotNull(list1);
      assertFalse(arrayDeque0.contains("13Abl]E"));
      assertFalse(list0.contains("13Abl]E"));
      assertFalse(list1.contains("13Abl]E"));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join(list1, '5', 13, 26);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 26
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, 'O', (-1118), (int) 'O');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1118
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      String string0 = StringUtils.substringBefore("JqQ#c", "JqQ#c");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("JqQ#c", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.chomp("JqQ#c", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("JqQ#c", string1);
      
      boolean boolean0 = StringUtils.isEmpty("JqQ#c");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", "I^ZyV<\"EAKcw6e)", "JqQ#c");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2001);
      String string3 = StringUtils.join(intArray0, 'f');
      assertNotNull(string3);
      assertArrayEquals(new int[] {(-2001)}, intArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("-2001", string3);
      assertEquals(1, intArray0.length);
      
      String string4 = StringUtils.trimToNull("");
      assertNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.replacePattern("-2001", "Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", "^dhiQWAw/ aSxMJ<7R");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("-2001", string5);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "^dhiQWAw/ aSxMJ<7R");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.leftPad("JqQ#c", (-844), '5');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("JqQ#c", string6);
      
      double[] doubleArray0 = new double[0];
      String string7 = StringUtils.join(doubleArray0, '4');
      assertNotNull(string7);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 26;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      String string0 = StringUtils.wrap((String) null, "13Abl]E");
      assertNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replacePattern("z@EEr&_%w", "hfov.~}8F7", "$DsES:}");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("z@EEr&_%w", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "13Abl]E", (CharSequence) null);
      assertEquals(0, int0);
      
      String string3 = StringUtils.leftPad(")%3jTT", 6, 't');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(")%3jTT", string3);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "3z7]/o");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      String string0 = StringUtils.lowerCase("The Character must not be null");
      assertNotNull(string0);
      assertEquals("the character must not be null", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = 'Y';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "the character must not be null", charArray0);
      assertArrayEquals(new char[] {'o', 'Y'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      String string1 = StringUtils.stripToNull("the character must not be null");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("the character must not be null", string1);
      
      String string2 = StringUtils.wrapIfMissing(" vs ", 'Y');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Y vs Y", string2);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string3 = StringUtils.center("gD:~fy0", (-126), "the character must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("gD:~fy0", string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "The Character must not be null", "WaVbEgL<m[");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.rotate(" vs ", (-1002));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("s  v", string4);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "13Abl]E", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[3] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[4] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[5] = "";
      stringArray0[6] = "13Abl]E";
      String string1 = StringUtils.replaceEach("p{InCombiningDiacriticalMarks}+", (String[]) null, stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertEquals(7, stringArray0.length);
      
      String string2 = StringUtils.capitalize("<R(/VR");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("<R(/VR", string2);
      
      String string3 = StringUtils.truncate("", 0, 5);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceChars("", "Comparator should not be null.", "Comparator should not be null.");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.getDigits("");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "13Abl]E", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals((-1), int0);
      
      String string6 = StringUtils.lowerCase("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("p{incombiningdiacriticalmarks}+", string6);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      
      boolean boolean1 = locale0.hasExtensions();
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      
      String string7 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("yj(/\"E>B{I ", "", 13, 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      String string0 = StringUtils.difference("_#4TOz$r", "_#4TOz$r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      int int0 = StringUtils.indexOfAny((CharSequence) "_#4TOz$r", "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviate("_#4TOz$r", "", (-1), (-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_#4TOz$r", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("_#4TOz$r", "_#4TOz$r");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      String string0 = StringUtils.removeEnd("y", "\r");
      assertNotNull(string0);
      assertEquals("y", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "\r");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.chomp("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", string1);
      
      boolean boolean0 = StringUtils.isEmpty("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((int[]) null, 'L');
      assertNull(string2);
      
      String string3 = StringUtils.trimToNull("y");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("y", string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertEquals(0, int0);
      
      String string4 = StringUtils.replacePattern("a@H $7`<J`4}IdB8", "org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("a@H $7`<J`4}IdB8", string4);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replace("p6x{J06,", "b", "\r");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("p6x{J06,", string5);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "p6x{J06,", (CharSequence) "\r");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "g{=._yR)!u", "\"");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.removeEnd("', has a length less than 2", string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', has a length less than 2", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("', has a length less than 2", string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.chomp(string0, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isEmpty("', has a length less than 2");
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((int[]) null, 'L');
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing((String) null, '>');
      assertNull(string4);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "(]vu|q=#gt", 20);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = '\\';
      charArray0[2] = 'L';
      charArray0[3] = '>';
      charArray0[4] = 'L';
      charArray0[5] = 'L';
      charArray0[6] = '>';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'>', '\\', 'L', '>', 'L', 'L', '>'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, '');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "g{=._yR)!u", "g{=._yR)!u");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '!', (int) '!', (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      String string0 = StringUtils.capitalize("SoxnLk");
      assertNotNull(string0);
      assertEquals("SoxnLk", string0);
      
      int int0 = 25;
      String string1 = StringUtils.rightPad("Y&Z=-`.\f=+iPWB", 25);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y&Z=-`.\f=+iPWB          ", string1);
      
      int int1 = StringUtils.length("SoxnLk");
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "SoxnLk", 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      String string0 = StringUtils.leftPad("ArMK+<p6{|=;n`v}45", 336, "Object varargs must not be null");
      assertNotNull(string0);
      assertEquals("Object varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject vArMK+<p6{|=;n`v}45", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Object varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject vArMK+<p6{|=;n`v}45", (CharSequence) "ArMK+<p6{|=;n`v}45");
      assertEquals(318, int0);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1115);
      shortArray0[1] = (short) (-2342);
      shortArray0[2] = (short) (-1306);
      String string2 = StringUtils.stripStart("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", (int) (short) (-1115));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.strip("lh)rGR]X|rn", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("lh)rGR]X|rn", string3);
      
      String string4 = StringUtils.center("", 71, "Q'l*%'%v");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Q'l*%'%vQ'l*%'%vQ'l*%'%vQ'l*%'%vQ'lQ'l*%'%vQ'l*%'%vQ'l*%'%vQ'l*%'%vQ'l*", string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, "=o@L2");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "lh)rGR]X|rn", 186);
      assertEquals(11, int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("1276-24690646060", "/>UN*&< ASEyH");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string6 = StringUtils.substringAfter("", (String) null);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertEquals(1, stringArray1.length);
      
      String string7 = StringUtils.rightPad("", (-2026));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      String string0 = StringUtils.stripAccents("!:tkIyq,p~k<~lV");
      assertNotNull(string0);
      assertEquals("!:tkIyq,p~k<~lV", string0);
      
      String string1 = StringUtils.truncate("N   ", 32);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("N   ", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "!:tkIyq,p~k<~lV";
      charSequenceArray0[1] = (CharSequence) "N   ";
      charSequenceArray0[2] = (CharSequence) "N   ";
      charSequenceArray0[4] = (CharSequence) "!:tkIyq,p~k<~lV";
      char[] charArray0 = new char[6];
      String string2 = StringUtils.join(charArray0, '\\');
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\u0000\\\u0000\\\u0000\\\u0000\\\u0000\\\u0000", string2);
      assertEquals(6, charArray0.length);
      
      charSequenceArray0[4] = (CharSequence) "\u0000\u0000\u0000\u0000\u0000\u0000";
      charSequenceArray0[5] = (CharSequence) "N   ";
      String string3 = StringUtils.deleteWhitespace("N   ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("N", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("N   ", "\u0000\u0000\u0000\u0000\u0000\u0000", "N", 32);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("N   ", string4);
      
      String[] stringArray0 = StringUtils.split("N   ", "N", 289);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Efn", "\"");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.stripToNull("Efn");
      assertNotNull(string0);
      assertEquals("Efn", string0);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      String string0 = StringUtils.substringBefore("JqQ#c", "JqQ#c");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp("S*i2");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("S*i2", string1);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "S*i2";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("S*i2", string2);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("dsz:?oM rJ/oZ2", ')');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "JqQ#c", (CharSequence) "@FDjAR/`cLC'JV2j");
      assertEquals(0, int0);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("(5'XPYT6){.--");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(9, stringArray2.length);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("\r", "\r", 160);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertEquals(2, stringArray3.length);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      int int0 = 100;
      String string0 = StringUtils.capitalize("@FDjAR/`cLC'JV2j");
      assertNotNull(string0);
      assertEquals("@FDjAR/`cLC'JV2j", string0);
      
      char char0 = 'u';
      String string1 = StringUtils.join((double[]) null, 'u', 100, 1956);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split("@FDjAR/`cLC'JV2j", "E");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.stripStart("E", "E");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "@FDjAR/`cLC'JV2j", (String) null);
      assertNull(stringArray1);
      
      int int1 = 1886;
      String string3 = StringUtils.center("L>yG", 1886, (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join((Object[]) stringArray0, "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("@FDjAR/`cLC'JV2j", string4);
      assertEquals(1, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("xEH~m%v?", supplier0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("xEH~m%v?", string5);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "E", (CharSequence) "L>yG", 1956);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4, int2);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator((String) null, "b&x9H=YOFcsI_vN,");
      assertNull(stringArray2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "E", (CharSequence) "@FDjAR/`cLC'JV2j", (-4146));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      String string0 = StringUtils.repeat('?', 102);
      assertNotNull(string0);
      assertEquals("??????????????????????????????????????????????????????????????????????????????????????????????????????", string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "??????????????????????????????????????????????????????????????????????????????????????????????????????");
      assertEquals(0, int0);
      
      String string1 = StringUtils.normalizeSpace("/A0hA,QnZeXJH;S~1");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/A0hA,QnZeXJH;S~1", string1);
      
      String string2 = StringUtils.truncate(" ", 102);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "??????????????????????????????????????????????????????????????????????????????????????????????????????";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) " ";
      boolean boolean1 = StringUtils.startsWithAny("FgtT8N", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      String string3 = StringUtils.deleteWhitespace("sZsT<=M");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("sZsT<=M", string3);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      String string0 = StringUtils.removeEnd("y", "\r");
      assertNotNull(string0);
      assertEquals("y", string0);
      
      String string1 = "";
      String string2 = StringUtils.substringBetween("", "y");
      assertNull(string2);
      
      String string3 = "UPt #I";
      String string4 = StringUtils.unwrap("UPt #I", 'l');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("UPt #I", string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "y", (CharSequence) "");
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      
      String string5 = locale0.getDisplayCountry();
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Japan", string5);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 1;
      intArray0[2] = (-1);
      intArray0[3] = (int) 'l';
      intArray0[4] = (int) 'l';
      intArray0[5] = (-135);
      intArray0[6] = (-1);
      intArray0[7] = (int) 'l';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'l', (-925), 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -925
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      String string0 = StringUtils.remove("A(~4f4j8", "A(~4f4j8");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "A(~4f4j8", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "A(~4f4j8", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("3$\"gn\"DN)vJ(I");
      assertNotNull(string0);
      assertEquals("3$\"gn\"DN)vJ(I", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "3$\"gn\"DN)vJ(I";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "3$\"gn\"DN)vJ(I";
      objectArray0[3] = (Object) "3$\"gn\"DN)vJ(I";
      objectArray0[4] = (Object) "3$\"gn\"DN)vJ(I";
      objectArray0[5] = (Object) "3$\"gn\"DN)vJ(I";
      objectArray0[6] = (Object) "3$\"gn\"DN)vJ(I";
      objectArray0[7] = (Object) "3$\"gn\"DN)vJ(I";
      objectArray0[8] = (Object) "3$\"gn\"DN)vJ(I";
      String string1 = StringUtils.join(objectArray0, 'G', 15, 15);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(9, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "3$\"gn\"DN)vJ(I";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.appendIfMissing("3$\"gn\"DN)vJ(I", "", charSequenceArray0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("3$\"gn\"DN)vJ(I", string2);
      assertEquals(3, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.replaceIgnoreCase("`3:[", "F>\"c-dg)OWY\"y!", "Search and Replace array lengths don't match: ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("`3:[", string3);
      
      String string4 = StringUtils.joinWith("3$\"gn\"DN)vJ(I", objectArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(9, objectArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "3$\"gn\"DN)vJ(I3$\"gn\"DN)vJ(Ijava.lang.Object@5ccb8253$\"gn\"DN)vJ(I3$\"gn\"DN)vJ(I3$\"gn\"DN)vJ(I3$\"gn\"DN)vJ(I3$\"gn\"DN)vJ(I3$\"gn\"DN)vJ(I3$\"gn\"DN)vJ(I3$\"gn\"DN)vJ(I3$\"gn\"DN)vJ(I3$\"gn\"DN)vJ(I3$\"gn\"DN)vJ(I3$\"gn\"DN)vJ(I3$\"gn\"DN)vJ(I3$\"gn\"DN)vJ(I", 15);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      String string0 = "qZjLcF6\\DbA|";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("qZjLcF6DbA|");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
      
      String string1 = StringUtils.leftPad("qZjLcF6DbA|", 119);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                                                                                            qZjLcF6DbA|", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("                                                                                                           qZjLcF6DbA|", "                                                                                                           qZjLcF6DbA|", 119, 33);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 119
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("?56");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 102;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1751.7168F;
      floatArray0[3] = (float) 102;
      floatArray0[4] = 3625.8F;
      floatArray0[5] = (float) 102;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      String string0 = StringUtils.join(floatArray0, 'j');
      assertNotNull(string0);
      assertArrayEquals(new float[] {102.0F, 0.0F, 1751.7168F, 102.0F, 3625.8F, 102.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("102.0j0.0j1751.7168j102.0j3625.8j102.0j0.0j0.0", string0);
      assertEquals(8, floatArray0.length);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("102.0j0.0j1751.7168j102.0j3625.8j102.0j0.0j0.0");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceFirst("", (String) null, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 102;
      intArray0[1] = (int) '8';
      String string2 = StringUtils.join(intArray0, '8');
      assertNotNull(string2);
      assertArrayEquals(new int[] {102, 56}, intArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("102856", string2);
      assertEquals(2, intArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "102856", 73);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.defaultString("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, 'I');
      assertNotNull(string2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(0, shortArray0.length);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "";
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      String string4 = StringUtils.lowerCase("junit", locale0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("junit", string4);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[4], charSequenceArray0[0]);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("/WliOL-QUN5dLr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=/wliol-qun5dlr
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceEach(" ", (String[]) null, (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      String string2 = StringUtils.abbreviate(" 3dt", (String) null, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" 3dt", string2);
      
      String string3 = StringUtils.replaceChars(" 3dt", "XHwP3ZN#c|Q5Y $r`B", " 3dt");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("dt", string3);
      
      String string4 = StringUtils.getDigits("XHwP3ZN#c|Q5Y $r`B");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("35", string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, 'L');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("L", string5);
      assertEquals(2, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "L", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.lowerCase("");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KR", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KOR", locale1.getISO3Country());
      
      boolean boolean1 = locale0.hasExtensions();
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      String string7 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string7);
      
      String[] stringArray0 = StringUtils.split("@FDjAR/`cLC'JV2j", 'L');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "35", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) null;
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray1);
      assertNull(charSequence0);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals(2, charSequenceArray1.length);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceChars("Ct];'yT@%G:#aqjy", " 3dt", "b-H");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("C];'yT@%G:#aqjy", string2);
      
      String string3 = StringUtils.getDigits(" ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray1, 'L');
      assertNotNull(string4);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("L", string4);
      assertEquals(2, charSequenceArray1.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.lowerCase("b-H");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("b-h", string5);
      
      String string6 = StringUtils.leftPad(";MnnA|Ba>", (-1), 'L');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals(";MnnA|Ba>", string6);
      
      String string7 = StringUtils.joinWith("!`lnpwEV3{cAA;Etrh", charSequenceArray0);
      assertNotNull(string7);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("!`lnpwEV3{cAA;Etrh", string7);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray1.length);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("w]f8UZi`u3e28I^Z~", (-2488));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.normalizeSpace("\r");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "\r", 'j');
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'j', 0, 1550);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      String string0 = StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, "@FDjAR/`cLC'JV2j");
      assertFalse(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("@FDjAR/`cLC'JV2j"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[0] = (CharSequence) "";
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      String string0 = StringUtils.replaceChars(", Length: ", ", Length: ", "1v");
      assertNotNull(string0);
      assertEquals("1vv", string0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ";", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      
      String string0 = StringUtils.defaultString(";", ";");
      assertNotNull(string0);
      assertEquals(";", string0);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      String string0 = StringUtils.mid("38Am$qAk~`fC^&uD", 2, 2);
      assertNotNull(string0);
      assertEquals("Am", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "38Am$qAk~`fC^&uD", 42, 42);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      String string0 = StringUtils.mid("!:tkIyq,p~k<~lV", 16, 16);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.truncate("!:tkIyq,p~k<~lV", 16, 16);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 0, (-2378));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0, 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat("uG", (-456));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Iterator<Locale.Category> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String string2 = StringUtils.join(iterator0, "rUsjA:6<`;");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String string3 = StringUtils.substringAfterLast("", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "rUsjA:6<`;", 1941);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      String string4 = StringUtils.join(byteArray0, '$');
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("-1$0", string4);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = hashSet0.add(object0);
      assertTrue(hashSet0.contains(object0));
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = hashSet0.add(object1);
      assertTrue(hashSet0.contains(object0));
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      boolean boolean2 = hashSet0.add(object0);
      assertTrue(hashSet0.contains(object0));
      assertNotSame(object0, object1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1175.2393F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 1751.7168F;
      floatArray0[3] = 1751.7168F;
      floatArray0[4] = (float) '8';
      floatArray0[5] = 1751.7168F;
      floatArray0[6] = (float) '8';
      floatArray0[7] = (float) 1756;
      floatArray0[8] = (float) 0;
      String string0 = StringUtils.join(floatArray0, 'Q');
      assertNotNull(string0);
      assertArrayEquals(new float[] {1175.2393F, 0.0F, 1751.7168F, 1751.7168F, 56.0F, 1751.7168F, 56.0F, 1756.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("1175.2393Q0.0Q1751.7168Q1751.7168Q56.0Q1751.7168Q56.0Q1756.0Q0.0", string0);
      assertEquals(9, floatArray0.length);
      
      boolean boolean3 = StringUtils.isAsciiPrintable("1175.2393Q0.0Q1751.7168Q1751.7168Q56.0Q1751.7168Q56.0Q1756.0Q0.0");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string1 = StringUtils.replaceFirst("D$P$dI8>C=F", "'V\"T`0", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("D$P$dI8>C=F", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "'V\"T`0", 83);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 475);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commons.lang3.RegExUtils", "org.apache.commons.lang3.RegExUtils", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("68yK3IG$V6", '3');
      assertNotNull(string0);
      assertEquals("368yK3IG$V63", string0);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string1 = StringUtils.center("(Z7T=aQ$/Eu*&ndC", 4, "368yK3IG$V63");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(Z7T=aQ$/Eu*&ndC", string1);
      
      String string2 = StringUtils.getDigits("offset cannot be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "368yK3IG$V63", "4]r8}V[|6T2]`faY]'");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rotate("368yK3IG$V63", (-626));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("8yK3IG$V6336", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "4]r8}V[|6T2]`faY]'", (CharSequence) "4]r8}V[|6T2]`faY]'");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "offset cannot be negative", " 28?{'\"7%");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("F%[)vE(>G)rR", "F%[)vE(>G)rR", "F%[)vE(>G)rR");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, objectArray0.length);
      
      String string1 = StringUtils.left(",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3@FDjAR/`cLC'JV2j", (-644));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "U'o}\"\bWIWv7", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((float[]) null, 'z');
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("'Ll6k", '#');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("#'Ll6k#", string3);
      
      String string4 = StringUtils.rightPad("LaunchTime", (-690));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("LaunchTime", string4);
      
      String string5 = StringUtils.remove("'Ll6k", "Extension context \"");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("'Ll6k", string5);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("#'Ll6k#", "'Ll6k");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.removeIgnoreCase("LaunchTime", ",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3@FDjAR/`cLC'JV2j");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("LaunchTime", string6);
      
      String[] stringArray0 = StringUtils.substringsBetween("+u6N81$c+5%LU", (String) null, "#'Ll6k#");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      String string0 = StringUtils.truncate("@FDjAR/`cLC'JV2j", 353, 100);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((double[]) null, 'u', 100, 1956);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split("", "E");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.stripStart("E", "E");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "@FDjAR/`cLC'JV2j", (String) null);
      assertNull(stringArray1);
      
      String string3 = StringUtils.center("L>yG", 1886, (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join((Object[]) stringArray0, "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals(0, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("xEH~m%v?", supplier0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("xEH~m%v?", string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "E", (CharSequence) "L>yG", 1956);
      assertEquals(4, int0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator((String) null, "b&x9H=YOFcsI_vN,");
      assertNull(stringArray2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "", 353);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("Don't clear/set the same property more than once.");
      assertNotNull(string0);
      assertEquals("DON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.", string0);
      
      String string1 = StringUtils.wrapIfMissing("(spy;Y12L5pBHw", "DON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.(spy;Y12L5pBHwDON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.", string1);
      
      String[] stringArray0 = StringUtils.split("Don't clear/set the same property more than once.", "Don't clear/set the same property more than once.", (-2856));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.removePattern("]+TWYr4", "2");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("]+TWYr4", string2);
      
      String string3 = StringUtils.join((float[]) null, 'F', (-2856), 32);
      assertNull(string3);
      
      String string4 = StringUtils.substring("DON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.", 32, 2147483633);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Y MORE THAN ONCE.", string4);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 3606, 2047);
      assertNull(string0);
      
      String string1 = StringUtils.join((double[]) null, 'A', 1956, (-3187));
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split(">2U!0PO{(O*aIV( 3]", "]$[o8D");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.stripStart("F>\"c-dg)OWY\"y!", ">2U!0PO{(O*aIV( 3]");
      assertNotNull(string2);
      assertEquals("F>\"c-dg)OWY\"y!", string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("F>\"c-dg)OWY\"y!", "4-4<tw", 2);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string3 = "31 9, a<M$";
      String string4 = StringUtils.strip("13Abl]E", "31 9, a<M$");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Abl]E", string4);
      
      String string5 = StringUtils.center("F>\"c-dg)OWY\"y!", 2546, "L>yG");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.join((Object[]) stringArray1, "maxWith cannot be negative");
      assertNotNull(string6);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("F>\"c-dg)OWY\"y!", string6);
      assertEquals(1, stringArray1.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string7 = StringUtils.getIfEmpty("3bX7v", supplier0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("3bX7v", string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "13Abl]E", (CharSequence) "D7FN\"&{l[|7-y1", (-2678));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 127);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      String string0 = StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.mid("", (-3649), (-3649));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.replaceFirst(",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3", (String) null, ":tTQQB. 3}HU<.");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3", string2);
      
      String string3 = StringUtils.rightPad("7", 76);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("7                                                                           ", string3);
      
      String string4 = StringUtils.center("&SB;", 1004);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.ordinalIndexOf(string4, "", 1004);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 1004;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) (-3649);
      String string5 = StringUtils.join(floatArray0, ')');
      assertNotNull(string5);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1004.0F, 0.0F, 0.0F, (-3649.0F)}, floatArray0, 0.01F);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("0.0)0.0)0.0)1004.0)0.0)0.0)-3649.0", string5);
      assertEquals(7, floatArray0.length);
      
      String string6 = StringUtils.wrapIfMissing("\"|o9{=\"|o9{=", '=');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("=\"|o9{=\"|o9{=", string6);
      
      String string7 = StringUtils.rightPad("", (-2064));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      String string0 = StringUtils.repeat('n', 1);
      assertNotNull(string0);
      assertEquals("n", string0);
      
      String string1 = StringUtils.wrapIfMissing("n", 'n');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("n", string1);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("niemR@e*{Z(S:Zis", 's');
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " vs  vs ", " vs  vs ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.trimToNull("c8%Z");
      assertNotNull(string0);
      assertEquals("c8%Z", string0);
      
      String string1 = StringUtils.replaceAll("c8%Z", "c8%Z", "c8%Z");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("c8%Z", string1);
      
      String string2 = StringUtils.center("c8%Z", 65);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("                              c8%Z                               ", string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("                              c8%Z                               ", (String) null, " is not in the range '0' - '9'");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("                              c8%Z                               ", string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertEquals(4, stringArray0.length);
      
      String string5 = StringUtils.stripEnd("c8%Z", " is not in the range '0' - '9'");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("c8%Z", string5);
      
      String string6 = StringUtils.defaultString("                              c8%Z                               ", " is not in the range '0' - '9'");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertEquals("                              c8%Z                               ", string6);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertNull(charSequence0);
      assertEquals(4, stringArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "c8%Z");
      assertEquals(0.0, double0, 0.01);
      
      String string7 = StringUtils.deleteWhitespace("");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      
      boolean boolean0 = StringUtils.startsWith("c8%Z", "c8%Z");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      String string8 = locale0.getDisplayCountry();
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      Locale locale1 = Locale.CHINESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      int int0 = StringUtils.getFuzzyDistance("", "", locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(0, int0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      
      String string9 = StringUtils.join((float[]) null, 's');
      assertNull(string9);
      
      String string10 = StringUtils.abbreviate("-E6K9", 54, 65);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertEquals("-E6K9", string10);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "c8%Z", (-1551));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isEmpty(" is not in the range '0' - '9'");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string11 = StringUtils.chomp("                              c8%Z                               ", "-E6K9");
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string7));
      assertTrue(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string0));
      assertTrue(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertTrue(string11.equals((Object)string3));
      assertEquals("                              c8%Z                               ", string11);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      char[] charArray0 = new char[11];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width is %d", charArray0);
      assertFalse(boolean0);
      assertEquals(11, charArray0.length);
      
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("x", ">Azq/OUp", 21);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.removePattern("c^0dtyrc,9F}}a@1sH", (String) null);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "x", (CharSequence) "H");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "x", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      String string0 = StringUtils.truncate("@FDjAR/`cLC'JV2j", 344, 100);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((double[]) null, 'u', 100, 1956);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split("", "E");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.stripStart("E", "E");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("lh)rGR]X|rn", (String) null, 1956);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.strip((String) null, "@FDjAR/`cLC'JV2j");
      assertNull(string3);
      
      String string4 = StringUtils.center("org.apache.commons.lang3.StringUtils", 1886, "Illegal range. The step cannot be zero.");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.join((Object[]) stringArray0, "");
      assertNotNull(string5);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertEquals(0, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "E", (CharSequence) "L>yG", 1956);
      assertEquals(4, int0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator((String) null, "b&x9H=YOFcsI_vN,");
      assertNull(stringArray2);
      
      String string6 = StringUtils.substringAfter((String) null, "},z-#S12");
      assertNull(string6);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("A");
      assertNotNull(string0);
      assertEquals("A", string0);
      
      String string1 = StringUtils.truncate("A", 13);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("A", string1);
      
      String string2 = StringUtils.rotate("", (-1915));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.containsAll(set0);
      assertFalse(set0.contains(""));
      assertFalse(linkedList0.contains(""));
      assertTrue(boolean0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      String string3 = StringUtils.abbreviateMiddle("Object varargs must not be null", "LaunchTime", 13);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ObLaunchTimel", string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "ObLaunchTimel", 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Rj._wSmb}f%9!vBq", "Rj._wSmb}f%9!vBq", 28);
      assertNotNull(string0);
      assertEquals("Rj._wSmb}f%9!vBq", string0);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      String string0 = StringUtils.normalizeSpace("y");
      assertNotNull(string0);
      assertEquals("y", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.truncate("y", 32);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("y", string1);
      
      charSequenceArray0[0] = (CharSequence) "y";
      boolean boolean0 = StringUtils.startsWithAny("y", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.deleteWhitespace("jl");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("jl", string2);
      
      String string3 = StringUtils.abbreviateMiddle("codefx", "...", 32);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("codefx", string3);
      
      String[] stringArray0 = StringUtils.split("gH~V$C[ev&|&", "4]u83C?'m~o7Kh(kdFL", 32);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      int int0 = 6;
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '\u0000', 6, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissingIgnoreCase("'Ll6k", "U'o}\"\bWIWv7", charSequenceArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'Ll6k", string1);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStartIgnoreCase("'Ll6k", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("'Ll6k", string2);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      String string3 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("FORMATDISPLAYFORMAT", string3);
      assertEquals(3, locale_CategoryArray0.length);
      
      String string4 = StringUtils.appendIfMissing("Arguments cannot both be null", "'Ll6k", charSequenceArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Arguments cannot both be null", string4);
      assertEquals(2, charSequenceArray0.length);
      
      String string5 = StringUtils.substringBefore("}W", "'Ll6k");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("}W", string5);
      
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[1], 16);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNotEmpty(charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'i', (-1), 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-2369), "UnHtVn_");
      assertNull(string0);
      
      String string1 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.getDigits("UnHtVn_");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "", 1, 2702);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 0, (-2378));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0, 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat("uG", (-456));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = linkedHashSet0.add(locale_Category0);
      assertTrue(linkedHashSet0.contains(locale_Category0));
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Iterator<Locale.Category> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(linkedHashSet0.contains(locale_Category0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("uG").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("uG", charSequence0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.substringBefore("\"|o9{=", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("", string2);
      
      boolean boolean2 = StringUtils.isMixedCase("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale_Category0;
      objectArray0[1] = (Object) iterator0;
      String string3 = StringUtils.replacePattern("Asm;3<P~.e", ". The following paths could not be deleted (see suppressed exceptions for details): ", "Asm;3<P~.e");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Asm;3<P~.e", string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.leftPad("DUIw", (-456), '5');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("DUIw", string4);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.trimToNull("c8%Z");
      assertNotNull(string0);
      assertEquals("c8%Z", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "c8%Z", (CharSequence) "c8%Z");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("c8%Z", charSequence0);
      
      String string1 = StringUtils.center("c8%Z", 65);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("                              c8%Z                               ", string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("                              c8%Z                               ", (String) null, " is not in the range '0' - '9'");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("                              c8%Z                               ", string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(4, stringArray0.length);
      
      String string4 = StringUtils.stripEnd("c8%Z", " is not in the range '0' - '9'");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("c8%Z", string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, "c8%Z");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("c8%Zc8%Zc8%Z", string5);
      assertEquals(4, stringArray0.length);
      
      CharSequence charSequence1 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertNull(charSequence1);
      assertEquals(4, stringArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "c8%Z");
      assertEquals(0.0, double0, 0.01);
      
      String string6 = StringUtils.deleteWhitespace("");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      boolean boolean0 = StringUtils.startsWith("c8%Z", "c8%Z");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      
      String string7 = locale0.getDisplayCountry();
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)charSequence0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertEquals("", string7);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      
      Locale locale1 = Locale.CHINESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      int int0 = StringUtils.getFuzzyDistance("", "", locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(0, int0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      
      String string8 = StringUtils.join((float[]) null, 's');
      assertNull(string8);
      
      String string9 = StringUtils.join((Object[]) stringArray0, 's');
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)charSequence0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertEquals("sss", string9);
      assertEquals(4, stringArray0.length);
      
      Locale locale2 = Locale.KOREA;
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("KOR", locale2.getISO3Country());
      assertEquals("ko", locale2.getLanguage());
      assertEquals("ko_KR", locale2.toString());
      assertEquals("KR", locale2.getCountry());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      
      String string10 = StringUtils.lowerCase("vO0F$#'@NMX", locale2);
      assertNotNull(string10);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)charSequence0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertEquals("vo0f$#'@nmx", string10);
      assertEquals("KOR", locale2.getISO3Country());
      assertEquals("ko", locale2.getLanguage());
      assertEquals("ko_KR", locale2.toString());
      assertEquals("KR", locale2.getCountry());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      
      int int1 = StringUtils.indexOf((CharSequence) "c8%Z", (CharSequence) "c8%Zc8%Zc8%Z", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.stripEnd("", "Q'l*%'%v,X^ FN%<");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd("", (String) null);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[3], (int) 'h');
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[1], charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.strip("");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.repeat('\'', 0);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = StringUtils.chop("Q'l*%'%v,X^ FN%<");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Q'l*%'%v,X^ FN%", string6);
      
      String string7 = StringUtils.joinWith("", charSequenceArray0);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertEquals("", string7);
      assertEquals(7, charSequenceArray0.length);
      
      String string8 = StringUtils.chomp("", (String) null);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string5));
      assertEquals("", string8);
      
      String string9 = StringUtils.removeEndIgnoreCase("KdP", "o=#Y}$Rgz");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertEquals("KdP", string9);
      
      String string10 = StringUtils.removeIgnoreCase("=2J0$@Bm", "Q'l*%'%v,X^ FN%<");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertEquals("=2J0$@Bm", string10);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "", 0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string11 = StringUtils.toRootUpperCase("=2J0$@Bm");
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string9));
      assertEquals("=2J0$@BM", string11);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = '\'';
      charArray0[2] = 'h';
      String string12 = StringUtils.valueOf(charArray0);
      assertNotNull(string12);
      assertArrayEquals(new char[] {'I', '\'', 'h'}, charArray0);
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string10));
      assertEquals("I'h", string12);
      assertEquals(3, charArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("En7i*lKB", "The Character must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      int int0 = StringUtils.compare((String) null, "pQJ,,y~Td1}D{}h2", true);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substring("Search and Replace array lengths don't match: ^z", (-1), (-2021));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("d4tM7;$d4tM7;$", "d4tM7;$d4tM7;$");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      String[] stringArray0 = new String[1];
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertNull(charSequence0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.substringAfterLast("9h", "9h");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "Illegal range. The step cannot be zero.");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      String string0 = StringUtils.truncate("@FDjAR/`cLC'JV2j", 344, 100);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((double[]) null, 'u', 100, 1956);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split("", "E");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("lh)rGR]X|rn", (String) null, 1956);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.strip((String) null, "@FDjAR/`cLC'JV2j");
      assertNull(string3);
      
      String string4 = StringUtils.center("org.apache.commons.lang3.StringUtils", 1886, "Illegal range. The step cannot be zero.");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.join((Object[]) stringArray0, (String) null);
      assertNotNull(string5);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertEquals(0, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.stripStart("E", "E");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "E", (CharSequence) "L>yG", 1956);
      assertEquals(4, int0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator((String) null, "b&x9H=YOFcsI_vN,");
      assertNull(stringArray2);
      
      String string7 = StringUtils.substringAfterLast("Object varargs must not be null", "org.junitpioneer.jupiter.params.IntRange");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertEquals("", string7);
      
      int int1 = StringUtils.compare((String) null, "org.junitpioneer.jupiter.RepeatFailedTestExtension", false);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string8 = StringUtils.substring("y", 1692, 1886);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      String string0 = StringUtils.truncate("@FDjAR/`cLC'JV2j", 344, 100);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((double[]) null, 'u', 100, 1956);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split("", "E");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("lh)rGR]X|rn", (String) null, 1956);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.strip((String) null, "@FDjAR/`cLC'JV2j");
      assertNull(string3);
      
      String string4 = StringUtils.center("org.apache.commons.lang3.StringUtils", 1886, "Illegal range. The step cannot be zero.");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.join((Object[]) stringArray0, (String) null);
      assertNotNull(string5);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertEquals(0, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.stripStart("E", "E");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "E", (CharSequence) "L>yG", 1956);
      assertEquals(4, int0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator((String) null, "b&x9H=YOFcsI_vN,");
      assertNull(stringArray2);
      
      String string7 = StringUtils.substringAfterLast("Object varargs must not be null", "org.junitpioneer.jupiter.params.IntRange");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      
      int int1 = StringUtils.compare((String) null, "org.junitpioneer.jupiter.RepeatFailedTestExtension", false);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string8 = StringUtils.substring("y", 1679, 1886);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      String string1 = StringUtils.join((List<?>) stack0, '2', 0, 0);
      assertNotNull(string1);
      assertFalse(stack0.contains(0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      assertNotNull(predicate0);
      
      boolean boolean0 = stack0.removeIf(predicate0);
      assertFalse(stack0.contains(""));
      assertFalse(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      String string2 = StringUtils.abbreviate("", 0, 1234);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean1 = stack0.add((Object) "");
      assertFalse(stack0.contains(0));
      assertTrue(stack0.contains(""));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 1249);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string3 = StringUtils.getIfEmpty("", supplier0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.removeIgnoreCase("", "Extension context \"");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.overlay("", "~},*JNh!9v&xBaJ/", 0, 1234);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("~},*JNh!9v&xBaJ/", string5);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = StringUtils.wrapIfMissing("The Character must not be null", '\u0000');
      assertNotNull(string0);
      assertEquals("The Character must not be null", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Illegal range. There's no way to get from %s to %s with a step of %s.", "Illegal range. There's no way to get from %s to %s with a step of %s.", 57, 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 70
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.reverse("*p5$4");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("4$5p*", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase((String) null, "");
      assertNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = "*p5$4";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "4$5p*");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rotate("+M}Jp?_]-[", 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("+M}Jp?_]-[", string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("*p5$4");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("+M}Jp?_]-[", " ", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      String string0 = StringUtils.strip("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", (Supplier<CharSequence>) null);
      assertNull(charSequence0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", '[');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStart("[%g5y_cHP", "[%g5y_cHP");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.unwrap("g<M`=6uK}'!;u#/", " ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("g<M`=6uK}'!;u#/", string2);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) " ", 10);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.wrapIfMissing("g<M`=6uK}'!;u#/", '}');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("}g<M`=6uK}'!;u#/}", string3);
      
      String string4 = StringUtils.stripToEmpty("Arguments cannot both be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Arguments cannot both be null", string4);
      
      String string5 = StringUtils.replaceIgnoreCase("zm0C{(>\"H' C{", "Minimum abbreviation width with offset is %d", "WD`e;v1Ni|I]NXi@Rh");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("zm0C{(>\"H' C{", string5);
      
      String string6 = StringUtils.abbreviate("Arguments cannot both be null", 39, 45);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("Arguments cannot both be null", string6);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      String string0 = StringUtils.substringAfter("tXqp'7}", "org.junitpioneer.jupiter.params.RangeSourceProvider");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      String string0 = StringUtils.getIfBlank("WFY':NE_RzJ%_.5$#", (Supplier<String>) null);
      assertNotNull(string0);
      assertEquals("WFY':NE_RzJ%_.5$#", string0);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "kg9&w[rtC?4~E*k";
      stringArray0[1] = "+c\nzJ";
      stringArray0[2] = "w(";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string0);
      assertEquals("kg9&w[rtC?4~E*k", string0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.swapCase("kg9&w[rtC?4~E*k");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("KG9&W[RTc?4~e*K", string1);
      
      String string2 = StringUtils.replaceChars("kg9&w[rtC?4~E*k", "w(", "w(");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("kg9&w[rtC?4~E*k", string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "kg9&w[rtC?4~E*k", (CharSequence) "kg9&w[rtC?4~E*k");
      assertEquals(0, int0);
      
      String string3 = StringUtils.leftPad("gQf<z!iZV", 0, '4');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("gQf<z!iZV", string3);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[6] = "[S\"}}RA<55=k";
      String string0 = StringUtils.swapCase(stringArray0[1]);
      assertNull(string0);
      assertEquals(10, stringArray0.length);
      
      String string1 = StringUtils.replaceChars((String) null, (String) null, string0);
      assertNull(string1);
      assertEquals(10, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) string0);
      assertEquals((-1), int0);
      assertEquals(10, stringArray0.length);
      
      String string2 = StringUtils.chomp(string0, string0);
      assertNull(string2);
      assertEquals(10, stringArray0.length);
      
      String string3 = StringUtils.appendIfMissing("Minimum abbreviation width is d", string0, stringArray0);
      assertNotNull(string3);
      assertEquals("Minimum abbreviation width is d", string3);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "A(~4f4j8", (CharSequence) "A(~4f4j8");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 3, 3);
      assertNull(string0);
      
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
      
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      assertNotNull(treeSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      String string0 = StringUtils.truncate("@FDjAR/`cLC'JV2j", 344, 100);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((double[]) null, 'u', 100, 1956);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split("", "E");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.stripStart("E", "E");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("lh)rGR]X|rn", (String) null, 1956);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.strip((String) null, "@FDjAR/`cLC'JV2j");
      assertNull(string3);
      
      String string4 = StringUtils.center("org.apache.commons.lang3.StringUtils", 1886, "Illegal range. The step cannot be zero.");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.join((Object[]) stringArray0, "");
      assertNotNull(string5);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertEquals(0, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("xEH~m%v?", supplier0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("xEH~m%v?", string6);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "E", (CharSequence) "L>yG", 1956);
      assertEquals(4, int0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator((String) null, "b&x9H=YOFcsI_vN,");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      String string1 = StringUtils.appendIfMissingIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension", charSequenceArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string1);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStartIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      String string3 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(0, locale_CategoryArray0.length);
      
      String string4 = StringUtils.appendIfMissing("org.junitpioneer.vintage.ExpectedExceptionExtension", "", charSequenceArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string4);
      assertEquals(2, charSequenceArray0.length);
      
      String string5 = StringUtils.substringBefore("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "gqPV|c7A(,\"h*9(");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", string5);
      
      boolean boolean0 = StringUtils.isAlpha("gqPV|c7A(,\"h*9(");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 1325);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("gqPV|c7A(,\"h*9(", "org.junitpioneer.vintage.ExpectedExceptionExtension", 1325);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "maxWith cannot be negative", (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissing("", "", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'K');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, "IBSN`ji.g:m0=");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      String string0 = StringUtils.unwrap("j_D8-Qo2pE23vCXc+n", "\"52GC7\"1!\"52GC7\"1!");
      assertNotNull(string0);
      assertEquals("j_D8-Qo2pE23vCXc+n", string0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '5';
      String string0 = StringUtils.join(longArray0, '5');
      assertNotNull(string0);
      assertArrayEquals(new long[] {53L}, longArray0);
      assertEquals("53", string0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) '5';
      String string0 = StringUtils.join(longArray0, '5');
      assertNotNull(string0);
      assertArrayEquals(new long[] {53L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals("535050505050505050", string0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      String string0 = StringUtils.unwrap("<d", '\u0001');
      assertNotNull(string0);
      assertEquals("<d", string0);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.left("8IwhXmXxB-'1i?e", (-1));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1302);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-1302);
      longArray0[3] = (long) (-1);
      longArray0[4] = 2253L;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 'L';
      String string2 = StringUtils.join(longArray0, '\'');
      assertNotNull(string2);
      assertArrayEquals(new long[] {(-1302L), 0L, (-1302L), (-1L), 2253L, 0L, 76L}, longArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-1302'0'-1302'-1'2253'0'76", string2);
      assertEquals(7, longArray0.length);
      
      String string3 = StringUtils.lowerCase("Failed to delete temp directory ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("failed to delete temp directory ", string3);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "8IwhXmXxB-'1i?e");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "failed to delete temp directory ", (-1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.contains(charSequenceArray0[0], 1906);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      String string4 = StringUtils.strip("8IwhXmXxB-'1i?e");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("8IwhXmXxB-'1i?e", string4);
      
      String string5 = StringUtils.center("", (-1445), "U'o}\"\bWIWv7");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.unwrap("e=4mn3", '`');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("e=4mn3", string6);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      float[] floatArray0 = new float[2];
      String string0 = StringUtils.join(floatArray0, '.');
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("0.0.0.0", string0);
      assertEquals(2, floatArray0.length);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "0.0.0.0", 8, 1121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1115);
      String string2 = StringUtils.toRootLowerCase("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.replace("", "", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.deleteWhitespace("");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.join((Object[]) null, "", 13, (-2003));
      assertNull(string5);
      
      String string6 = StringUtils.difference("", " ois");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals(" ois", string6);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 0, (-2378));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0, 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat("uG", (-456));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = linkedHashSet0.add(locale_Category0);
      assertTrue(linkedHashSet0.contains(locale_Category0));
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Iterator<Locale.Category> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(linkedHashSet0.contains(locale_Category0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.substringBefore("\"|o9{=", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean2 = StringUtils.isMixedCase("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale_Category0;
      objectArray0[1] = (Object) iterator0;
      objectArray0[2] = (Object) locale_Category0;
      objectArray0[3] = (Object) "\"|o9{=";
      objectArray0[4] = (Object) linkedHashSet0;
      objectArray0[5] = (Object) "";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, ".#(Zv-zwda,/7u_RaR", 0, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\"", (CharSequence) "\"");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replacePattern("\"", "\"", "\"");
      assertNotNull(string0);
      assertEquals("\"", string0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "\"", (CharSequence) "\"");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1115);
      String string2 = StringUtils.toRootLowerCase("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.replace("", "", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.deleteWhitespace("");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.replacePattern("", "", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string6 = StringUtils.leftPad("", (int) (short) (-1115), '5');
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      String string0 = StringUtils.stripToNull("{A");
      assertNotNull(string0);
      assertEquals("{A", string0);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '8', (-3541), 122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3541
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string0 = StringUtils.normalizeSpace("^7");
      assertNotNull(string0);
      assertEquals("^7", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("^7", "^7");
      assertTrue(boolean0);
      
      String string1 = "";
      String string2 = StringUtils.wrap("", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      byte byte0 = (byte)0;
      short short0 = (short) (-1306);
      char char0 = '&';
      int int0 = 2909;
      int int1 = (-2229);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (-1306);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '&', (int) (short) (-1306), (-7));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1306
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      String string0 = StringUtils.join((List<?>) stack0, 'Y', Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertNotNull(string0);
      assertFalse(stack0.contains('Y'));
      assertEquals("", string0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(arrayDeque1.contains(string0));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque1);
      assertNotNull(list0);
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(arrayDeque1.contains(string0));
      assertFalse(list0.contains(string0));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join(list0, ",9ZTKM.1t{f", 1428, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1428) > toIndex(-2147483648)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      String string1 = StringUtils.join((List<?>) stack0, '2', 0, (-11));
      assertNotNull(string1);
      assertFalse(stack0.contains(""));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      assertNotNull(predicate0);
      
      String string2 = StringUtils.toRootLowerCase("Strings must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("strings must not be null", string2);
      
      int int0 = StringUtils.ordinalIndexOf("", "Strings must not be null", (-11));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.join((Object[]) null, "strings must not be null", 1343, (-1765));
      assertNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "strings must not be null", (CharSequence) null, (-2336));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "strings must not be null", 0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      String string0 = StringUtils.replaceAll("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap("6}bk=et6!,m&Rq,", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("6}bk=et6!,m&Rq,", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("{Ltl)h,dQRx6=ci 8)", "Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", 55);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{Ltl)h,dQRx6=ci 8)", string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      byte byte0 = (byte)66;
      byte byte1 = (byte) (-59);
      byte byte2 = (byte)98;
      // Undeclared exception!
      try { 
        Charset.forName("xY4s!KsL|{`aG");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // xY4s!KsL|{`aG
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      String string0 = StringUtils.wrap("A", (String) null);
      assertNotNull(string0);
      assertEquals("A", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string0 = StringUtils.wrapIfMissing("Z$y-w@pt9G<iK~", (String) null);
      assertNotNull(string0);
      assertEquals("Z$y-w@pt9G<iK~", string0);
      
      String string1 = StringUtils.rightPad("[;(^fEO32=8{Fe*.o", (-637), "Z$y-w@pt9G<iK~");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[;(^fEO32=8{Fe*.o", string1);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = Locale.TAIWAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      
      String string2 = locale1.getDisplayScript();
      assertNotNull(string2);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotNull(locale2);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      
      Locale locale3 = Locale.CANADA_FRENCH;
      assertNotNull(locale3);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertEquals("CA", locale3.getCountry());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("", locale3.getVariant());
      
      String string3 = StringUtils.lowerCase("Q'l*%'%v", locale3);
      assertNotNull(string3);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("q'l*%'%v", string3);
      assertEquals("CA", locale3.getCountry());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("", locale3.getVariant());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Z$y-w@pt9G<iK~", (CharSequence) "");
      assertEquals(14, int0);
      
      String string4 = locale3.getDisplayVariant();
      assertNotNull(string4);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals("CA", locale3.getCountry());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("", locale3.getVariant());
      
      String string5 = StringUtils.substringBetween("q'l*%'%v", "Z$y-w@pt9G<iK~", "+V,[Q} kAt+3_9KUd+");
      assertNull(string5);
      
      String string6 = StringUtils.upperCase("Q'l*%'%v", locale3);
      assertNotNull(string6);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Q'L*%'%V", string6);
      assertEquals("CA", locale3.getCountry());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("", locale3.getVariant());
      
      String string7 = StringUtils.replaceAll("Q'L*%'%V", (String) null, "Q'l*%'%v");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertEquals("Q'L*%'%V", string7);
      
      int[] intArray1 = StringUtils.toCodePoints(")Ro+XYW%8-");
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {41, 82, 111, 43, 88, 89, 87, 37, 56, 45}, intArray1);
      assertEquals(10, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("4$&g! |%(");
      assertNotNull(string0);
      assertEquals("4$&g! |%(", string0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("H\n");
      assertNotNull(string0);
      assertEquals("H", string0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 26;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 26;
      String string0 = StringUtils.replaceEach("/)w [?=B;", (String[]) null, (String[]) null);
      assertNotNull(string0);
      assertEquals("/)w [?=B;", string0);
      
      String string1 = StringUtils.unwrap(" ", " ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      int int0 = StringUtils.ordinalIndexOf(" 3dt", "/)w [?=B;", 740);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "/)w [?=B;", (CharSequence) "/)w [?=B;");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "1v", "Object varargs must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000", string0);
      assertEquals(2, charArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("\u0000\u0000", "\u0000\u0000", "\u0000\u0000");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      String string0 = StringUtils.remove("!:tkIyq,p~k<~lV", "!:tkIyq,p~k<~lV");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "!:tkIyq,p~k<~lV", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      String string1 = StringUtils.join((List<?>) stack0, '2', 0, 0);
      assertNotNull(string1);
      assertFalse(stack0.contains('2'));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      assertNotNull(predicate0);
      
      String string2 = StringUtils.toRootLowerCase("Strings must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("strings must not be null", string2);
      
      boolean boolean0 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.deleteWhitespace("Minimum abbreviation width is %d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Minimumabbreviationwidthis%d", string3);
      
      String string4 = StringUtils.replacePattern("", "", "hfov.~}8F7");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("hfov.~}8F7", string4);
      
      String string5 = StringUtils.replace("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", "hfov.~}8F7", "Arguments cannot both be null");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      assertEquals(0, int0);
      
      String string6 = StringUtils.leftPad("F>\"c-dg)OWY\"y!", 608, '{');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{F>\"c-dg)OWY\"y!", string6);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Strings must not be null", "hfov.~}8F7");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      String string7 = StringUtils.valueOf(charArray0);
      assertNotNull(string7);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertEquals("8", string7);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("4bi-'Tde", (String) null);
      assertNotNull(string0);
      assertEquals("4bi-'Tde", string0);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string0 = StringUtils.normalizeSpace("^7");
      assertNotNull(string0);
      assertEquals("^7", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("^7", "^7");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("^7"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "^7");
      assertNotNull(predicate0);
      
      boolean boolean1 = stack0.removeIf(predicate0);
      assertFalse(stack0.contains("^7"));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      String string2 = StringUtils.abbreviate("", (-1574), (-498));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      Stack<Object> stack1 = new Stack<Object>();
      assertNotNull(stack1);
      assertFalse(stack1.contains("^7"));
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = stack1.add(object0);
      assertTrue(stack1.contains(object0));
      assertFalse(stack1.contains("^7"));
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "^7", 407);
      assertEquals((-1), int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("\r", supplier0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\r", string3);
      
      String string4 = StringUtils.removeIgnoreCase("4%lNGh7j9j|ZUQ", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("4%lNGh7j9j|ZUQ", string4);
      
      String string5 = StringUtils.overlay("4%lNGh7j9j|ZUQ", "", 407, 1249);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("4%lNGh7j9j|ZUQ", string5);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("O_#4TOz$r");
      assertNotNull(string0);
      assertEquals("O_#4TOZ$R", string0);
      
      char char0 = 'g';
      String string1 = StringUtils.wrapIfMissing("68yK3IG$V6", 'g');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("g68yK3IG$V6g", string1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string2 = StringUtils.getDigits("Threshold must not be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Threshold must not be negative", "O_#4TOz$r");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'g';
      String string3 = StringUtils.join(longArray0, 'g');
      assertNotNull(string3);
      assertArrayEquals(new long[] {103L}, longArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("103", string3);
      assertEquals(1, longArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", (String) null, 54);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string4 = StringUtils.joinWith("vMLU?budiVfm5Fe", stringArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("vMLU?budiVfm5Fe", string4);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("{%Y^F>3ddOz", 1, (-1667));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      String string0 = "', has a length less than 2\\u";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0);
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("e8LA`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      String string0 = ";";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '\'', 2, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'o');
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 32);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "Strings must not be null");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.substringsBetween("DefaultLocale", "$IPV!fKC[NOk+g/.", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.wrap("DefaultLocale", 'o');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("oDefaultLocaleo", string1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("$IPV!fKC[NOk+g/.");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)57;
      String string2 = StringUtils.join(shortArray0, 'o');
      assertNotNull(string2);
      assertArrayEquals(new short[] {(short)57}, shortArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("57", string2);
      assertEquals(1, shortArray0.length);
      
      String string3 = StringUtils.join((Object[]) null);
      assertNull(string3);
      
      String string4 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)57;
      shortArray1[1] = (short)57;
      shortArray1[2] = (short)57;
      String string5 = StringUtils.join(shortArray1, '>', (int) (short)57, (-940));
      assertNotNull(string5);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)57, (short)57, (short)57}, shortArray1);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals("", string5);
      assertEquals(3, shortArray1.length);
      
      String string6 = StringUtils.join((Object[]) null, 'l', (int) (short)57, (-1006));
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string2 = StringUtils.toRootLowerCase("DefaultTimeZone");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("defaulttimezone", string2);
      
      String string3 = StringUtils.stripToNull("Locale must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Locale must not be null", string3);
      
      String string4 = "{Ltl)h,dQRx6=ci 8)";
      String string5 = StringUtils.wrap((String) null, "{Ltl)h,dQRx6=ci 8)");
      assertNull(string5);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'y', 7, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1115);
      shortArray0[1] = (short) (-2342);
      shortArray0[2] = (short) (-1306);
      String string2 = StringUtils.join(shortArray0, '&', 2909, (-2229));
      assertNotNull(string2);
      assertArrayEquals(new short[] {(short) (-1115), (short) (-2342), (short) (-1306)}, shortArray0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(3, shortArray0.length);
      
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.params.ShortRange");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", '&');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      
      String string3 = StringUtils.chomp("\"|o9{=", "\"|o9{=");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1115);
      String string4 = StringUtils.join(doubleArray0, '&');
      assertNotNull(string4);
      assertArrayEquals(new double[] {(-1115.0)}, doubleArray0, 0.01);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("-1115.0", string4);
      assertEquals(1, doubleArray0.length);
      
      String string5 = StringUtils.substring("", (-2880), 2292);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      String string6 = StringUtils.capitalize((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.chomp("", (String) null);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertEquals("", string7);
      
      String string8 = StringUtils.unwrap((String) null, '|');
      assertNull(string8);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals(0, int0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      String string0 = StringUtils.unwrap("", '2');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      String string0 = StringUtils.stripAccents("!:tkIyq,p~k<~lV");
      assertNotNull(string0);
      assertEquals("!:tkIyq,p~k<~lV", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "!:tkIyq,p~k<~lV", (CharSequence) "!:tkIyq,p~k<~lV");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBefore("!:tkIyq,p~k<~lV", "!:tkIyq,p~k<~lV");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "3");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("3", 22, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("3                     ", string1);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string2 = locale0.getDisplayScript();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      
      String string3 = StringUtils.lowerCase("Failed to get parent directory from provider", locale0);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("failed to get parent directory from provider", string3);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "3", (CharSequence) "");
      assertEquals(1, int0);
      
      String string4 = StringUtils.substringBetween("", "", "codefx");
      assertNull(string4);
      
      String string5 = StringUtils.upperCase("failed to get parent directory from provider", locale0);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("FAILED TO GET PARENT DIRECTORY FROM PROVIDER", string5);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string6 = StringUtils.replaceAll("`j0hh4pDof/*57N", "failed to get parent directory from provider", " vs ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("`j0hh4pDof/*57N", string6);
      
      int[] intArray0 = StringUtils.toCodePoints("Failed to get parent directory from provider");
      assertNotNull(intArray0);
      assertEquals(44, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      String string0 = StringUtils.stripStart("offset cannot be negative", "offset cannot be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "offset cannot be negative");
      assertFalse(boolean0);
      
      String string1 = StringUtils.strip((String) null, "Threshold must not be negative");
      assertNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)43;
      String string2 = StringUtils.join(byteArray0, '/', (int) (byte) (-66), (-2437));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-50), (byte)35, (byte) (-66), (byte)62, (byte)43}, byteArray0);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, '>');
      assertNotNull(string0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals("", string0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, 'g');
      assertNotNull(string0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals("", string0);
      assertEquals(0, floatArray0.length);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("F-q{Es7'r0v");
      assertTrue(boolean0);
      
      String string1 = StringUtils.strip("F-q{Es7'r0v", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("F-q{Es7'r0v", string1);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Vector<String> vector0 = new Vector<String>(0, 1610);
      assertNotNull(vector0);
      assertFalse(vector0.contains(string0));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = vector0.add("G1j-\"");
      assertFalse(vector0.contains(string0));
      assertTrue(vector0.contains("G1j-\""));
      assertTrue(boolean0);
      assertEquals("[G1j-\"]", vector0.toString());
      assertEquals(1610, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      boolean boolean1 = vector0.add("G1j-\"");
      assertFalse(vector0.contains(string0));
      assertTrue(vector0.contains("G1j-\""));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("[G1j-\", G1j-\"]", vector0.toString());
      assertEquals(1610, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      
      vector0.trimToSize();
      assertFalse(vector0.contains(string0));
      assertTrue(vector0.contains("G1j-\""));
      assertEquals("[G1j-\", G1j-\"]", vector0.toString());
      assertEquals(2, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      
      String string1 = "\r";
      boolean boolean2 = vector0.add("\r");
      assertFalse(vector0.contains(""));
      assertTrue(vector0.contains("\r"));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1612, vector0.capacity());
      assertEquals(3, vector0.size());
      assertEquals("[G1j-\", G1j-\", \r]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      boolean boolean3 = vector0.add("'AWh~X]T)");
      assertFalse(vector0.contains(""));
      assertTrue(vector0.contains("'AWh~X]T)"));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals("[G1j-\", G1j-\", \r, 'AWh~X]T)]", vector0.toString());
      assertEquals(1612, vector0.capacity());
      assertEquals(4, vector0.size());
      assertFalse(vector0.isEmpty());
      
      boolean boolean4 = vector0.add("Failed to delete temp directory ");
      assertFalse(vector0.contains(""));
      assertTrue(vector0.contains("'AWh~X]T)"));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
      assertEquals(5, vector0.size());
      assertEquals(1612, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[G1j-\", G1j-\", \r, 'AWh~X]T), Failed to delete temp directory ]", vector0.toString());
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string2 = StringUtils.leftPad("'AWh~X]T)", 2320, (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      try { 
        StringUtils.getBytes("$.?U[c:.m:", "O`Uk.w*KE*#P+0f");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      String string0 = "U'o}\"\\bWIWv7";
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.appendIfMissingIgnoreCase("'Ll6k", "U'o}\"\bWIWv7", charSequenceArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("'Ll6k", string2);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.removeStartIgnoreCase("'Ll6k", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("'Ll6k", string3);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      int int0 = StringUtils.lastIndexOf((CharSequence) "U'o}\"\bWIWv7", 90, 90);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.leftPad("'Ll6k", 108, "eu9!7fuqNRAX#");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("eu9!7fuqNRAX#eu9!7fuqNRAX#eu9!7fuqNRAX#eu9!7fuqNRAX#eu9!7fuqNRAX#eu9!7fuqNRAX#eu9!7fuqNRAX#eu9!7fuqNRAX'Ll6k", string4);
      
      try { 
        StringUtils.getBytes("'Ll6k", "'Ll6k");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "F&m<q$+\u0006mU%", (-3098), (-3098));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      String string0 = "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.";
      String string1 = StringUtils.replaceAll("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 898);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (-2360), 898);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", 4623, (-1172));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.replaceChars("", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = ", '";
      try { 
        StringUtils.getBytes(", '", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((CharSequence) null).when(supplier0).get();
      CharSequence charSequence1 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence1);
      
      charSequenceArray0[0] = null;
      String string0 = StringUtils.reverseDelimited("F>\"c-dg)OWY\"y!", 'n');
      assertNotNull(string0);
      assertEquals("F>\"c-dg)OWY\"y!", string0);
      
      charSequenceArray0[1] = (CharSequence) "F>\"c-dg)OWY\"y!";
      CharSequence charSequence2 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertNotNull(charSequence2);
      assertTrue(charSequence2.equals((Object)string0));
      assertEquals("F>\"c-dg)OWY\"y!", charSequence2);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("F>\"c-dg)OWY\"y!");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'n';
      String string1 = StringUtils.join(floatArray0, 'n');
      assertNotNull(string1);
      assertArrayEquals(new float[] {110.0F}, floatArray0, 0.01F);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence2));
      assertEquals("110.0", string1);
      assertEquals(1, floatArray0.length);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains('n'));
      
      NavigableSet<Object> navigableSet0 = treeSet0.headSet((Object) "F>\"c-dg)OWY\"y!", false);
      assertNotNull(navigableSet0);
      assertFalse(treeSet0.contains('n'));
      assertFalse(navigableSet0.contains("F>\"c-dg)OWY\"y!"));
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      
      String string2 = StringUtils.join((Iterable<?>) navigableSet0, 'n');
      assertNotNull(string2);
      assertFalse(treeSet0.contains('n'));
      assertFalse(navigableSet0.contains("F>\"c-dg)OWY\"y!"));
      assertFalse(string2.equals((Object)charSequence2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("vJE#aE$vgoFI6Y%%[o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'Z');
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      
      String string1 = "3";
      String string2 = StringUtils.center("3", (int) (byte)0, '6');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("3", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "3";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = "H";
      String string4 = StringUtils.abbreviate("", "H", 1247);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) linkedList0);
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      assertFalse(linkedList0.contains(""));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, linkedList0.size());
      
      String string5 = "org.junitpioneer.jupiter.params.DoubleRange";
      // Undeclared exception!
      try { 
        StringUtils.join(list0, "org.junitpioneer.jupiter.params.DoubleRange", (-2191), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2191
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      String string0 = StringUtils.stripToNull(", Length: ");
      assertNotNull(string0);
      assertEquals(", Length:", string0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("f$wnJ>m");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("f$wnJ>m", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "f$wnJ>m");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrap("o=6@,k-", "#Gh$p3GbbZcPe!");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("#Gh$p3GbbZcPe!o=6@,k-#Gh$p3GbbZcPe!", string2);
      
      String string3 = StringUtils.toRootLowerCase("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.substringAfterLast("", "org.junitpioneer.jupiter.params.Rangedj{t5caY");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.removeIgnoreCase("", "Z3*4");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.toRootUpperCase("R$zCKI");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("R$ZCKI", string6);
      
      String string7 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "13Abl]E";
      String string1 = StringUtils.deleteWhitespace("13Abl]E");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("13Abl]E", string1);
      
      charSequenceArray0[1] = (CharSequence) "13Abl]E";
      charSequenceArray0[2] = (CharSequence) "13Abl]E";
      charSequenceArray0[4] = (CharSequence) "13Abl]E";
      charSequenceArray0[5] = (CharSequence) "13Abl]E";
      charSequenceArray0[6] = (CharSequence) "13Abl]E";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.strip("Strings must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Strings must not be null", string2);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (int) 'k';
      intArray0[4] = (-1582);
      intArray0[5] = (-1582);
      intArray0[6] = 0;
      intArray0[7] = 26;
      intArray0[8] = (-1);
      String string3 = StringUtils.join(intArray0, 'k', 618, 26);
      assertNotNull(string3);
      assertArrayEquals(new int[] {(-1), (-1), 0, 107, (-1582), (-1582), 0, 26, (-1)}, intArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(9, intArray0.length);
      
      String string4 = StringUtils.defaultIfEmpty(" 28?{'\"7%", "13Abl]E");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" 28?{'\"7%", string4);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "13Abl]E";
      stringArray0[1] = "13Abl]E";
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = "13Abl]E";
      stringArray0[4] = "13Abl]E";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("j8", "j8");
      assertNotNull(string0);
      assertEquals("j8", string0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      String string0 = StringUtils.removeEnd("y", "\r");
      assertNotNull(string0);
      assertEquals("y", string0);
      
      String string1 = StringUtils.chomp("t+7eLxy\"yO-t!4a");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("t+7eLxy\"yO-t!4a", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "y";
      charSequenceArray0[2] = (CharSequence) "y";
      charSequenceArray0[3] = (CharSequence) "t+7eLxy\"yO-t!4a";
      charSequenceArray0[4] = (CharSequence) "y";
      charSequenceArray0[5] = (CharSequence) "y";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "y", (-1272));
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("yyt+7eLxy\"yO-t!4ayy", string2);
      assertEquals(6, charSequenceArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)715;
      shortArray0[1] = (short)2;
      String string3 = StringUtils.join(shortArray0, 'I');
      assertNotNull(string3);
      assertArrayEquals(new short[] {(short)715, (short)2}, shortArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("715I2", string3);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      String string0 = StringUtils.removeEnd("y", "\r");
      assertNotNull(string0);
      assertEquals("y", string0);
      
      String string1 = StringUtils.substringBetween("", "y");
      assertNull(string1);
      
      String string2 = StringUtils.chomp("t+7eLxy\"yO-t!4a");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("t+7eLxy\"yO-t!4a", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "y";
      charSequenceArray0[2] = (CharSequence) "y";
      charSequenceArray0[3] = (CharSequence) "t+7eLxy\"yO-t!4a";
      charSequenceArray0[4] = (CharSequence) "y";
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "y", (-1272));
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.rightPad("EOr?ZMtH%`v*I`RFezn", (-1272), 'O');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("EOr?ZMtH%`v*I`RFezn", string3);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String string4 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils", locale0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string4);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("k");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, 'I');
      assertNotNull(string1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, shortArray0.length);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.stripEnd("", "Q'l*%'%v,X^ FN%<");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.reverseDelimited((String) null, '\"');
      assertNull(string4);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      boolean boolean2 = StringUtils.isAlpha(charSequence0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNumericSpace("Strings must not be null");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("9%_#c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'g';
      String string0 = StringUtils.join(longArray0, '5');
      assertNotNull(string0);
      assertArrayEquals(new long[] {103L}, longArray0);
      assertEquals("103", string0);
      assertEquals(1, longArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(":1/sM-K0RRw", "  ", (int) 'g');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compare(":1/sM-K0RRw", "  ");
      assertEquals(26, int0);
      
      String string1 = StringUtils.join((Iterable<?>) null, 'g');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Stack<Object> stack1 = new Stack<Object>();
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      
      Stack stack2 = (Stack)stack1.push(stack0);
      assertNotNull(stack2);
      assertNotSame(stack0, stack1);
      assertNotSame(stack1, stack0);
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertEquals("[[]]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack2.capacity());
      assertEquals("[]", stack2.toString());
      assertEquals(0, stack2.size());
      assertTrue(stack2.empty());
      assertTrue(stack2.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      boolean boolean0 = stack1.add((Object) locale_FilteringMode0);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean0);
      assertFalse(stack1.empty());
      assertEquals(2, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals("[[], EXTENDED_FILTERING]", stack1.toString());
      
      ListIterator<Object> listIterator0 = stack1.listIterator();
      assertNotNull(listIterator0);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.empty());
      assertEquals(2, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals("[[], EXTENDED_FILTERING]", stack1.toString());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'y');
      assertNotNull(string0);
      assertFalse(stack1.contains('y'));
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals("[]yEXTENDED_FILTERING", string0);
      assertFalse(stack1.empty());
      assertEquals(2, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals("[[], EXTENDED_FILTERING]", stack1.toString());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      String string0 = StringUtils.chomp("org.apache.commons.lang3.CharUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.CharUtils";
      String string1 = StringUtils.strip("@~.hGC{", "t+7eLxy\"yO-t!4a");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("@~.hGC{", string1);
      
      charSequenceArray0[1] = (CharSequence) "@~.hGC{";
      charSequenceArray0[2] = (CharSequence) "t+7eLxy\"yO-t!4a";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.CharUtils";
      charSequenceArray0[4] = (CharSequence) "t+7eLxy\"yO-t!4a";
      charSequenceArray0[5] = (CharSequence) "@~.hGC{";
      charSequenceArray0[6] = (CharSequence) "org.apache.commons.lang3.CharUtils";
      charSequenceArray0[7] = (CharSequence) "org.apache.commons.lang3.CharUtils";
      charSequenceArray0[8] = (CharSequence) "org.apache.commons.lang3.CharUtils";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[1], charSequenceArray0[7], (-1272));
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      String string2 = StringUtils.rightPad("@~.hGC{", 2516, 'O');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      String string3 = StringUtils.upperCase((String) null, locale0);
      assertNull(string3);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.CharUtils", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      String string0 = StringUtils.substring("`", 35);
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("`", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, 'v');
      assertNotNull(string0);
      assertFalse(linkedHashSet0.contains('v'));
      assertEquals("", string0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String string1 = StringUtils.removeEnd("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add((Object) "\n");
      assertTrue(stack0.contains("\n"));
      assertTrue(boolean0);
      assertEquals("[\n]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(stack0.contains("\n"));
      assertEquals("[\n]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'y');
      assertNotNull(string0);
      assertTrue(stack0.contains("\n"));
      assertFalse(stack0.contains('y'));
      assertEquals("\n", string0);
      assertEquals("[\n]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      String string0 = StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, "@FDjAR/`cLC'JV2j");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("BkJBDL+", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("BkJBDL+", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'z', (-756), (int) (byte) (-74));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -756
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootLowerCase("13Abl]E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("13abl]e", string1);
      
      String string2 = StringUtils.stripToNull("13abl]e");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("13abl]e", string2);
      
      String string3 = StringUtils.wrap("13abl]e", "28,NtLJz/)w [?=B;");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", (String) null, "The character ", 55);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      Locale locale0 = new Locale("lriDw", "The character ");
      assertNotNull(locale0);
      assertEquals("THE CHARACTER ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("lridw_THE CHARACTER ", locale0.toString());
      assertEquals("lridw", locale0.getLanguage());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("THE CHARACTER ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("lridw_THE CHARACTER ", locale0.toString());
      assertEquals("lridw", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("lridw", locale1.getLanguage());
      assertEquals("lridw_THE CHARACTER ", locale1.toString());
      assertEquals("THE CHARACTER ", locale1.getCountry());
      
      String string5 = StringUtils.lowerCase("...", locale0);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("...", string5);
      assertEquals("THE CHARACTER ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("lridw_THE CHARACTER ", locale0.toString());
      assertEquals("lridw", locale0.getLanguage());
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "...", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Vector<String> vector1 = new Vector<String>();
      assertNotNull(vector1);
      assertFalse(vector1.contains(string3));
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) vector1);
      assertNotNull(list0);
      assertFalse(vector1.contains(string3));
      assertFalse(list0.contains(string3));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string6 = StringUtils.substringBetween("ms.Range", "...", (String) null);
      assertNull(string6);
      
      String string7 = StringUtils.upperCase("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", locale0);
      assertNotNull(string7);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("28,NTLJZ/)W [?=B;13ABL]E28,NTLJZ/)W [?=B;", string7);
      assertEquals("THE CHARACTER ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("lridw_THE CHARACTER ", locale0.toString());
      assertEquals("lridw", locale0.getLanguage());
      
      String string8 = StringUtils.replaceAll("13abl]e", "Cannot clear and set the following system properties at the same time: ", "lriDw");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertEquals("13abl]e", string8);
      
      int[] intArray0 = StringUtils.toCodePoints("28,NTLJZ/)W [?=B;13ABL]E28,NTLJZ/)W [?=B;");
      assertNotNull(intArray0);
      assertEquals(41, intArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "lriDw";
      charSequenceArray0[1] = (CharSequence) "28,NTLJZ/)W [?=B;13ABL]E28,NTLJZ/)W [?=B;";
      charSequenceArray0[2] = (CharSequence) "13abl]e";
      charSequenceArray0[3] = (CharSequence) "13Abl]E";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[8] = (CharSequence) null;
      String string9 = StringUtils.appendIfMissingIgnoreCase("28,NtLJz/)w [?=B;", "13abl]e", charSequenceArray0);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertEquals("28,NtLJz/)w [?=B;13abl]e", string9);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      String string0 = StringUtils.removeEnd("y", "\r");
      assertNotNull(string0);
      assertEquals("y", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "\r");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.chomp("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", string1);
      
      boolean boolean0 = StringUtils.isEmpty("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("y", "I^ZyV<\"EAKcw6e)", "...");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("y", string2);
      
      String string3 = StringUtils.join((int[]) null, 'L');
      assertNull(string3);
      
      String string4 = StringUtils.substringBetween((String) null, "Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range");
      assertNull(string4);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string5 = StringUtils.replacePattern("a@H $7`<J`4}IdB8", "org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("a@H $7`<J`4}IdB8", string5);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.replace("p6x{J06,", "b", "\r");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("p6x{J06,", string6);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "org.junitpioneer.jupiter.DefaultTimeZoneExtension", "\r");
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.isNumeric("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      String string0 = StringUtils.swapCase("+AOmBK`y7");
      assertNotNull(string0);
      assertEquals("+aoMbk`Y7", string0);
      
      String string1 = StringUtils.substringBetween("+aoMbk`Y7", "+AOmBK`y7", (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      String string0 = StringUtils.getDigits("hUhY}.800=dSqP");
      assertNotNull(string0);
      assertEquals("800", string0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      String string0 = StringUtils.getDigits("/VX!l^P");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      String string0 = StringUtils.truncate("[", 1015, 1015);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      String string0 = StringUtils.lowerCase("The Character must not be null");
      assertNotNull(string0);
      assertEquals("the character must not be null", string0);
      
      String string1 = StringUtils.trimToNull("s");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s", string1);
      
      String string2 = ":n7i*cB";
      int int0 = StringUtils.indexOfAny((CharSequence) ":n7i*cB", "the character must not be null");
      assertEquals(1, int0);
      
      String string3 = "cqzNKH?3";
      String string4 = StringUtils.replacePattern("The Character must not be null", "the character must not be null", "cqzNKH?3");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("The Character must not be null", string4);
      
      String[] stringArray0 = null;
      String string5 = StringUtils.replaceEachRepeatedly("s", (String[]) null, (String[]) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("s", string5);
      
      boolean boolean0 = StringUtils.isNumeric(":n7i*cB");
      assertFalse(boolean0);
      
      String string6 = null;
      char char0 = '\u0088';
      String string7 = StringUtils.leftPad((String) null, 1, '\u0088');
      assertNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("&IF4CGq*", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string0 = StringUtils.normalizeSpace("^7");
      assertNotNull(string0);
      assertEquals("^7", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("^7", "^7");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-46);
      String string2 = StringUtils.toRootLowerCase("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.deleteWhitespace("^7");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("^7", string3);
      
      String string4 = StringUtils.replacePattern("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", "HNh9", "hfov.~}8F7");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^7", (CharSequence) "");
      assertEquals(0, int0);
      
      String string5 = StringUtils.leftPad("^7", 256, '5');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555^7", string5);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.toRootLowerCase("DefaultTimeZone");
      assertNotNull(string1);
      assertEquals("defaulttimezone", string1);
      
      String string2 = StringUtils.stripToNull("Locale must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Locale must not be null", string2);
      
      String string3 = StringUtils.wrap((String) null, "{Ltl)h,dQRx6=ci 8)");
      assertNull(string3);
      
      String string4 = "The character ";
      String string5 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "DefaultTimeZone", "`l_UkB5", 55);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("p{InCombiningDiacriticalMarks}+", string5);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      byte byte0 = (byte)66;
      byte byte1 = (byte) (-59);
      byte byte2 = (byte)98;
      // Undeclared exception!
      try { 
        Charset.forName("\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "");
      assertNotNull(string0);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'f', (-709), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -709
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.strip("13Abl]E");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("13Abl]E", string1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'k', 0, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("7B-Hkqd=", "7B-Hkqd=");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("SoxnLk", "SoxnLk");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("Y&Z=-`.\f=+iPWB", 25);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y&Z=-`.\f=+iPWB          ", string1);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.lastIndexOfAny("\n", stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      String string0 = StringUtils.unwrap("y", '_');
      assertNotNull(string0);
      assertEquals("y", string0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      String string0 = StringUtils.repeat('?', 13);
      assertNotNull(string0);
      assertEquals("?????????????", string0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '?';
      String string1 = StringUtils.truncate("?????????????", 121);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("?????????????", string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "?????????????", "?????????????");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "?????????????";
      charSequenceArray0[1] = (CharSequence) "?????????????";
      charSequenceArray0[2] = (CharSequence) "?????????????";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = StringUtils.unwrap("?????????????", '?');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("???????????", string2);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 11);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.toString(byteArray0, (String) null);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string1);
      assertEquals(0, byteArray0.length);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-982));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "S0x:<4K::@";
      objectArray0[3] = (Object) "S0x:<4K::@";
      objectArray0[4] = (Object) null;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "S0x:<4K::@", (-1), 1130);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("}S6F%~0p0$S4h@oZ=0!", "}S6F%~0p0$S4h@oZ=0!", (-295));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("', has a length less than 2", "', has a length less than 2", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("2yGSucn(1:x.", "2yGSucn(1:x.", 48);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      String string0 = StringUtils.rightPad("Xz1,dJAR$;Qc", (-3009), '');
      assertNotNull(string0);
      assertEquals("Xz1,dJAR$;Qc", string0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      String string0 = StringUtils.rightPad("\"", 2700);
      assertNotNull(string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\""));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", '@');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.join((Object[]) stringArray0, ']');
      assertNotNull(string0);
      assertEquals("]", string0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNumericSpace("]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1115);
      shortArray0[2] = (short) (-1306);
      String string2 = StringUtils.stripStart("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("6", "", (int) (short) (-1115));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.strip("lh)rGR]X|rn", "6");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("lh)rGR]X|rn", string3);
      
      String string4 = StringUtils.center("", 71, "Q'l*%'%v");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Q'l*%'%vQ'l*%'%vQ'l*%'%vQ'l*%'%vQ'lQ'l*%'%vQ'l*%'%vQ'l*%'%vQ'l*%'%vQ'l*", string4);
      
      String string5 = StringUtils.wrapIfMissing("2", 'L');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("L2L", string5);
      
      String string6 = StringUtils.stripToEmpty("");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String string7 = StringUtils.replaceIgnoreCase("ck;gf'R.:}hb'~[R", "ck;gf'R.:}hb'~[R", "28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B; 28?{'\"7%");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertEquals("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B; 28?{'\"7%", string7);
      
      String string8 = StringUtils.abbreviate("", (int) (short) (-1115), 1396);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
      
      boolean boolean1 = StringUtils.isAllUpperCase("ck;gf'R.:}hb'~[R");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string9 = StringUtils.stripStart("Q'l*%'%v", "");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertEquals("Q'l*%'%v", string9);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 100, 100);
      assertNull(string0);
      
      String string1 = StringUtils.join((double[]) null, 'c', 100, 1956);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split((String) null, "4-4<tw");
      assertNull(stringArray0);
      
      String string2 = StringUtils.stripStart(" vs ", " vs ");
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 1956);
      assertNull(stringArray1);
      
      String string3 = StringUtils.strip("4-4<tw", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertEquals("4-4<tw", string3);
      
      String string4 = StringUtils.center("L>yG", 100, "Illegal range. The step cannot be zero.");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Illegal range. The step cannot be zero.Illegal rL>yGIllegal range. The step cannot be zero.Illegal r", string4);
      
      String string5 = StringUtils.join((Object[]) null, "D7FN\"&{l[|7-y1");
      assertNull(string5);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string6 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string6);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " vs ", (CharSequence) "4-4<tw", 902);
      assertEquals(6, int0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("D7FN\"&{l[|7-y1", (String) null);
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Minimum abbr'viation width is %d", (String) null, 32);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string0 = StringUtils.substringBetween("Minimum abbr'viation width is %d", "Minimum abbr'viation width is %d", "Minimum abbr'viation width is %d");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) " ";
      String string1 = StringUtils.replaceChars(" ", "-`]j8k7x", "Us0d|@L?");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, "I+z_iDh8Cox3S{]VZ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("I+z_iDh8Cox3S{]VZ I+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZ", string2);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.uncapitalize("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "I+z_iDh8Cox3S{]VZ I+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZ", (CharSequence) "", 100);
      assertEquals(69, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("I+z_iDh8Cox3S{]VZ");
      assertFalse(boolean0);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(""));
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      boolean boolean1 = vector0.add("I+z_iDh8Cox3S{]VZ I+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZ");
      assertTrue(vector0.contains("I+z_iDh8Cox3S{]VZ I+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZ"));
      assertFalse(vector0.contains(""));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[I+z_iDh8Cox3S{]VZ I+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZ]", vector0.toString());
      
      TreeSet<String> treeSet0 = new TreeSet<String>(vector0);
      assertNotNull(treeSet0);
      assertTrue(vector0.contains("I+z_iDh8Cox3S{]VZ I+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZ"));
      assertFalse(vector0.contains(""));
      assertTrue(treeSet0.contains("I+z_iDh8Cox3S{]VZ I+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZ"));
      assertFalse(treeSet0.contains(""));
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[I+z_iDh8Cox3S{]VZ I+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZ]", vector0.toString());
      
      String string4 = StringUtils.join((Iterable<?>) vector0, 'J');
      assertNotNull(string4);
      assertTrue(vector0.contains("I+z_iDh8Cox3S{]VZ I+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZ"));
      assertFalse(vector0.contains(""));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("I+z_iDh8Cox3S{]VZ I+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZ", string4);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[I+z_iDh8Cox3S{]VZ I+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZI+z_iDh8Cox3S{]VZ]", vector0.toString());
      
      String string5 = StringUtils.defaultIfEmpty("org.junitpioneer.jupiter.TempDirectory$CloseablePath", "-`]j8k7x");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", string5);
      
      String string6 = StringUtils.difference(" ", "sCuI_RaGmk");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("sCuI_RaGmk", string6);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.left(",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3@FDjAR/`cLC'JV2j", (-644));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "U'o}\"\bWIWv7", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((float[]) null, 'z');
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("'Ll6k", '#');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("#'Ll6k#", string2);
      
      String string3 = StringUtils.rightPad("LaunchTime", (-690));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("LaunchTime", string3);
      
      String string4 = StringUtils.remove("'Ll6k", "Extension context \"");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("'Ll6k", string4);
      
      String string5 = StringUtils.strip("     offset cannot be negative", "     offset cannot be negative");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Extension context \"", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.strip("\r");
      assertNotNull(string1);
      assertEquals("", string1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 102;
      intArray0[1] = 0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) '8';
      floatArray0[3] = 1751.7168F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 102;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      String string2 = StringUtils.join(floatArray0, '8');
      assertNotNull(string2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 56.0F, 1751.7168F, 0.0F, 102.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(string2.equals((Object)string1));
      assertEquals("0.080.0856.081751.716880.08102.080.080.080.0", string2);
      assertEquals(9, floatArray0.length);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replaceFirst((String) null, "", "");
      assertNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], charSequenceArray0[1], 102);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 321);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      int[] intArray0 = new int[8];
      intArray0[0] = (-1200);
      intArray0[1] = (-1200);
      intArray0[2] = (int) 'k';
      intArray0[3] = (-1200);
      intArray0[4] = (int) 'k';
      intArray0[5] = 5331;
      intArray0[6] = (int) 'k';
      intArray0[7] = 0;
      String string0 = StringUtils.join(intArray0, 'k', 1708, (-1200));
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-1200), (-1200), 107, (-1200), 107, 5331, 107, 0}, intArray0);
      assertEquals("", string0);
      assertEquals(8, intArray0.length);
      
      String string1 = StringUtils.trim("Locale must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Locale must not be null", string1);
      
      String string2 = StringUtils.left("Locale must not be null", 107);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Locale must not be null", string2);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      String string0 = StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "@FDjAR/`cLC'JV2j";
      char[] charArray0 = new char[8];
      charArray0[7] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'E';
      charArray0[5] = 'Y';
      charArray0[7] = 'Y';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Y', 'Y', 'E', '\u0000', 'Y', '\u0000', 'Y'}, charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing((String) null, 'o');
      assertNull(string2);
      
      String string3 = StringUtils.center(" vs ", 4044, (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      String string4 = StringUtils.lowerCase("Search and Replace array lengths don't match: ", locale0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("search and replace array lengths don't match: ", string4);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      boolean boolean1 = StringUtils.isMixedCase("search and replace array lengths don't match: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootLowerCase("13Abl]E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("13abl]e", string1);
      
      String string2 = StringUtils.stripToNull("13abl]e");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("13abl]e", string2);
      
      String string3 = StringUtils.wrap("13abl]e", "28,NtLJz/)w [?=B;");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", (String) null, "The character ", 55);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string5 = StringUtils.strip("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", string5);
      
      String string6 = StringUtils.repeat('\'', (-606));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      String string7 = StringUtils.chop("");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      
      boolean boolean1 = StringUtils.isMixedCase("The character ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[0];
      String string8 = StringUtils.joinWith("", objectArray0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertEquals("", string8);
      assertEquals(0, objectArray0.length);
      
      String string9 = StringUtils.removeStart("p{InCombiningDiacriticalMarks}+", "F>\"c-dg)OWY\"y!");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertEquals("p{InCombiningDiacriticalMarks}+", string9);
      
      String string10 = StringUtils.chomp("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", " 28?{'\"7%");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string5));
      assertEquals("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", string10);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("7Fdhn{\"P+hW\"`\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 11);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string1 = StringUtils.substringBefore("~lL8s:*'Y>SQT>G", (String) null);
      assertNotNull(string1);
      assertEquals("~lL8s:*'Y>SQT>G", string1);
      
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean1 = arrayDeque0.add(locale_FilteringMode0);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      
      boolean boolean2 = arrayDeque0.add(locale_FilteringMode0);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean3 = arrayDeque0.add(locale_FilteringMode1);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(3, arrayDeque0.size());
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>(arrayDeque0);
      assertNotNull(hashSet0);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(3, arrayDeque0.size());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      boolean boolean4 = hashSet0.add(locale_FilteringMode0);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(3, arrayDeque0.size());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      String string2 = StringUtils.join((Iterable<?>) hashSet0, (String) null);
      assertNotNull(string2);
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("AUTOSELECT_FILTERING", string2);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(3, arrayDeque0.size());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      boolean boolean5 = StringUtils.isAlphaSpace("~lL8s:*'Y>SQT>G");
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      int int1 = StringUtils.compare("i$SdBXV:#N2>1^", "");
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      boolean boolean6 = StringUtils.isMixedCase("~lL8s:*'Y>SQT>G");
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) arrayDeque0;
      objectArray0[1] = (Object) arrayDeque0;
      String string3 = StringUtils.joinWith("~lL8s:*'Y>SQT>G", objectArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("[AUTOSELECT_FILTERING, AUTOSELECT_FILTERING, AUTOSELECT_FILTERING]~lL8s:*'Y>SQT>G[AUTOSELECT_FILTERING, AUTOSELECT_FILTERING, AUTOSELECT_FILTERING]", string3);
      assertEquals(2, objectArray0.length);
      
      String string4 = StringUtils.removeStart("org.junitpioneer.jupiter.params.Range", "Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("org.junitpioneer.jupiter.params.Range", string4);
      
      String string5 = StringUtils.chomp("org.junitpioneer.jupiter.params.Range", "dj{t5caY");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("org.junitpioneer.jupiter.params.Range", string5);
      
      String string6 = StringUtils.removeEndIgnoreCase("KdP", "y");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("KdP", string6);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      String string0 = StringUtils.lowerCase("The Character must not be null");
      assertNotNull(string0);
      assertEquals("the character must not be null", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = 'Y';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "the character must not be null", charArray0);
      assertArrayEquals(new char[] {'o', 'Y'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      String string1 = StringUtils.stripToNull("the character must not be null");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("the character must not be null", string1);
      
      String string2 = StringUtils.wrapIfMissing(" vs ", 'Y');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Y vs Y", string2);
      
      Vector<String> vector0 = new Vector<String>(0, (-126));
      assertNotNull(vector0);
      assertFalse(vector0.contains("The Character must not be null"));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      boolean boolean1 = vector0.add("The Character must not be null");
      assertTrue(vector0.contains("The Character must not be null"));
      assertFalse(vector0.contains(string0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[The Character must not be null]", vector0.toString());
      
      boolean boolean2 = vector0.add("Y vs Y");
      assertTrue(vector0.contains("The Character must not be null"));
      assertFalse(vector0.contains(string0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals("[The Character must not be null, Y vs Y]", vector0.toString());
      assertEquals(2, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      
      vector0.trimToSize();
      assertTrue(vector0.contains("The Character must not be null"));
      assertFalse(vector0.contains(string0));
      assertEquals("[The Character must not be null, Y vs Y]", vector0.toString());
      assertEquals(2, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      
      boolean boolean3 = vector0.add(" vs ");
      assertTrue(vector0.contains("The Character must not be null"));
      assertFalse(vector0.contains(string0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(3, vector0.size());
      assertEquals("[The Character must not be null, Y vs Y,  vs ]", vector0.toString());
      assertEquals(4, vector0.capacity());
      assertFalse(vector0.isEmpty());
      
      boolean boolean4 = vector0.add("the character must not be null");
      assertTrue(vector0.contains("The Character must not be null"));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertEquals(4, vector0.size());
      assertEquals("[The Character must not be null, Y vs Y,  vs , the character must not be null]", vector0.toString());
      assertEquals(4, vector0.capacity());
      assertFalse(vector0.isEmpty());
      
      boolean boolean5 = vector0.add("The Character must not be null");
      assertTrue(vector0.contains("The Character must not be null"));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5);
      assertEquals(5, vector0.size());
      assertEquals("[The Character must not be null, Y vs Y,  vs , the character must not be null, The Character must not be null]", vector0.toString());
      assertEquals(8, vector0.capacity());
      assertFalse(vector0.isEmpty());
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string3 = "5k&|Z$Vht)`)=ufr#x$";
      String string4 = StringUtils.leftPad("5k&|Z$Vht)`)=ufr#x$", 2320, "The Character must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      try { 
        StringUtils.getBytes(" vs ", "the character must not be null");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("~X/{:}TrAO@7kc.$2");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      String string0 = StringUtils.truncate("*ZS3JV=~<^&.gSxR", 115);
      assertNotNull(string0);
      assertEquals("*ZS3JV=~<^&.gSxR", string0);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      String string0 = StringUtils.substring("", 8224, 8224);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      String string0 = StringUtils.removeEnd("y", "\r");
      assertNotNull(string0);
      assertEquals("y", string0);
      
      String string1 = StringUtils.substringBetween("", "y");
      assertNull(string1);
      
      String string2 = StringUtils.chomp("t+7eLxy\"yO-t!4a");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("t+7eLxy\"yO-t!4a", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "y";
      charSequenceArray0[2] = (CharSequence) "y";
      charSequenceArray0[3] = (CharSequence) "t+7eLxy\"yO-t!4a";
      charSequenceArray0[4] = (CharSequence) "y";
      charSequenceArray0[5] = (CharSequence) null;
      String string3 = StringUtils.substring("......", 5104, (-432));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootLowerCase("13Abl]E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("13abl]e", string1);
      
      String string2 = StringUtils.stripToNull("13abl]e");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("13abl]e", string2);
      
      String string3 = StringUtils.wrap("13abl]e", "28,NtLJz/)w [?=B;");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("28,NtLJz/)w [?=B;13abl]e28,NtLJz/)w [?=B;", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", (String) null, "The character ", 55);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-59);
      char[] charArray0 = new char[5];
      charArray0[3] = 'J';
      charArray0[1] = '1';
      charArray0[2] = 'Z';
      charArray0[3] = '2';
      charArray0[4] = '\'';
      String string5 = StringUtils.join(charArray0, '!', 69, 3);
      assertNotNull(string5);
      assertArrayEquals(new char[] {'\u0000', '1', 'Z', '2', '\''}, charArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.repeat('x', 22);
      assertNotNull(string1);
      assertEquals("xxxxxxxxxxxxxxxxxxxxxx", string1);
      
      String string2 = StringUtils.abbreviateMiddle("#{*hu", (String) null, 9);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("#{*hu", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "#{*hu");
      assertEquals(0, int0);
      
      String string3 = StringUtils.join((char[]) null, '(', 22, 46);
      assertNull(string3);
      
      String string4 = StringUtils.substringBeforeLast((String) null, "");
      assertNull(string4);
      
      String string5 = StringUtils.repeat('#', 46);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("##############################################", string5);
      
      String string6 = StringUtils.lowerCase("#{*hu");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("#{*hu", string6);
      
      int int1 = StringUtils.indexOf((CharSequence) "#{*hu", (CharSequence) null, 2373);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      String string0 = StringUtils.stripAccents("!:tkIyq,p~k<~lV");
      assertNotNull(string0);
      assertEquals("!:tkIyq,p~k<~lV", string0);
      
      String string1 = StringUtils.wrapIfMissing("!:tkIyq,p~k<~lV", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("!:tkIyq,p~k<~lV", string1);
      
      String string2 = StringUtils.rightPad("[;(^fEO32=8{Fe*.o", (-637), "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[;(^fEO32=8{Fe*.o", string2);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string3 = locale0.getDisplayVariant();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string4 = locale0.getDisplayScript();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      
      String string5 = StringUtils.replace("!:tkIyq,p~k<~lV", " x]k", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("!:tkIyq,p~k<~lV", string5);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "[;(^fEO32=8{Fe*.o";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Set<Character> set0 = locale1.getExtensionKeys();
      assertNotNull(set0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      objectArray0[4] = (Object) "[;(^fEO32=8{Fe*.o";
      objectArray0[5] = (Object) "!:tkIyq,p~k<~lV";
      String string6 = StringUtils.join(objectArray0, '`');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("zh_CN`[;(^fEO32=8{Fe*.o```[;(^fEO32=8{Fe*.o`!:tkIyq,p~k<~lV", string6);
      assertEquals(6, objectArray0.length);
      
      String string7 = StringUtils.lowerCase("qL&[grDi>", locale1);
      assertNotNull(string7);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("ql&[grdi>", string7);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "yn1Pp5F*PX+X?G5pr;", (-68));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("zh_CN`[;(^fEO32=8{Fe*.o```[;(^fEO32=8{Fe*.o`!:tkIyq,p~k<~lV");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      locale_CategoryArray0[0] = locale_Category0;
      String string0 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string0);
      assertEquals("FORMAT", string0);
      assertEquals(1, locale_CategoryArray0.length);
      
      String string1 = StringUtils.appendIfMissing("...", "FORMAT", (CharSequence[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...FORMAT", string1);
      
      String string2 = StringUtils.substringBefore("z\"nf", "...FORMAT");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("z\"nf", string2);
      
      boolean boolean0 = StringUtils.isAlpha("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, 877);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("AlyCNc>n;-Ynf9", supplier0);
      assertNotNull(string0);
      assertEquals("AlyCNc>n;-Ynf9", string0);
      
      String string1 = StringUtils.strip("AlyCNc>n;-Ynf9");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("AlyCNc>n;-Ynf9", string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.junitpioneer.jupiter.DefaultLocaleExtension";
      stringArray0[1] = "AlyCNc>n;-Ynf9";
      stringArray0[2] = "AlyCNc>n;-Ynf9";
      stringArray0[3] = "AlyCNc>n;-Ynf9";
      stringArray0[4] = "AlyCNc>n;-Ynf9";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string2);
      assertEquals(5, stringArray0.length);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string3 = StringUtils.lowerCase("......", locale0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("......", string3);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "AlyCNc>n;-Ynf9", (CharSequence) "AlyCNc>n;-Ynf9");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringBetween("AlyCNc>n;-Ynf9", "}s", "XgZeswhN(JbK<1Syxb&");
      assertNull(string4);
      
      String string5 = StringUtils.rotate((String) null, 0);
      assertNull(string5);
      
      String string6 = StringUtils.replaceAll(",DwK$qp|QuO$[k", "AlyCNc>n;-Ynf9", "Minimum abbreviation width is %d");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals(",DwK$qp|QuO$[k", string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase(",DwK$qp|QuO$[k", "org.junitpioneer.jupiter.DefaultLocaleExtension", stringArray0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals(",DwK$qp|QuO$[korg.junitpioneer.jupiter.DefaultLocaleExtension", string7);
      assertEquals(5, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints(",DwK$qp|QuO$[korg.junitpioneer.jupiter.DefaultLocaleExtension");
      assertNotNull(intArray0);
      assertEquals(61, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      String string0 = StringUtils.strip("Threshold must not be negative", "1^UQ&/\"c97~rpi8:S");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'u');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      String string0 = StringUtils.replaceChars("-cFdh6fL5}E", "", "");
      assertNotNull(string0);
      assertEquals("-cFdh6fL5}E", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceEach("-cFdh6fL5}E", (String[]) null, (String[]) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("-cFdh6fL5}E", string1);
      
      String string2 = StringUtils.capitalize("lpid$^5hwnD|KsX?");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Lpid$^5hwnD|KsX?", string2);
      
      String string3 = StringUtils.truncate("lpid$^5hwnD|KsX?", 0, 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceChars(". The following paths could not be deleted (see suppressed exceptions for details): ", "-cFdh6fL5}E", "Lpid$^5hwnD|KsX?");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(". T$e 5ollowing pat$s pould not be deleted (see suppressed expeptions 5or details): ", string4);
      
      String string5 = StringUtils.getDigits((String) null);
      assertNull(string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) ". T$e 5ollowing pat$s pould not be deleted (see suppressed expeptions 5or details): ");
      assertEquals((-1), int0);
      
      String string6 = StringUtils.lowerCase(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals(". the following paths could not be deleted (see suppressed exceptions for details): ", string6);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      
      boolean boolean1 = locale0.hasExtensions();
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      
      String string7 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.juUitpioneer.vintage.ExpectedExceptionExtenzion";
      stringArray0[1] = "blank_blank_blank_2014";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) arrayDeque0);
      assertNotNull(list0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = locale0.getDisplayScript();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = Locale.ITALIAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      
      String string1 = StringUtils.upperCase("le@LUS7db!T:fP|", locale1);
      assertNotNull(string1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("LE@LUS7DB!T:FP|", string1);
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      
      String string2 = StringUtils.center("/5HZBExj;amlWoQ=", 2263, "oJI}.)");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "le@LUS7db!T:fP|", "org.juUitpioneer.vintage.ExpectedExceptionExtenzion");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      String string0 = StringUtils.rotate("1K-", (-2755));
      assertNotNull(string0);
      assertEquals("K-1", string0);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      String string0 = StringUtils.substring("N", (-2189), (-2189));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("(k9,zOX(pPA+3", "0{;YEw7k9s>\"");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      String string0 = StringUtils.center("%_mqN#XoVq\"w?#", 85, "%_mqN#XoVq\"w?#");
      assertNotNull(string0);
      assertEquals("%_mqN#XoVq\"w?#%_mqN#XoVq\"w?#%_mqN%_mqN#XoVq\"w?#%_mqN#XoVq\"w?#%_mqN#XoVq\"w?#%_mqN", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "%_mqN#XoVq\"w?#%_mqN#XoVq\"w?#%_mqN%_mqN#XoVq\"w?#%_mqN#XoVq\"w?#%_mqN#XoVq\"w?#%_mqN";
      String string1 = StringUtils.appendIfMissingIgnoreCase("%_mqN#XoVq\"w?#%_mqN#XoVq\"w?#%_mqN%_mqN#XoVq\"w?#%_mqN#XoVq\"w?#%_mqN#XoVq\"w?#%_mqN", "%_mqN#XoVq\"w?#", charSequenceArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("%_mqN#XoVq\"w?#%_mqN#XoVq\"w?#%_mqN%_mqN#XoVq\"w?#%_mqN#XoVq\"w?#%_mqN#XoVq\"w?#%_mqN", string1);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("%_mqN#XoVq\"w?#%_mqN#XoVq\"w?#%_mqN%_mqN#XoVq\"w?#%_mqN#XoVq\"w?#%_mqN#XoVq\"w?#%_mqN", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("\"52GC761!\"pRGC7611", "s#hA", stringArray0);
      assertNotNull(string0);
      assertEquals("\"52GC761!\"pRGC7611s#hA", string0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\"52GC761!\"pRGC7611s#hA", stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "maxWith cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      String string0 = StringUtils.substringBefore("n;ZzL", "defaulttimezone");
      assertNotNull(string0);
      assertEquals("n;ZzL", string0);
      
      String string1 = StringUtils.chomp("^z");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("^z", string1);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      String string2 = StringUtils.chomp("n;ZzL", "Locale must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("n;ZzL", string2);
      
      String string3 = StringUtils.reverseDelimited("\r", '9');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\r", string3);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      boolean boolean1 = StringUtils.isAlpha("defaulttimezone");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("*ZS3JV=~<^&.5SxR");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "\"|o9{=\"|o9{=");
      assertNull(string0);
      
      String string1 = StringUtils.mid((String) null, (-3649), (-3649));
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\"|o9{=\"|o9{=";
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.removeStartIgnoreCase((String) null, "2ekRO*#l");
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.LF;
      assertNotNull(string3);
      assertEquals("\n", string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\"|o9{=\"|o9{=", charArray0);
      assertArrayEquals(new char[] {'h', 'h'}, charArray0);
      assertEquals(0, int0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.removeStartIgnoreCase("org.apache.commons.lang3.RegExUtilsb", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.RegExUtilsb", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("org.apache.commons.lang3.RegExUtilsb", "org.apache.commons.lang3.RegExUtilsb");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string0 = StringUtils.swapCase("_Ui<A#42>5Z/3yEqQ ");
      assertNotNull(string0);
      assertEquals("_uI<a#42>5z/3YeQq ", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("_uI<a#42>5z/3YeQq ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_uI<a#42>5z/3YeQq ";
      int int0 = StringUtils.lastIndexOf((CharSequence) "_uI<a#42>5z/3YeQq ", 1325);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isNotEmpty("_uI<a#42>5z/3YeQq ");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("6NJTd1NKV'_bnJ%F", "maxWith cannot be negative", 1325);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "maxWith cannot be negative", (CharSequence) "maxWith cannot be negative");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-1454));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Search and Replace array lengths don't match: ", "y\r");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[3] = (CharSequence) "Search and Replace array lengths don't match: ";
      boolean boolean1 = StringUtils.equalsAny("Search and Replace array lengths don't match: ", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1970;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)13;
      shortArray0[3] = (short)22;
      shortArray0[4] = (short)42;
      shortArray0[5] = (short)3174;
      String string1 = StringUtils.join(shortArray0, 'j');
      assertNotNull(string1);
      assertArrayEquals(new short[] {(short)1970, (short)5, (short)13, (short)22, (short)42, (short)3174}, shortArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1970j5j13j22j42j3174", string1);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("egative", "egative");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      String string0 = StringUtils.appendIfMissingIgnoreCase("17)GSh@.L[U$F=`W", "17)GSh@.L[U$F=`W", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("17)GSh@.L[U$F=`W", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "17)GSh@.L[U$F=`W", (CharSequence) "17)GSh@.L[U$F=`W");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing("Y;{oc(pDtc7l9|", "Y;{oc(pDtc7l9|", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("Y;{oc(pDtc7l9|", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("Y;{oc(pDtc7l9|");
      assertNotNull(intArray0);
      assertEquals(14, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.joinWith("U'o}\"\bWIWv7", objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissingIgnoreCase("'Ll6k", "U'o}\"\bWIWv7", charSequenceArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'Ll6k", string1);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStartIgnoreCase("'Ll6k", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("'Ll6k", string2);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      String string3 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("FORMATDISPLAYFORMAT", string3);
      assertEquals(3, locale_CategoryArray0.length);
      
      String string4 = StringUtils.appendIfMissing("Arguments cannot both be null", "'Ll6k", charSequenceArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Arguments cannot both be null", string4);
      assertEquals(2, charSequenceArray0.length);
      
      String string5 = StringUtils.substringBefore("}W", "'Ll6k");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("}W", string5);
      
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[1], 16);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNotEmpty(charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("'Ll6k", "maxWith cannot be negative", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "Arguments cannot both be null", (CharSequence) "Arguments cannot both be null");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "Threshold");
      assertNotNull(string0);
      assertEquals("Threshold", string0);
      
      String string1 = StringUtils.rotate((String) null, 35);
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'G', 'G'}, charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Object object0 = stack0.push("|PN@R11pYJ7@w^7\"");
      assertNotNull(object0);
      assertTrue(stack0.contains("|PN@R11pYJ7@w^7\""));
      assertEquals("|PN@R11pYJ7@w^7\"", object0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[|PN@R11pYJ7@w^7\"]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      boolean boolean0 = stack0.add((Object) null);
      assertTrue(stack0.contains("|PN@R11pYJ7@w^7\""));
      assertTrue(boolean0);
      assertEquals("[|PN@R11pYJ7@w^7\", null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean1 = stack0.add((Object) "|PN@R11pYJ7@w^7\"");
      assertTrue(stack0.contains("|PN@R11pYJ7@w^7\""));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[|PN@R11pYJ7@w^7\", null, |PN@R11pYJ7@w^7\"]", stack0.toString());
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(stack0.contains("|PN@R11pYJ7@w^7\""));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[|PN@R11pYJ7@w^7\", null, |PN@R11pYJ7@w^7\"]", stack0.toString());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, '<');
      assertNotNull(string0);
      assertFalse(stack0.contains('<'));
      assertTrue(stack0.contains("|PN@R11pYJ7@w^7\""));
      assertFalse(string0.equals((Object)object0));
      assertEquals("|PN@R11pYJ7@w^7\"<<|PN@R11pYJ7@w^7\"", string0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[|PN@R11pYJ7@w^7\", null, |PN@R11pYJ7@w^7\"]", stack0.toString());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      String string0 = StringUtils.difference("Slm9fvd*K997<", "Slm9fvd*K997<");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      String string0 = StringUtils.stripStart("Locale must not be null", "");
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, 'p');
      assertNotNull(string0);
      assertFalse(treeSet0.contains('p'));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "1_~8cq<NA0aN", '5');
      assertEquals(0, int0);
      
      String string0 = StringUtils.rotate("[4Mro;^X0;vb|8 PgJT", 0);
      assertNotNull(string0);
      assertEquals("[4Mro;^X0;vb|8 PgJT", string0);
      
      String string1 = StringUtils.repeat("[4Mro;^X0;vb|8 PgJT", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("gO!l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "1R";
      stringArray0[2] = "";
      stringArray0[3] = "junit";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      float[] floatArray0 = new float[2];
      String string0 = StringUtils.join(floatArray0, '8');
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("0.080.0", string0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      String string0 = StringUtils.join(floatArray0, '8');
      assertNotNull(string0);
      assertArrayEquals(new float[] {(-1.0F), 1.0F}, floatArray0, 0.01F);
      assertEquals("-1.081.0", string0);
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("-1.081.0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      String string0 = "\"";
      int int0 = StringUtils.countMatches((CharSequence) "\"", 'X');
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("\"", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited(" wZjl(yhcH", 'y');
      assertNotNull(string0);
      assertEquals("hcHy wZjl(", string0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      String string0 = "AlyCNc>n;-Ynf9";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("AlyCNc>n;-Ynf9", supplier0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("AlyCNc>n;-Ynf9", string1);
      
      String string2 = StringUtils.strip("AlyCNc>n;-Ynf9");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("AlyCNc>n;-Ynf9", string2);
      
      String[] stringArray0 = new String[5];
      String string3 = "org.junitpioneer.jupiter.DefaultLocaleExtension";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string4);
      assertEquals(5, stringArray0.length);
      
      String string5 = StringUtils.replace("=2J0$@BmQ'l*%'%v,X^ FN%<", "yn1Pp5F*PX+X?G5pr;", "AlyCNc>n;-Ynf9");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("=2J0$@BmQ'l*%'%v,X^ FN%<", string5);
      
      String string6 = StringUtils.join((Object[]) stringArray0, 'K');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("KKKK", string6);
      assertEquals(5, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("\"D`to-", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      String string0 = StringUtils.replace("Y@_6Fla", "Y@_6Fla", "Y@_6Fla");
      assertNotNull(string0);
      assertEquals("Y@_6Fla", string0);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      String string0 = "AlyCNc>n;-Ynf9";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("AlyCNc>n;-Ynf9", supplier0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("AlyCNc>n;-Ynf9", string1);
      
      String string2 = StringUtils.strip("AlyCNc>n;-Ynf9");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("AlyCNc>n;-Ynf9", string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.junitpioneer.jupiter.DefaultLocaleExtension";
      stringArray0[1] = "AlyCNc>n;-Ynf9";
      stringArray0[2] = "AlyCNc>n;-Ynf9";
      stringArray0[3] = "AlyCNc>n;-Ynf9";
      stringArray0[4] = "AlyCNc>n;-Ynf9";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string3);
      assertEquals(5, stringArray0.length);
      
      String string4 = StringUtils.replace("XgZeswhN(JbK<1Syxb&", "AlyCNc>n;-Ynf9", "yn1Pp5F*PX+X?G5pr;");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("XgZeswhN(JbK<1Syxb&", string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'K');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtensionKAlyCNc>n;-Ynf9KAlyCNc>n;-Ynf9KAlyCNc>n;-Ynf9KAlyCNc>n;-Ynf9", string5);
      assertEquals(5, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("AlyCNc>n;-Ynf9", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "Illegal range. The step cannot be zero.");
      assertNotNull(string0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Timeout", "\n");
      assertNotNull(string0);
      assertEquals("Timeout", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("Timeout");
      assertFalse(boolean0);
      
      String string1 = StringUtils.chomp("\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeIgnoreCase("~Kc#L7|#D", "junit-pioneer");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("~Kc#L7|#D", string2);
      
      String string3 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAlpha((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", charSequenceArray0[3], (-1272));
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      try { 
        StringUtils.getBytes("Search and Replace array lengths don't match: ", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      String string0 = StringUtils.chomp("                                                                                                                                                           Kj[%g5y_cHP                                                                                                                                                           ");
      assertNotNull(string0);
      assertEquals("                                                                                                                                                           Kj[%g5y_cHP                                                                                                                                                           ", string0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      String string0 = "', has a length less than 2\\u";
      String string1 = StringUtils.removeEnd(string0, "y");
      assertNotNull(string1);
      assertEquals("', has a length less than 2\\u", string1);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      
      int int0 = StringUtils.getFuzzyDistance(string1, "y", locale0);
      assertEquals(0, int0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, "0l_ rk|;03ff+=zKi)RUgEy*k@");
      assertNull(string0);
      
      String string1 = StringUtils.overlay("\n", (String) null, (-297), 19);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean0);
      
      String string2 = StringUtils.defaultString("\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      
      String string3 = StringUtils.chomp(" vs  vs ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" vs  vs ", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) " vs  vs ";
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = '-';
      charArray0[2] = 'b';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-297), 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.overlay(">Azq/OUp", "", 0, 0);
      assertNotNull(string0);
      assertEquals(">Azq/OUp", string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.stripEnd("", "Q'l*%'%v,X^ FN%<");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd("", (String) null);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[3], (int) 'h');
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[1], charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.strip("");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.repeat('\'', 0);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      String string6 = StringUtils.chop("Q'l*%'%v,X^ FN%<");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Q'l*%'%v,X^ FN%", string6);
      
      boolean boolean3 = StringUtils.isMixedCase(charSequenceArray0[1]);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(7, charSequenceArray0.length);
      
      String string7 = StringUtils.joinWith("", charSequenceArray0);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertEquals("", string7);
      assertEquals(7, charSequenceArray0.length);
      
      String string8 = StringUtils.removeStart("Q'l*%'%v,X^ FN%<", "=2J0$@Bm");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertEquals("Q'l*%'%v,X^ FN%<", string8);
      
      String string9 = StringUtils.chomp("", (String) null);
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertEquals("", string9);
      
      String string10 = StringUtils.removeEndIgnoreCase("KdP", "o=#Y}$Rgz");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertEquals("KdP", string10);
      
      String string11 = StringUtils.removeIgnoreCase("=2J0$@Bm", "Q'l*%'%v,X^ FN%<");
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string6));
      assertEquals("=2J0$@Bm", string11);
      
      boolean boolean4 = StringUtils.contains((CharSequence) "", 0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string12 = StringUtils.toRootUpperCase("=2J0$@Bm");
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string11));
      assertEquals("=2J0$@BM", string12);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      String string0 = StringUtils.overlay("", "", 2312, 2312);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      String string0 = StringUtils.removePattern("fbnlTy LE.", "fbnlTy LE.");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.getIfEmpty("", (Supplier<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      String string1 = StringUtils.join((List<?>) stack0, '2', 0, 0);
      assertNotNull(string1);
      assertFalse(stack0.contains(0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      assertNotNull(predicate0);
      
      boolean boolean0 = stack0.removeIf(predicate0);
      assertFalse(stack0.contains(""));
      assertFalse(boolean0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      String string2 = StringUtils.abbreviate("", 0, 1234);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean1 = stack0.add((Object) "");
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains(0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 1249);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string3);
      
      String string4 = StringUtils.removeIgnoreCase("", "Extension context \"");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.overlay("", "~},*JNh!9v&xBaJ/", 0, 1234);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("~},*JNh!9v&xBaJ/", string5);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 198);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      String string0 = StringUtils.repeat("\n", 8209);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, 5, 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      String string0 = StringUtils.repeat("g@~.hGC{gL)_auchTme", (-612));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("ArMK+<p6{|=;nRxv} 5", "ArMK+<p6{|=;nRxv} 5");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "Test '%s' was supposed to run no longer than %d ms but ran %d ms.", 102);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", stringArray0);
      assertEquals(65, int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      String string0 = StringUtils.substringBetween("9%_#c", "9%_#c");
      assertNull(string0);
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      charArray0[6] = '9';
      charArray0[7] = 'h';
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "9%_#c", 199, 199);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.joinWith("I;w|^gl%gg!;", charSequenceArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("I;w|^gl%gg!;I;w|^gl%gg!;I;w|^gl%gg!;I;w|^gl%gg!;", string2);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (-698));
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      String string0 = "ExceptionWasThrown";
      int int0 = (-1899);
      // Undeclared exception!
      try { 
        StringUtils.truncate("ExceptionWasThrown", (-1899));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeAll("@~.hGC{", "@~.hGC{");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 5
         // @~.hGC{
         //      ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      String string0 = "84).>(A`";
      // Undeclared exception!
      try { 
        StringUtils.removeAll("84).>(A`", "84).>(A`");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 1
         // 84).>(A`
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      String string0 = StringUtils.removeAll("LUBa", "LUBa");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      String string0 = StringUtils.unwrap("@~.hGC{", 'B');
      assertNotNull(string0);
      assertEquals("@~.hGC{", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "@~.hGC{", (CharSequence) "@~.hGC{");
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string1 = locale0.getDisplayCountry();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Japan", string1);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      int int1 = StringUtils.getFuzzyDistance("@~.hGC{", "@~.hGC{", locale0);
      assertFalse(int1 == int0);
      assertEquals(19, int1);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      boolean boolean1 = StringUtils.startsWith("Japan", "@~.hGC{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("k");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      String string0 = StringUtils.center("c02B K", (-1), "c02B K");
      assertNotNull(string0);
      assertEquals("c02B K", string0);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("52kGC7\"1!", "52kGC7\"1!", "52kGC7\"1!", 56);
      assertNotNull(string0);
      assertEquals("52kGC7\"1!", string0);
      
      String string1 = StringUtils.leftPad("52kGC7\"1!", 56);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                              52kGC7\"1!", string1);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      String string0 = StringUtils.leftPad("JY--xs4F", 4, '\\');
      assertNotNull(string0);
      assertEquals("JY--xs4F", string0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      String string0 = StringUtils.substringBefore("0I0I0I0", "S");
      assertNotNull(string0);
      assertEquals("0I0I0I0", string0);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'q');
      assertNotNull(string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      int int0 = StringUtils.getFuzzyDistance("En7i*lKB", "En7i*lKB", locale0);
      assertEquals(22, int0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      String string0 = StringUtils.stripAccents("!:tkIyq,p~k<~lV");
      assertNotNull(string0);
      assertEquals("!:tkIyq,p~k<~lV", string0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = StringUtils.contains((CharSequence) "!:tkIyq,p~k<~lV", 13);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("$*P`vOuk", " vs ");
      assertNotNull(string0);
      assertEquals("$*P`vOuk", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "$*P`vOuk", (-1791));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad("$*P`vOuk", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("$*P`vOuk", string1);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Locale locale1 = new Locale("", "gEJtC*4c^&");
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("_GEJTC*4C^&", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("GEJTC*4C^&", locale1.getCountry());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(locale1));
      assertEquals(0, priorityQueue0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) priorityQueue0, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(priorityQueue0.contains(locale1));
      assertFalse(list0.contains(locale1));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = locale1.hasExtensions();
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(boolean0);
      assertEquals("_GEJTC*4C^&", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("GEJTC*4C^&", locale1.getCountry());
      
      String string2 = locale0.getDisplayCountry(locale1);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("_GEJTC*4C^&", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("GEJTC*4C^&", locale1.getCountry());
      
      int int1 = StringUtils.getFuzzyDistance("$*P`vOuk", " vs ", locale0);
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      
      boolean boolean1 = StringUtils.isNotEmpty("$*P`vOuk");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "$*P`vOuk", 0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[0];
      String string3 = StringUtils.join(doubleArray0, 'd');
      assertNotNull(string3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean3 = StringUtils.isAlphaSpace("");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string4 = StringUtils.substringBefore("...", "$*P`vOuk");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("...", string4);
      
      String string5 = StringUtils.trimToNull("...");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("...", string5);
      
      String string6 = StringUtils.center("", (-2048), "[i");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      
      String string7 = StringUtils.removeEnd("...", "...");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      
      String string8 = StringUtils.stripStart((String) null, "");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, "2");
      assertNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '%';
      charArray0[2] = 't';
      String[] stringArray0 = StringUtils.split("maxWith cannot be negative", "]+TWYr4", 0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.removePattern((String) null, "");
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      String string0 = StringUtils.stripAccents("!:tkIyq,p~k<~lV");
      assertNotNull(string0);
      assertEquals("!:tkIyq,p~k<~lV", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("The type must not be null", "s", 65536);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      String string1 = StringUtils.join((byte[]) null, '5');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp((String) null, (String) null);
      assertNull(string0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string1 = StringUtils.join((List<?>) arrayList0, (String) null, 4630, 5);
      assertNotNull(string1);
      assertFalse(arrayList0.contains(4630));
      assertEquals("", string1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "Locale must not be null", (-1775), 15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1775
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "*ZS3JV=~<^&.5SxR", (CharSequence) "*ZS3JV=~<^&.5SxR");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.removeEnd("Threshold must not be negative", "Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("Threshold must not be negative", "Threshold must not be negative", 82);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Threshold must not be negative", string1);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join((List<?>) linkedList0, "", (-3187), (-3187));
      assertNotNull(string0);
      assertFalse(linkedList0.contains((-3187)));
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Xty&X`T", "Xty&X`T", 38, 38);
      assertNotNull(string0);
      assertEquals("Xty&X`T", string0);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      String string0 = StringUtils.repeat('1', 650);
      assertNotNull(string0);
      assertEqualsstring0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase
      assertTrue(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequenceharSequence
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      String string1 = StringUtils.join(byteArray0, '6');
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)127, (byte) (-24), (byte)90, (byte)4, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1276-24690646060", string1);
      assertEquals(6, byteArray0.length);
      
      String string2 = StringUtils.center("1276-24690646060", (int) (byte)0, 'r');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("1276-24690646060", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charSequenceArray0.length);
      
      String string3 = StringUtils.abbreviate("1276-24690646060", "1276-24690646060", 1247);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("1276-24690646060", string3);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("1276-24690646060"));
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) linkedList0);
      assertNotNull(list0);
      assertFalse(linkedList0.contains("1276-24690646060"));
      assertFalse(list0.contains("1276-24690646060"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) listint) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -157
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\n");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWithAny("\n", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("n;ZzL");
      assertNotNull(string0);
      assertEquals("N;ZZL", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("}\u0006", "N;ZZL");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.substringAfter("<", "Search and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.LF;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      
      boolean boolean0 = StringUtils.isMixedCase("Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("<", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.endsWithAny("The Character must not be null", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny(":+8u<4K+", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("O_#4TOz$r");
      assertNotNull(string0);
      assertEquals("O_#4TOZ$R", string0);
      
      String string1 = StringUtils.wrapIfMissing("68yK3IG$V6", 'g');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("g68yK3IG$V6g", string1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string2 = StringUtils.getDigits("68yK3IG$V6");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("6836", string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "g68yK3IG$V6g", "O_#4TOz$r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceChars("Locale must not be null", "=eiYe\"(My.yt)Y", ".G,_}a_/$^g");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("LocalG mus no bG null", string3);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'g';
      intArray0[1] = (int) 'g';
      intArray0[2] = (int) 'g';
      intArray0[3] = (int) 'g';
      ArrayList<Locale.FilteringMode> arrayList1 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      String string4 = StringUtils.wrapIfMissing("g68yK3IG$V6g", 'g');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("g68yK3IG$V6g", string4);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.rotate("Minimum abbreviation width is %d", 321);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dMinimum abbreviation width is %", string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "dMinimum abbreviation width is %", charArray0);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.stripToNull("");
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("Minimum abbreviation width is %d", 'M');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %dM", string3);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string4 = StringUtils.center("", 321, "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("                                                                                                                                                                                                                                                                                                                                 ", string4);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width is %dM", "gD:~fy0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.rotate(" 28?{'\"7%", 64);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("% 28?{'\"7", string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "% 28?{'\"7");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "H\n", charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      String string0 = StringUtils.lowerCase("The Character must not be null");
      assertNotNull(string0);
      assertEquals("the character must not be null", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[0] = 'Y';
      String string1 = StringUtils.wrapIfMissing(" vs ", '\u0000');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs ", string1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      String string0 = StringUtils.replacePattern(" ", " ", "!WR(Z-=I");
      assertNotNull(string0);
      assertEquals("!WR(Z-=I", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("!WR(Z-=I");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("!WR(Z-=I");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "!WR(Z-=I", (char[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.stripToNull("!WR(Z-=I");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("!WR(Z-=I", string1);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "!WR(Z-=I", "");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string2 = StringUtils.repeat('Z', 113);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "!WR(Z-=I");
      assertEquals(8, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.rightPad("org.junitpioneer.jupiter.params.ShortRange", 113, "org.junitpioneer.jupiter.params.ShortRange");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.params.ShortRangeorg.junitpioneer.jupiter.para", string3);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!WR(Z-=I";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("!WR(Z-=I", string4);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("3KEoGdTO8,IW", 'd');
      assertNotNull(string0);
      assertEquals("d3KEoGdTO8,IWd", string0);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      String string0 = StringUtils.lowerCase("The Character must not be null");
      assertNotNull(string0);
      assertEquals("the character must not be null", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = 'Y';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "the character must not be null", charArray0);
      assertArrayEquals(new char[] {'o', 'Y'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      String string1 = StringUtils.stripToNull("the character must not be null");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("the character must not be null", string1);
      
      String string2 = " vs ";
      String string3 = StringUtils.wrapIfMissing(" vs ", 'Y');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Y vs Y", string3);
      
      int int0 = 0;
      Vector<String> vector0 = new Vector<String>(0, (-126));
      assertNotNull(vector0);
      assertFalse(vector0.contains("the character must not be null"));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      boolean boolean1 = vector0.add("The Character must not be null");
      assertTrue(vector0.contains("The Character must not be null"));
      assertFalse(vector0.contains("the character must not be null"));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[The Character must not be null]", vector0.toString());
      
      boolean boolean2 = vector0.add("Y vs Y");
      assertTrue(vector0.contains("The Character must not be null"));
      assertFalse(vector0.contains("the character must not be null"));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(2, vector0.capacity());
      assertEquals("[The Character must not be null, Y vs Y]", vector0.toString());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      
      char char0 = 'u';
      vector0.trimToSize();
      assertTrue(vector0.contains("The Character must not be null"));
      assertFalse(vector0.contains("the character must not be null"));
      assertEquals(2, vector0.capacity());
      assertEquals("[The Character must not be null, Y vs Y]", vector0.toString());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      
      boolean boolean3 = vector0.add(" vs ");
      assertTrue(vector0.contains("The Character must not be null"));
      assertFalse(vector0.contains("the character must not be null"));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(4, vector0.capacity());
      assertEquals(3, vector0.size());
      assertEquals("[The Character must not be null, Y vs Y,  vs ]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      boolean boolean4 = vector0.add("the character must not be null");
      assertTrue(vector0.contains("the character must not be null"));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      assertEquals("[The Character must not be null, Y vs Y,  vs , the character must not be null]", vector0.toString());
      assertEquals(4, vector0.capacity());
      assertEquals(4, vector0.size());
      assertFalse(vector0.isEmpty());
      
      boolean boolean5 = vector0.add("The Character must not be null");
      assertTrue(vector0.contains("the character must not be null"));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5);
      assertEquals("[The Character must not be null, Y vs Y,  vs , the character must not be null, The Character must not be null]", vector0.toString());
      assertEquals(5, vector0.size());
      assertEquals(8, vector0.capacity());
      assertFalse(vector0.isEmpty());
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      // Undeclared exception!
      try { 
        vector0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      String string0 = StringUtils.difference(")|D{.eqKl2mwQn", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      String string0 = StringUtils.difference("/$edg=(eCycz", "iG`H\";+Y9k][~i");
      assertNotNull(string0);
      assertEquals("iG`H\";+Y9k][~i", string0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      String string0 = StringUtils.chomp("\"", "\"");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("\"");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("\"", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("", "X_zp", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.join((int[]) null, '!', (-138), (-138));
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.split("N;ZZL", (String) null, (-138));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("\"|o9{=", "", (-138));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      boolean boolean1 = StringUtils.isWhitespace("y");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.wrap(" 28?{'\"7%", '!');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("! 28?{'\"7%!", string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "X_zp", 38);
      assertEquals(4, int0);
      
      boolean boolean2 = StringUtils.equalsAny("y", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      String string0 = StringUtils.replacePattern("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", "6BVforg.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("6BVforg.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      String string1 = StringUtils.uncapitalize("UotpP");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("uotpP", string1);
      
      String string2 = StringUtils.uncapitalize("zz .J9IISc&");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("zz .J9IISc&", string2);
      
      String string3 = StringUtils.removeAll("Search and Replace array lengths don't match: ", "uotpP");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      
      String string4 = StringUtils.center("\r", 22, "zz .J9IISc&");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("zz .J9IIS\rzz .J9IISc", string4);
      
      String string5 = StringUtils.stripToEmpty("Search and Replace array lengths don't match: ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match:", string5);
      
      String[] stringArray0 = StringUtils.split("zz .J9IIS\rzz .J9IISc");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match:");
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("[!Ty", "[!Ty");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("[!Ty", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      String string0 = StringUtils.strip("ArMK+<p6{|=;n`v}45", "ArMK+<p6{|=;n`v}45");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "ArMK+<p6{|=;n`v}45");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("f$wnJ>m");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("f$wnJ>m", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "f$wnJ>m");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrap("o=6@,k-", "#Gh$p3GbbZcPe!");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#Gh$p3GbbZcPe!o=6@,k-#Gh$p3GbbZcPe!", string2);
      
      String string3 = StringUtils.toRootLowerCase("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.startsWithAny("#Gh$p3GbbZcPe!o=6@,k-#Gh$p3GbbZcPe!", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replacePattern("YAh!SkU:W", "", "dj{t5caY");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("dj{t5caYYdj{t5caYAdj{t5caYhdj{t5caY!dj{t5caYSdj{t5caYkdj{t5caYUdj{t5caY:dj{t5caYWdj{t5caY", string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "f$wnJ>m", (CharSequence) "hfov.~}8F7");
      assertEquals(0, int0);
      
      String string5 = StringUtils.leftPad("in}LkJaS45MP/7", 0, 't');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("in}LkJaS45MP/7", string5);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)9;
      String string0 = StringUtils.join(byteArray0, '=');
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-122), (byte)102, (byte) (-96), (byte)26, (byte) (-48), (byte)40, (byte)9}, byteArray0);
      assertEquals("-122=102=-96=26=-48=40=9", string0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("-122=102=-96=26=-48=40=9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      String string0 = StringUtils.joinWith((String) null, objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeFirst("Strings must not be null", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      
      String string2 = StringUtils.strip("Strings must not be null", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Strings must not be null", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Strings must not be null", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.replaceFirst("cyH0]99i:#gea E9'&", "", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("cyH0]99i:#gea E9'&", string3);
      
      String string4 = StringUtils.joinWith("Strings must not be null", charSequenceArray0);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", "org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string5 = StringUtils.stripStart(",F<OdJ", "Locale must not be null");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(",F<OdJ", string5);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-2594);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)122;
      shortArray0[5] = (short) (-704);
      String string6 = StringUtils.join(shortArray0, 'E', 0, (-62));
      assertNotNull(string6);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short) (-2594), (short)0, (short)122, (short) (-704)}, shortArray0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("", (-145), "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.center("io", 4, 'x');
      assertNotNull(string0);
      assertEquals("xiox", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "xiox", (CharSequence) "io", 4);
      assertEquals(1, int0);
      
      String string1 = StringUtils.removeStart("io", "xiox");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("io", string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "xiox", (CharSequence) "xiox", 11);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "io";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "xiox", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 13, 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      try { 
        StringUtils.getBytes("1Nn", "1Nn");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("#_", "#_");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny("\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\r", stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.startsWithAny("O", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      String string0 = StringUtils.removeEnd("$:wZ8&0b:(jg_ct", "");
      assertNotNull(string0);
      assertEquals("$:wZ8&0b:(jg_ct", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "$:wZ8&0b:(jg_ct";
      charSequenceArray0[2] = (CharSequence) "$:wZ8&0b:(jg_ct";
      charSequenceArray0[3] = (CharSequence) "$:wZ8&0b:(jg_ct";
      charSequenceArray0[4] = (CharSequence) "$:wZ8&0b:(jg_ct";
      charSequenceArray0[5] = (CharSequence) "$:wZ8&0b:(jg_ct";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("$:wZ8&0b:(jg_ct", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, "_Ui<A#42>5Z/3yEqQ ");
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric("java.lang.Object@6c3ed1b3_Ui<A#42>5Z/3yEqQ java.lang.Object@269bac95");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("j_D8-Qo2pE23vCXc+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("0I0I0I0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      int int0 = StringUtils.lastIndexOfAny("org.junitpioneer.vintage.ExpectedExceptionExtension", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.left("", (-1302));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, 'L');
      assertNotNull(string2);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(0, longArray0.length);
      
      String string3 = StringUtils.lowerCase("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1891));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 82);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.strip("");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.center("", 5, "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("     ", string5);
      
      String string6 = StringUtils.unwrap("\n", '`');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("\n", string6);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(" ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.chop(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details):", string1);
      
      String string2 = StringUtils.chomp(" vs ", " vs ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase(". The following paths could not be deleted (see suppressed exceptions for details): ", "d%bRx3a3EoYP&<AV", " ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): ", string3);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2001);
      intArray0[1] = (int) 'f';
      intArray0[2] = (-2001);
      String string4 = StringUtils.replaceAll(" ", "d%bRx3a3EoYP&<AV", " ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" ", string4);
      
      String string5 = StringUtils.trimToNull(" ");
      assertNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", "Search and Replace array lengths don't match: ");
      assertEquals(1, int0);
      
      String string6 = StringUtils.replacePattern((String) null, "I^ZyV<\"EAKcw6e)", "I^ZyV<\"EAKcw6e)");
      assertNull(string6);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) "I^ZyV<\"EAKcw6e)", (-2001));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ". The following paths could not be deleted (see suppressed exceptions for details): ";
      stringArray0[1] = "";
      stringArray0[2] = " vs ";
      stringArray0[3] = "d%bRx3a3EoYP&<AV";
      stringArray0[4] = null;
      String string7 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): ", string7);
      assertEquals(5, stringArray0.length);
      
      String string8 = StringUtils.join(intArray0, '+');
      assertNotNull(string8);
      assertArrayEquals(new int[] {(-2001), 102, (-2001)}, intArray0);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertEquals("-2001+102+-2001", string8);
      assertEquals(3, intArray0.length);
      
      String string9 = StringUtils.left("-2001+102+-2001", (-1));
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("                                                                                                                                                           Kj[%g5y_cHP                                                                                                                                                           ", "e=");
      assertNotNull(string0);
      assertEquals("                                                                                                                                                           Kj[%g5y_cHP                                                                                                                                                           ", string0);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "H8PX", (CharSequence) "H8PX");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      String string0 = "\\2<{Qq,o/C.@9B7I]vw";
      String string1 = StringUtils.replaceIgnoreCase("Minimum abbreviation width with offset is %d", "Threshold must not be negative", "\u0002<{Qq,o/C.@9B7I]vw", (-2008));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      
      String string2 = StringUtils.strip("Minimum abbreviation width with offset is %d");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("Threshold must not be negative"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "\u0002<{Qq,o/C.@9B7I]vw";
      stringArray0[2] = "Minimum abbreviation width with offset is %d";
      stringArray0[3] = "Minimum abbreviation width with offset is %d";
      String[] stringArray1 = stack0.toArray(stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stack0.contains("Threshold must not be negative"));
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      boolean boolean0 = stack0.add((Object) locale_FilteringMode0);
      assertFalse(stack0.contains("Threshold must not be negative"));
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[AUTOSELECT_FILTERING]", stack0.toString());
      assertFalse(stack0.empty());
      
      // Undeclared exception!
      try { 
        stack0.subList(949, 949);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 949
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "7Fdhn{\"P+hW\"`\n", (CharSequence) "7Fdhn{\"P+hW\"`\n", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Vector<String> vector0 = new Vector<String>(0, 1610);
      assertNotNull(vector0);
      assertFalse(vector0.contains(""));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      String string1 = StringUtils.normalizeSpace("Failed to delete temp directory ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Failed to delete temp directory", string1);
      
      String string2 = StringUtils.truncate("FgtT8N", (int) (byte)4);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("FgtT", string2);
      
      String string3 = StringUtils.CR;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\r", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("\r", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.deleteWhitespace("Failed to create custom temp directory");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Failedtocreatecustomtempdirectory", string4);
      
      String string5 = StringUtils.center((String) null, 54);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.unwrap("!t{$%80@,[CU", "^;]>M<h1,");
      assertNotNull(string0);
      assertEquals("!t{$%80@,[CU", string0);
      
      String string1 = StringUtils.left("%D=}>YZ#l.ob", (-794));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("vJE#aE$vgoFI6Y%%[o", "vJE#aE$vgoFI6Y%%[o");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '-');
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("", string0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      String string0 = StringUtils.left("s-O_S#]-", 256);
      assertNotNull(string0);
      assertEquals("s-O_S#]-", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("s-O_S#]-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      String string0 = "', has a length less than 2\\u";
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string0, 552);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string0 = StringUtils.leftPad((String) null, 783, (String) null);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, 0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Expected exception %s was not thrown.^", '9');
      assertNotNull(string0);
      assertEquals("Expected exception %s was not thrown.^", string0);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      String string0 = StringUtils.removeEnd("y", "gO!l");
      assertNotNull(string0);
      assertEquals("y", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("gO!l", "gO!l");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.chomp("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", string1);
      
      String string2 = StringUtils.reverseDelimited("*ZS3JV=~<^&.5SxR", '*');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ZS3JV=~<^&.5SxR", string2);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("gO!l");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("A");
      assertNotNull(string0);
      assertEquals("A", string0);
      
      String string1 = StringUtils.truncate("A", 13);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("A", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "A", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.capitalize("A");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("A", string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '*';
      int int1 = StringUtils.lastIndexOfAny("~WSQ+", (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      String string0 = StringUtils.center("org.junitpioneer.vintage.ExpectedExceptionExtension", (-1891));
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      int int0 = StringUtils.lastIndexOfAny("org.junitpioneer.vintage.ExpectedExceptionExtension", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.left("", (-1302));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, 'L');
      assertNotNull(string2);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(0, longArray0.length);
      
      String string3 = StringUtils.lowerCase("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1891));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 82);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.strip("");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.center("", 5, "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("     ", string5);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("97M2+$i8A_Idg", "97M2+$i8A_Idg");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("97M2+$i8A_Idg", stringArray0);
      assertEquals(13, int0);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      String string0 = "\\u";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty(string0, supplier0);
      assertNotNull(string1);
      assertEquals("\\u", string1);
      
      char char0 = 'a';
      String[] stringArray0 = StringUtils.split(string1, 'a');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny(string1, stringArray0);
      assertEquals(0, int0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.normalizeSpace(string1);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("\\u", string2);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string3 = "Z*m`\";2\\?'_:VJN{";
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=\\u
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = StringUtils.removeStart("3dt", " ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("3dt", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "3dt", (CharSequence) "3dt", 20);
      assertEquals(0, int0);
      
      String string4 = StringUtils.wrapIfMissing("", 'm');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertNotNull(string0);
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.strip("y\r");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("y", string1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 26;
      String string2 = StringUtils.join(intArray0, 'T', (-1582), (-1582));
      assertNotNull(string2);
      assertArrayEquals(new int[] {26}, intArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(1, intArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "13Abl]E", (CharSequence) "13Abl]E", 26);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.trim("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("\nl]pp{");
      assertNotNull(string0);
      assertEquals("l]pp{", string0);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.Charsets");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.Charsets", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.Charsets", (-337));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.wrap("\n", "\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n\n\n", string1);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("J(us3D`Fb", (String) null, "J(us3D`Fb");
      assertNotNull(string0);
      assertEquals("J(us3D`Fb", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("J(us3D`Fb");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("org.apache.commons.lang3.ArrayUtils?Re@-%] r5D%r{jm");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.arrayutils?re@-%] r5d%r{jm", string0);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      String string0 = StringUtils.stripToNull("}H=$&Y0b@HpB");
      assertNotNull(string0);
      assertEquals("}H=$&Y0b@HpB", string0);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      String string0 = StringUtils.remove("org.junitpionee.juiter.SystemPropertyExtension", "org.junitpionee.juiter.SystemPropertyExtension");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate("", "", 550);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = StringUtils.isEmpty("\n");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rotate(" ", 35);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" ", string3);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      String string0 = StringUtils.stripEnd("The Character must not be null", "");
      assertNotNull(string0);
      assertEquals("The Character must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      String string0 = StringUtils.stripEnd("1_~8cq<NA0aN", "1_~8cq<NA0aN");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, "_Ui<A#42>5Z/3yEqQ ");
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric("java.lang.Object@75b4808a_Ui<A#42>5Z/3yEqQ java.lang.Object@c5163c5");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("_Ui<A#42>5Z/3yEqQ ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      String string2 = "Locale must not be null";
      String string3 = StringUtils.replacePattern("", "", "Locale must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("Locale must not be null", string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripEnd("Locale must not be null", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("Locale must not be null", string4);
      
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-515));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      String string0 = StringUtils.repeat('E', (-524));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "offset cannzt be)negative", (CharSequence) "offset cannzt be)negative", (-2975));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      String string0 = StringUtils.leftPad("5GoEH", 13, "5GoEH");
      assertNotNull(string0);
      assertEquals("5GoEH5Go5GoEH", string0);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      String string0 = StringUtils.substringBefore("JqQ#c", "JqQ#c");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("JqQ#c", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.stripToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", "I^ZywjV<\"EKcw6e)", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2001);
      String string3 = StringUtils.join(intArray0, 'f');
      assertNotNull(string3);
      assertArrayEquals(new int[] {(-2001)}, intArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("-2001", string3);
      assertEquals(1, intArray0.length);
      
      String string4 = StringUtils.trimToNull("");
      assertNull(string4);
      
      String string5 = StringUtils.replaceChars("", "Locale must not be null", "V1zTmYA");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      
      String string6 = StringUtils.leftPad("", 2);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("  ", string6);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "I^ZywjV<\"EKcw6e)", (CharSequence) "", 8);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsWhitespace("I^ZywjV<\"EKcw6e)");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence1 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence1);
      
      charSequenceArray0[0] = null;
      String string0 = StringUtils.reverseDelimited("F>\"c-dg)OWY\"y!", 'n');
      assertNotNull(string0);
      assertEquals("F>\"c-dg)OWY\"y!", string0);
      
      charSequenceArray0[1] = (CharSequence) "F>\"c-dg)OWY\"y!";
      CharSequence charSequence2 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertNotNull(charSequence2);
      assertTrue(charSequence2.equals((Object)string0));
      assertEquals("F>\"c-dg)OWY\"y!", charSequence2);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("F>\"c-dg)OWY\"y!");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      char char0 = '*';
      int int0 = 65536;
      // Undeclared exception!
      StringUtils.center("7K5|2I", 65536, '*');
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 'G');
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "d4tM7;$d4tM7;$", "{9Pa`");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replacePattern("", "", "X_zp");
      assertNotNull(string1);
      assertEquals("X_zp", string1);
      
      String[] stringArray0 = StringUtils.split("X_zp");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.capitalize("m@Dq_S]d(of'GtD)9q");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("M@Dq_S]d(of'GtD)9q", string2);
      
      String string3 = StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      assertNull(string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "X_zp", (CharSequence) null, 321);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.24754901960784315;
      doubleArray0[1] = 158.2786659;
      doubleArray0[2] = (-1552.950511);
      doubleArray0[3] = 1.5;
      char char0 = 'G';
      StringUtils.join(doubleArray0, 'G');
      // Undeclared exception!
      StringUtils.rightPad("0.24754901960784315G158.2786659G-1552.950511G1.5", 65536);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      StringUtils.toCodePoints("");
      String string0 = StringUtils.join((double[]) null, 'u', 1826, 1826);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "/p4jO6$l", (CharSequence) "/p4jO6$l", 9988);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("\n", "\n");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "gO\n");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "K%Fa^qOWOk?4z:1");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '=');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      StringUtils.chop("`");
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("`", "", (int) (short) (-9));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("org.junitpioneer.jupiter.params.FloatRange");
      assertEquals("org.junitpioneer.jupiter.params.FloatRange", string0);
      
      String string1 = StringUtils.getIfEmpty("org.junitpioneer.jupiter.params.FloatRange", (Supplier<String>) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      String string0 = null;
      StringUtils.truncate((String) null, 100, 100);
      char char0 = 'c';
      StringUtils.join((double[]) null, 'c', 100, 1956);
      StringUtils.split((String) null, "4-4<tw");
      StringUtils.stripStart(" vs ", " vs ");
      StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 1956);
      StringUtils.reverseDelimited((String) null, 'c');
      StringUtils.replaceOnceIgnoreCase((String) null, (String) null, "maxWith cannot be negative");
      StringUtils.center("L>yG", 100, "Illegal range. The step cannot be zero.");
      StringUtils.join((Object[]) null, "mD7FN\"&{l[|7-y1");
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfEmpty("junit", supplier0);
      int int0 = 902;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "junit", (CharSequence) null, 902);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Locale must not be null", (CharSequence) "Locale must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      String string0 = StringUtils.substringBefore(" vs ", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      String string0 = "\\u";
      arrayDeque0.add(string0);
      Iterator<String> iterator0 = arrayDeque0.iterator();
      String string1 = StringUtils.join(iterator0, string0);
      assertEquals("\\u", string1);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      StringUtils.isWhitespace("");
      String string1 = StringUtils.substringBetween("", "");
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      String string2 = StringUtils.removeStart("3dt", " ");
      assertEquals("3dt", string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "3dt", (CharSequence) "3dt", 20);
      assertEquals(0, int0);
      
      String string3 = StringUtils.wrapIfMissing("", 'm');
      assertEquals("", string3);
      
      String string4 = StringUtils.center("Search and Replace array lengths don't match: ", 0, 'm');
      assertEquals("Search and Replace array lengths don't match: ", string4);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Search and Replace array lengths don't match: ");
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.removeStart("", "eik1");
      assertTrue(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", charSequenceArray0[3], (-1272));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringBefore("", "Zq<u");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      String string0 = StringUtils.join(iterator0, "1x!\"");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("vJE#aE$vgoFI6Y%%[o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      String string0 = StringUtils.substringBefore("NMN#5DqV", (String) null);
      assertEquals("NMN#5DqV", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      String string0 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      StringUtils.upperCase((String) null);
      StringUtils.join((long[]) null, 'N');
      int int0 = StringUtils.compare("L", "/", false);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      StringUtils.trimToEmpty("The Character must not be null");
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      StringUtils.trimToNull("The Character must not be null");
      StringUtils.indexOfAny((CharSequence) "The Character must not be null", "PJDTd^T5PJDTd^T5");
      StringUtils.replaceFirst("PJDTd^T5PJDTd^T5", "The Character must not be null", "");
      StringUtils.indexOfAny((CharSequence) "PJDTd^T5PJDTd^T5", (CharSequence[]) null);
      StringUtils.capitalize("6T:a");
      StringUtils.isNumeric("6T:a");
      StringUtils.leftPad("6T:a", (-29), '@');
      // Undeclared exception!
      try { 
        StringUtils.joinWith("Strings must not be null", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, ".", ".");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      String string0 = StringUtils.repeat("7", 2695);
      assertNotNull(string0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(2695);
      String string1 = StringUtils.join((Iterable<?>) arrayDeque0, "org.junitpioneer.jupiter.params.IntRange");
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "7", (CharSequence) "", 2695);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, "FV5^~rC;c");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      String string0 = StringUtils.stripStart("jZ3E[':GozIlkV", "[E`g<0Bv");
      assertEquals("jZ3E[':GozIlkV", string0);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("4$&g! |%(", "4$&g! |%(");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      String string0 = StringUtils.substringBefore("8", "8");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      String string0 = StringUtils.stripStart("offset cannot be negative", "offset cannot be negative");
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "offset cannot be negative");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("Cannot clear and set the following system properties at the same time: ", "");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("qQ#c", "5Hgt!9]SPN4].yaT");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      String string0 = "', has a length less than 2\\u";
      String string1 = StringUtils.removeEnd(string0, "");
      assertEquals("', has a length less than 2\\u", string1);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("5Hgt!9]SPN4].yaT", "...");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      String string0 = StringUtils.replacePattern("yCcF", "yCcF", "yCcF");
      assertEquals("yCcF", string0);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[1] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[2] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[3] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[4] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[5] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[6] = (CharSequence) "F-q{Es7'r0v";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      
      String string0 = StringUtils.LF;
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[2], (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      boolean boolean1 = StringUtils.isEmpty("1v");
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.defaultIfBlank("N(4_0TLL", "1v");
      assertEquals("N(4_0TLL", string0);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      String[] stringArray0 = new String[1];
      StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      StringUtils.substringAfterLast("9h", "9h");
      StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      StringUtils.toCodePoints("");
      String string0 = StringUtils.EMPTY;
      StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      StringUtils.toCodePoints("9h");
      String string1 = StringUtils.mid("", 8, 18);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring("Failed to get parent directory from provider", (-1411));
      assertEquals("Failed to get parent directory from provider", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      String string0 = StringUtils.stripStart("9i[--LW390qxOqPgX", "9i[--LW390qxOqPgX");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      String string0 = StringUtils.mid("!:tkIyq,p~k<~lV", (-37), (-37));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      String string0 = StringUtils.substring("", (-993), 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      StringUtils.mid("", (-3643), (-3643));
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "@FDjAR/`cLC'JV2j";
      StringUtils.isNoneEmpty(charSequenceArray0);
      String string0 = StringUtils.LF;
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      StringUtils.abbreviate("3+#c75{=:^", "\n", (int) 'h');
      StringUtils.join((List<?>) null, 'h', 108, (-21));
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "hUhY}.800=dSqP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[1] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[2] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[3] = (CharSequence) "F-q{Es7'r0v";
      charSequenceArray0[4] = (CharSequence) "F-q{Es7'r0v";
      String[] stringArray0 = new String[0];
      StringUtils.stripAll(stringArray0, "13Abl]EfGkq0^b");
      StringUtils.containsIgnoreCase((CharSequence) null, charSequenceArray0[3]);
      String string0 = StringUtils.rotate("", 48);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[0], charSequenceArray0[2]);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad("8L`", 54, 'B');
      assertEquals("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB8L`", string1);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      String string0 = StringUtils.reverse("org");
      assertNotNull(string0);
      assertEquals("gro", string0);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      String string0 = StringUtils.join((List<?>) vector0, 'R', (int) 'R', (int) 'R');
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      StringUtils.rotate("Extension context \"", 32);
      StringUtils.isNotBlank("Extension context \"");
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      linkedList0.add(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      linkedList0.offerFirst(locale_FilteringMode1);
      StringUtils.join((List<?>) linkedList0, '[', 32, 32);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '[';
      intArray0[1] = (int) '[';
      intArray0[2] = 32;
      intArray0[3] = 32;
      intArray0[4] = (int) '[';
      intArray0[5] = 32;
      intArray0[6] = (int) '[';
      intArray0[7] = (int) '[';
      intArray0[8] = 32;
      StringUtils.join(intArray0, '[', 91, (-3626));
      StringUtils.reverse("ion context \"Extens");
      String string0 = "zxBH{&.8@\"Q";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      List<Locale.LanguageRange> list0 = null;
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      // Undeclared exception!
      try { 
        Locale.lookup((List<Locale.LanguageRange>) null, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      String string0 = StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      StringUtils.mid("", (-3649), (-3649));
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "@FDjAR/`cLC'JV2j";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.LF;
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\n", charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, 'n');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      
      String string1 = StringUtils.strip("\r");
      assertNotNull(string1);
      assertEquals("", string1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 102;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1200);
      String string2 = StringUtils.join(intArray0, 'k', 0, 0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'n');
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      String[] stringArray0 = new String[6];
      int int0 = StringUtils.indexOfAny((CharSequence) "org.junitoneer.vintage.imeoutExtension", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      int int0 = StringUtils.compare("'268`", "T%jF9");
      assertEquals((-45), int0);
      
      String string0 = StringUtils.left(",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3@FDjAR/`cLC'JV2j", 8);
      StringUtils.contains((CharSequence) "T%jF9", (CharSequence) ",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3@FDjAR/`cLC'JV2j");
      StringUtils.join((float[]) null, '\"');
      String string1 = StringUtils.wrapIfMissing(",L'tUCr<", '\"');
      assertEquals("\",L'tUCr<\"", string1);
      
      String string2 = StringUtils.rightPad(",L'tUCr<", (-690));
      assertTrue(string2.equals((Object)string0));
      
      StringUtils.equalsIgnoreCase(",L'tUCr<", (CharSequence) null);
      String string3 = StringUtils.removeIgnoreCase(",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3", "H#6M6\"t<pz");
      assertEquals(",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3", string3);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      String string0 = StringUtils.removeStart("NCJ;v|Qqt5", "The String must not be empty");
      assertEquals("NCJ;v|Qqt5", string0);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n");
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      String string0 = StringUtils.difference(" ", "");
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.reverse("*p5$4");
      assertNotNull(string1);
      assertEquals("4$5p*", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase((String) null, "");
      assertNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = "*p5$4";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertEquals(2, stringArray1.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "4$5p*");
      String string3 = StringUtils.rotate("+M}Jp_]-[", 0);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("*p5$4");
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.removeEndIgnoreCase("*p5$4", "4$5p*");
      assertEquals("*p5$4", string4);
      
      Stack<Object> stack0 = new Stack<Object>();
      ListIterator<Object> listIterator0 = stack0.listIterator();
      String string5 = StringUtils.join((Iterator<?>) listIterator0, 'x');
      assertTrue(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("{InCombiningDiacriticalMaks}+", "7");
      assertEquals("{InCombiningDiacriticalMaks}+", string0);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      String string0 = StringUtils.chop("$}4\"o$BI'L}l;\"d$_LH");
      assertNotNull(string0);
      assertEquals("$}4\"o$BI'L}l;\"d$_L", string0);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "', has a lenth less than 2', has a lenth less than 2";
      charSequenceArray0[1] = (CharSequence) "', has a lenth less than 2', has a lenth less than 2";
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      String string0 = StringUtils.replaceChars("-cFdh6fL5}E", "", "");
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceEach("-cFdh6fL5}E", (String[]) null, (String[]) null);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart("-cFdh6fL5}E", "-cFdh6fL5}E");
      String string3 = StringUtils.truncate("lpid$^5hwnD|KsX?", 0, 0);
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.strip("", "");
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      StringUtils.lowerCase("The Character must not be null");
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      StringUtils.trimToNull("the character must not be null");
      StringUtils.indexOfAny((CharSequence) "the character must not be null", ":n7i*cB");
      StringUtils.replacePattern("-E6K9", "org.junitpioneer.jupiter.DefaultTimeZoneExtension", "QDYVp=#L(wG]S+~");
      StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      StringUtils.isNumeric("the character must not be null");
      StringUtils.leftPad("the character must not be null", (-1), '@');
      // Undeclared exception!
      try { 
        StringUtils.joinWith("g@/^94>ebUHw6@", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      StringUtils.replaceChars((String) null, ':', ':');
      StringUtils.stripStart("``````````````````````````", (String) null);
      int int0 = StringUtils.compareIgnoreCase("DON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.", "``````````````````````````", false);
      assertEquals(4, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("``````````````````````````");
      assertEquals(1, stringArray0.length);
      
      StringUtils.stripAccents("E]@m^\"Gtm8Zm");
      StringUtils.containsAny((CharSequence) null, (CharSequence) "DON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.");
      String string0 = StringUtils.stripAccents("|Dy");
      StringUtils.isAllUpperCase((CharSequence) null);
      String[] stringArray1 = StringUtils.splitByWholeSeparator("%.C+*V6qN5@R", "F6h!|", 4);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("``````````````````````````", ':');
      assertEquals(1, stringArray2.length);
      
      String string1 = StringUtils.truncate("|Dy", 27);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.getDigits("xP~HuF}|B*3x:I");
      assertEquals("3", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "``````````````````````````";
      charSequenceArray0[1] = (CharSequence) "%.C+*V6qN5@R";
      charSequenceArray0[2] = (CharSequence) "E]@m^\"Gtm8Zm";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "E]@m^\"Gtm8Zm";
      String string3 = StringUtils.prependIfMissing("Don't clear/set the same property more than once.", (CharSequence) null, charSequenceArray0);
      assertEquals("Don't clear/set the same property more than once.", string3);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      String string0 = StringUtils.join((List<?>) stack0, 'Y', Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertNotNull(string0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque1);
      StringUtils.join((short[]) null, 'q');
      String string1 = StringUtils.rightPad("u_yW+e+)R5jh//C>b", (int) (short)1, "Search and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertEquals("u_yW+e+)R5jh//C>b", string1);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      String string1 = StringUtils.toRootLowerCase("13Abl]E");
      assertEquals("13abl]e", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "13Abl]E";
      charSequenceArray0[1] = (CharSequence) "13Abl]E";
      charSequenceArray0[2] = (CharSequence) "13Abl]E";
      charSequenceArray0[3] = (CharSequence) "13Abl]E";
      charSequenceArray0[4] = (CharSequence) "13abl]e";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      
      StringUtils.join((int[]) null, 'T', (-1), (-1));
      String string2 = StringUtils.prependIfMissing("offset cannot be negative", "y\r", charSequenceArray0);
      assertEquals("y\roffset cannot be negative", string2);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) list0, locale_FilteringMode0);
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) vector1, (Collection<String>) list0);
      String string3 = StringUtils.join((List<?>) vector0, 'T', (-1), (-1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      String string0 = StringUtils.chop("7Fdhn{\"P+hW\"`\n");
      assertNotNull(string0);
      assertEquals("7Fdhn{\"P+hW\"`", string0);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      String string0 = StringUtils.substring("F-q{Es7'r0v", (-2252));
      assertEquals("F-q{Es7'r0v", string0);
      
      String string1 = StringUtils.leftPad("VP_D Z)Pqz3[", (-2252));
      assertNotNull(string1);
      assertEquals("VP_D Z)Pqz3[", string1);
      
      int[] intArray0 = new int[4];
      intArray0[1] = (-2252);
      intArray0[1] = (-2252);
      intArray0[2] = (-2252);
      intArray0[3] = (-2252);
      StringUtils.join(intArray0, '!', (-2252), (-2252));
      String[] stringArray0 = StringUtils.split("y", "F-q{Es7'r0v", 400);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("F-q{Es7'r0v", "\"|o9{=", (-2252));
      assertEquals(2, stringArray1.length);
      
      boolean boolean0 = StringUtils.isWhitespace("F-q{Es7'r0v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      StringUtils.trimToEmpty("");
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1115);
      StringUtils.toRootLowerCase("");
      String string1 = StringUtils.replace("", "", "");
      boolean boolean1 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.deleteWhitespace("");
      assertEquals("", string2);
      
      String string3 = StringUtils.replacePattern("", "", "");
      assertTrue(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      StringUtils.toCodePoints("");
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("", (CharSequence[]) null);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertEquals("13Abl]E", string0);
      
      StringUtils.endsWith("13Abl]E", "13Abl]E");
      StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      String string1 = StringUtils.removeAll("13Abl]E", "13Abl]E");
      assertEquals("", string1);
      
      String string2 = StringUtils.stripToNull("");
      assertNull(string2);
      
      StringUtils.wrap((String) null, "28,NtLJz/)w [?=B;");
      String string3 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", (String) null, "The character ", 55);
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      
      Locale locale0 = new Locale("lriDw", "The character ");
      locale0.clone();
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "28,NtLJz/)w [?=B;", charSequenceArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      
      String string4 = StringUtils.stripEnd("=2J0$@BmQ'l*%'%v,X^ FN%<", "");
      assertEquals("=2J0$@BmQ'l*%'%v,X^ FN%<", string4);
      
      String string5 = StringUtils.trimToNull("Strings must not be null");
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("=2J0$@BmQ'l*%'%v,X^ FN%<", "p{InCombiningDiacriticalMarks}+", 1941);
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertEquals(1, stringArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-1);
      String string6 = StringUtils.join(byteArray0, '5');
      assertEquals("-15-15-335-1", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      Object object0 = new Object();
      String string0 = StringUtils.rotate(" ", Integer.MIN_VALUE);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.split(" ");
      int int0 = StringUtils.compare(" ", "", false);
      assertEquals(1, int0);
      
      String string1 = StringUtils.LF;
      boolean boolean0 = StringUtils.isMixedCase(" ");
      boolean boolean1 = StringUtils.endsWithAny(" ", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      StringUtils.firstNonBlank(charSequenceArray0);
      StringUtils.isNotEmpty((CharSequence) null);
      StringUtils.replaceEach(" ", (String[]) null, (String[]) null);
      StringUtils.abbreviate("", (String) null, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2769;
      StringUtils.join(intArray0, 'g', (-5), (-5));
      StringUtils.leftPad(" ", 1320, "tYtG{XQ_og7 4V");
      StringUtils.contains((CharSequence) "nnC", 2769);
      StringUtils.substringBefore("d5P1W^20", "N;ZZL");
      StringUtils.removeStart("Search and Replace array lengths don't match: ", (String) null);
      int int0 = StringUtils.lastIndexOf((CharSequence) "b4", 2769);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      StringUtils.join((short[]) null, '.');
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("`", "Locale must not be null");
      assertEquals("`", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "`", (CharSequence) "Locale must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      String string0 = StringUtils.removeStart("/#4TOz$r", "/#4TOz$r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      StringUtils.substringBefore("", "");
      StringUtils.normalizeSpace("Failed jo delete temp directory ");
      StringUtils.chop("7Fdhn{\"P+hW\"`\n");
      String[] stringArray0 = StringUtils.substringsBetween("The Array must not be null", "", "Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      
      String string0 = StringUtils.joinWith((String) null, charSequenceArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "");
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("f$wnJ>m");
      assertEquals("f$wnJ>m", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "f$wnJ>m");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrap("o=6@,k-", "#Gh$p3GbbZcPe!");
      assertEquals("#Gh$p3GbbZcPe!o=6@,k-#Gh$p3GbbZcPe!", string2);
      
      String string3 = StringUtils.toRootLowerCase("");
      assertNotNull(string3);
      
      StringUtils.startsWithAny("#Gh$p3GbbZcPe!o=6@,k-#Gh$p3GbbZcPe!", (CharSequence[]) null);
      String string4 = StringUtils.replacePattern("YAh!SkU:W", "", "dj{t5caY");
      assertEquals("dj{t5caYYdj{t5caYAdj{t5caYhdj{t5caY!dj{t5caYSdj{t5caYkdj{t5caYUdj{t5caY:dj{t5caYWdj{t5caY", string4);
      
      StringUtils.removeEndIgnoreCase("o=6@,k-", "");
      Stack<Object> stack0 = new Stack<Object>();
      Stack<Object> stack1 = new Stack<Object>();
      ListIterator<Object> listIterator0 = stack1.listIterator();
      String string5 = StringUtils.join((Iterator<?>) listIterator0, 'C');
      assertTrue(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      String string0 = StringUtils.repeat('-', (-2937));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Search and Replace array lengths don't match: ", '/', '/');
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("\u0000\u0000", "\u0000\u0000");
      StringUtils.toCodePoints("");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\u0000\u0000", (CharSequence) "\u0000\u0000", 6);
      assertEquals(0, int0);
      
      StringUtils.indexOf((CharSequence) "", 0);
      String string2 = StringUtils.substringBetween("u", "");
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      String string0 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      String string0 = StringUtils.defaultString("Object varargs must not be nullStrings must not be null");
      assertEquals("Object varargs must not be nullStrings must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(":/3~>+Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      String[] stringArray0 = new String[3];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("lgj<D@^ROE.+", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      String string0 = StringUtils.strip("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("F-q{Es7'r0v", "F-q{Es7'r0v");
      assertEquals(1.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "F-q{Es7'r0v";
      StringUtils.isNoneBlank(charSequenceArray0);
      String string0 = StringUtils.wrap("gO!l8akL}HiUB-u8pv0I", "'Ic1");
      assertEquals("'Ic1gO!l8akL}HiUB-u8pv0I'Ic1", string0);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      StringUtils.defaultString("");
      StringUtils.isWhitespace("");
      short[] shortArray0 = new short[0];
      StringUtils.join(shortArray0, 'I');
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      
      StringUtils.isNoneBlank(charSequenceArray0);
      String string1 = StringUtils.stripEnd("", "Q'l*%'%v,X^ FN%<");
      StringUtils.replaceChars("", 'h', 'h');
      StringUtils.stripEnd("", (String) null);
      StringUtils.indexOf(charSequenceArray0[3], 78);
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[1], charSequenceArray0);
      StringUtils.strip("");
      StringUtils.repeat('\'', 0);
      String string2 = StringUtils.chop("Q'l*%'%v,X^ FN%<");
      assertNotNull(string2);
      assertEquals("Q'l*%'%v,X^ FN%", string2);
      
      boolean boolean1 = StringUtils.isMixedCase(charSequenceArray0[1]);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.joinWith("", charSequenceArray0);
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.removeStart("Q'l*%'%v,X^ FN%<", "=2J0$@Bm");
      assertEquals("Q'l*%'%v,X^ FN%<", string4);
      
      String string5 = StringUtils.chomp("", (String) null);
      assertEquals("", string5);
      
      String string6 = StringUtils.removeEndIgnoreCase("KdP", "o=#Y}$Rgz");
      assertEquals("KdP", string6);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" w]jM2l(yhcH", "~R}XJyL2BIaB[iAb");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      StringUtils.wrapIfMissing((String) null, "2");
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = '%';
      charArray0[2] = 't';
      String string0 = StringUtils.join(charArray0, '%', 3, 3);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(" ", "");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("<F?k$#_", "<F?k$#_");
      assertEquals("<F?k$#_", string0);
      
      String string1 = StringUtils.wrapIfMissing("<F?k$#_A", "<F?k$#_");
      assertEquals("<F?k$#_A<F?k$#_", string1);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      String string0 = StringUtils.replaceAll((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      String string0 = StringUtils.substringBetween("U([HuIh=TVTd/@oOx", "U([HuIh=TVTd/@oOx");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("9%_#");
      assertArrayEquals(new int[] {57, 37, 95, 35, 127}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      String string0 = StringUtils.stripAccents("'C");
      assertEquals("'C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.params.LongRange", "org.junitpioneer.jupiter.params.LongRange");
      assertEquals("org.junitpioneer.jupiter.params.LongRange", string0);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      String string0 = StringUtils.lowerCase("blank_blank_blank_2014", locale0);
      assertNotNull(string0);
      assertEquals("blank_blank_blank_2014", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("blank_blank_blank_2014");
      assertEquals(22, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "mo6]i2[ke,xu;LH3DA e9v6g", "mo6]i2[ke,xu;LH3DA e9v6g");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      String string0 = StringUtils.replaceChars("\n", "L{g{BWXwKf", "\n");
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "8yGSucn(1:x.", "p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      String string0 = StringUtils.center("", 99, "");
      assertEquals("                                                                                                   ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, (String) null);
      assertNull(string0);
      
      StringUtils.isNumeric((CharSequence) null);
      int int0 = StringUtils.indexOf((CharSequence) null, 11);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "");
      String string1 = StringUtils.substringBefore("~lL8s:*'Y>SQT>G", (String) null);
      assertEquals("~lL8s:*'Y>SQT>G", string1);
      
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      arrayDeque0.add(locale_FilteringMode0);
      arrayDeque0.add(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      arrayDeque0.add(locale_FilteringMode1);
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>(arrayDeque0);
      hashSet0.add(locale_FilteringMode0);
      String string2 = StringUtils.join((Iterable<?>) hashSet0, (String) null);
      assertNotNull(string2);
      assertEquals("AUTOSELECT_FILTERING", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("~lL8s:*'Y>SQT>G");
      assertFalse(boolean0);
      
      int int1 = StringUtils.compare("i$SdBXV:#N2>1^", "");
      assertEquals(14, int1);
      
      StringUtils.join(byteArray0, 'k', (-2971), Integer.MAX_VALUE);
      String string3 = StringUtils.stripStart("Wbe^JEoJ(", "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("Wbe^JEoJ(", string3);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "6c_;#(n(P:~v'9Z#", "Minimum abbreviation width is %d");
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Minimum abbreviation width is %d");
      StringUtils.lowerCase((String) null);
      Locale locale0 = Locale.KOREA;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      HashSet<String> hashSet0 = new HashSet<String>();
      Locale.lookupTag(vector0, hashSet0);
      locale0.clone();
      locale0.hasExtensions();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ". The following paths could not be deleted (see suppressed exceptions for details): ";
      stringArray0[1] = null;
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      String string0 = StringUtils.capitalize("org.apache.commons.lang3.StringUtils");
      assertEquals("Org.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      String string0 = StringUtils.stripStart("@FDjAR/`cLC'JV2j", "@FDjAR/`cLC'JV2j");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.mid("", (-3649), (-3649));
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "@FDjAR/`cLC'JV2j";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3649);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-3649);
      String string2 = StringUtils.join(doubleArray0, 'q');
      assertEquals("-3649.0q0.0q-3649.0", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringBefore("", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.trimToNull("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center((String) null, (-3649), "");
      assertNull(string5);
      
      StringUtils.removeEnd("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      String string6 = StringUtils.stripStart("", "r,gYJocQht2k?qf");
      assertTrue(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      StringUtils.toCodePoints((CharSequence) null);
      String string0 = StringUtils.normalizeSpace("^7");
      assertEquals("^7", string0);
      
      String string1 = StringUtils.mid("a^dES/|@j)FMnl", 5, 5);
      assertNotNull(string1);
      assertEquals("/|@j)", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string2 = StringUtils.replaceChars("^7", "^7", "");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "/|@j)";
      charSequenceArray0[3] = (CharSequence) "/|@j)";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "^7";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      
      String string3 = StringUtils.LF;
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\n", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      String string0 = StringUtils.replaceChars("4|Pe]*|5hE=", (String) null, "8yGSucn(1:x.");
      assertNotNull(string0);
      assertEquals("4|Pe]*|5hE=", string0);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      String string0 = StringUtils.replaceEach("Expected exception %s was not thrown.", (String[]) null, (String[]) null);
      assertEquals("Expected exception %s was not thrown.", string0);
      
      boolean boolean0 = StringUtils.startsWithAny("Expected exception %s was not thrown.", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "f", "f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      String string0 = StringUtils.capitalize("Object varargs must not be null");
      assertEquals("Object varargs must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      String string0 = StringUtils.center("', has a length less than 2", 320, "', has a length less than 2");
      assertEquals("', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a le', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a len", string0);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      String string0 = StringUtils.leftPad("junit-pioneer", 22, "junit-pioneer");
      assertEquals("junit-piojunit-pioneer", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("4-'Tde", stringArray0, stringArray0);
      assertEquals("4-'Tde", string0);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      String string0 = StringUtils.rightPad("@k>S", (-2513), "@k>S");
      assertEquals("@k>S", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      StringUtils.replaceChars("-cFdh6fL5}E", "", "");
      StringUtils.isNotEmpty("");
      StringUtils.replaceEach("-cFdh6fL5}E", (String[]) null, (String[]) null);
      StringUtils.substringBetween("-cFdh6fL5}E", "lpid$^5hwnD|KsX?");
      StringUtils.abbreviate("lpid$^5hwnD|KsX?", "", 0);
      StringUtils.replaceChars(". The following paths could not be deleted (see suppressed exceptions for details): ", "-cFdh6fL5}E", (String) null);
      StringUtils.getDigits((String) null);
      StringUtils.lastIndexOf((CharSequence) "lpid$^5hwnD|KsX?", (CharSequence) ". Te ollowing pats oul not be elete (see suppresse exeptions or etails): ");
      StringUtils.lowerCase(". The following paths could not be deleted (see suppressed exceptions for details): ");
      Locale locale0 = Locale.KOREA;
      locale0.clone();
      locale0.hasExtensions();
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      Locale locale0 = Locale.JAPAN;
      String string0 = StringUtils.upperCase("NrBaN", locale0);
      assertNotNull(string0);
      assertEquals("NRBAN", string0);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "The Character must not be null", (CharSequence) "The Character must not be null");
      assertEquals(0, int0);
      
      String string0 = StringUtils.truncate("The Character must not be null", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      String string0 = StringUtils.replaceChars("i", "i", "i");
      assertEquals("i", string0);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      String string0 = StringUtils.rotate(" ", Integer.MIN_VALUE);
      assertEquals(" ", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'o';
      charArray0[3] = 'Y';
      charArray0[4] = 'o';
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", charArray0);
      assertFalse(boolean0);
      
      StringUtils.stripToNull(" ");
      String string1 = StringUtils.wrapIfMissing(" ", 'Y');
      assertEquals("Y Y", string1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      StringUtils.center(" ", (-126), "gD:~fy0");
      StringUtils.containsOnly((CharSequence) null, " ");
      String string2 = StringUtils.rotate("WaVbEgL<m[", Integer.MIN_VALUE);
      assertEquals("m[WaVbEgL<", string2);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      StringUtils.rotate("Extension context \"", 32);
      StringUtils.isNotBlank("Extension context \"");
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      StringUtils.capitalize("Extension context \"");
      StringUtils.truncate("Arguments cannot both be null", 32, 32);
      StringUtils.replaceChars("ion context \"Extens", "Extension context \"", "ion context \"Extens");
      StringUtils.getDigits("=Rp4X;g.YT],z");
      StringUtils.lowerCase("Extension context \"");
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.GERMAN;
      locale1.clone();
      boolean boolean0 = locale1.hasExtensions();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedList1);
      locale0.getDisplayScript();
      StringUtils.upperCase("Raa\"X<d.D#=k", locale1);
      String string0 = "\\u";
      StringUtils.center(string0, 100, "tCP4P$9wtC");
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "ntcxttcn onxsion co");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      StringUtils.replaceChars("-cFdh6fL5}E", "", "");
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceEach("-cFdh6fL5}E", (String[]) null, (String[]) null);
      assertEquals("-cFdh6fL5}E", string0);
      
      String string1 = StringUtils.capitalize("lpid$^5hwnD|KsX?");
      assertEquals("Lpid$^5hwnD|KsX?", string1);
      
      String string2 = StringUtils.truncate("lpid$^5hwnD|KsX?", 0, 0);
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceChars(". The following paths could not be deleted (see suppressed exceptions for details): ", "-cFdh6fL5}E", "Lpid$^5hwnD|KsX?");
      assertEquals(". T$e 5ollowing pat$s pould not be deleted (see suppressed expeptions 5or details): ", string3);
      
      String string4 = StringUtils.getDigits((String) null);
      assertNull(string4);
      
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) ". T$e 5ollowing pat$s pould not be deleted (see suppressed expeptions 5or details): ");
      String string5 = StringUtils.lowerCase(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals(". the following paths could not be deleted (see suppressed exceptions for details): ", string5);
      
      Locale locale0 = Locale.KOREA;
      locale0.clone();
      locale0.hasExtensions();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) arrayDeque0);
      locale0.getDisplayScript();
      String string6 = StringUtils.upperCase("Raa\"X<d.D#=k", locale0);
      assertEquals("RAA\"X<D.D#=K", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.center("oJI}.)", 1053, (String) null);
      boolean boolean1 = StringUtils.containsOnly((CharSequence) string7, "fbg@6k");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = StringUtils.join((Object[]) stringArray0, "org.junitpioneer.jupiter.params.ShortRange");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      StringUtils.replacePattern("", "", "");
      String string0 = StringUtils.stripEnd("", "");
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.normalizeSpace("");
      String string2 = StringUtils.replaceFirst("org.junitpioneer.jupiter.params.FloatRange", "", "");
      assertEquals("org.junitpioneer.jupiter.params.FloatRange", string2);
      
      String string3 = StringUtils.rightPad("", 76);
      assertEquals("                                                                            ", string3);
      
      int int1 = StringUtils.ordinalIndexOf("", "", 0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 76;
      String string4 = StringUtils.join(floatArray0, 'b');
      assertEquals("76.0", string4);
      
      String string5 = StringUtils.wrapIfMissing("", '=');
      assertTrue(string5.equals((Object)string0));
      
      String string6 = StringUtils.rightPad("", (-2229));
      assertTrue(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      StringUtils.lowerCase("The Character must not be null");
      StringUtils.mid((String) null, (-2218), (-2218));
      StringUtils.replaceFirst("org.junitpioneer.jupiter.params.FloatRange", "org.junitpioneer.jupiter.params.FloatRange", "p{InCombiningDiacriticalMarks}+");
      StringUtils.rightPad(" 3dt", (-52));
      StringUtils.center(":tTQQB. 3}HU<.", 86);
      StringUtils.ordinalIndexOf("p{InCombiningDiacriticalMarks}+", "&SB;", 32);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 86;
      StringUtils.join(floatArray0, 't');
      StringUtils.wrapIfMissing((String) null, ')');
      String string0 = StringUtils.rightPad((String) null, (-2064));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      String string0 = StringUtils.center(", Length: ", 26, '`');
      assertEquals("````````, Length: ````````", string0);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      StringUtils.toRootUpperCase("");
      StringUtils.getJaroWinklerDistance("", "");
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      StringUtils.trimToEmpty("");
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1115);
      shortArray0[1] = (short) (-2342);
      String string0 = StringUtils.reverseDelimited("", 'n');
      assertNotNull(string0);
      assertEquals("", string0);
      
      StringUtils.firstNonEmpty((CharSequence[]) null);
      StringUtils.isAlpha("F>\"c-dg)OWY\"y!");
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.trimToNull("c8%Z");
      assertNotNull(string0);
      
      StringUtils.defaultIfBlank((CharSequence) "c8%Z", (CharSequence) "c8%Z");
      String string1 = StringUtils.center("c8%Z", 65);
      String string2 = StringUtils.replaceOnceIgnoreCase("                              c8%Z                               ", (String) null, " is not in the range '0' - '9'");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      StringUtils.join((Object[]) stringArray0);
      String string3 = StringUtils.stripEnd("c8%Z", " is not in the range '0' - '9'");
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.join((Object[]) stringArray0, "c8%Z");
      assertEquals("c8%Zc8%Zc8%Z", string4);
      
      StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      StringUtils.getJaroWinklerDistance("", "c8%Z");
      String string5 = StringUtils.deleteWhitespace("");
      assertEquals("", string5);
      
      StringUtils.startsWith("c8%Z", "c8%Z");
      Locale locale0 = Locale.ENGLISH;
      locale0.getDisplayCountry();
      Locale locale1 = Locale.CHINESE;
      locale1.getUnicodeLocaleKeys();
      StringUtils.getFuzzyDistance("", "", locale1);
      StringUtils.join((float[]) null, 's');
      String string6 = StringUtils.abbreviate("-E6K9", 54, 65);
      assertEquals("-E6K9", string6);
      
      StringUtils.contains((CharSequence) "c8%Z", (-1551));
      StringUtils.isEmpty(" is not in the range '0' - '9'");
      String string7 = StringUtils.chop("SlYZB^>`#");
      assertEquals("SlYZB^>`", string7);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      String string0 = StringUtils.strip("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("E,6NBwKT=", "E,6NBwKT=", (String) null);
      assertNotNull(string1);
      assertEquals("E,6NBwKT=", string1);
      
      float[] floatArray0 = new float[0];
      StringUtils.join(floatArray0, 'c');
      String string2 = StringUtils.substringBeforeLast("=2J0$@Bm", "E,6NBwKT=");
      assertEquals("=2J0$@Bm", string2);
      
      StringUtils.isAsciiPrintable((CharSequence) null);
      String string3 = StringUtils.strip((String) null, "=2J0$@Bm");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("=2J0$@Bm", "E,6NBwKT=");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Threshold must not be negative", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = StringUtils.join(stringArray0);
      assertEquals("aaabaeafakamanarasavayazbabebgbhbibmbnbobrbscacechcocrcscucvcydadedvdzeeeleneoeseteufafffifjfofrfygagdglgngugvhahehihohrhthuhyhziaidieigiiikinioisitiuiwjajijvkakgkikjkkklkmknkokrkskukvkwkylalblglilnloltlulvmgmhmimkmlmnmomrmsmtmynanbndnengnlnnnonrnvnyocojomorospapiplpsptqurmrnrorurwsascsdsesgsiskslsmsnsosqsrssstsusvswtatetgthtitktltntotrtstttwtyugukuruzvevivowawoxhyiyozazhzu", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("aaabaeafakamanarasavayazbabebgbhbibmbnbobrbscacechcocrcscucvcydadedvdzeeeleneoeseteufafffifjfofrfygagdglgngugvhahehihohrhthuhyhziaidieigiiikinioisitiuiwjajijvkakgkikjkkklkmknkokrkskukvkwkylalblglilnloltlulvmgmhmimkmlmnmomrmsmtmynanbndnengnlnnnonrnvnyocojomorospapiplpsptqurmrnrorurwsascsdsesgsiskslsmsnsosqsrssstsusvswtatetgthtitktltntotrtstttwtyugukuruzvevivowawoxhyiyozazhzu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 65, "");
      assertEquals("                                                                 ", string0);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      StringUtils.stripToNull("");
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      String string0 = StringUtils.replacePattern("F", "F", "F");
      assertEquals("F", string0);
      
      String string1 = StringUtils.stripEnd("F", "F");
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "F", (CharSequence) "F");
      assertEquals(0, int0);
      
      StringUtils.rightPad("", (int) 'b');
      String string2 = StringUtils.replaceFirst("org.junitpioneer.jupiter.params.FloatRange", "F", "F");
      assertEquals("org.junitpioneer.jupiter.params.FloatRange", string2);
      
      String string3 = StringUtils.rightPad("", 76);
      assertEquals("                                                                            ", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.ordinalIndexOf("F", "F", 0);
      assertFalse(int1 == int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 76;
      String string4 = StringUtils.join(floatArray0, 'b');
      String string5 = StringUtils.wrapIfMissing("                                                                                                  ", '=');
      assertEquals("=                                                                                                  =", string5);
      
      String string6 = StringUtils.rotate("76.0", 76);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("S&", "S&", "S&");
      assertEquals("S&", string0);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.join((Object[]) stringArray0, "lgj<D@^ROE.+");
      assertNotNull(string0);
      assertEquals("lgj<D@^ROE.+lgj<D@^ROE.+", string0);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      String string0 = StringUtils.repeat('R', 5);
      assertEquals("RRRRR", string0);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("`JpIsMxtCK@zRW&8", "`JpIsMxtCK@zRW&8");
      assertEquals("`JpIsMxtCK@zRW&8", string0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("\n", "\n", "\n");
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      String string0 = StringUtils.center(",", (-734));
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      String string0 = StringUtils.trimToNull("1eMoR)@*Za {");
      assertNotNull(string0);
      assertEquals("1eMoR)@*Za {", string0);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = "c8%Z";
      StringUtils.trimToNull("c8%Z");
      charSequenceArray0[0] = (CharSequence) "c8%Z";
      StringUtils.defaultIfBlank(charSequenceArray0[0], (CharSequence) "c8%Z");
      charSequenceArray0[1] = (CharSequence) "c8%Z";
      StringUtils.center("c8%Z", 65);
      charSequenceArray0[2] = (CharSequence) "                              c8%Z                               ";
      String string1 = null;
      StringUtils.replaceOnceIgnoreCase((String) null, "c8%Z", "c8%Z");
      charSequenceArray0[3] = (CharSequence) null;
      StringUtils.join((Object[]) charSequenceArray0);
      charSequenceArray0[4] = (CharSequence) "c8%Zc8%Z                              c8%Z                               ";
      String string2 = "Locale must not be null";
      StringUtils.stripEnd("", "Locale must not be null");
      charSequenceArray0[5] = (CharSequence) "";
      StringUtils.join((Object[]) charSequenceArray0, "c8%Zc8%Z                              c8%Z                               ");
      charSequenceArray0[6] = (CharSequence) "c8%Zc8%Zc8%Z                              c8%Z                               c8%Zc8%Zc8%Z                              c8%Z                                                             c8%Z                               c8%Zc8%Z                              c8%Z                               c8%Zc8%Z                              c8%Z                               c8%Zc8%Z                              c8%Z                               c8%Zc8%Z                              c8%Z                               c8%Zc8%Z                              c8%Z                               ";
      StringUtils.firstNonEmpty(charSequenceArray0);
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("c8%Z", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 10, "");
      assertEquals("          ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      String string0 = StringUtils.substring("F-q{Es7'r0v", (-2252));
      assertEquals("F-q{Es7'r0v", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("VP_D Z)Pqz3[", (-2252));
      assertNotNull(string1);
      assertEquals("VP_D Z)Pqz3[", string1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2252);
      intArray0[1] = (-2252);
      intArray0[2] = (-2252);
      intArray0[3] = (-2252);
      StringUtils.join(intArray0, '!', (-2252), (-2252));
      String[] stringArray0 = StringUtils.split("!@ ~prC845;.", "F-q{Es7'r0v", 400);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      int int0 = StringUtils.lastIndexOfAny("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", stringArray0);
      assertEquals(65, int0);
      assertEquals(66, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("13Abl]E");
      assertEquals("13Abl]E", string0);
      
      boolean boolean0 = StringUtils.endsWith("13Abl]E", "13Abl]E");
      assertTrue(boolean0);
      
      StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      String string1 = StringUtils.SPACE;
      String[] stringArray0 = StringUtils.split(" 28?{'\"7%");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("MTj1YR&_Z lRf", 'o');
      assertEquals(1, stringArray1.length);
      
      String string2 = StringUtils.chomp("Locale must not be null", "13Abl]E");
      assertEquals("Locale must not be null", string2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)101;
      doubleArray0[1] = (double) 'o';
      doubleArray0[2] = 1.0;
      String string3 = StringUtils.join(doubleArray0, 'a');
      assertEquals("101.0a111.0a1.0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring(" 28?{'\"7%", Integer.MAX_VALUE, (int) (short)65);
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 602.73793;
      doubleArray0[1] = (-1254.35505);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 544.00652185;
      doubleArray0[4] = (-1697.2333);
      doubleArray0[5] = 204.757528;
      doubleArray0[6] = (-1010.686);
      String string0 = StringUtils.join(doubleArray0, 'z');
      assertEquals("602.73793z-1254.35505z0.0z544.00652185z-1697.2333z204.757528z-1010.686", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "602.73793z-1254.35505z0.0z544.00652185z-1697.2333z204.757528z-1010.686";
      charSequenceArray0[1] = (CharSequence) "602.73793z-1254.35505z0.0z544.00652185z-1697.2333z204.757528z-1010.686";
      charSequenceArray0[2] = (CharSequence) "602.73793z-1254.35505z0.0z544.00652185z-1697.2333z204.757528z-1010.686";
      charSequenceArray0[3] = (CharSequence) "602.73793z-1254.35505z0.0z544.00652185z-1697.2333z204.757528z-1010.686";
      charSequenceArray0[4] = (CharSequence) "602.73793z-1254.35505z0.0z544.00652185z-1697.2333z204.757528z-1010.686";
      charSequenceArray0[5] = (CharSequence) "602.73793z-1254.35505z0.0z544.00652185z-1697.2333z204.757528z-1010.686";
      charSequenceArray0[6] = (CharSequence) "602.73793z-1254.35505z0.0z544.00652185z-1697.2333z204.757528z-1010.686";
      charSequenceArray0[7] = (CharSequence) "602.73793z-1254.35505z0.0z544.00652185z-1697.2333z204.757528z-1010.686";
      boolean boolean0 = StringUtils.endsWithAny("602.73793z-1254.35505z0.0z544.00652185z-1697.2333z204.757528z-1010.686", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      String string0 = StringUtils.substringBefore("JqQ#c", "JqQ#c");
      StringUtils.getJaroWinklerDistance("JqQ#c", "");
      String string1 = StringUtils.chomp("JqQ#c", "");
      assertEquals("JqQ#c", string1);
      
      StringUtils.isEmpty("JqQ#c");
      String string2 = StringUtils.replaceOnceIgnoreCase("", "I^ZyV<\"EAKcw6e)", "JqQ#c");
      assertTrue(string2.equals((Object)string0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2001);
      String string3 = StringUtils.join(intArray0, 'f');
      assertEquals("-2001", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("");
      assertNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.replacePattern("Locale must not be null", "Illegal range. There's no way to get from %s to %s with a step of %s.", "U'8B>dDaww8fY7i");
      assertEquals("Locale must not be null", string5);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      String string0 = StringUtils.removeEnd("y", "\r");
      double double0 = StringUtils.getJaroWinklerDistance("\r", "\r");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.chomp("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", (String) null);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("y", "I^ZyV<\"EAKcw6e)", "...");
      assertTrue(string2.equals((Object)string0));
      
      StringUtils.join((int[]) null, 'L');
      StringUtils.trimToNull("y");
      StringUtils.indexOfAny((CharSequence) "y", "cIs7R2XzE)s");
      String string3 = StringUtils.replacePattern("a@H $7`<J`4}IdB8", "org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertEquals("a@H $7`<J`4}IdB8", string3);
      
      StringUtils.indexOfAny((CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.org.junitpioneer.jupiter.params.Range", (CharSequence[]) null);
      StringUtils.isNumeric((CharSequence) null);
      String string4 = StringUtils.replace("p6x{J06,", "b", "\r");
      assertEquals("p6x{J06,", string4);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'd');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      short[] shortArray0 = new short[0];
      StringUtils.join(shortArray0, 'I');
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.isAllLowerCase("");
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      String string0 = null;
      StringUtils.toRootUpperCase((String) null);
      StringUtils.stripEnd((String) null, (String) null);
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      StringUtils.unwrap("@~.hGC{", 'B');
      StringUtils.indexOfAnyBut((CharSequence) "@~.hGC{", (CharSequence) "@~.hGC{");
      Locale locale0 = Locale.JAPAN;
      locale0.hasExtensions();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "@~.hGC{";
      StringUtils.joinWith("RepeatFailedTestExtension", objectArray0);
      String string0 = StringUtils.join((double[]) null, 'B');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      short[] shortArray0 = new short[4];
      String string1 = StringUtils.join(shortArray0, 'I');
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'I';
      doubleArray0[1] = (double) 18;
      doubleArray0[2] = (double) 18;
      doubleArray0[3] = 3.0;
      doubleArray0[4] = (double) 'I';
      doubleArray0[5] = (double) '%';
      doubleArray0[6] = (double) 'I';
      doubleArray0[7] = (double) 18;
      String string3 = StringUtils.join(doubleArray0, '6', 18, 18);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "");
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.center("0I0I0I0", (-1173), (String) null);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("j_D8-Qo2pE23vCXc+n", 'n');
      assertEquals("j_D8-Qo2pE23vCXc+", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      String string1 = StringUtils.replace("", "Failed to delete temp directory ", "]2:KN");
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.truncate("Illegal range. Equal from and to will produce an empty range.", 0, 2292);
      assertEquals("Illegal range. Equal from and to will produce an empty range.", string2);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("g61VR:^");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      String string0 = StringUtils.removeEnd(" ", " ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      String string0 = StringUtils.chomp("CSDR", "CSDR");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "defaolttimenzone", "defaolttimenzone");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      short[] shortArray0 = new short[4];
      String string0 = StringUtils.join(shortArray0, 'I');
      assertNotNull(string0);
      assertEquals("0I0I0I0", string0);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("\nl]pp{", "\nl]pp{");
      String string1 = StringUtils.substringAfter("", "");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      String string0 = StringUtils.remove("x.P-<4cG97K\")&alL^", 'v');
      assertEquals("x.P-<4cG97K\")&alL^", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("x.P-<4cG97K\")&alL^", 'v');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      StringUtils.containsNone((CharSequence) "", "");
      StringUtils.trimToEmpty((String) null);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1115);
      shortArray0[1] = (short) (-2342);
      String string1 = StringUtils.reverseDelimited("", 'n');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringUtils.firstNonEmpty((CharSequence[]) null);
      boolean boolean0 = StringUtils.isAlpha("F>\"c-dg)OWY\"y!");
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      StringUtils.toRootUpperCase("");
      StringUtils.getJaroWinklerDistance("", "");
      StringUtils.containsNone((CharSequence) "", "");
      StringUtils.trimToEmpty("");
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1115);
      shortArray0[1] = (short) (-2342);
      shortArray0[2] = (short) (-1306);
      StringUtils.join(shortArray0, '&', 2909, (-2229));
      StringUtils.split("org.junitpioneer.jupiter.params.ShortRange");
      StringUtils.splitPreserveAllTokens("", '&');
      StringUtils.chomp("\"|o9{=", "\"|o9{=");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1115);
      StringUtils.join(doubleArray0, '&');
      StringUtils.substringAfter("", "org.junitpioneer.jupiter.params.ShortRange");
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "\"|o9{=");
      // Undeclared exception!
      try { 
        StringUtils.truncate("org.junitpioneer.jupiter.params.ShortRange", (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      String string0 = StringUtils.join(doubleArray0, 'q');
      assertEquals("0.0q0.0q0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate("Lzq&AOzN", (-1464), (-1464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      String string0 = StringUtils.substring("junit-pioneer", (-97));
      assertNotNull(string0);
      assertEquals("junit-pioneer", string0);
      
      Locale locale0 = Locale.JAPANESE;
      int int0 = StringUtils.getFuzzyDistance("junit-pioneer", "junit-pioneer", locale0);
      assertEquals(37, int0);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      StringUtils.compare("'268`", "T%jF9");
      StringUtils.left(",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3@FDjAR/`cLC'JV2j", 8);
      StringUtils.contains((CharSequence) "T%jF9", (CharSequence) ",L'tUCr<8]^bg>3,L'tUCr<8]^bg>3@FDjAR/`cLC'JV2j");
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = '';
      String string0 = StringUtils.join(charArray0, '', 8, (-896));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("[!WTY", "[!WTY");
      boolean boolean0 = StringUtils.containsAny((CharSequence) "[!WTY", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      StringUtils.isEmpty("13Abl]E");
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '.';
      longArray0[1] = (long) 'L';
      longArray0[2] = (long) '\'';
      longArray0[3] = (long) '.';
      longArray0[4] = (long) '\'';
      String string0 = StringUtils.join(longArray0, '4');
      assertEquals("46476439446439", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("13Abl]E", "<\"", (int) '\'');
      String string1 = StringUtils.joinWith("13Abl]E", stringArray0);
      assertEquals("13Abl]E", string1);
      
      String string2 = StringUtils.truncate("46476439446439", 8, 8);
      assertEquals("446439", string2);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      StringUtils.indexOfAnyBut((CharSequence) "\"", (CharSequence) "\"");
      // Undeclared exception!
      try { 
        StringUtils.truncate("\"", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(1756, 1175.2393F);
      Object object0 = new Object();
      hashSet0.add(object0);
      Object object1 = new Object();
      hashSet0.add(object1);
      hashSet0.add(object0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category.values();
      Locale.Category.values();
      hashSet0.add(locale_Category0);
      String string0 = StringUtils.join((Iterable<?>) hashSet0, '^');
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      Object object2 = new Object();
      hashSet0.add(object2);
      charArray0[0] = '^';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "FORMAT^java.lang.Object@547e627^java.lang.Object@2e7852ad", charArray0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("mW", "FORMAT^java.lang.Object@547e627^java.lang.Object@2e7852ad");
      assertEquals("mW", string1);
      
      String string2 = StringUtils.removeIgnoreCase("(@$6#", "dj{t5caY");
      assertEquals("(@$6#", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{cF7", 'u');
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substring("UU50", 1756);
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, charSequenceArray0[0]);
      boolean boolean1 = StringUtils.isAllUpperCase(charSequenceArray0[2]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank((String) null, "8dS.8yqT");
      assertEquals("8dS.8yqT", string0);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "}S6F%~0p0$S4h@oZ=0!", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 877, 877);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      String string0 = "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.";
      StringUtils.replaceAll("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "");
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 898);
      StringUtils.lastIndexOf((CharSequence) "", (-2360), 898);
      StringUtils.lastIndexOf((CharSequence) "", 4623, (-1172));
      StringUtils.leftPad("", 0, "");
      String string1 = ", '";
      try { 
        StringUtils.getBytes(", '", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      StringUtils.isAllBlank((CharSequence[]) null);
      String string0 = StringUtils.abbreviate("AV", "AV", Integer.MAX_VALUE);
      assertEquals("AV", string0);
      
      String string1 = StringUtils.replaceChars("AV", "AV", " dT=T");
      assertEquals(" d", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase(" dT=T", " dT=T");
      assertEquals("", string2);
      
      StringUtils.stripAll((String[]) null, "#|hm\"eD");
      StringUtils.containsIgnoreCase("#|hm\"eD", (CharSequence) null);
      String string3 = StringUtils.rotate("H8vqfE]v o", 1083);
      assertEquals("v oH8vqfE]", string3);
      
      StringUtils.containsWhitespace("");
      StringUtils.indexOfDifference((CharSequence) "AV", (CharSequence) "AV");
      String string4 = StringUtils.leftPad("tC{mBKvKq3", (-2597), '5');
      assertEquals("tC{mBKvKq3", string4);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      String string0 = StringUtils.leftPad("YYNKYfEW'.&?6@(-V#AXiFX2c|N.", 13, "YYNKYfEW'.&?6@(-V#AXiFX2c|N.");
      assertEquals("YYNKYfEW'.&?6@(-V#AXiFX2c|N.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      String string0 = StringUtils.rotate("x;;*:I$z", 10);
      assertEquals("$zx;;*:I", string0);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      int int0 = (-2135);
      StringUtils.substring(",L'tUCr<8]^bg>3", (-2135));
      StringUtils.containsIgnoreCase((CharSequence) null, ",L'tUCr<8]^bg>3");
      StringUtils.contains((CharSequence) ",L'tUCr<8]^bg>3", (CharSequence) ",L'tUCr<8]^bg>3");
      String string0 = "";
      StringUtils.leftPad("", (-2135), ",L'tUCr<8]^bg>3");
      // Undeclared exception!
      try { 
        StringUtils.truncate(" but was: ", 1, (-2135));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("+TRA&QG~;*)4xT,@inF{hUDTS#78", (-1275));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      StringUtils.replaceChars("-cFdh6fL5}E", "", "");
      StringUtils.isNotEmpty("");
      StringUtils.replaceEach("-cFdh6fL5}E", (String[]) null, (String[]) null);
      StringUtils.capitalize("lpid$^5hwnD|KsX?");
      StringUtils.abbreviate("lpid$^5hwnD|KsX?", "", 0);
      StringUtils.replaceChars(". The following paths could not be deleted (see suppressed exceptions for details): ", "-cFdh6fL5}E", "Lpid$^5hwnD|KsX?");
      StringUtils.getDigits((String) null);
      StringUtils.lastIndexOf((CharSequence) "lpid$^5hwnD|KsX?", (CharSequence) ". T$e 5ollowing pat$s pould not be deleted (see suppressed expeptions 5or details): ");
      StringUtils.lowerCase(". The following paths could not be deleted (see suppressed exceptions for details): ");
      Locale locale0 = Locale.KOREA;
      locale0.clone();
      locale0.hasExtensions();
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 0, (-2378));
      assertEquals("", string0);
      
      StringUtils.indexOf((CharSequence) "", 0, 0);
      StringUtils.repeat("uG", (-456));
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      Iterator<Locale.Category> iterator0 = linkedHashSet0.iterator();
      StringUtils.join(iterator0, "rUsjA:6<`;");
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "rUsjA:6<`;", 1941);
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertSame(stringArray1, stringArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      String string2 = StringUtils.join(byteArray0, '$');
      assertNotNull(string2);
      assertEquals("-1$0", string2);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      String string0 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      objectArray0[0] = (Object) null;
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.compare("", (String) null, false);
      String string1 = StringUtils.LF;
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      
      String string2 = StringUtils.rotate("oIJs9;FpsV+I:|}VU", 1);
      assertNotNull(string2);
      assertEquals("UoIJs9;FpsV+I:|}V", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "oIJs9;FpsV+I:|}VU", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("*ZS3JV=~<^&.5SxR", "*ZS3JV=~<^&.5SxR");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("gD#_YaVr[>R ", "gD#_YaVr[>R ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 11
         // gD#_YaVr[>R 
         //            ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("8x[6vUc&rao!<B", (-2001), (-2001));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      String string0 = StringUtils.CR;
      int int0 = StringUtils.compare(",.,s", "\r");
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      String string0 = StringUtils.abbreviate("_", 983);
      assertEquals("_", string0);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("aa", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      String string0 = StringUtils.wrap("/p4jO6$l", '9');
      assertEquals("9/p4jO6$l9", string0);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      String string0 = ";42[N)AG\\dL)UH+j@";
      String string1 = "";
      StringUtils.compare(";42[N)AGdL)UH+j@", "", true);
      StringUtils.wrap("maxWith cannot be negative", 'O');
      String string2 = null;
      String string3 = "Strings must not be null";
      StringUtils.replaceFirst((String) null, "Strings must not be null", "OmaxWith cannot be negativeO");
      StringUtils.compareIgnoreCase("", "");
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("maxWith cannot be negative", (-270));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      int[] intArray0 = new int[5];
      String string0 = StringUtils.join(intArray0, 'f');
      assertEquals("0f0f0f0f0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-296);
      intArray0[1] = 0;
      intArray0[2] = 2080;
      intArray0[3] = (-192);
      intArray0[4] = 108;
      intArray0[5] = (-130);
      intArray0[6] = Integer.MAX_VALUE;
      intArray0[7] = (-2068);
      String string0 = StringUtils.join(intArray0, '%');
      assertNotNull(string0);
      assertEquals("-296%0%2080%-192%108%-130%2147483647%-2068", string0);
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      int[] intArray0 = new int[1];
      String string0 = StringUtils.join(intArray0, 'f');
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      StringUtils.stripToEmpty("13Abl]E");
      StringUtils.endsWith("13Abl]E", "13Abl]E");
      StringUtils.indexOf((CharSequence) "13Abl]E", (-1582));
      StringUtils.toRootLowerCase("13Abl]E");
      StringUtils.stripToNull("13abl]e");
      StringUtils.wrap("13abl]e", "28,NtLJz/)w [?=B;");
      StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", (String) null, "The character ", 55);
      StringUtils stringUtils0 = new StringUtils();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)98;
      // Undeclared exception!
      try { 
        Charset.forName(" ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, '?');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      StringUtils.stripAccents("!:tkIyq,p~k<~lV");
      StringUtils.wrapIfMissing("!:tkIyq,p~k<~lV", "");
      StringUtils.rightPad("[;(^fEO32=8{Fe*.o", (-637), "");
      Locale locale0 = Locale.PRC;
      locale0.getDisplayScript();
      locale0.clone();
      StringUtils.lowerCase("!:tkIyq,p~k<~lV", locale0);
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "[;(^fEO32=8{Fe*.o");
      StringUtils.substringBetween("!:tkIyq,p~k<~lV", "codefx", "!:tkIyq,p~k<~lV");
      StringUtils.upperCase(")Ro+XYW%8-", locale0);
      StringUtils.replaceAll("!:tkIyq,p~k<~lV", "", "!:tkIyq,p~k<~lV");
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      StringUtils.trimToEmpty("");
      int int0 = StringUtils.indexOfAny((CharSequence) "", "DbI+\"){8");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.normalizeSpace("  ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, "<KcUXQ>@");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.unwrap("gO!l", "gO!l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("ll", "ll");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = StringUtils.join(byteArray0, 's');
      assertNotNull(string0);
      assertEquals("0s0s0s0", string0);
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("9%_#c");
      assertEquals("9%_#c", string0);
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      String string0 = StringUtils.stripAccents("!:tkIyq,p~k<~lV");
      assertEquals("!:tkIyq,p~k<~lV", string0);
      
      String string1 = StringUtils.normalizeSpace("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match:", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("!:tkIyq,p~k<~lV", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrap("Search and Replace array lengths don't match: ", "Object varargs must not be null");
      assertEquals("Object varargs must not be nullSearch and Replace array lengths don't match: Object varargs must not be null", string2);
      
      String string3 = StringUtils.toRootLowerCase("\"|o9{=");
      assertEquals("\"|o9{=", string3);
      
      StringUtils.startsWithAny("", (CharSequence[]) null);
      String string4 = StringUtils.deleteWhitespace("8[$###");
      assertEquals("8[$###", string4);
      
      String string5 = StringUtils.replacePattern("$bpTDTV`)W", "!:tkIyq,p~k<~lV", (String) null);
      assertEquals("$bpTDTV`)W", string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "hfov.~}8F7", (CharSequence) "8[$###");
      assertEquals(0, int0);
      
      String string6 = StringUtils.leftPad("\"|o9{=", 256, '[');
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\"|o9{=", string6);
  }

  @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      StringUtils.toCodePoints((CharSequence) null);
      String string0 = StringUtils.normalizeSpace("^7");
      assertEquals("^7", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("^7", "^7");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("", "");
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte)60;
      String string2 = StringUtils.join(byteArray0, 'z', (int) (byte) (-53), (-567));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("aa", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      String string0 = StringUtils.strip("A");
      assertNotNull(string0);
      assertEquals("A", string0);
  }

  @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      String string0 = StringUtils.LF;
      boolean boolean0 = StringUtils.isBlank("\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.junitpioneer.vintage.ExpectedExceptionExtension";
      stringArray0[1] = "blank_blank_blank_2014";
      stringArray0[2] = "[+|o6wL6Vi),f";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      assertNotNull(string0);
  }
}
